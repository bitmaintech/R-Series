!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A1_BIST_FIX	driver-SPI-bitmine-A1.c	/^	A1_BIST_FIX		= 0x03,$/;"	e	enum:A1_command	file:
A1_BIST_START	driver-SPI-bitmine-A1.c	/^	A1_BIST_START		= 0x01,$/;"	e	enum:A1_command	file:
A1_BOARD_SELECTOR_H	A1-board-selector.h	2;"	d
A1_COMMON_H	A1-common.h	2;"	d
A1_READ_REG	driver-SPI-bitmine-A1.c	/^	A1_READ_REG		= 0x0a,$/;"	e	enum:A1_command	file:
A1_READ_REG_RESP	driver-SPI-bitmine-A1.c	/^	A1_READ_REG_RESP	= 0x1a,$/;"	e	enum:A1_command	file:
A1_READ_RESULT	driver-SPI-bitmine-A1.c	/^	A1_READ_RESULT		= 0x08,$/;"	e	enum:A1_command	file:
A1_RESET	driver-SPI-bitmine-A1.c	/^	A1_RESET		= 0x04,$/;"	e	enum:A1_command	file:
A1_WRITE_JOB	driver-SPI-bitmine-A1.c	/^	A1_WRITE_JOB		= 0x07,$/;"	e	enum:A1_command	file:
A1_WRITE_REG	driver-SPI-bitmine-A1.c	/^	A1_WRITE_REG		= 0x09,$/;"	e	enum:A1_command	file:
A1_board	A1-common.h	/^struct A1_board {$/;"	s
A1_board::board_id	A1-common.h	/^	int board_id;$/;"	m	struct:A1_board	access:public
A1_board::chain	A1-common.h	/^	struct A1_chain *chain[MAX_CHAINS_PER_BOARD];$/;"	m	struct:A1_board	typeref:struct:A1_board::A1_chain	access:public
A1_board::num_chains	A1-common.h	/^	int num_chains;$/;"	m	struct:A1_board	access:public
A1_chain	A1-common.h	/^struct A1_chain {$/;"	s
A1_chain::active_wq	A1-common.h	/^	struct work_queue active_wq;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::work_queue	access:public
A1_chain::cgpu	A1-common.h	/^	struct cgpu_info *cgpu;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::cgpu_info	access:public
A1_chain::chain_id	A1-common.h	/^	int chain_id;$/;"	m	struct:A1_chain	access:public
A1_chain::chain_skew	A1-common.h	/^	int chain_skew;$/;"	m	struct:A1_chain	access:public
A1_chain::chips	A1-common.h	/^	struct A1_chip *chips;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::A1_chip	access:public
A1_chain::disabled	A1-common.h	/^	bool disabled;$/;"	m	struct:A1_chain	access:public
A1_chain::last_temp_time	A1-common.h	/^	int last_temp_time;$/;"	m	struct:A1_chain	access:public
A1_chain::lock	A1-common.h	/^	pthread_mutex_t lock;$/;"	m	struct:A1_chain	access:public
A1_chain::num_active_chips	A1-common.h	/^	int num_active_chips;$/;"	m	struct:A1_chain	access:public
A1_chain::num_chips	A1-common.h	/^	int num_chips;$/;"	m	struct:A1_chain	access:public
A1_chain::num_cores	A1-common.h	/^	int num_cores;$/;"	m	struct:A1_chain	access:public
A1_chain::spi_ctx	A1-common.h	/^	struct spi_ctx *spi_ctx;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::spi_ctx	access:public
A1_chain::spi_rx	A1-common.h	/^	uint8_t spi_rx[MAX_CMD_LENGTH];$/;"	m	struct:A1_chain	access:public
A1_chain::spi_tx	A1-common.h	/^	uint8_t spi_tx[MAX_CMD_LENGTH];$/;"	m	struct:A1_chain	access:public
A1_chain::temp	A1-common.h	/^	uint8_t temp;$/;"	m	struct:A1_chain	access:public
A1_chain::trimpot	A1-common.h	/^	struct mcp4x *trimpot;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::mcp4x	access:public
A1_chip	A1-common.h	/^struct A1_chip {$/;"	s
A1_chip::cooldown_begin	A1-common.h	/^	int cooldown_begin;$/;"	m	struct:A1_chip	access:public
A1_chip::disabled	A1-common.h	/^	bool disabled;$/;"	m	struct:A1_chip	access:public
A1_chip::fail_count	A1-common.h	/^	int fail_count;$/;"	m	struct:A1_chip	access:public
A1_chip::hw_errors	A1-common.h	/^	int hw_errors;$/;"	m	struct:A1_chip	access:public
A1_chip::last_queued_id	A1-common.h	/^	int last_queued_id;$/;"	m	struct:A1_chip	access:public
A1_chip::nonce_ranges_done	A1-common.h	/^	int nonce_ranges_done;$/;"	m	struct:A1_chip	access:public
A1_chip::nonces_found	A1-common.h	/^	int nonces_found;$/;"	m	struct:A1_chip	access:public
A1_chip::num_cores	A1-common.h	/^	int num_cores;$/;"	m	struct:A1_chip	access:public
A1_chip::stales	A1-common.h	/^	int stales;$/;"	m	struct:A1_chip	access:public
A1_chip::work	A1-common.h	/^	struct work *work[4];$/;"	m	struct:A1_chip	typeref:struct:A1_chip::work	access:public
A1_command	driver-SPI-bitmine-A1.c	/^enum A1_command {$/;"	g	file:
A1_config_options	A1-common.h	/^struct A1_config_options {$/;"	s
A1_config_options	driver-SPI-bitmine-A1.c	/^struct A1_config_options A1_config_options = {$/;"	v	typeref:struct:A1_config_options
A1_config_options::override_chip_num	A1-common.h	/^	int override_chip_num;$/;"	m	struct:A1_config_options	access:public
A1_config_options::ref_clk_khz	A1-common.h	/^	int ref_clk_khz;$/;"	m	struct:A1_config_options	access:public
A1_config_options::spi_clk_khz	A1-common.h	/^	int spi_clk_khz;$/;"	m	struct:A1_config_options	access:public
A1_config_options::sys_clk_khz	A1-common.h	/^	int sys_clk_khz;$/;"	m	struct:A1_config_options	access:public
A1_config_options::wiper	A1-common.h	/^	int wiper;$/;"	m	struct:A1_config_options	access:public
A1_detect	driver-SPI-bitmine-A1.c	/^void A1_detect(bool hotplug)$/;"	f	signature:(bool hotplug)
A1_flush_work	driver-SPI-bitmine-A1.c	/^static void A1_flush_work(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
A1_get_statline_before	driver-SPI-bitmine-A1.c	/^static void A1_get_statline_before(char *buf, size_t len,$/;"	f	file:	signature:(char *buf, size_t len, struct cgpu_info *cgpu)
A1_queue_full	driver-SPI-bitmine-A1.c	/^static bool A1_queue_full(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
A1_scanwork	driver-SPI-bitmine-A1.c	/^static int64_t A1_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
ADAPTER_STATE	driver-spondoolies-sp10.h	/^} ADAPTER_STATE;$/;"	t	typeref:enum:adapter_state
ADAPTER_STATE	driver-spondoolies-sp30.h	/^} ADAPTER_STATE;$/;"	t	typeref:enum:adapter_state
ADAPTER_STATE_INIT	driver-spondoolies-sp10.h	/^	ADAPTER_STATE_INIT,$/;"	e	enum:adapter_state
ADAPTER_STATE_INIT	driver-spondoolies-sp30.h	/^	ADAPTER_STATE_INIT,$/;"	e	enum:adapter_state
ADAPTER_STATE_OPERATIONAL	driver-spondoolies-sp10.h	/^	ADAPTER_STATE_OPERATIONAL,$/;"	e	enum:adapter_state
ADAPTER_STATE_OPERATIONAL	driver-spondoolies-sp30.h	/^	ADAPTER_STATE_OPERATIONAL,$/;"	e	enum:adapter_state
ALIVE	api.c	/^static const char *ALIVE = "Alive";$/;"	v	file:
ALLCOLON	driver-bflsc.c	/^	ALLCOLON \/\/ Temperature uses this$/;"	e	enum:breakmode	file:
ALLIP	api.c	4599;"	d	file:
ALLOC_HIST_ITEMS	driver-minion.c	585;"	d	file:
ALLOC_NITEMS	driver-bab.c	303;"	d	file:
ALLOC_PERF_ITEMS	driver-minion.c	686;"	d	file:
ALLOC_RES_ITEMS	driver-minion.c	577;"	d	file:
ALLOC_RITEMS	driver-bab.c	291;"	d	file:
ALLOC_SBITEMS	api.c	670;"	d	file:
ALLOC_SITEMS	driver-bab.c	276;"	d	file:
ALLOC_TASK_ITEMS	driver-minion.c	553;"	d	file:
ALLOC_WITEMS	driver-bab.c	263;"	d	file:
ALLOC_WORK_ITEMS	driver-minion.c	529;"	d	file:
ALLOC_XFF_ITEMS	driver-minion.c	694;"	d	file:
ALLOW_PARTIAL_READS	compat/libusb-1.0/libusb/os/windows_usb.h	555;"	d
ANTMINERUSB_HASH_MHZ	driver-icarus.c	121;"	d	file:
ANTMINERUSB_HASH_TIME	driver-icarus.c	122;"	d	file:
ANTROUTER_CMR2_CHECK	driver-antrouter.c	270;"	d	file:
ANTROUTER_CMR2_CMD_FLASH	driver-antrouter.c	267;"	d	file:
ANTROUTER_CMR2_CMD_SPEED	driver-antrouter.c	266;"	d	file:
ANTROUTER_CMR2_DATA_FLASH_OFF	driver-antrouter.c	268;"	d	file:
ANTROUTER_CMR2_DATA_FLASH_ON	driver-antrouter.c	269;"	d	file:
ANTROUTER_CMR2_PREFIX	driver-antrouter.c	265;"	d	file:
ANTROUTER_CMR2_SPEED_DEC	driver-antrouter.c	262;"	d	file:
ANTROUTER_CMR2_SPEED_DEF	driver-antrouter.c	259;"	d	file:
ANTROUTER_CMR2_SPEED_DEF_INT	driver-antrouter.c	255;"	d	file:
ANTROUTER_CMR2_SPEED_FACTOR	driver-antrouter.c	253;"	d	file:
ANTROUTER_CMR2_SPEED_FAIL	driver-antrouter.c	263;"	d	file:
ANTROUTER_CMR2_SPEED_INC	driver-antrouter.c	261;"	d	file:
ANTROUTER_CMR2_SPEED_MAX	driver-antrouter.c	260;"	d	file:
ANTROUTER_CMR2_SPEED_MAX_INT	driver-antrouter.c	256;"	d	file:
ANTROUTER_CMR2_SPEED_MIN	driver-antrouter.c	258;"	d	file:
ANTROUTER_CMR2_SPEED_MIN_INT	driver-antrouter.c	254;"	d	file:
ANTROUTER_CMR2_TIMEOUT	driver-antrouter.c	79;"	d	file:
ANTROUTER_HISTORY	driver-antrouter.c	/^struct ANTROUTER_HISTORY {$/;"	s	file:
ANTROUTER_HISTORY::finish	driver-antrouter.c	/^	struct timeval finish;$/;"	m	struct:ANTROUTER_HISTORY	typeref:struct:ANTROUTER_HISTORY::timeval	file:	access:public
ANTROUTER_HISTORY::hash_count_max	driver-antrouter.c	/^	uint32_t hash_count_max;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
ANTROUTER_HISTORY::hash_count_min	driver-antrouter.c	/^	uint32_t hash_count_min;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
ANTROUTER_HISTORY::sumTi	driver-antrouter.c	/^	double sumTi;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
ANTROUTER_HISTORY::sumXi	driver-antrouter.c	/^	double sumXi;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
ANTROUTER_HISTORY::sumXi2	driver-antrouter.c	/^	double sumXi2;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
ANTROUTER_HISTORY::sumXiTi	driver-antrouter.c	/^	double sumXiTi;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
ANTROUTER_HISTORY::values	driver-antrouter.c	/^	uint32_t values;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
ANTROUTER_INFO	driver-antrouter.c	/^struct ANTROUTER_INFO {$/;"	s	file:
ANTROUTER_INFO::Hs	driver-antrouter.c	/^	double Hs;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::W	driver-antrouter.c	/^	double W;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::baud	driver-antrouter.c	/^	int baud;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::cmr2_speed	driver-antrouter.c	/^	uint8_t cmr2_speed;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::count	driver-antrouter.c	/^	int count;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::do_antrouter_timing	driver-antrouter.c	/^	bool do_antrouter_timing;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::flash_next_work	driver-antrouter.c	/^	bool flash_next_work;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::fpga_count	driver-antrouter.c	/^	int fpga_count;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::frequency	driver-antrouter.c	/^	int frequency;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::frequency_t	driver-antrouter.c	/^	char frequency_t[64];$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::fullnonce	driver-antrouter.c	/^	double fullnonce;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::golden_hashes	driver-antrouter.c	/^	uint64_t golden_hashes;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::golden_tv	driver-antrouter.c	/^	struct timeval golden_tv;$/;"	m	struct:ANTROUTER_INFO	typeref:struct:ANTROUTER_INFO::timeval	file:	access:public
ANTROUTER_INFO::hash_count_range	driver-antrouter.c	/^	uint64_t hash_count_range;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::history	driver-antrouter.c	/^	struct ANTROUTER_HISTORY history[INFO_HISTORY+1];$/;"	m	struct:ANTROUTER_INFO	typeref:struct:ANTROUTER_INFO::ANTROUTER_HISTORY	file:	access:public
ANTROUTER_INFO::history_count	driver-antrouter.c	/^	uint64_t history_count;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::history_time	driver-antrouter.c	/^	struct timeval history_time;$/;"	m	struct:ANTROUTER_INFO	typeref:struct:ANTROUTER_INFO::timeval	file:	access:public
ANTROUTER_INFO::ident	driver-antrouter.c	/^	enum sub_ident ident;$/;"	m	struct:ANTROUTER_INFO	typeref:enum:ANTROUTER_INFO::sub_ident	file:	access:public
ANTROUTER_INFO::intinfo	driver-antrouter.c	/^	int intinfo;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::min_data_count	driver-antrouter.c	/^	uint32_t min_data_count;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::nonce_bin	driver-antrouter.c	/^	unsigned char nonce_bin[ANTROUTER_NONCE_ARRAY_SIZE][ANTROUTER_READ_SIZE+1];$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::nonce_index	driver-antrouter.c	/^	int nonce_index;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::nonce_mask	driver-antrouter.c	/^	uint32_t nonce_mask;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::read_time	driver-antrouter.c	/^	int read_time;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::read_time_limit	driver-antrouter.c	/^	int read_time_limit;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::speed_next_work	driver-antrouter.c	/^	bool speed_next_work;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::start	driver-antrouter.c	/^	bool start;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::timeout	driver-antrouter.c	/^	int timeout;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::timing_mode	driver-antrouter.c	/^	enum timing_mode timing_mode;$/;"	m	struct:ANTROUTER_INFO	typeref:enum:ANTROUTER_INFO::timing_mode	file:	access:public
ANTROUTER_INFO::values	driver-antrouter.c	/^	uint32_t values;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::work_division	driver-antrouter.c	/^	int work_division;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_INFO::work_queue	driver-antrouter.c	/^	struct work * work_queue[ANTROUTER_WORK_QUEUE_NUM];$/;"	m	struct:ANTROUTER_INFO	typeref:struct:ANTROUTER_INFO::work	file:	access:public
ANTROUTER_INFO::work_queue_index	driver-antrouter.c	/^	int work_queue_index;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
ANTROUTER_IO_SPEED	driver-antrouter.c	57;"	d	file:
ANTROUTER_MIDSTATE_SIZE	driver-antrouter.c	247;"	d	file:
ANTROUTER_NONCE_ARRAY_SIZE	driver-antrouter.c	59;"	d	file:
ANTROUTER_POOL	driver-antrouter.h	9;"	d
ANTROUTER_READ_BUF_LEN	driver-antrouter.c	80;"	d	file:
ANTROUTER_READ_COUNT_MIN	driver-antrouter.c	97;"	d	file:
ANTROUTER_READ_COUNT_TIMING	driver-antrouter.c	96;"	d	file:
ANTROUTER_READ_FAULT_DECISECONDS	driver-antrouter.c	488;"	d	file:
ANTROUTER_READ_REDUCE	driver-antrouter.c	101;"	d	file:
ANTROUTER_READ_SIZE	driver-antrouter.c	62;"	d	file:
ANTROUTER_READ_TIME	driver-antrouter.c	75;"	d	file:
ANTROUTER_READ_TIME_LIMIT_MAX	driver-antrouter.c	92;"	d	file:
ANTROUTER_REV3_HASH_TIME	driver-antrouter.c	109;"	d	file:
ANTROUTER_UNUSED_SIZE	driver-antrouter.c	248;"	d	file:
ANTROUTER_WAIT_TIMEOUT	driver-antrouter.c	78;"	d	file:
ANTROUTER_WORK	driver-antrouter.c	/^struct ANTROUTER_WORK {$/;"	s	file:
ANTROUTER_WORK::check	driver-antrouter.c	/^	uint8_t check;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
ANTROUTER_WORK::cmd	driver-antrouter.c	/^	uint8_t cmd;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
ANTROUTER_WORK::data	driver-antrouter.c	/^	uint8_t data;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
ANTROUTER_WORK::midstate	driver-antrouter.c	/^	uint8_t midstate[ANTROUTER_MIDSTATE_SIZE];$/;"	m	struct:ANTROUTER_WORK	file:	access:public
ANTROUTER_WORK::prefix	driver-antrouter.c	/^	uint8_t prefix;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
ANTROUTER_WORK::unused	driver-antrouter.c	/^	uint8_t unused[ANTROUTER_UNUSED_SIZE];$/;"	m	struct:ANTROUTER_WORK	file:	access:public
ANTROUTER_WORK::work	driver-antrouter.c	/^	uint8_t work[ANTROUTER_WORK_SIZE];$/;"	m	struct:ANTROUTER_WORK	file:	access:public
ANTROUTER_WORK::workid	driver-antrouter.c	/^	uint8_t workid;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
ANTROUTER_WORK_DATA_OFFSET	driver-antrouter.c	251;"	d	file:
ANTROUTER_WORK_QUEUE_NUM	driver-antrouter.c	168;"	d	file:
ANTROUTER_WORK_SIZE	driver-antrouter.c	249;"	d	file:
ANTU3_HASH_MHZ	driver-icarus.c	123;"	d	file:
ANTU3_HASH_TIME	driver-icarus.c	124;"	d	file:
ANTU3_READ_COUNT_TIMING	driver-icarus.c	99;"	d	file:
ANTUSB_READ_COUNT_TIMING	driver-icarus.c	97;"	d	file:
ANT_GETS_ERROR	driver-antrouter.h	33;"	d
ANT_GETS_OK	driver-antrouter.h	34;"	d
ANT_GETS_RESTART	driver-antrouter.h	35;"	d
ANT_GETS_TIMEOUT	driver-antrouter.h	36;"	d
ANT_QUEUE_NUM	driver-icarus.c	222;"	d	file:
ANT_READ_SIZE	driver-icarus.c	58;"	d	file:
ANT_U1_DEFFREQ	driver-icarus.c	382;"	d	file:
ANT_U3_DEFFREQ	driver-icarus.c	383;"	d	file:
ANT_U3_MAXFREQ	driver-icarus.c	384;"	d	file:
ANT_UNUSED_SIZE	driver-icarus.c	368;"	d	file:
ANT_WAIT_TIMEOUT	driver-icarus.c	77;"	d	file:
API	API.java	/^	public API(String command, String _ip, String _port) throws Exception$/;"	m	class:API	access:public	signature:(String command, String _ip, String _port)
API	API.java	/^class API$/;"	c
API.API	API.java	/^	public API(String command, String _ip, String _port) throws Exception$/;"	m	class:API	access:public	signature:(String command, String _ip, String _port)
API.MAXRECEIVESIZE	API.java	/^	static private final int MAXRECEIVESIZE = 65535;$/;"	f	class:API	file:	access:private
API.closeAll	API.java	/^	private void closeAll() throws Exception$/;"	m	class:API	file:	access:private	signature:()
API.display	API.java	/^	public void display(String result) throws Exception$/;"	m	class:API	access:public	signature:(String result)
API.main	API.java	/^	public static void main(String[] params) throws Exception$/;"	m	class:API	access:public	signature:(String[] params)
API.process	API.java	/^	public void process(String cmd, InetAddress ip, int port) throws Exception$/;"	m	class:API	access:public	signature:(String cmd, InetAddress ip, int port)
API.socket	API.java	/^	static private Socket socket = null;$/;"	f	class:API	file:	access:private
APIGROUPS	api.c	/^struct APIGROUPS {$/;"	s	file:
APIGROUPS::commands	api.c	/^	char *commands;$/;"	m	struct:APIGROUPS	file:	access:public
APIVERSION	api.c	/^static const char *APIVERSION = "3.1";$/;"	v	file:
API_AVG	miner.h	/^	API_AVG$/;"	e	enum:api_data_type
API_BOOL	miner.h	/^	API_BOOL,$/;"	e	enum:api_data_type
API_CONST	miner.h	/^	API_CONST,$/;"	e	enum:api_data_type
API_DIFF	miner.h	/^	API_DIFF,$/;"	e	enum:api_data_type
API_DOUBLE	miner.h	/^	API_DOUBLE,$/;"	e	enum:api_data_type
API_ELAPSED	miner.h	/^	API_ELAPSED,$/;"	e	enum:api_data_type
API_ESCAPE	miner.h	/^	API_ESCAPE,$/;"	e	enum:api_data_type
API_EXPORTED	compat/libusb-1.0/libusb/libusbi.h	44;"	d
API_FREQ	miner.h	/^	API_FREQ,$/;"	e	enum:api_data_type
API_HEX32	miner.h	/^	API_HEX32,$/;"	e	enum:api_data_type
API_HS	miner.h	/^	API_HS,$/;"	e	enum:api_data_type
API_INT	miner.h	/^	API_INT,$/;"	e	enum:api_data_type
API_INT16	miner.h	/^	API_INT16,$/;"	e	enum:api_data_type
API_INT64	miner.h	/^	API_INT64,$/;"	e	enum:api_data_type
API_LISTEN_ADDR	miner.h	994;"	d
API_MCAST_ADDR	miner.h	996;"	d
API_MCAST_CODE	miner.h	995;"	d
API_MHS	miner.h	/^	API_MHS,$/;"	e	enum:api_data_type
API_MHTOTAL	miner.h	/^	API_MHTOTAL,$/;"	e	enum:api_data_type
API_PERCENT	miner.h	/^	API_PERCENT,$/;"	e	enum:api_data_type
API_STRING	miner.h	/^	API_STRING,$/;"	e	enum:api_data_type
API_TEMP	miner.h	/^	API_TEMP,$/;"	e	enum:api_data_type
API_TIME	miner.h	/^	API_TIME,$/;"	e	enum:api_data_type
API_TIMEVAL	miner.h	/^	API_TIMEVAL,$/;"	e	enum:api_data_type
API_UINT	miner.h	/^	API_UINT,$/;"	e	enum:api_data_type
API_UINT16	miner.h	/^	API_UINT16,$/;"	e	enum:api_data_type
API_UINT32	miner.h	/^	API_UINT32,$/;"	e	enum:api_data_type
API_UINT64	miner.h	/^	API_UINT64,$/;"	e	enum:api_data_type
API_UINT8	miner.h	/^	API_UINT8,$/;"	e	enum:api_data_type
API_UTILITY	miner.h	/^	API_UTILITY,$/;"	e	enum:api_data_type
API_VOLTS	miner.h	/^	API_VOLTS,$/;"	e	enum:api_data_type
ARRAY_SIZE	miner.h	227;"	d
ASICMINERUSB_HASH_TIME	driver-antrouter.c	111;"	d	file:
ASICMINERUSB_HASH_TIME	driver-bmsc.c	99;"	d	file:
ASICMINERUSB_HASH_TIME	driver-icarus.c	115;"	d	file:
ASIC_PARSE_COMMANDS	miner.h	250;"	d
ASSERT1	driver-antrouter.c	68;"	d	file:
ASSERT1	driver-avalon.h	190;"	d
ASSERT1	driver-avalon2.c	41;"	d	file:
ASSERT1	driver-bitmain.h	303;"	d
ASSERT1	driver-bmsc.c	60;"	d	file:
ASSERT1	driver-icarus.c	66;"	d	file:
AU3_WAIT_TIMEOUT	driver-icarus.c	78;"	d	file:
AUTO_CLEAR_STALL	compat/libusb-1.0/libusb/os/windows_usb.h	552;"	d
AUTO_FLUSH	compat/libusb-1.0/libusb/os/windows_usb.h	556;"	d
AUTO_SUSPEND	compat/libusb-1.0/libusb/os/windows_usb.h	559;"	d
AVA2_AVA3_FREQUENCY	driver-avalon2.h	48;"	d
AVA2_AVA3_MINERS	driver-avalon2.h	46;"	d
AVA2_AVA3_VOLTAGE	driver-avalon2.h	47;"	d
AVA2_DEFAULT_FAN_MAX	driver-avalon2.h	29;"	d
AVA2_DEFAULT_FAN_MIN	driver-avalon2.h	28;"	d
AVA2_DEFAULT_FAN_PWM	driver-avalon2.h	27;"	d
AVA2_DEFAULT_FREQUENCY	driver-avalon2.h	43;"	d
AVA2_DEFAULT_FREQUENCY_MAX	driver-avalon2.h	38;"	d
AVA2_DEFAULT_FREQUENCY_MIN	driver-avalon2.h	37;"	d
AVA2_DEFAULT_MINERS	driver-avalon2.h	41;"	d
AVA2_DEFAULT_MODULARS	driver-avalon2.h	24;"	d
AVA2_DEFAULT_VOLTAGE	driver-avalon2.h	42;"	d
AVA2_DEFAULT_VOLTAGE_MAX	driver-avalon2.h	35;"	d
AVA2_DEFAULT_VOLTAGE_MIN	driver-avalon2.h	34;"	d
AVA2_FW2_PREFIXSTR	driver-avalon2.h	81;"	d
AVA2_FW3_PREFIXSTR	driver-avalon2.h	82;"	d
AVA2_GETS_ERROR	driver-avalon2.h	147;"	d
AVA2_GETS_OK	driver-avalon2.h	144;"	d
AVA2_GETS_RESTART	driver-avalon2.h	146;"	d
AVA2_GETS_TIMEOUT	driver-avalon2.h	145;"	d
AVA2_H1	driver-avalon2.h	51;"	d
AVA2_H2	driver-avalon2.h	52;"	d
AVA2_ID_AVA2	driver-avalon2.h	86;"	d
AVA2_ID_AVA3	driver-avalon2.h	87;"	d
AVA2_ID_AVAX	driver-avalon2.h	88;"	d
AVA2_IO_SPEED	driver-avalon2.h	22;"	d
AVA2_MINER_THREADS	driver-avalon2.h	19;"	d
AVA2_MM_VERNULL	driver-avalon2.h	84;"	d
AVA2_PWM_MAX	driver-avalon2.h	26;"	d
AVA2_P_ACK	driver-avalon2.h	72;"	d
AVA2_P_ACKDETECT	driver-avalon2.h	76;"	d
AVA2_P_COINBASE	driver-avalon2.h	63;"	d
AVA2_P_COINBASE_SIZE	driver-avalon2.h	54;"	d
AVA2_P_COUNT	driver-avalon2.h	57;"	d
AVA2_P_DATA_LEN	driver-avalon2.h	58;"	d
AVA2_P_DETECT	driver-avalon2.h	60;"	d
AVA2_P_HEADER	driver-avalon2.h	65;"	d
AVA2_P_JOB_ID	driver-avalon2.h	62;"	d
AVA2_P_MERKLES	driver-avalon2.h	64;"	d
AVA2_P_MERKLES_COUNT	driver-avalon2.h	55;"	d
AVA2_P_NAK	driver-avalon2.h	73;"	d
AVA2_P_NONCE	driver-avalon2.h	74;"	d
AVA2_P_POLLING	driver-avalon2.h	66;"	d
AVA2_P_REQUIRE	driver-avalon2.h	68;"	d
AVA2_P_SET	driver-avalon2.h	69;"	d
AVA2_P_STATIC	driver-avalon2.h	61;"	d
AVA2_P_STATUS	driver-avalon2.h	75;"	d
AVA2_P_TARGET	driver-avalon2.h	67;"	d
AVA2_P_TEST	driver-avalon2.h	70;"	d
AVA2_P_TEST_RET	driver-avalon2.h	77;"	d
AVA2_READ_SIZE	driver-avalon2.h	142;"	d
AVA2_RESET_FAULT_DECISECONDS	driver-avalon2.h	21;"	d
AVA2_SEND_ERROR	driver-avalon2.h	150;"	d
AVA2_SEND_OK	driver-avalon2.h	149;"	d
AVA2_WRITE_SIZE	driver-avalon2.h	141;"	d
AVAILABLE	lib/memmem.c	33;"	d	file:
AVAILABLE	lib/str-two-way.h	449;"	d
AVALON2_DEFAULT_POLLING_DELAY	driver-avalon2.h	32;"	d
AVALON2_TEMP_OVERHEAT	driver-avalon2.h	31;"	d
AVALON_A3255	driver-avalon.h	27;"	d
AVALON_A3256	driver-avalon.h	26;"	d
AVALON_ARRAY_SIZE	driver-avalon.h	178;"	d
AVALON_AUTO_CYCLE	driver-avalon.h	68;"	d
AVALON_CTS	driver-avalon.c	293;"	d	file:
AVALON_DEFAULT_ASIC_NUM	driver-avalon.h	60;"	d
AVALON_DEFAULT_FAN_MAX	driver-avalon.h	32;"	d
AVALON_DEFAULT_FAN_MAX_PWM	driver-avalon.h	33;"	d
AVALON_DEFAULT_FAN_MIN	driver-avalon.h	31;"	d
AVALON_DEFAULT_FAN_MIN_PWM	driver-avalon.h	34;"	d
AVALON_DEFAULT_FREQUENCY	driver-avalon.h	57;"	d
AVALON_DEFAULT_MINER_NUM	driver-avalon.h	58;"	d
AVALON_DEFAULT_TIMEOUT	driver-avalon.h	53;"	d
AVALON_FAN_FACTOR	driver-avalon.h	29;"	d
AVALON_FTDI_READSIZE	driver-avalon.h	70;"	d
AVALON_H	driver-avalon.h	12;"	d
AVALON_HASH_TIME_FACTOR	driver-avalon.h	22;"	d
AVALON_IO_SPEED	driver-avalon.h	21;"	d
AVALON_LATENCY	driver-avalon.h	73;"	d
AVALON_MAX_FREQUENCY	driver-avalon.h	55;"	d
AVALON_MAX_MINER_NUM	driver-avalon.h	59;"	d
AVALON_MINER_THREADS	driver-avalon.h	19;"	d
AVALON_MIN_FREQUENCY	driver-avalon.h	54;"	d
AVALON_PWM_MAX	driver-avalon.h	30;"	d
AVALON_READBUF_SIZE	driver-avalon.h	71;"	d
AVALON_READ_SIZE	driver-avalon.h	177;"	d
AVALON_READ_TIME	driver-avalon.h	189;"	d
AVALON_RESET_FAULT_DECISECONDS	driver-avalon.h	18;"	d
AVALON_RESET_PITCH	driver-avalon.h	23;"	d
AVALON_TEMP_HYSTERESIS	driver-avalon.h	37;"	d
AVALON_TEMP_OVERHEAT	driver-avalon.h	38;"	d
AVALON_TEMP_TARGET	driver-avalon.h	36;"	d
AVALON_TIMEOUT_FACTOR	driver-avalon.h	56;"	d
AVALON_TIMEOUT_MS	usbutils.c	68;"	d	file:
AVALON_TIMEOUT_MS	usbutils.c	84;"	d	file:
AVALON_WRITE_SIZE	driver-avalon.h	176;"	d
AVA_GETS_ERROR	driver-avalon.h	181;"	d
AVA_GETS_OK	driver-avalon.h	182;"	d
AVA_SEND_ERROR	driver-avalon.h	184;"	d
AVA_SEND_OK	driver-avalon.h	185;"	d
A_GET	driver-blockerupter.h	68;"	d
A_NO	driver-blockerupter.h	63;"	d
A_WAL	driver-blockerupter.h	61;"	d
A_YES	driver-blockerupter.h	65;"	d
ActualLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ActualLength;$/;"	m	struct:USB_NODE_CONNECTION_NAME	access:public
ActualLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ActualLength;$/;"	m	struct:USB_ROOT_HUB_NAME	access:public
ActualLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG ActualLength;$/;"	m	struct:USB_NODE_CONNECTION_NAME_FIXED	access:public
ActualLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG ActualLength;$/;"	m	struct:USB_ROOT_HUB_NAME_FIXED	access:public
AutoTuneRequest	driver-drillbit.c	/^} AutoTuneRequest;$/;"	t	typeref:struct:__anon4	file:
BAB_ABSMINSPEED	driver-bab.c	149;"	d	file:
BAB_ADDR	driver-bab.c	48;"	d	file:
BAB_ADD_ASYNC	driver-bab.c	91;"	d	file:
BAB_ADD_BREAK	driver-bab.c	90;"	d	file:
BAB_ADD_MAX	driver-bab.c	98;"	d	file:
BAB_ADD_MIN	driver-bab.c	97;"	d	file:
BAB_ADD_NOOPs	driver-bab.c	95;"	d	file:
BAB_ASYNC	driver-bab.c	80;"	d	file:
BAB_AUTO_BIT	driver-bab.c	203;"	d	file:
BAB_AUTO_REG	driver-bab.c	167;"	d	file:
BAB_AUTO_SET	driver-bab.c	195;"	d	file:
BAB_AUTO_VAL	driver-bab.c	168;"	d	file:
BAB_BAD_COUNT	driver-bab.c	544;"	d	file:
BAB_BAD_DEAD	driver-bab.c	553;"	d	file:
BAB_BAD_TO_MIN	driver-bab.c	538;"	d	file:
BAB_BANKBOARDS	driver-bab.c	69;"	d	file:
BAB_BANKCHIPS	driver-bab.c	71;"	d	file:
BAB_BASEA	driver-bab.c	100;"	d	file:
BAB_BASEB	driver-bab.c	101;"	d	file:
BAB_BOARDCHIPS	driver-bab.c	63;"	d	file:
BAB_BREAK	driver-bab.c	79;"	d	file:
BAB_CFGD_SET	driver-bab.c	201;"	d	file:
BAB_CFGD_VAL	driver-bab.c	185;"	d	file:
BAB_CHIP_MIN	driver-bab.c	261;"	d	file:
BAB_CHIP_SPEEDS	driver-bab.c	321;"	d	file:
BAB_CORES	driver-bab.c	74;"	d	file:
BAB_COUNTERS	driver-bab.c	102;"	d	file:
BAB_COUNT_ADDR	driver-bab.c	210;"	d	file:
BAB_DEFCONF	driver-bab.c	187;"	d	file:
BAB_DEFMAXSPEED	driver-bab.c	146;"	d	file:
BAB_DEFSPEED	driver-bab.c	147;"	d	file:
BAB_DELAY_BANDS	driver-bab.c	317;"	d	file:
BAB_DELAY_BASE	driver-bab.c	318;"	d	file:
BAB_DELAY_STEP	driver-bab.c	319;"	d	file:
BAB_DELAY_USECS	driver-bab.c	45;"	d	file:
BAB_DIV2_BIT	driver-bab.c	206;"	d	file:
BAB_DIV2_REG	driver-bab.c	176;"	d	file:
BAB_DIV2_SET	driver-bab.c	198;"	d	file:
BAB_DIV2_VAL	driver-bab.c	177;"	d	file:
BAB_EVIL_MASK	driver-bab.c	242;"	d	file:
BAB_EVIL_NONCE	driver-bab.c	241;"	d	file:
BAB_EXPECTED_WORK_DELAY_mS	driver-bab.c	532;"	d	file:
BAB_FAST_BIT	driver-bab.c	205;"	d	file:
BAB_FAST_REG	driver-bab.c	173;"	d	file:
BAB_FAST_SET	driver-bab.c	197;"	d	file:
BAB_FAST_VAL	driver-bab.c	174;"	d	file:
BAB_FFL	driver-bab.c	83;"	d	file:
BAB_FFL_HERE	driver-bab.c	84;"	d	file:
BAB_FFL_PASS	driver-bab.c	85;"	d	file:
BAB_GPIO_CLR	driver-bab.c	56;"	d	file:
BAB_GPIO_LEVEL	driver-bab.c	57;"	d	file:
BAB_GPIO_SET	driver-bab.c	55;"	d	file:
BAB_ICLK_BIT	driver-bab.c	204;"	d	file:
BAB_ICLK_REG	driver-bab.c	170;"	d	file:
BAB_ICLK_SET	driver-bab.c	196;"	d	file:
BAB_ICLK_VAL	driver-bab.c	171;"	d	file:
BAB_INP_ADDR	driver-bab.c	214;"	d	file:
BAB_INP_GPIO	driver-bab.c	50;"	d	file:
BAB_LONG_WAIT_mS	driver-bab.c	505;"	d	file:
BAB_LONG_uS	driver-bab.c	499;"	d	file:
BAB_MAXBANKS	driver-bab.c	67;"	d	file:
BAB_MAXBUF	driver-bab.c	64;"	d	file:
BAB_MAXCHIPS	driver-bab.c	73;"	d	file:
BAB_MAXSPEED	driver-bab.c	145;"	d	file:
BAB_MAX_ROLLTIME	driver-bab.c	560;"	d	file:
BAB_MINSPEED	driver-bab.c	148;"	d	file:
BAB_NONCE_OFFSETS	driver-bab.c	235;"	d	file:
BAB_NOOP	driver-bab.c	78;"	d	file:
BAB_OCLK_BIT	driver-bab.c	208;"	d	file:
BAB_OCLK_REG	driver-bab.c	182;"	d	file:
BAB_OCLK_SET	driver-bab.c	200;"	d	file:
BAB_OCLK_VAL	driver-bab.c	183;"	d	file:
BAB_OFF_0x1C_FIN	driver-bab.c	237;"	d	file:
BAB_OFF_0x1C_STA	driver-bab.c	236;"	d	file:
BAB_OFF_OTHER_FIN	driver-bab.c	239;"	d	file:
BAB_OFF_OTHER_STA	driver-bab.c	238;"	d	file:
BAB_OSC	driver-bab.c	228;"	d	file:
BAB_OSC_ADDR	driver-bab.c	215;"	d	file:
BAB_OUT_GPIO	driver-bab.c	51;"	d	file:
BAB_OUT_GPIO_V	driver-bab.c	52;"	d	file:
BAB_REG_ADDR	driver-bab.c	216;"	d	file:
BAB_REG_CLR_FROM	driver-bab.c	192;"	d	file:
BAB_REG_CLR_TO	driver-bab.c	193;"	d	file:
BAB_REPLY_NONCES	driver-bab.c	254;"	d	file:
BAB_REPLY_WAIT_mS	driver-bab.c	520;"	d	file:
BAB_RESULT_DELAY_mS	driver-bab.c	2074;"	d	file:
BAB_SLOW_BIT	driver-bab.c	207;"	d	file:
BAB_SLOW_REG	driver-bab.c	179;"	d	file:
BAB_SLOW_SET	driver-bab.c	199;"	d	file:
BAB_SLOW_VAL	driver-bab.c	180;"	d	file:
BAB_SPI_BUFSIZ	driver-bab.c	43;"	d	file:
BAB_SPI_BUS	driver-bab.c	39;"	d	file:
BAB_SPI_CHIP	driver-bab.c	40;"	d	file:
BAB_SPI_SPEED	driver-bab.c	42;"	d	file:
BAB_STD_DELAY_mS	driver-bab.c	2369;"	d	file:
BAB_STD_WAIT_mS	driver-bab.c	511;"	d	file:
BAB_STD_WORK_DELAY_uS	driver-bab.c	2124;"	d	file:
BAB_SYNC	driver-bab.c	81;"	d	file:
BAB_TEST_DATA	driver-bab.c	128;"	d	file:
BAB_TRF_DELAY	driver-bab.c	46;"	d	file:
BAB_TUNEDOWN	driver-bab.c	156;"	d	file:
BAB_TUNEUP	driver-bab.c	155;"	d	file:
BAB_V1_BANK	driver-bab.c	65;"	d	file:
BAB_V1_CHIP_TEST	driver-bab.c	60;"	d	file:
BAB_W1	driver-bab.c	114;"	d	file:
BAB_W1A_ADDR	driver-bab.c	211;"	d	file:
BAB_W1B_ADDR	driver-bab.c	212;"	d	file:
BAB_W2	driver-bab.c	122;"	d	file:
BAB_W2_ADDR	driver-bab.c	213;"	d	file:
BAB_WORK_EXPIRE_mS	driver-bab.c	529;"	d	file:
BAB_X_COORD	driver-bab.c	75;"	d	file:
BAB_Y_COORD	driver-bab.c	76;"	d	file:
BAJ_LATENCY	driver-bflsc.h	356;"	d
BAJ_SCAN_TIME	driver-bflsc.h	351;"	d
BAJ_WORK_TIME	driver-bflsc.h	341;"	d
BAL_LATENCY	driver-bflsc.h	357;"	d
BAL_SCAN_TIME	driver-bflsc.h	350;"	d
BAL_WORK_TIME	driver-bflsc.h	339;"	d
BAM_LATENCY	driver-bflsc.h	360;"	d
BAM_SCAN_TIME	driver-bflsc.h	347;"	d
BAM_WORK_TIME	driver-bflsc.h	336;"	d
BAS_LATENCY	driver-bflsc.h	358;"	d
BAS_SCAN_TIME	driver-bflsc.h	349;"	d
BAS_WORK_TIME	driver-bflsc.h	337;"	d
BAUD_RATE_PWRUP_0	hf_protocol.h	124;"	d
BAUD_RATE_PWRUP_1	hf_protocol.h	125;"	d
BAUD_RATE_PWRUP_2	hf_protocol.h	126;"	d
BAUD_RATE_PWRUP_3	hf_protocol.h	127;"	d
BAUD_RATE_PWRUP_4	hf_protocol.h	128;"	d
BAUD_RATE_PWRUP_5	hf_protocol.h	129;"	d
BAUD_RATE_PWRUP_6	hf_protocol.h	130;"	d
BAUD_RATE_PWRUP_7	hf_protocol.h	131;"	d
BCM2835_BASE	driver-minion.c	60;"	d	file:
BCM2835_GPIO_BASE	driver-minion.c	61;"	d	file:
BCM2835_GPIO_CLR0	driver-minion.c	64;"	d	file:
BCM2835_GPIO_FSEL0	driver-minion.c	66;"	d	file:
BCM2835_GPIO_FSEL_INPUT	driver-minion.c	68;"	d	file:
BCM2835_GPIO_FSEL_MASK	driver-minion.c	70;"	d	file:
BCM2835_GPIO_FSEL_OUTPUT	driver-minion.c	69;"	d	file:
BCM2835_GPIO_SET0	driver-minion.c	63;"	d	file:
BCM2835_PIN_HIGH	driver-minion.c	72;"	d	file:
BCM2835_PIN_LOW	driver-minion.c	73;"	d	file:
BENCHWORK_COUNT	cgminer.c	/^	BENCHWORK_COUNT$/;"	e	enum:benchwork	file:
BENCHWORK_DIFFBITS	cgminer.c	/^	BENCHWORK_DIFFBITS,$/;"	e	enum:benchwork	file:
BENCHWORK_MERKLEROOT	cgminer.c	/^	BENCHWORK_MERKLEROOT,$/;"	e	enum:benchwork	file:
BENCHWORK_NONCETIME	cgminer.c	/^	BENCHWORK_NONCETIME,$/;"	e	enum:benchwork	file:
BENCHWORK_PREVHASH	cgminer.c	/^	BENCHWORK_PREVHASH,$/;"	e	enum:benchwork	file:
BENCHWORK_VERSION	cgminer.c	/^	BENCHWORK_VERSION = 0,$/;"	e	enum:benchwork	file:
BETWEEN_JOIN	api.c	139;"	d	file:
BET_BAUD	driver-blockerupter.h	24;"	d
BET_CLOCK_DEFAULT	driver-blockerupter.h	27;"	d
BET_CLOCK_MAX	driver-blockerupter.h	26;"	d
BET_DIFF_DEFAULT	driver-blockerupter.h	28;"	d
BET_MAXASICS	driver-blockerupter.h	23;"	d
BET_MAXBOARDS	driver-blockerupter.h	22;"	d
BET_NONCE_FIX	driver-blockerupter.h	33;"	d
BET_RESP_SZ	driver-blockerupter.h	128;"	d
BET_ROLLING_DEFAULT	driver-blockerupter.h	29;"	d
BET_WORK_FIFO	driver-blockerupter.h	32;"	d
BF1INFOSIZE	driver-bitfury.c	28;"	d	file:
BF1MSGSIZE	driver-bitfury.c	27;"	d	file:
BF1WAIT	driver-bitfury.c	26;"	d	file:
BFLSC28_DI_ASICS	driver-bflsc.h	63;"	d
BFLSC_ANERR	driver-bflsc.h	280;"	d
BFLSC_ANERR_LEN	driver-bflsc.h	281;"	d
BFLSC_APPLOGSIZ	driver-bflsc.h	50;"	d
BFLSC_BFLSC	driver-bflsc.h	269;"	d
BFLSC_BFLSC28	driver-bflsc.h	270;"	d
BFLSC_BUFSIZ	driver-bflsc.h	47;"	d
BFLSC_BUSY	driver-bflsc.h	324;"	d
BFLSC_BUSY_LEN	driver-bflsc.h	325;"	d
BFLSC_DETAILS	driver-bflsc.h	230;"	d
BFLSC_DETAILS_LEN	driver-bflsc.h	231;"	d
BFLSC_DI_CHAINPRESENCE	driver-bflsc.h	60;"	d
BFLSC_DI_CHIPS	driver-bflsc.h	61;"	d
BFLSC_DI_CHIPS_PARALLEL	driver-bflsc.h	62;"	d
BFLSC_DI_DEVICESINCHAIN	driver-bflsc.h	59;"	d
BFLSC_DI_ENGINES	driver-bflsc.h	55;"	d
BFLSC_DI_FIRMWARE	driver-bflsc.h	54;"	d
BFLSC_DI_JOBSINQUE	driver-bflsc.h	56;"	d
BFLSC_DI_XLINKMODE	driver-bflsc.h	57;"	d
BFLSC_DI_XLINKPRESENT	driver-bflsc.h	58;"	d
BFLSC_DRV1	driver-bflsc.h	/^	BFLSC_DRV1,$/;"	e	enum:driver_version
BFLSC_DRV2	driver-bflsc.h	/^	BFLSC_DRV2$/;"	e	enum:driver_version
BFLSC_DRVUNDEF	driver-bflsc.h	/^	BFLSC_DRVUNDEF = 0,$/;"	e	enum:driver_version
BFLSC_EMPTYSTR	driver-bflsc.h	302;"	d
BFLSC_EMPTYSTR_LEN	driver-bflsc.h	303;"	d
BFLSC_EOB	driver-bflsc.h	182;"	d
BFLSC_EOW	driver-bflsc.h	208;"	d
BFLSC_ERRSIG	driver-bflsc.h	289;"	d
BFLSC_ERRSIG_LEN	driver-bflsc.h	290;"	d
BFLSC_FAN0	driver-bflsc.h	246;"	d
BFLSC_FAN0_LEN	driver-bflsc.h	247;"	d
BFLSC_FAN1	driver-bflsc.h	248;"	d
BFLSC_FAN1_LEN	driver-bflsc.h	249;"	d
BFLSC_FAN2	driver-bflsc.h	250;"	d
BFLSC_FAN2_LEN	driver-bflsc.h	251;"	d
BFLSC_FAN3	driver-bflsc.h	252;"	d
BFLSC_FAN3_LEN	driver-bflsc.h	253;"	d
BFLSC_FAN4	driver-bflsc.h	254;"	d
BFLSC_FAN4_LEN	driver-bflsc.h	255;"	d
BFLSC_FANAUTO	driver-bflsc.h	244;"	d
BFLSC_FANOUT_LEN	driver-bflsc.h	245;"	d
BFLSC_FIRMWARE	driver-bflsc.h	232;"	d
BFLSC_FIRMWARE_LEN	driver-bflsc.h	233;"	d
BFLSC_FLASH	driver-bflsc.h	234;"	d
BFLSC_FLASH_LEN	driver-bflsc.h	235;"	d
BFLSC_H	driver-bflsc.h	12;"	d
BFLSC_HITEMP	driver-bflsc.h	300;"	d
BFLSC_HITEMP_LEN	driver-bflsc.h	301;"	d
BFLSC_IDENTIFY	driver-bflsc.h	228;"	d
BFLSC_IDENTIFY_LEN	driver-bflsc.h	229;"	d
BFLSC_IDENTITY	driver-bflsc.h	268;"	d
BFLSC_IDLE	driver-bflsc.h	322;"	d
BFLSC_IDLE_LEN	driver-bflsc.h	323;"	d
BFLSC_INFO_TIMEOUT	driver-bflsc.h	52;"	d
BFLSC_INPROCESS	driver-bflsc.h	293;"	d
BFLSC_INPROCESS_LEN	driver-bflsc.h	294;"	d
BFLSC_INVALID	driver-bflsc.h	287;"	d
BFLSC_INVALID_LEN	driver-bflsc.h	288;"	d
BFLSC_JALAPENO	driver-bflsc.h	330;"	d
BFLSC_JOBSIZ	driver-bflsc.h	307;"	d
BFLSC_LITTLESINGLE	driver-bflsc.h	329;"	d
BFLSC_LOADSTR	driver-bflsc.h	256;"	d
BFLSC_LOADSTR_LEN	driver-bflsc.h	257;"	d
BFLSC_MAXPAYLOAD	driver-bflsc.h	167;"	d
BFLSC_MAX_SLEEP	driver-bflsc.h	354;"	d
BFLSC_MINIRIG	driver-bflsc.h	327;"	d
BFLSC_MONARCH	driver-bflsc.h	331;"	d
BFLSC_NONCE	driver-bflsc.h	318;"	d
BFLSC_NONCE_LEN	driver-bflsc.h	319;"	d
BFLSC_NO_NONCE	driver-bflsc.h	320;"	d
BFLSC_NO_NONCE_LEN	driver-bflsc.h	321;"	d
BFLSC_OK	driver-bflsc.h	272;"	d
BFLSC_OKQ	driver-bflsc.h	291;"	d
BFLSC_OKQN	driver-bflsc.h	296;"	d
BFLSC_OKQN_LEN	driver-bflsc.h	297;"	d
BFLSC_OKQ_LEN	driver-bflsc.h	292;"	d
BFLSC_OK_LEN	driver-bflsc.h	273;"	d
BFLSC_OVER_TEMP	driver-bflsc.c	2105;"	d	file:
BFLSC_QFLUSH	driver-bflsc.h	242;"	d
BFLSC_QFLUSH_LEN	driver-bflsc.h	243;"	d
BFLSC_QFULL	driver-bflsc.h	298;"	d
BFLSC_QFULL_LEN	driver-bflsc.h	299;"	d
BFLSC_QJOB	driver-bflsc.h	260;"	d
BFLSC_QJOBS	driver-bflsc.h	262;"	d
BFLSC_QJOBSIZ	driver-bflsc.h	181;"	d
BFLSC_QJOBS_LEN	driver-bflsc.h	263;"	d
BFLSC_QJOB_LEN	driver-bflsc.h	261;"	d
BFLSC_QRES	driver-bflsc.h	240;"	d
BFLSC_QRES_LEN	driver-bflsc.h	241;"	d
BFLSC_QUE_FULL_ENOUGH_V1	driver-bflsc.h	365;"	d
BFLSC_QUE_FULL_ENOUGH_V2	driver-bflsc.h	372;"	d
BFLSC_QUE_LOW_V1	driver-bflsc.h	367;"	d
BFLSC_QUE_LOW_V2	driver-bflsc.h	374;"	d
BFLSC_QUE_SIZE_V1	driver-bflsc.h	364;"	d
BFLSC_QUE_SIZE_V2	driver-bflsc.h	371;"	d
BFLSC_QUE_WATERMARK_V1	driver-bflsc.h	366;"	d
BFLSC_QUE_WATERMARK_V2	driver-bflsc.h	373;"	d
BFLSC_RESULT	driver-bflsc.h	277;"	d
BFLSC_RESULT_LEN	driver-bflsc.h	278;"	d
BFLSC_RES_TIME	driver-bflsc.h	352;"	d
BFLSC_SAVESTR	driver-bflsc.h	264;"	d
BFLSC_SAVESTR_LEN	driver-bflsc.h	265;"	d
BFLSC_SENDRANGE	driver-bflsc.h	314;"	d
BFLSC_SENDRANGE_LEN	driver-bflsc.h	315;"	d
BFLSC_SENDWORK	driver-bflsc.h	310;"	d
BFLSC_SENDWORK_LEN	driver-bflsc.h	311;"	d
BFLSC_SIGNATURE	driver-bflsc.h	207;"	d
BFLSC_SINGLE	driver-bflsc.h	328;"	d
BFLSC_SUCCESS	driver-bflsc.h	274;"	d
BFLSC_SUCCESS_LEN	driver-bflsc.h	275;"	d
BFLSC_TEMPERATURE	driver-bflsc.h	238;"	d
BFLSC_TEMPERATURE_LEN	driver-bflsc.h	239;"	d
BFLSC_TEMP_OVERHEAT	driver-bflsc.h	376;"	d
BFLSC_TEMP_RECOVER	driver-bflsc.h	380;"	d
BFLSC_TEMP_SLEEPMS	driver-bflsc.h	362;"	d
BFLSC_TEMP_THROTTLE	driver-bflsc.h	378;"	d
BFLSC_TIMEOUT	driver-bflsc.h	282;"	d
BFLSC_TIMEOUT_LEN	driver-bflsc.h	283;"	d
BFLSC_TIMEOUT_MS	usbutils.c	65;"	d	file:
BFLSC_TIMEOUT_MS	usbutils.c	81;"	d	file:
BFLSC_VOLTAGE	driver-bflsc.h	236;"	d
BFLSC_VOLTAGE_LEN	driver-bflsc.h	237;"	d
BFLSC_WORKSTATUS	driver-bflsc.h	312;"	d
BFLSC_WORKSTATUS_LEN	driver-bflsc.h	313;"	d
BFLSC_XLINKHDR	driver-bflsc.h	166;"	d
BFLSC_XTIMEOUT	driver-bflsc.h	285;"	d
BFLSC_XTIMEOUT_LEN	driver-bflsc.h	286;"	d
BFL_FILE_MAGIC	bitforce-firmware-flash.c	18;"	d	file:
BFL_UPLOAD_MAGIC	bitforce-firmware-flash.c	19;"	d	file:
BF_OFFSETS	driver-drillbit.c	650;"	d	file:
BISTREAM_USER_ID	driver-modminer.c	25;"	d	file:
BITBURNER_ARRAY_SIZE	driver-avalon.h	179;"	d
BITBURNER_DEFAULT_CORE_VOLTAGE	driver-avalon.h	41;"	d
BITBURNER_FURY_DEFAULT_CORE_VOLTAGE	driver-avalon.h	47;"	d
BITBURNER_FURY_DEFAULT_FREQUENCY	driver-avalon.h	65;"	d
BITBURNER_FURY_DEFAULT_MINER_NUM	driver-avalon.h	64;"	d
BITBURNER_FURY_DEFAULT_TIMEOUT	driver-avalon.h	66;"	d
BITBURNER_FURY_MAX_COREMV	driver-avalon.h	50;"	d
BITBURNER_FURY_MIN_COREMV	driver-avalon.h	48;"	d
BITBURNER_INDEX_GET_VERSION	usbutils.h	64;"	d
BITBURNER_INDEX_GET_VOLTAGE	usbutils.h	63;"	d
BITBURNER_INDEX_SET_VOLTAGE	usbutils.h	62;"	d
BITBURNER_MAX_COREMV	driver-avalon.h	44;"	d
BITBURNER_MIN_COREMV	driver-avalon.h	42;"	d
BITBURNER_REQUEST	usbutils.h	60;"	d
BITBURNER_VALUE	usbutils.h	61;"	d
BITBURNER_VERSION1	driver-avalon.h	172;"	d
BITBURNER_VERSION2	driver-avalon.h	173;"	d
BITBURNER_VERSION3	driver-avalon.h	174;"	d
BITFORCE_BUFSIZ	driver-bitforce.c	68;"	d	file:
BITFORCE_CHECK_INTERVAL_MS	driver-bitforce.c	59;"	d	file:
BITFORCE_EITHER	driver-bitforce.c	45;"	d	file:
BITFORCE_EITHER_LEN	driver-bitforce.c	46;"	d	file:
BITFORCE_FLASH	driver-bitforce.c	33;"	d	file:
BITFORCE_FLASH_LEN	driver-bitforce.c	34;"	d	file:
BITFORCE_IDENTIFY	driver-bitforce.c	31;"	d	file:
BITFORCE_IDENTIFY_LEN	driver-bitforce.c	32;"	d	file:
BITFORCE_IDLE	driver-bitforce.c	51;"	d	file:
BITFORCE_IDLE_MATCH	driver-bitforce.c	52;"	d	file:
BITFORCE_LONG_TIMEOUT_MS	driver-bitforce.c	58;"	d	file:
BITFORCE_LONG_TIMEOUT_S	driver-bitforce.c	57;"	d	file:
BITFORCE_NONCE	driver-bitforce.c	47;"	d	file:
BITFORCE_NONCE_LEN	driver-bitforce.c	48;"	d	file:
BITFORCE_NO_NONCE	driver-bitforce.c	49;"	d	file:
BITFORCE_NO_NONCE_MATCH	driver-bitforce.c	50;"	d	file:
BITFORCE_SENDRANGE	driver-bitforce.c	37;"	d	file:
BITFORCE_SENDRANGE_LEN	driver-bitforce.c	38;"	d	file:
BITFORCE_SENDWORK	driver-bitforce.c	39;"	d	file:
BITFORCE_SENDWORK_LEN	driver-bitforce.c	40;"	d	file:
BITFORCE_SLEEP_MS	driver-bitforce.c	54;"	d	file:
BITFORCE_TEMPERATURE	driver-bitforce.c	35;"	d	file:
BITFORCE_TEMPERATURE_LEN	driver-bitforce.c	36;"	d	file:
BITFORCE_TIMEOUT_MS	driver-bitforce.c	56;"	d	file:
BITFORCE_TIMEOUT_MS	usbutils.c	66;"	d	file:
BITFORCE_TIMEOUT_MS	usbutils.c	82;"	d	file:
BITFORCE_TIMEOUT_S	driver-bitforce.c	55;"	d	file:
BITFORCE_WORKSTATUS	driver-bitforce.c	41;"	d	file:
BITFORCE_WORKSTATUS_LEN	driver-bitforce.c	42;"	d	file:
BITFURY_H	driver-bitfury.h	11;"	d
BITFURY_H	driver-drillbit.h	11;"	d
BITFURY_REFRESH_DELAY	driver-bitfury.h	38;"	d
BITFURY_TIMEOUT_MS	usbutils.c	59;"	d	file:
BITMAIN_ARRAY_SIZE	driver-bitmain.h	104;"	d
BITMAIN_ARRAY_SIZE	driver-bitmain.h	117;"	d
BITMAIN_ARRAY_SIZE	driver-bitmain.h	78;"	d
BITMAIN_ARRAY_SIZE	driver-bitmain.h	91;"	d
BITMAIN_AUTO_CYCLE	driver-bitmain.h	60;"	d
BITMAIN_CALC_DIFF1	driver-bitmain.c	40;"	d	file:
BITMAIN_DATA_TYPE_RXNONCE	driver-bitmain.h	35;"	d
BITMAIN_DATA_TYPE_RXSTATUS	driver-bitmain.h	34;"	d
BITMAIN_DEFAULT_ASIC_NUM	driver-bitmain.h	57;"	d
BITMAIN_DEFAULT_CHAIN_NUM	driver-bitmain.h	56;"	d
BITMAIN_DEFAULT_FAN_MAX	driver-bitmain.h	40;"	d
BITMAIN_DEFAULT_FAN_MAX_PWM	driver-bitmain.h	41;"	d
BITMAIN_DEFAULT_FAN_MIN	driver-bitmain.h	39;"	d
BITMAIN_DEFAULT_FAN_MIN_PWM	driver-bitmain.h	42;"	d
BITMAIN_DEFAULT_FREQUENCY	driver-bitmain.h	52;"	d
BITMAIN_DEFAULT_REG_DATA	driver-bitmain.h	58;"	d
BITMAIN_DEFAULT_TIMEOUT	driver-bitmain.h	48;"	d
BITMAIN_DEFAULT_VOLTAGE0	driver-bitmain.h	54;"	d
BITMAIN_DEFAULT_VOLTAGE1	driver-bitmain.h	55;"	d
BITMAIN_DEFAULT_VOLTAGE_T	driver-bitmain.h	53;"	d
BITMAIN_FAN_FACTOR	driver-bitmain.h	37;"	d
BITMAIN_FTDI_READSIZE	driver-bitmain.h	62;"	d
BITMAIN_H	driver-bitmain.h	12;"	d
BITMAIN_HASH_TIME_FACTOR	driver-bitmain.h	27;"	d
BITMAIN_IO_SPEED	driver-bitmain.h	26;"	d
BITMAIN_LATENCY	driver-bitmain.h	68;"	d
BITMAIN_MAX_CHAIN_NUM	driver-bitmain.h	101;"	d
BITMAIN_MAX_CHAIN_NUM	driver-bitmain.h	114;"	d
BITMAIN_MAX_CHAIN_NUM	driver-bitmain.h	75;"	d
BITMAIN_MAX_CHAIN_NUM	driver-bitmain.h	88;"	d
BITMAIN_MAX_DEAL_QUEUE_NUM	driver-bitmain.h	112;"	d
BITMAIN_MAX_DEAL_QUEUE_NUM	driver-bitmain.h	73;"	d
BITMAIN_MAX_DEAL_QUEUE_NUM	driver-bitmain.h	86;"	d
BITMAIN_MAX_DEAL_QUEUE_NUM	driver-bitmain.h	99;"	d
BITMAIN_MAX_FAN_NUM	driver-bitmain.h	103;"	d
BITMAIN_MAX_FAN_NUM	driver-bitmain.h	116;"	d
BITMAIN_MAX_FAN_NUM	driver-bitmain.h	77;"	d
BITMAIN_MAX_FAN_NUM	driver-bitmain.h	90;"	d
BITMAIN_MAX_FREQUENCY	driver-antrouter.h	12;"	d
BITMAIN_MAX_FREQUENCY	driver-bitmain.h	50;"	d
BITMAIN_MAX_NONCE_NUM	driver-bitmain.h	100;"	d
BITMAIN_MAX_NONCE_NUM	driver-bitmain.h	113;"	d
BITMAIN_MAX_NONCE_NUM	driver-bitmain.h	74;"	d
BITMAIN_MAX_NONCE_NUM	driver-bitmain.h	87;"	d
BITMAIN_MAX_TEMP_NUM	driver-bitmain.h	102;"	d
BITMAIN_MAX_TEMP_NUM	driver-bitmain.h	115;"	d
BITMAIN_MAX_TEMP_NUM	driver-bitmain.h	76;"	d
BITMAIN_MAX_TEMP_NUM	driver-bitmain.h	89;"	d
BITMAIN_MAX_WORK_NUM	driver-bitmain.h	110;"	d
BITMAIN_MAX_WORK_NUM	driver-bitmain.h	71;"	d
BITMAIN_MAX_WORK_NUM	driver-bitmain.h	84;"	d
BITMAIN_MAX_WORK_NUM	driver-bitmain.h	97;"	d
BITMAIN_MAX_WORK_QUEUE_NUM	driver-bitmain.h	111;"	d
BITMAIN_MAX_WORK_QUEUE_NUM	driver-bitmain.h	72;"	d
BITMAIN_MAX_WORK_QUEUE_NUM	driver-bitmain.h	85;"	d
BITMAIN_MAX_WORK_QUEUE_NUM	driver-bitmain.h	98;"	d
BITMAIN_MINER_THREADS	driver-bitmain.h	24;"	d
BITMAIN_MIN_FREQUENCY	driver-antrouter.h	11;"	d
BITMAIN_MIN_FREQUENCY	driver-bitmain.h	49;"	d
BITMAIN_PWM_MAX	driver-bitmain.h	38;"	d
BITMAIN_READBUF_SIZE	driver-bitmain.h	65;"	d
BITMAIN_READ_SIZE	driver-bitmain.h	294;"	d
BITMAIN_READ_TIME	driver-bitmain.h	302;"	d
BITMAIN_READ_TIMEOUT	driver-bitmain.h	67;"	d
BITMAIN_RESET_FAULT_DECISECONDS	driver-bitmain.h	23;"	d
BITMAIN_RESET_PITCH	driver-bitmain.h	28;"	d
BITMAIN_RESET_TIMEOUT	driver-bitmain.h	66;"	d
BITMAIN_SENDBUF_SIZE	driver-bitmain.h	64;"	d
BITMAIN_SEND_FULL_SPACE	driver-bitmain.h	106;"	d
BITMAIN_SEND_FULL_SPACE	driver-bitmain.h	119;"	d
BITMAIN_SEND_FULL_SPACE	driver-bitmain.h	80;"	d
BITMAIN_SEND_FULL_SPACE	driver-bitmain.h	93;"	d
BITMAIN_SEND_STATUS_TIME	driver-bitmain.h	105;"	d
BITMAIN_SEND_STATUS_TIME	driver-bitmain.h	118;"	d
BITMAIN_SEND_STATUS_TIME	driver-bitmain.h	79;"	d
BITMAIN_SEND_STATUS_TIME	driver-bitmain.h	92;"	d
BITMAIN_TEMP_HYSTERESIS	driver-bitmain.h	45;"	d
BITMAIN_TEMP_OVERHEAT	driver-bitmain.h	46;"	d
BITMAIN_TEMP_TARGET	driver-bitmain.h	44;"	d
BITMAIN_TEST	driver-bitmain.c	43;"	d	file:
BITMAIN_TEST_NUM	driver-bitmain.c	48;"	d	file:
BITMAIN_TEST_PRINT_WORK	driver-bitmain.c	46;"	d	file:
BITMAIN_TEST_USENUM	driver-bitmain.c	49;"	d	file:
BITMAIN_TIMEOUT_FACTOR	driver-bitmain.h	51;"	d
BITMAIN_TIMEOUT_MS	usbutils.c	69;"	d	file:
BITMAIN_TIMEOUT_MS	usbutils.c	85;"	d	file:
BITMAIN_TOKEN_TYPE_RXSTATUS	driver-bitmain.h	32;"	d
BITMAIN_TOKEN_TYPE_TXCONFIG	driver-bitmain.h	30;"	d
BITMAIN_TOKEN_TYPE_TXTASK	driver-bitmain.h	31;"	d
BITMAIN_TYPE_S4	driver-bitmain.h	21;"	d
BITMAIN_USB_PACKETSIZE	driver-bitmain.h	63;"	d
BITMODE_MPSSE	driver-bitfury.h	49;"	d
BITMODE_RESET	driver-bitfury.h	48;"	d
BITSNOTSET	fpgautils.c	159;"	d	file:
BITSSET	fpgautils.c	158;"	d	file:
BITSTREAM_FILENAME	driver-modminer.c	24;"	d	file:
BITSTREAM_MAGIC_0	driver-modminer.c	27;"	d	file:
BITSTREAM_MAGIC_1	driver-modminer.c	28;"	d	file:
BLANK	api.c	/^static const char *BLANK = "";$/;"	v	file:
BLANK	driver-bflsc.h	13;"	d
BLANK	usbutils.c	/^static const char *BLANK = "";$/;"	v	file:
BLOCKERUPTER_TIMEOUT_MS	usbutils.c	74;"	d	file:
BLOCKERUPTER_TIMEOUT_MS	usbutils.c	90;"	d	file:
BLOCK_HEADER_BYTES	driver-bab.c	161;"	d	file:
BMA_RES_TIME	driver-bflsc.h	353;"	d
BMA_SCAN_TIME	driver-bflsc.h	348;"	d
BMA_WORK_TIME	driver-bflsc.h	342;"	d
BMSC_CMR2_CHECK	driver-bmsc.c	255;"	d	file:
BMSC_CMR2_CMD_FLASH	driver-bmsc.c	252;"	d	file:
BMSC_CMR2_CMD_SPEED	driver-bmsc.c	251;"	d	file:
BMSC_CMR2_DATA_FLASH_OFF	driver-bmsc.c	253;"	d	file:
BMSC_CMR2_DATA_FLASH_ON	driver-bmsc.c	254;"	d	file:
BMSC_CMR2_PREFIX	driver-bmsc.c	250;"	d	file:
BMSC_CMR2_SPEED_DEC	driver-bmsc.c	247;"	d	file:
BMSC_CMR2_SPEED_DEF	driver-bmsc.c	244;"	d	file:
BMSC_CMR2_SPEED_DEF_INT	driver-bmsc.c	240;"	d	file:
BMSC_CMR2_SPEED_FACTOR	driver-bmsc.c	238;"	d	file:
BMSC_CMR2_SPEED_FAIL	driver-bmsc.c	248;"	d	file:
BMSC_CMR2_SPEED_INC	driver-bmsc.c	246;"	d	file:
BMSC_CMR2_SPEED_MAX	driver-bmsc.c	245;"	d	file:
BMSC_CMR2_SPEED_MAX_INT	driver-bmsc.c	241;"	d	file:
BMSC_CMR2_SPEED_MIN	driver-bmsc.c	243;"	d	file:
BMSC_CMR2_SPEED_MIN_INT	driver-bmsc.c	239;"	d	file:
BMSC_CMR2_TIMEOUT	driver-bmsc.c	71;"	d	file:
BMSC_HISTORY	driver-bmsc.c	/^struct BMSC_HISTORY {$/;"	s	file:
BMSC_HISTORY::finish	driver-bmsc.c	/^	struct timeval finish;$/;"	m	struct:BMSC_HISTORY	typeref:struct:BMSC_HISTORY::timeval	file:	access:public
BMSC_HISTORY::hash_count_max	driver-bmsc.c	/^	uint32_t hash_count_max;$/;"	m	struct:BMSC_HISTORY	file:	access:public
BMSC_HISTORY::hash_count_min	driver-bmsc.c	/^	uint32_t hash_count_min;$/;"	m	struct:BMSC_HISTORY	file:	access:public
BMSC_HISTORY::sumTi	driver-bmsc.c	/^	double sumTi;$/;"	m	struct:BMSC_HISTORY	file:	access:public
BMSC_HISTORY::sumXi	driver-bmsc.c	/^	double sumXi;$/;"	m	struct:BMSC_HISTORY	file:	access:public
BMSC_HISTORY::sumXi2	driver-bmsc.c	/^	double sumXi2;$/;"	m	struct:BMSC_HISTORY	file:	access:public
BMSC_HISTORY::sumXiTi	driver-bmsc.c	/^	double sumXiTi;$/;"	m	struct:BMSC_HISTORY	file:	access:public
BMSC_HISTORY::values	driver-bmsc.c	/^	uint32_t values;$/;"	m	struct:BMSC_HISTORY	file:	access:public
BMSC_INFO	driver-bmsc.c	/^struct BMSC_INFO {$/;"	s	file:
BMSC_INFO::Hs	driver-bmsc.c	/^	double Hs;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::W	driver-bmsc.c	/^	double W;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::baud	driver-bmsc.c	/^	int baud;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::cmr2_speed	driver-bmsc.c	/^	uint8_t cmr2_speed;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::count	driver-bmsc.c	/^	int count;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::do_bmsc_timing	driver-bmsc.c	/^	bool do_bmsc_timing;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::flash_next_work	driver-bmsc.c	/^	bool flash_next_work;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::fpga_count	driver-bmsc.c	/^	int fpga_count;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::fullnonce	driver-bmsc.c	/^	double fullnonce;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::golden_hashes	driver-bmsc.c	/^	uint64_t golden_hashes;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::golden_tv	driver-bmsc.c	/^	struct timeval golden_tv;$/;"	m	struct:BMSC_INFO	typeref:struct:BMSC_INFO::timeval	file:	access:public
BMSC_INFO::hash_count_range	driver-bmsc.c	/^	uint64_t hash_count_range;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::history	driver-bmsc.c	/^	struct BMSC_HISTORY history[INFO_HISTORY+1];$/;"	m	struct:BMSC_INFO	typeref:struct:BMSC_INFO::BMSC_HISTORY	file:	access:public
BMSC_INFO::history_count	driver-bmsc.c	/^	uint64_t history_count;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::history_time	driver-bmsc.c	/^	struct timeval history_time;$/;"	m	struct:BMSC_INFO	typeref:struct:BMSC_INFO::timeval	file:	access:public
BMSC_INFO::ident	driver-bmsc.c	/^	enum sub_ident ident;$/;"	m	struct:BMSC_INFO	typeref:enum:BMSC_INFO::sub_ident	file:	access:public
BMSC_INFO::intinfo	driver-bmsc.c	/^	int intinfo;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::min_data_count	driver-bmsc.c	/^	uint32_t min_data_count;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::nonce_bin	driver-bmsc.c	/^	unsigned char nonce_bin[BMSC_NONCE_ARRAY_SIZE][BMSC_READ_SIZE+1];$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::nonce_index	driver-bmsc.c	/^	int nonce_index;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::nonce_mask	driver-bmsc.c	/^	uint32_t nonce_mask;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::read_time	driver-bmsc.c	/^	int read_time;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::read_time_limit	driver-bmsc.c	/^	int read_time_limit;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::speed_next_work	driver-bmsc.c	/^	bool speed_next_work;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::start	driver-bmsc.c	/^	bool start;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::timeout	driver-bmsc.c	/^	int timeout;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::timing_mode	driver-bmsc.c	/^	enum timing_mode timing_mode;$/;"	m	struct:BMSC_INFO	typeref:enum:BMSC_INFO::timing_mode	file:	access:public
BMSC_INFO::values	driver-bmsc.c	/^	uint32_t values;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::work_division	driver-bmsc.c	/^	int work_division;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_INFO::work_queue	driver-bmsc.c	/^	struct work * work_queue[BMSC_WORK_QUEUE_NUM];$/;"	m	struct:BMSC_INFO	typeref:struct:BMSC_INFO::work	file:	access:public
BMSC_INFO::work_queue_index	driver-bmsc.c	/^	int work_queue_index;$/;"	m	struct:BMSC_INFO	file:	access:public
BMSC_IO_SPEED	driver-bmsc.c	49;"	d	file:
BMSC_MIDSTATE_SIZE	driver-bmsc.c	232;"	d	file:
BMSC_NONCE_ARRAY_SIZE	driver-bmsc.c	51;"	d	file:
BMSC_READ_BUF_LEN	driver-bmsc.c	72;"	d	file:
BMSC_READ_COUNT_MIN	driver-bmsc.c	85;"	d	file:
BMSC_READ_COUNT_TIMING	driver-bmsc.c	84;"	d	file:
BMSC_READ_REDUCE	driver-bmsc.c	89;"	d	file:
BMSC_READ_SIZE	driver-bmsc.c	54;"	d	file:
BMSC_READ_TIME	driver-bmsc.c	67;"	d	file:
BMSC_READ_TIME_LIMIT_MAX	driver-bmsc.c	80;"	d	file:
BMSC_REV3_HASH_TIME	driver-bmsc.c	97;"	d	file:
BMSC_TIMEOUT_MS	usbutils.c	62;"	d	file:
BMSC_UNUSED_SIZE	driver-bmsc.c	233;"	d	file:
BMSC_WAIT_TIMEOUT	driver-bmsc.c	70;"	d	file:
BMSC_WORK	driver-bmsc.c	/^struct BMSC_WORK {$/;"	s	file:
BMSC_WORK::check	driver-bmsc.c	/^	uint8_t check;$/;"	m	struct:BMSC_WORK	file:	access:public
BMSC_WORK::cmd	driver-bmsc.c	/^	uint8_t cmd;$/;"	m	struct:BMSC_WORK	file:	access:public
BMSC_WORK::data	driver-bmsc.c	/^	uint8_t data;$/;"	m	struct:BMSC_WORK	file:	access:public
BMSC_WORK::midstate	driver-bmsc.c	/^	uint8_t midstate[BMSC_MIDSTATE_SIZE];$/;"	m	struct:BMSC_WORK	file:	access:public
BMSC_WORK::prefix	driver-bmsc.c	/^	uint8_t prefix;$/;"	m	struct:BMSC_WORK	file:	access:public
BMSC_WORK::unused	driver-bmsc.c	/^	uint8_t unused[BMSC_UNUSED_SIZE];$/;"	m	struct:BMSC_WORK	file:	access:public
BMSC_WORK::work	driver-bmsc.c	/^	uint8_t work[BMSC_WORK_SIZE];$/;"	m	struct:BMSC_WORK	file:	access:public
BMSC_WORK::workid	driver-bmsc.c	/^	uint8_t workid;$/;"	m	struct:BMSC_WORK	file:	access:public
BMSC_WORK_DATA_OFFSET	driver-bmsc.c	236;"	d	file:
BMSC_WORK_QUEUE_NUM	driver-bmsc.c	156;"	d	file:
BMSC_WORK_SIZE	driver-bmsc.c	234;"	d	file:
BP_SYM	lib/memchr.c	45;"	d	file:
BROKEN_CHIP_SYS_CLK	driver-SPI-bitmine-A1.c	384;"	d	file:
BROKEN_CHIP_THRESHOLD	driver-SPI-bitmine-A1.c	382;"	d	file:
BTM_DEV_ERROR	driver-antrouter.c	535;"	d	file:
BTM_GETS_ERROR	driver-bitmain.h	296;"	d
BTM_GETS_OK	driver-bitmain.h	297;"	d
BTM_NONCE_ERROR	driver-antrouter.c	536;"	d	file:
BTM_NONCE_ERROR	driver-bmsc.c	492;"	d	file:
BTM_NONCE_OK	driver-antrouter.c	537;"	d	file:
BTM_NONCE_OK	driver-bmsc.c	493;"	d	file:
BTM_NONCE_RESTART	driver-antrouter.c	538;"	d	file:
BTM_NONCE_RESTART	driver-bmsc.c	494;"	d	file:
BTM_NONCE_TIMEOUT	driver-antrouter.c	539;"	d	file:
BTM_NONCE_TIMEOUT	driver-bmsc.c	495;"	d	file:
BTM_SEND_ERROR	driver-bitmain.h	299;"	d
BTM_SEND_OK	driver-bitmain.h	300;"	d
BT_OFFSETS	libbitfury.c	322;"	d	file:
BUFSIZ	driver-antrouter.h	6;"	d
BULK	usbutils.c	/^static const char *BULK = "Bulk";$/;"	v	file:
BXF_CLOCK_MAX	driver-bitfury.h	19;"	d
BXF_CLOCK_MIN	driver-bitfury.h	18;"	d
BXF_CLOCK_OFF	driver-bitfury.h	17;"	d
BXF_TEMP_HYSTERESIS	driver-bitfury.h	23;"	d
BXF_TEMP_TARGET	driver-bitfury.h	22;"	d
BXM_LATENCY_MS	driver-bitfury.h	52;"	d
BYTES_PER_LINE	hexdump.c	28;"	d	file:
BoardConfig	driver-drillbit.c	/^} BoardConfig;$/;"	t	typeref:struct:__anon3	file:
BoardConfigV3	driver-drillbit.c	/^ } BoardConfigV3;$/;"	t	typeref:struct:__anon5	file:
CAIRNSMORE1_HASH_TIME	driver-antrouter.c	113;"	d	file:
CAIRNSMORE1_HASH_TIME	driver-bmsc.c	101;"	d	file:
CAIRNSMORE1_HASH_TIME	driver-icarus.c	117;"	d	file:
CAIRNSMORE2_HASH_TIME	driver-antrouter.c	115;"	d	file:
CAIRNSMORE2_HASH_TIME	driver-bmsc.c	103;"	d	file:
CAIRNSMORE2_HASH_TIME	driver-icarus.c	119;"	d	file:
CAIRNSMORE2_INTS	driver-antrouter.c	118;"	d	file:
CAIRNSMORE2_INTS	driver-bmsc.c	106;"	d	file:
CAIRNSMORE2_INTS	driver-icarus.c	126;"	d	file:
CANCELLED	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	CANCELLED,$/;"	e	enum:reap_action	file:
CANON_ELEMENT	lib/str-two-way.h	450;"	d
CANON_ELEMENT	lib/str-two-way.h	76;"	d
CAP_EXT_CLOCK	driver-drillbit.c	105;"	d	file:
CAP_IS_AVALON	driver-drillbit.c	106;"	d	file:
CAP_LIMITER_REMOVED	driver-drillbit.c	107;"	d	file:
CAP_TEMP	driver-drillbit.c	104;"	d	file:
CCAN_COMPILER_H	ccan/compiler/compiler.h	2;"	d
CCAN_OPT_H	ccan/opt/opt.h	2;"	d
CCAN_OPT_PRIVATE_H	ccan/opt/private.h	2;"	d
CCAN_OPT_TEST_UTILS_H	ccan/opt/test/utils.h	2;"	d
CCAN_TYPESAFE_CB_H	ccan/typesafe_cb/typesafe_cb.h	2;"	d
CCD_MAX_CHAINS	A1-board-selector.h	45;"	d
CCR_MAX_CHAINS	A1-board-selector.h	46;"	d
CGLOCK_MUTEX	miner.h	/^	CGLOCK_MUTEX,$/;"	e	enum:cglock_typ
CGLOCK_RW	miner.h	/^	CGLOCK_RW,$/;"	e	enum:cglock_typ
CGLOCK_UNKNOWN	miner.h	/^	CGLOCK_UNKNOWN$/;"	e	enum:cglock_typ
CG_LOCAL_MHASHES_MAX_NUM	cgminer.c	369;"	d	file:
CH	sha2.h	46;"	d
CHAR_SIZE	ccan/opt/helpers.c	9;"	d	file:
CHECK_INIT_POLLING	compat/libusb-1.0/libusb/os/poll_windows.c	78;"	d	file:
CHECK_WINUSB_AVAILABLE	compat/libusb-1.0/libusb/os/windows_usb.c	105;"	d	file:
CHIPS_PER_STAT	driver-bab.c	2402;"	d	file:
CHIPS_PER_STAT	driver-minion.c	4980;"	d	file:
CHIP_PIN	driver-minion.c	126;"	d	file:
CHP	driver-minion.c	4368;"	d	file:
CLASS_GUID_COMPOSITE	compat/libusb-1.0/libusb/os/windows_usb.h	/^const GUID CLASS_GUID_COMPOSITE     = { 0x36FC9E60, 0xC465, 0x11cF, {0x80, 0x56, 0x44, 0x45, 0x53, 0x54, 0x00, 0x00} };$/;"	v
CLASS_GUID_LIBUSB_WINUSB	compat/libusb-1.0/libusb/os/windows_usb.h	/^const GUID CLASS_GUID_LIBUSB_WINUSB = { 0x78A1C341, 0x4539, 0x11D3, {0xB8, 0x8D, 0x00, 0xC0, 0x4F, 0xAD, 0x51, 0x71} };$/;"	v
CLASS_GUID_UNSUPPORTED	compat/libusb-1.0/libusb/os/windows_usb.h	116;"	d
CLOCK_N8_CYCLES	driver-bitfury.c	68;"	d	file:
CLOCK_N8_CYCLES_IO_HIGH	driver-bitfury.c	71;"	d	file:
CLOCK_N8_CYCLES_IO_LOW	driver-bitfury.c	72;"	d	file:
CLOCK_N_CYCLES	driver-bitfury.c	67;"	d	file:
CLOSESOCKET	api-example.c	37;"	d	file:
CLOSESOCKET	api-example.c	50;"	d	file:
CLOSESOCKET	util.h	16;"	d
CLOSESOCKET	util.h	40;"	d
CMDJOIN	api.c	137;"	d	file:
CMDS	api.c	/^struct CMDS {$/;"	s	file:
CMDS::func	api.c	/^	void (*func)(struct io_data *, SOCKETTYPE, char *, bool, char);$/;"	m	struct:CMDS	file:	access:public
CMDS::iswritemode	api.c	/^	bool iswritemode;$/;"	m	struct:CMDS	file:	access:public
CMDS::joinable	api.c	/^	bool joinable;$/;"	m	struct:CMDS	file:	access:public
CMDS::name	api.c	/^	char *name;$/;"	m	struct:CMDS	file:	access:public
CMD_CMD	usbutils.c	1058;"	d	file:
CMD_ERROR	usbutils.c	1060;"	d	file:
CMD_REPLY_RETRIES	driver-klondike.c	59;"	d	file:
CMD_TIMEOUT	usbutils.c	1059;"	d	file:
CMP_FUNC	lib/str-two-way.h	451;"	d
CMP_FUNC	lib/str-two-way.h	79;"	d
CMR2_INT_TO_SPEED	driver-antrouter.c	257;"	d	file:
CMR2_INT_TO_SPEED	driver-bmsc.c	242;"	d	file:
CMR2_INT_TO_SPEED	driver-icarus.c	353;"	d	file:
CODES	api.c	/^struct CODES {$/;"	s	file:
CODES::code	api.c	/^	const int code;$/;"	m	struct:CODES	file:	access:public
CODES::description	api.c	/^	const char *description;$/;"	m	struct:CODES	file:	access:public
CODES::params	api.c	/^	const enum code_parameters params;$/;"	m	struct:CODES	typeref:enum:CODES::code_parameters	file:	access:public
CODES::severity	api.c	/^	const enum code_severity severity;$/;"	m	struct:CODES	typeref:enum:CODES::code_severity	file:	access:public
COINTERRA_H	driver-cointerra.h	11;"	d
COINTERRA_TIMEOUT_MS	usbutils.c	71;"	d	file:
COINTERRA_TIMEOUT_MS	usbutils.c	87;"	d	file:
COLD	ccan/compiler/compiler.h	19;"	d
COLD	ccan/compiler/compiler.h	21;"	d
COMMA	api-example.c	/^static const char COMMA = ',';$/;"	v	file:
COMMA	api.c	/^static const char *COMMA = ",";$/;"	v	file:
COMMANDS	api.c	638;"	d	file:
COMPLETED_EARLY	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	COMPLETED_EARLY,$/;"	e	enum:reap_action	file:
COMSTR	api.c	134;"	d	file:
CONFIGRET	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef RETURN_TYPE CONFIGRET;$/;"	t
CONFIG_CORE_065V	driver-drillbit.c	77;"	d	file:
CONFIG_CORE_075V	driver-drillbit.c	78;"	d	file:
CONFIG_CORE_085V	driver-drillbit.c	79;"	d	file:
CONFIG_CORE_095V	driver-drillbit.c	80;"	d	file:
CONFIG_DESC_LENGTH	compat/libusb-1.0/libusb/descriptor.c	33;"	d	file:
CONFIG_PW1	driver-drillbit.c	73;"	d	file:
CONFIG_PW2	driver-drillbit.c	74;"	d	file:
CONTROL	usbutils.c	/^static const char *CONTROL = "Control";$/;"	v	file:
COOLDOWN_MS	driver-SPI-bitmine-A1.c	69;"	d	file:
CORES_IN_DIE	knc-transport.h	14;"	d
CORES_PER_ASIC	knc-transport.h	15;"	d
CORE_ERROR_DISABLE_TIME	driver-knc.c	36;"	d	file:
CORE_ERROR_INTERVAL	driver-knc.c	35;"	d	file:
CORE_ERROR_LIMIT	driver-knc.c	34;"	d	file:
CORE_IDLE	driver-minion.c	435;"	d	file:
CORE_SUBMIT_MIN_TIME	driver-knc.c	37;"	d	file:
CORE_TIMEOUT	driver-knc.c	38;"	d	file:
CP210X_BITS_DATA_8	usbutils.h	96;"	d
CP210X_BITS_DATA_MASK	usbutils.h	95;"	d
CP210X_BITS_PARITY_MARK	usbutils.h	97;"	d
CP210X_BITS_PARITY_SPACE	usbutils.h	98;"	d
CP210X_DATA_BAUD	usbutils.h	92;"	d
CP210X_REQUEST_BAUD	usbutils.h	88;"	d
CP210X_REQUEST_DATA	usbutils.h	87;"	d
CP210X_REQUEST_IFC_ENABLE	usbutils.h	86;"	d
CP210X_SET_LINE_CTL	usbutils.h	94;"	d
CP210X_TYPE_OUT	usbutils.h	84;"	d
CP210X_VALUE_DATA	usbutils.h	91;"	d
CP210X_VALUE_UART_ENABLE	usbutils.h	90;"	d
CRC16	driver-bitmain.c	/^static uint16_t CRC16(const uint8_t* p_data, uint16_t w_len)$/;"	f	file:	signature:(const uint8_t* p_data, uint16_t w_len)
CRC5	driver-antrouter.c	/^unsigned char CRC5(unsigned char *ptr, unsigned char len)$/;"	f	signature:(unsigned char *ptr, unsigned char len)
CRC5	driver-bmsc.c	/^unsigned char CRC5(unsigned char *ptr, unsigned char len)$/;"	f	signature:(unsigned char *ptr, unsigned char len)
CR_NO_SUCH_DEVNODE	compat/libusb-1.0/libusb/os/windows_usb.h	299;"	d
CR_SUCCESS	compat/libusb-1.0/libusb/os/windows_usb.h	298;"	d
CS	driver-bitfury.c	36;"	d	file:
CTA_CORES	driver-cointerra.h	146;"	d
CTA_CORE_HASHRATES	driver-cointerra.h	51;"	d
CTA_DRIVER_TAG	driver-cointerra.h	37;"	d
CTA_FANS	driver-cointerra.h	148;"	d
CTA_INFO_BOARDNUMBER	driver-cointerra.h	87;"	d
CTA_INFO_FWDATE_DAY	driver-cointerra.h	93;"	d
CTA_INFO_FWDATE_MONTH	driver-cointerra.h	92;"	d
CTA_INFO_FWDATE_YEAR	driver-cointerra.h	91;"	d
CTA_INFO_FWREV_MAJ	driver-cointerra.h	88;"	d
CTA_INFO_FWREV_MIC	driver-cointerra.h	90;"	d
CTA_INFO_FWREV_MIN	driver-cointerra.h	89;"	d
CTA_INFO_HWREV	driver-cointerra.h	82;"	d
CTA_INFO_INITDIFFBITS	driver-cointerra.h	94;"	d
CTA_INFO_MAXDIFFBITS	driver-cointerra.h	96;"	d
CTA_INFO_MINDIFFBITS	driver-cointerra.h	95;"	d
CTA_INFO_NUMASICS	driver-cointerra.h	84;"	d
CTA_INFO_NUMCORES	driver-cointerra.h	86;"	d
CTA_INFO_NUMDIES	driver-cointerra.h	85;"	d
CTA_INFO_SERNO	driver-cointerra.h	83;"	d
CTA_INIT_DIFF	driver-cointerra.h	20;"	d
CTA_IRSTAT_CHANNEL	driver-cointerra.h	133;"	d
CTA_IRSTAT_EFF	driver-cointerra.h	142;"	d
CTA_IRSTAT_IIN	driver-cointerra.h	135;"	d
CTA_IRSTAT_IOUT	driver-cointerra.h	137;"	d
CTA_IRSTAT_PIN	driver-cointerra.h	141;"	d
CTA_IRSTAT_POUT	driver-cointerra.h	140;"	d
CTA_IRSTAT_STATUS	driver-cointerra.h	143;"	d
CTA_IRSTAT_TEMP1	driver-cointerra.h	138;"	d
CTA_IRSTAT_TEMP2	driver-cointerra.h	139;"	d
CTA_IRSTAT_VIN	driver-cointerra.h	134;"	d
CTA_IRSTAT_VOUT	driver-cointerra.h	136;"	d
CTA_MATCH_NOFFSET	driver-cointerra.h	42;"	d
CTA_MATCH_NONCE	driver-cointerra.h	43;"	d
CTA_MAX_QUEUE	driver-cointerra.h	26;"	d
CTA_MCU_ASIC	driver-cointerra.h	40;"	d
CTA_MCU_CORE	driver-cointerra.h	39;"	d
CTA_MCU_PIPE	driver-cointerra.h	41;"	d
CTA_MCU_TAG	driver-cointerra.h	38;"	d
CTA_MSG_RECVD	driver-cointerra.h	45;"	d
CTA_MSG_SIZE	driver-cointerra.h	14;"	d
CTA_MSG_TYPE	driver-cointerra.h	32;"	d
CTA_NROLL_TIME	driver-cointerra.h	29;"	d
CTA_PUMPS	driver-cointerra.h	147;"	d
CTA_READBUF_SIZE	driver-cointerra.h	13;"	d
CTA_READ_INTERVAL	driver-cointerra.h	16;"	d
CTA_READ_TIMEOUT	driver-cointerra.h	15;"	d
CTA_RECV_INFO	driver-cointerra.h	60;"	d
CTA_RECV_IRSTAT	driver-cointerra.h	64;"	d
CTA_RECV_MATCH	driver-cointerra.h	56;"	d
CTA_RECV_MSG	driver-cointerra.h	61;"	d
CTA_RECV_RDONE	driver-cointerra.h	62;"	d
CTA_RECV_REQWORK	driver-cointerra.h	55;"	d
CTA_RECV_STATDEBUG	driver-cointerra.h	63;"	d
CTA_RECV_STATREAD	driver-cointerra.h	58;"	d
CTA_RECV_STATSET	driver-cointerra.h	59;"	d
CTA_RECV_UNUSED	driver-cointerra.h	54;"	d
CTA_RECV_WDONE	driver-cointerra.h	57;"	d
CTA_REQWORK_REQUESTS	driver-cointerra.h	50;"	d
CTA_REQ_INTERVAL	driver-cointerra.h	151;"	d
CTA_REQ_MSGTYPE	driver-cointerra.h	150;"	d
CTA_RESET_DIFF	driver-cointerra.h	34;"	d
CTA_RESET_INIT	driver-cointerra.h	80;"	d
CTA_RESET_LOAD	driver-cointerra.h	35;"	d
CTA_RESET_NEW	driver-cointerra.h	79;"	d
CTA_RESET_NONE	driver-cointerra.h	77;"	d
CTA_RESET_PSLOAD	driver-cointerra.h	36;"	d
CTA_RESET_TIMEOUT	driver-cointerra.h	18;"	d
CTA_RESET_TYPE	driver-cointerra.h	33;"	d
CTA_RESET_UPDATE	driver-cointerra.h	78;"	d
CTA_SCAN_INTERVAL	driver-cointerra.h	17;"	d
CTA_SEND_COREHASHRATE	driver-cointerra.h	74;"	d
CTA_SEND_FMATCH	driver-cointerra.h	72;"	d
CTA_SEND_IDENTIFY	driver-cointerra.h	73;"	d
CTA_SEND_REQUEST	driver-cointerra.h	71;"	d
CTA_SEND_RESET	driver-cointerra.h	68;"	d
CTA_SEND_SETPERF	driver-cointerra.h	70;"	d
CTA_SEND_UNUSED	driver-cointerra.h	67;"	d
CTA_SEND_WORK	driver-cointerra.h	69;"	d
CTA_STAT_ACTIVE	driver-cointerra.h	108;"	d
CTA_STAT_AMBTEMP_AVG	driver-cointerra.h	100;"	d
CTA_STAT_AMBTEMP_HIGH	driver-cointerra.h	101;"	d
CTA_STAT_AMBTEMP_LOW	driver-cointerra.h	99;"	d
CTA_STAT_AUTOVOLTAGE	driver-cointerra.h	124;"	d
CTA_STAT_CORETEMPS	driver-cointerra.h	98;"	d
CTA_STAT_CORE_FREQS	driver-cointerra.h	117;"	d
CTA_STAT_CORE_VOLTS	driver-cointerra.h	104;"	d
CTA_STAT_DIES_ACTIVE	driver-cointerra.h	112;"	d
CTA_STAT_FANSPEEDS	driver-cointerra.h	111;"	d
CTA_STAT_FAN_TACHS	driver-cointerra.h	103;"	d
CTA_STAT_FLUSHED_HASHES	driver-cointerra.h	123;"	d
CTA_STAT_HASHES	driver-cointerra.h	122;"	d
CTA_STAT_HEARTBEATS	driver-cointerra.h	116;"	d
CTA_STAT_HW_ERRORS	driver-cointerra.h	120;"	d
CTA_STAT_INACTIVE	driver-cointerra.h	107;"	d
CTA_STAT_IPOWER_USED	driver-cointerra.h	128;"	d
CTA_STAT_IVOLTAGE	driver-cointerra.h	129;"	d
CTA_STAT_MIN_FAN_SPEED	driver-cointerra.h	114;"	d
CTA_STAT_PERFMODE	driver-cointerra.h	110;"	d
CTA_STAT_PIPES_ENABLED	driver-cointerra.h	113;"	d
CTA_STAT_POWER_PERCENT	driver-cointerra.h	125;"	d
CTA_STAT_POWER_USED	driver-cointerra.h	126;"	d
CTA_STAT_PS_TEMP1	driver-cointerra.h	130;"	d
CTA_STAT_PS_TEMP2	driver-cointerra.h	131;"	d
CTA_STAT_PUMP_TACHS	driver-cointerra.h	102;"	d
CTA_STAT_UNDERRUNS	driver-cointerra.h	119;"	d
CTA_STAT_UPTIME	driver-cointerra.h	115;"	d
CTA_STAT_UPTIME_MS	driver-cointerra.h	121;"	d
CTA_STAT_VOLTAGE	driver-cointerra.h	127;"	d
CTA_STAT_VOLTS12	driver-cointerra.h	106;"	d
CTA_STAT_VOLTS33	driver-cointerra.h	105;"	d
CTA_WDONE_NONCES	driver-cointerra.h	44;"	d
CTA_WORK_DATA	driver-cointerra.h	47;"	d
CTA_WORK_DIFFBITS	driver-cointerra.h	49;"	d
CTA_WORK_MIDSTATE	driver-cointerra.h	46;"	d
CTA_WORK_NROLL	driver-cointerra.h	48;"	d
CTL_CODE	compat/libusb-1.0/libusb/os/windows_usb.h	344;"	d
CURBUFSIZ	cgminer.c	2902;"	d	file:
CURL	miner.h	/^typedef char CURL;$/;"	t
CURL_GLOBAL_ALL	miner.h	19;"	d
C_ASK	driver-blockerupter.h	55;"	d
C_DIF	driver-blockerupter.h	48;"	d
C_GCK	driver-blockerupter.h	46;"	d
C_JOB	driver-blockerupter.h	53;"	d
C_LPO	driver-blockerupter.h	44;"	d
C_MAX	usbutils.h	/^	C_MAX$/;"	e	enum:usb_cmds
C_NULL	driver-hashfast.c	104;"	d	file:
C_RES	driver-blockerupter.h	42;"	d
C_TRS	driver-blockerupter.h	57;"	d
CancelIoEx_Available	compat/libusb-1.0/libusb/os/poll_windows.c	100;"	d	file:
CapabilityFlags	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_HUB_CAP_FLAGS CapabilityFlags;$/;"	m	struct:USB_HUB_CAPABILITIES_EX	access:public
ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^		ULONG ConnectionIndex;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31	access:public
ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ConnectionIndex;$/;"	m	struct:USB_DESCRIPTOR_REQUEST	access:public
ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ConnectionIndex;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ConnectionIndex;$/;"	m	struct:USB_NODE_CONNECTION_NAME	access:public
ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG ConnectionIndex;$/;"	m	struct:USB_NODE_CONNECTION_NAME_FIXED	access:public
ConnectionStatus	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_CONNECTION_STATUS  ConnectionStatus;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
CreateProcess	compat/jansson-2.6/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	compat/libusb-1.0/ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CurrentConfigurationValue	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  CurrentConfigurationValue;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
DATAFORWARDSIZE	driver-bflsc.h	176;"	d
DATAN	driver-bab.c	314;"	d	file:
DATAN	noncedup.c	20;"	d	file:
DATAR	driver-bab.c	313;"	d	file:
DATAS	driver-bab.c	312;"	d	file:
DATASB	api.c	682;"	d	file:
DATAW	driver-bab.c	311;"	d	file:
DATA_ALL	driver-minion.c	1260;"	d	file:
DATA_BITS	driver-bab.c	1737;"	d	file:
DATA_HIST	driver-minion.c	700;"	d	file:
DATA_MERKLE7	driver-bab.c	1735;"	d	file:
DATA_NONCE	driver-bab.c	1738;"	d	file:
DATA_NTIME	driver-bab.c	1736;"	d	file:
DATA_OFF	driver-minion.c	1261;"	d	file:
DATA_PERF	driver-minion.c	701;"	d	file:
DATA_RES	driver-minion.c	699;"	d	file:
DATA_SIZ	driver-minion.c	161;"	d	file:
DATA_TASK	driver-minion.c	698;"	d	file:
DATA_UINTS	driver-bab.c	164;"	d	file:
DATA_WORK	driver-minion.c	697;"	d	file:
DATA_XFF	driver-minion.c	702;"	d	file:
DEAD	api.c	/^static const char *DEAD = "Dead";$/;"	v	file:
DECLTYPE	uthash.h	37;"	d
DECLTYPE	uthash.h	40;"	d
DECLTYPE	uthash.h	43;"	d
DECLTYPE_ASSIGN	uthash.h	47;"	d
DECLTYPE_ASSIGN	uthash.h	53;"	d
DEFAULT_DIR	driver-bitfury.c	56;"	d	file:
DEFAULT_EP_IN	usbutils.h	129;"	d
DEFAULT_EP_OUT	usbutils.h	130;"	d
DEFAULT_INTINFO	usbutils.h	125;"	d
DEFAULT_SOCKWAIT	util.c	47;"	d	file:
DEFAULT_SPI_BITS_PER_WORD	spi-context.h	13;"	d
DEFAULT_SPI_BUS	spi-context.h	10;"	d
DEFAULT_SPI_CS_LINE	spi-context.h	11;"	d
DEFAULT_SPI_DELAY_USECS	spi-context.h	15;"	d
DEFAULT_SPI_MODE	spi-context.h	12;"	d
DEFAULT_SPI_SPEED	spi-context.h	14;"	d
DEFAULT_STATE	driver-bitfury.c	57;"	d	file:
DEFINEDGROUP	api.c	639;"	d	file:
DESCON	usbutils.c	/^static const char *DESCON = "Config";$/;"	v	file:
DESC_HEADER_LENGTH	compat/libusb-1.0/libusb/descriptor.c	31;"	d	file:
DESDEV	usbutils.c	/^static const char *DESDEV = "Device";$/;"	v	file:
DESEP	usbutils.c	/^static const char *DESEP = "Endpoint";$/;"	v	file:
DESERIALISE	driver-drillbit.c	1032;"	d	file:
DESHID	usbutils.c	/^static const char *DESHID = "HID";$/;"	v	file:
DESHUB	usbutils.c	/^static const char *DESHUB = "Hub";$/;"	v	file:
DESINT	usbutils.c	/^static const char *DESINT = "Interface";$/;"	v	file:
DESPHY	usbutils.c	/^static const char *DESPHY = "Physical";$/;"	v	file:
DESRPT	usbutils.c	/^static const char *DESRPT = "Report";$/;"	v	file:
DESSTR	usbutils.c	/^static const char *DESSTR = "String";$/;"	v	file:
DEVICECODE	api.c	/^static const char *DEVICECODE = ""$/;"	v	file:
DEVICE_CTX	compat/libusb-1.0/libusb/libusbi.h	213;"	d
DEVICE_DESC_LENGTH	compat/libusb-1.0/libusb/descriptor.c	32;"	d	file:
DEVICE_DESC_LENGTH	compat/libusb-1.0/libusb/libusbi.h	46;"	d
DEVICE_SPEED	compat/libusb-1.0/libusb/os/windows_usb.h	561;"	d
DEVINFO	driver-klondike.c	/^} DEVINFO;$/;"	t	typeref:struct:device_info	file:
DEVINST	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef DWORD DEVNODE, DEVINST;$/;"	t
DEVNODE	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef DWORD DEVNODE, DEVINST;$/;"	t
DEVRLOCK	usbutils.c	47;"	d	file:
DEVRUNLOCK	usbutils.c	52;"	d	file:
DEVTIMEOUT	usbutils.h	122;"	d
DEVWLOCK	usbutils.c	37;"	d	file:
DEVWUNLOCK	usbutils.c	42;"	d	file:
DEV_DISABLED	miner.h	/^	DEV_DISABLED,$/;"	e	enum:dev_enable
DEV_ENABLED	miner.h	/^	DEV_ENABLED,$/;"	e	enum:dev_enable
DEV_PASS	compat/libusb-1.0/libusb/os/windows_usb.c	1179;"	d	file:
DEV_RECOVER	miner.h	/^	DEV_RECOVER,$/;"	e	enum:dev_enable
DI	driver-bitfury.c	35;"	d	file:
DI8	driver-hashfast.c	41;"	d	file:
DIDLOCK	miner.h	759;"	d
DIDLOCK	miner.h	766;"	d
DIES_PER_ASIC	driver-knc.c	30;"	d	file:
DISABLED	api.c	/^static const char *DISABLED = "Disabled";$/;"	v	file:
DISABLE_3_PHASE_CLOCK	driver-bitfury.c	64;"	d	file:
DISABLE_ADAPTIVE_CLOCK	driver-bitfury.c	62;"	d	file:
DISABLE_CHIP_FAIL_THRESHOLD	driver-SPI-bitmine-A1.c	71;"	d	file:
DISCOVERED_DEVICES_SIZE_STEP	compat/libusb-1.0/libusb/core.c	465;"	d	file:
DLL_DECLARE	compat/libusb-1.0/libusb/os/windows_usb.h	268;"	d
DLL_DECLARE_PREFIXED	compat/libusb-1.0/libusb/os/windows_usb.h	270;"	d
DLL_DECLARE_PREFIXNAME	compat/libusb-1.0/libusb/os/windows_usb.h	245;"	d
DLL_LOAD	compat/libusb-1.0/libusb/os/windows_usb.h	269;"	d
DLL_LOAD_PREFIXED	compat/libusb-1.0/libusb/os/windows_usb.h	271;"	d
DLL_LOAD_PREFIXNAME	compat/libusb-1.0/libusb/os/windows_usb.h	249;"	d
DO	driver-bitfury.c	34;"	d	file:
DO_IO_STATS	driver-minion.c	706;"	d	file:
DO_USB_STATS	usbutils.c	1035;"	d	file:
DRILLBIT_TIMEOUT_MS	usbutils.c	60;"	d	file:
DRIVER_COUNT_DRV	api.c	1330;"	d	file:
DRIVER_COUNT_FOUND	usbutils.c	3858;"	d	file:
DRIVER_DRV_DETECT_ALL	cgminer.c	9751;"	d	file:
DRIVER_DRV_DETECT_HOTPLUG	cgminer.c	9701;"	d	file:
DRIVER_ENUM	miner.h	276;"	d
DRIVER_FILL_DEVICE_DRV	cgminer.c	9750;"	d	file:
DRIVER_MAX	miner.h	/^	DRIVER_MAX$/;"	e	enum:drv_driver
DRIVER_PARSE_COMMANDS	miner.h	/^	DRIVER_PARSE_COMMANDS(DRIVER_ENUM)$/;"	e	enum:drv_driver
DRIVER_PARSE_COMMANDS	miner.h	272;"	d
DRIVER_PROTOTYPE	miner.h	277;"	d
DRIVER_USB_CHECK_EACH	usbutils.c	2615;"	d	file:
DRIVER_drv	usbutils.c	478;"	d	file:
DRIVER_drv	usbutils.c	482;"	d	file:
DUMMY_HANDLE	compat/libusb-1.0/libusb/os/poll_windows.h	38;"	d
DataForwardToChain	driver-bflsc.h	/^struct DataForwardToChain {$/;"	s
DataForwardToChain::deviceAddress	driver-bflsc.h	/^	uint8_t deviceAddress;$/;"	m	struct:DataForwardToChain	access:public
DataForwardToChain::header	driver-bflsc.h	/^	uint8_t header;$/;"	m	struct:DataForwardToChain	access:public
DataForwardToChain::payloadData	driver-bflsc.h	/^	uint8_t payloadData[BFLSC_MAXPAYLOAD];$/;"	m	struct:DataForwardToChain	access:public
DataForwardToChain::payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:DataForwardToChain	access:public
DeviceAddress	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USHORT  DeviceAddress;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
DeviceCausedOvercurrent	compat/libusb-1.0/libusb/os/windows_usb.h	/^	DeviceCausedOvercurrent,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceConnected	compat/libusb-1.0/libusb/os/windows_usb.h	/^	DeviceConnected,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceDescriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_DEVICE_DESCRIPTOR  DeviceDescriptor;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
DeviceFailedEnumeration	compat/libusb-1.0/libusb/os/windows_usb.h	/^	DeviceFailedEnumeration,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceGeneralFailure	compat/libusb-1.0/libusb/os/windows_usb.h	/^	DeviceGeneralFailure,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceHubNestedTooDeeply	compat/libusb-1.0/libusb/os/windows_usb.h	/^	DeviceHubNestedTooDeeply,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceInLegacyHub	compat/libusb-1.0/libusb/os/windows_usb.h	/^	DeviceInLegacyHub$/;"	e	enum:USB_CONNECTION_STATUS
DeviceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	101;"	d
DeviceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	107;"	d
DeviceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	113;"	d
DeviceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	77;"	d
DeviceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	83;"	d
DeviceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	89;"	d
DeviceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	95;"	d
DeviceIsHub	compat/libusb-1.0/libusb/os/windows_usb.h	/^	BOOLEAN  DeviceIsHub;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
DeviceNotEnoughBandwidth	compat/libusb-1.0/libusb/os/windows_usb.h	/^	DeviceNotEnoughBandwidth,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceNotEnoughPower	compat/libusb-1.0/libusb/os/windows_usb.h	/^	DeviceNotEnoughPower,$/;"	e	enum:USB_CONNECTION_STATUS
DeviceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	102;"	d
DeviceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	108;"	d
DeviceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	114;"	d
DeviceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	78;"	d
DeviceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	84;"	d
DeviceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	90;"	d
DeviceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	96;"	d
ELMT_FROM_HH	uthash.h	92;"	d
EMPTY_TIMEOUT	driver-drillbit.c	203;"	d	file:
ENABLE_3_PHASE_CLOCK	driver-bitfury.c	63;"	d	file:
ENABLE_ADAPTIVE_CLOCK	driver-bitfury.c	61;"	d	file:
ENABLE_CORE	driver-minion.c	434;"	d	file:
ENABLE_INT_NONO	driver-minion.c	32;"	d	file:
ENDPOINT_AUDIO_DESC_LENGTH	compat/libusb-1.0/libusb/descriptor.c	36;"	d	file:
ENDPOINT_DESC_LENGTH	compat/libusb-1.0/libusb/descriptor.c	35;"	d	file:
END_CONDITION	driver-antrouter.c	284;"	d	file:
END_CONDITION	driver-bmsc.c	269;"	d	file:
END_CONDITION	driver-icarus.c	405;"	d	file:
ENUMERATION	usbutils.h	290;"	d
EOL	usbutils.c	1100;"	d	file:
EOL	usbutils.c	1102;"	d	file:
EPI	usbutils.h	18;"	d
EPIN	usbutils.c	/^static const char *EPIN = "In: ";$/;"	v	file:
EPO	usbutils.h	19;"	d
EPOCHFILETIME	driver-antrouter.c	693;"	d	file:
EPOCHFILETIME	util.c	1403;"	d	file:
EPOUT	usbutils.c	/^static const char *EPOUT = "Out: ";$/;"	v	file:
EPX	usbutils.c	/^static const char *EPX = "?: ";$/;"	v	file:
EQ	api-example.c	/^static const char EQ = '=';$/;"	v	file:
ERROR	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	ERROR,$/;"	e	enum:reap_action	file:
ERRRESP	bitforce-firmware-flash.c	29;"	d	file:
ERR_BUFFER_SIZE	compat/libusb-1.0/libusb/os/windows_usb.h	88;"	d
ETIMEDOUT	compat/libusb-1.0/libusb/os/threads_windows.h	57;"	d
EWOULDBLOCK	miner.h	77;"	d
EXTRA_LOG_IO	driver-minion.c	1382;"	d	file:
E_ADDRESS_FAILURE	hf_protocol.h	116;"	d
E_ADDRESS_TIMEOUT	hf_protocol.h	99;"	d
E_BAUD_TIMEOUT	hf_protocol.h	115;"	d
E_BOARD_1	hf_protocol.h	109;"	d
E_BOARD_2	hf_protocol.h	110;"	d
E_BOARD_3	hf_protocol.h	111;"	d
E_BOARD_4	hf_protocol.h	112;"	d
E_BOARD_5	hf_protocol.h	113;"	d
E_CLOCKGATE_TIMEOUT	hf_protocol.h	100;"	d
E_CONFIG_TIMEOUT	hf_protocol.h	101;"	d
E_CORE_POWER_FAULT	hf_protocol.h	114;"	d
E_EXCESS_CORE_FAILURES	hf_protocol.h	102;"	d
E_IR_PROG_FAILURE	hf_protocol.h	117;"	d
E_MAIN_POWER_BAD	hf_protocol.h	107;"	d
E_MIXED_MISMATCH	hf_protocol.h	118;"	d
E_MIXED_TIMEOUT	hf_protocol.h	119;"	d
E_NO_SLAVES	hf_protocol.h	105;"	d
E_RESET_TIMEOUT	hf_protocol.h	98;"	d
E_SECONDARY_POWER_BAD	hf_protocol.h	108;"	d
E_SLAVE_COMM	hf_protocol.h	106;"	d
E_TOO_MANY_GROUPS	hf_protocol.h	104;"	d
E_TOTAL_CORE_FAILURES	hf_protocol.h	103;"	d
EndpointDescriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_ENDPOINT_DESCRIPTOR  EndpointDescriptor;$/;"	m	struct:USB_PIPE_INFO	access:public
F0	knc-asic.c	166;"	d	file:
F1	knc-asic.c	167;"	d	file:
FAILURE_INTERVAL	cgminer.c	/^	FAILURE_INTERVAL		= 30,$/;"	e	enum:__anon61	file:
FAKE_CORE	driver-minion.c	135;"	d	file:
FALSESTR	api.c	/^static const char *FALSESTR = "false";$/;"	v	file:
FAN_AUTO	driver-avalon2.h	/^	FAN_AUTO,$/;"	e	enum:avalon2_fan_fixed
FAN_FIXED	driver-avalon2.h	/^	FAN_FIXED,$/;"	e	enum:avalon2_fan_fixed
FIFO_CMD	driver-minion.c	438;"	d	file:
FIFO_RES	driver-minion.c	437;"	d	file:
FILE_ANY_ACCESS	compat/libusb-1.0/libusb/os/windows_usb.h	334;"	d
FILE_DEVICE_UNKNOWN	compat/libusb-1.0/libusb/os/windows_usb.h	337;"	d
FILE_DEVICE_USB	compat/libusb-1.0/libusb/os/windows_usb.h	340;"	d
FIRST_BASE	libbitfury.c	120;"	d	file:
FMT_RANGE	driver-bab.c	2403;"	d	file:
FPGAID_ALL	driver-modminer.c	78;"	d	file:
FPGAUTILS_H	fpgautils.h	11;"	d
FPGA_PARSE_COMMANDS	miner.h	246;"	d
FREQ2_DELAY	driver-minion.c	615;"	d	file:
FREQ2_FACTOR	driver-minion.c	613;"	d	file:
FREQ_DELAY	driver-minion.c	606;"	d	file:
FTDI_INDEX_BAUD_AVA	usbutils.h	49;"	d
FTDI_INDEX_BAUD_BAS	usbutils.h	42;"	d
FTDI_INDEX_BAUD_BFL	usbutils.h	40;"	d
FTDI_INDEX_BAUD_BLT	usbutils.h	45;"	d
FTDI_INDEX_BAUD_BTM	usbutils.h	55;"	d
FTDI_INDEX_BAUD_CMR_115	usbutils.h	68;"	d
FTDI_INDEX_BAUD_CMR_57	usbutils.h	71;"	d
FTDI_REQUEST_BAUD	usbutils.h	29;"	d
FTDI_REQUEST_DATA	usbutils.h	30;"	d
FTDI_REQUEST_FLOW	usbutils.h	28;"	d
FTDI_REQUEST_LATENCY	usbutils.h	31;"	d
FTDI_REQUEST_MODEM	usbutils.h	27;"	d
FTDI_REQUEST_RESET	usbutils.h	26;"	d
FTDI_RS0_CTS	usbutils.c	3642;"	d	file:
FTDI_RS0_DSR	usbutils.c	3643;"	d	file:
FTDI_RS0_RI	usbutils.c	3644;"	d	file:
FTDI_RS0_RLSD	usbutils.c	3645;"	d	file:
FTDI_STATUS_B0_MASK	usbutils.c	3641;"	d	file:
FTDI_TYPE_IN	usbutils.h	24;"	d
FTDI_TYPE_OUT	usbutils.h	23;"	d
FTDI_VALUE_BAUD_AVA	usbutils.h	48;"	d
FTDI_VALUE_BAUD_BAS	usbutils.h	41;"	d
FTDI_VALUE_BAUD_BFL	usbutils.h	39;"	d
FTDI_VALUE_BAUD_BLT	usbutils.h	44;"	d
FTDI_VALUE_BAUD_BTM	usbutils.h	54;"	d
FTDI_VALUE_BAUD_CMR_115	usbutils.h	67;"	d
FTDI_VALUE_BAUD_CMR_57	usbutils.h	70;"	d
FTDI_VALUE_DATA_AVA	usbutils.h	51;"	d
FTDI_VALUE_DATA_BAS	usbutils.h	75;"	d
FTDI_VALUE_DATA_BFL	usbutils.h	74;"	d
FTDI_VALUE_DATA_BLT	usbutils.h	77;"	d
FTDI_VALUE_DATA_BTM	usbutils.h	57;"	d
FTDI_VALUE_FLOW	usbutils.h	79;"	d
FTDI_VALUE_LATENCY	usbutils.h	36;"	d
FTDI_VALUE_MODEM	usbutils.h	80;"	d
FTDI_VALUE_PURGE_RX	usbutils.h	34;"	d
FTDI_VALUE_PURGE_TX	usbutils.h	35;"	d
FTDI_VALUE_RESET	usbutils.h	33;"	d
FULLNONCE	driver-bflsc.h	65;"	d
FullNonceRangeJob	driver-bflsc.h	306;"	d
FullSpeed	compat/libusb-1.0/libusb/os/windows_usb.h	563;"	d
GEN_PASS	compat/libusb-1.0/libusb/os/windows_usb.c	1178;"	d	file:
GETLOCK	miner.h	756;"	d
GETLOCK	miner.h	763;"	d
GETWORK_MODE_BENCHMARK	miner.h	1398;"	d
GETWORK_MODE_GBT	miner.h	1400;"	d
GETWORK_MODE_LP	miner.h	1397;"	d
GETWORK_MODE_POOL	miner.h	1396;"	d
GETWORK_MODE_SOLO	miner.h	1401;"	d
GETWORK_MODE_STRATUM	miner.h	1399;"	d
GETWORK_MODE_TESTPOOL	miner.h	1395;"	d
GET_ULONG_BE	knc-asic.c	122;"	d	file:
GET_ULONG_LE	knc-asic.c	130;"	d	file:
GL_INT64_T	lib/stdint.in.h	146;"	d
GL_INT64_T	lib/stdint.in.h	154;"	d
GL_INT64_T	lib/stdint.in.h	159;"	d
GL_INT64_T	lib/stdint.in.h	164;"	d
GL_UINT64_T	lib/stdint.in.h	169;"	d
GL_UINT64_T	lib/stdint.in.h	175;"	d
GL_UINT64_T	lib/stdint.in.h	180;"	d
GL_UINT64_T	lib/stdint.in.h	185;"	d
GNULIB_defined_stdint_types	lib/stdint.in.h	301;"	d
GN_CORE_VOLTAGE	hf_protocol.h	45;"	d
GN_DIE_TEMPERATURE	hf_protocol.h	46;"	d
GN_THERMAL_CUTOFF	hf_protocol.h	49;"	d
GOTLOCK	miner.h	757;"	d
GOTLOCK	miner.h	764;"	d
GP8	driver-hashfast.c	40;"	d	file:
GPIO0	driver-bitfury.c	37;"	d	file:
GPIO1	driver-bitfury.c	38;"	d	file:
GPIO2	driver-bitfury.c	39;"	d	file:
GPIO3	driver-bitfury.c	40;"	d	file:
GPIOH	driver-bitfury.c	47;"	d	file:
GPIOH1	driver-bitfury.c	48;"	d	file:
GPIOH2	driver-bitfury.c	49;"	d	file:
GPIOH3	driver-bitfury.c	50;"	d	file:
GPIOH4	driver-bitfury.c	51;"	d	file:
GPIOH5	driver-bitfury.c	52;"	d	file:
GPIOH6	driver-bitfury.c	53;"	d	file:
GPIOH7	driver-bitfury.c	54;"	d	file:
GPIOL0	driver-bitfury.c	43;"	d	file:
GPIOL1	driver-bitfury.c	44;"	d	file:
GPIOL2	driver-bitfury.c	45;"	d	file:
GPIOL3	driver-bitfury.c	46;"	d	file:
GROUP	api.c	632;"	d	file:
GROUPOFFSET	api.c	636;"	d	file:
GUID_DEVINTERFACE_USB_DEVICE	compat/libusb-1.0/libusb/os/windows_usb.h	/^const GUID GUID_DEVINTERFACE_USB_DEVICE = { 0xA5DCBF10, 0x6530, 0x11D2, {0x90, 0x1F, 0x00, 0xC0, 0x4F, 0xB9, 0x51, 0xED} };$/;"	v
GUID_DEVINTERFACE_USB_HOST_CONTROLLER	compat/libusb-1.0/libusb/os/windows_usb.h	/^const GUID GUID_DEVINTERFACE_USB_HOST_CONTROLLER = { 0x3ABF6F2D, 0x71C4, 0x462A, {0x8A, 0x92, 0x1E, 0x68, 0x61, 0xE6, 0xAF, 0x27} };$/;"	v
GUID_DEVINTERFACE_USB_HUB	compat/libusb-1.0/libusb/os/windows_usb.h	/^const GUID GUID_DEVINTERFACE_USB_HUB = { 0xF18A0E88, 0xC30C, 0x11D0, {0x88, 0x15, 0x00, 0xA0, 0xC9, 0x06, 0xBE, 0xD8} };$/;"	v
GUID_NULL	compat/libusb-1.0/libusb/os/windows_usb.h	/^const GUID GUID_NULL = { 0x00000000, 0x0000, 0x0000, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} };$/;"	v
GUNLOCK	miner.h	760;"	d
GUNLOCK	miner.h	767;"	d
GetReply	driver-klondike.c	/^static KLIST *GetReply(struct cgpu_info *klncgpu, uint8_t cmd, uint8_t dev)$/;"	f	file:	signature:(struct cgpu_info *klncgpu, uint8_t cmd, uint8_t dev)
HANDLE_CTX	compat/libusb-1.0/libusb/libusbi.h	214;"	d
HASHFAST_H	driver-hashfast.h	12;"	d
HASHFAST_MINER_THREADS	driver-hashfast.h	35;"	d
HASHFAST_TIMEOUT_MS	usbutils.c	72;"	d	file:
HASHFAST_TIMEOUT_MS	usbutils.c	88;"	d	file:
HASHRATIO_LATENCY	driver-hashratio.c	479;"	d	file:
HASHRATIO_TIMEOUT_MS	usbutils.c	73;"	d	file:
HASHRATIO_TIMEOUT_MS	usbutils.c	89;"	d	file:
HASHTABLE_H	compat/jansson-2.6/src/hashtable.h	9;"	d
HASH_ADD	uthash.h	160;"	d
HASH_ADD_INT	uthash.h	260;"	d
HASH_ADD_KEYPTR	uthash.h	173;"	d
HASH_ADD_PTR	uthash.h	266;"	d
HASH_ADD_STR	uthash.h	254;"	d
HASH_ADD_TO_BKT	uthash.h	611;"	d
HASH_BER	uthash.h	355;"	d
HASH_BKT_CAPACITY_THRESH	uthash.h	89;"	d
HASH_BLOOM_ADD	uthash.h	127;"	d
HASH_BLOOM_ADD	uthash.h	136;"	d
HASH_BLOOM_BITLEN	uthash.h	108;"	d
HASH_BLOOM_BITSET	uthash.h	124;"	d
HASH_BLOOM_BITTEST	uthash.h	125;"	d
HASH_BLOOM_BYTELEN	uthash.h	109;"	d
HASH_BLOOM_BYTELEN	uthash.h	138;"	d
HASH_BLOOM_FREE	uthash.h	119;"	d
HASH_BLOOM_FREE	uthash.h	135;"	d
HASH_BLOOM_MAKE	uthash.h	110;"	d
HASH_BLOOM_MAKE	uthash.h	134;"	d
HASH_BLOOM_SIGNATURE	uthash.h	902;"	d
HASH_BLOOM_TEST	uthash.h	130;"	d
HASH_BLOOM_TEST	uthash.h	137;"	d
HASH_CLEAR	uthash.h	849;"	d
HASH_CNT	uthash.h	878;"	d
HASH_COUNT	uthash.h	877;"	d
HASH_DEL	uthash.h	270;"	d
HASH_DELETE	uthash.h	215;"	d
HASH_DEL_IN_BKT	uthash.h	625;"	d
HASH_EMIT_KEY	uthash.h	337;"	d
HASH_EMIT_KEY	uthash.h	344;"	d
HASH_EXPAND_BUCKETS	uthash.h	666;"	d
HASH_FCN	uthash.h	349;"	d
HASH_FCN	uthash.h	351;"	d
HASH_FIND	uthash.h	94;"	d
HASH_FIND_INT	uthash.h	258;"	d
HASH_FIND_IN_BKT	uthash.h	597;"	d
HASH_FIND_PTR	uthash.h	264;"	d
HASH_FIND_STR	uthash.h	252;"	d
HASH_FNV	uthash.h	377;"	d
HASH_FSCK	uthash.h	278;"	d
HASH_FSCK	uthash.h	330;"	d
HASH_INITIAL_NUM_BUCKETS	uthash.h	87;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	uthash.h	88;"	d
HASH_ITER	uthash.h	867;"	d
HASH_ITER	uthash.h	871;"	d
HASH_JEN	uthash.h	416;"	d
HASH_JEN_MIX	uthash.h	403;"	d
HASH_KEYCMP	uthash.h	594;"	d
HASH_MAKE_TABLE	uthash.h	141;"	d
HASH_MUR	uthash.h	554;"	d
HASH_OAT	uthash.h	387;"	d
HASH_OOPS	uthash.h	277;"	d
HASH_OVERHEAD	uthash.h	860;"	d
HASH_REPLACE	uthash.h	163;"	d
HASH_REPLACE_INT	uthash.h	262;"	d
HASH_REPLACE_PTR	uthash.h	268;"	d
HASH_REPLACE_STR	uthash.h	256;"	d
HASH_SAX	uthash.h	367;"	d
HASH_SELECT	uthash.h	811;"	d
HASH_SFH	uthash.h	468;"	d
HASH_SIGNATURE	uthash.h	901;"	d
HASH_SORT	uthash.h	718;"	d
HASH_SRT	uthash.h	719;"	d
HASH_TO_BKT	uthash.h	198;"	d
HAVE_AN_ASIC	api.c	35;"	d	file:
HAVE_AN_FPGA	api.c	39;"	d	file:
HAVE_GETTIMEOFDAY	compat/libusb-1.0/libusb/libusbi.h	239;"	d
HAVE_STRUCT_TIMESPEC	compat/libusb-1.0/libusb/os/threads_windows.h	47;"	d
HAVE_USBI_GETTIMEOFDAY	compat/libusb-1.0/libusb/libusbi.h	242;"	d
HAVE_USBI_GETTIMEOFDAY	compat/libusb-1.0/libusb/libusbi.h	246;"	d
HCD_PASS	compat/libusb-1.0/libusb/os/windows_usb.c	1176;"	d	file:
HEADER	driver-klondike.c	/^} HEADER;$/;"	t	typeref:struct:klondike_header	file:
HFA_CLOCK_DEFAULT	driver-hashfast.h	36;"	d
HFA_CLOCK_MAX	driver-hashfast.h	38;"	d
HFA_CLOCK_MAXDIFF	driver-hashfast.h	39;"	d
HFA_CLOCK_MIN	driver-hashfast.h	37;"	d
HFA_FAN_DEFAULT	driver-hashfast.h	43;"	d
HFA_FAN_MAX	driver-hashfast.h	44;"	d
HFA_FAN_MIN	driver-hashfast.h	45;"	d
HFA_GET_HEADER_BUFSIZE	driver-hashfast.c	250;"	d	file:
HFA_MAGIC_SETTINGS_VALUE	driver-hashfast.h	48;"	d
HFA_TEMP_HYSTERESIS	driver-hashfast.h	42;"	d
HFA_TEMP_OVERHEAT	driver-hashfast.h	40;"	d
HFA_TEMP_TARGET	driver-hashfast.h	41;"	d
HFA_VOLTAGE_MAX	driver-hashfast.h	46;"	d
HFA_VOLTAGE_MIN	driver-hashfast.h	47;"	d
HFD_ExpressAGX	hf_protocol.h	65;"	d
HFD_G1	hf_protocol.h	63;"	d
HFD_VC709	hf_protocol.h	64;"	d
HF_BROADCAST_ADDRESS	hf_protocol.h	20;"	d
HF_GWQ_ADDRESS	hf_protocol.h	21;"	d
HF_NONCE_SEARCH	hf_protocol.h	93;"	d
HF_NTIME_MASK	hf_protocol.h	92;"	d
HF_PREAMBLE	hf_protocol.h	19;"	d
HF_PROTOCOL_VERSION	hf_protocol.h	17;"	d
HF_SEQUENCE_DISTANCE	hf_protocol.h	52;"	d
HF_USB_CMD	driver-hashfast.c	145;"	d	file:
HF_USB_CMD_OFFSET	driver-hashfast.c	144;"	d	file:
HF_USB_PRODUCT_ID_G1	hf_protocol.h	89;"	d
HF_USB_VENDOR_ID	hf_protocol.h	88;"	d
HISTORY_SEC	driver-antrouter.c	154;"	d	file:
HISTORY_SEC	driver-bmsc.c	142;"	d	file:
HISTORY_SEC	driver-icarus.c	162;"	d	file:
HISTORY_TIME_S	driver-bab.c	492;"	d	file:
HIST_ITEM	driver-minion.c	/^} HIST_ITEM;$/;"	t	typeref:struct:hist_item	file:
HRTO_DEFAULT_FAN	driver-hashratio.h	31;"	d
HRTO_DEFAULT_FAN_MAX	driver-hashratio.h	33;"	d
HRTO_DEFAULT_FAN_MIN	driver-hashratio.h	32;"	d
HRTO_DEFAULT_FREQUENCY	driver-hashratio.h	35;"	d
HRTO_DEFAULT_FREQUENCY_MAX	driver-hashratio.h	37;"	d
HRTO_DEFAULT_FREQUENCY_MIN	driver-hashratio.h	36;"	d
HRTO_DEFAULT_MINERS	driver-hashratio.h	28;"	d
HRTO_DEFAULT_MINERS_PER_MODULAR	driver-hashratio.h	26;"	d
HRTO_DEFAULT_MODULARS	driver-hashratio.h	25;"	d
HRTO_FAN_COUNT	driver-hashratio.h	39;"	d
HRTO_GETS_ERROR	driver-hashratio.h	119;"	d
HRTO_GETS_OK	driver-hashratio.h	116;"	d
HRTO_GETS_RESTART	driver-hashratio.h	118;"	d
HRTO_GETS_TIMEOUT	driver-hashratio.h	117;"	d
HRTO_H1	driver-hashratio.h	43;"	d
HRTO_H2	driver-hashratio.h	44;"	d
HRTO_IO_SPEED	driver-hashratio.h	23;"	d
HRTO_MINER_THREADS	driver-hashratio.h	20;"	d
HRTO_PWM_MAX	driver-hashratio.h	30;"	d
HRTO_P_ACK	driver-hashratio.h	64;"	d
HRTO_P_ACKDETECT	driver-hashratio.h	68;"	d
HRTO_P_COINBASE	driver-hashratio.h	55;"	d
HRTO_P_COINBASE_SIZE	driver-hashratio.h	46;"	d
HRTO_P_COUNT	driver-hashratio.h	49;"	d
HRTO_P_DATA_LEN	driver-hashratio.h	50;"	d
HRTO_P_DETECT	driver-hashratio.h	52;"	d
HRTO_P_HEADER	driver-hashratio.h	57;"	d
HRTO_P_JOB_ID	driver-hashratio.h	54;"	d
HRTO_P_MERKLES	driver-hashratio.h	56;"	d
HRTO_P_MERKLES_COUNT	driver-hashratio.h	47;"	d
HRTO_P_NAK	driver-hashratio.h	65;"	d
HRTO_P_NONCE	driver-hashratio.h	66;"	d
HRTO_P_POLLING	driver-hashratio.h	58;"	d
HRTO_P_REQUIRE	driver-hashratio.h	60;"	d
HRTO_P_SET	driver-hashratio.h	61;"	d
HRTO_P_STATIC	driver-hashratio.h	53;"	d
HRTO_P_STATUS	driver-hashratio.h	67;"	d
HRTO_P_TARGET	driver-hashratio.h	59;"	d
HRTO_P_TEST	driver-hashratio.h	62;"	d
HRTO_P_TEST_RET	driver-hashratio.h	69;"	d
HRTO_READ_SIZE	driver-hashratio.h	114;"	d
HRTO_RESET_FAULT_DECISECONDS	driver-hashratio.h	22;"	d
HRTO_SEND_ERROR	driver-hashratio.h	122;"	d
HRTO_SEND_OK	driver-hashratio.h	121;"	d
HRTO_WRITE_SIZE	driver-hashratio.h	113;"	d
HSIZE	driver-minion.c	336;"	d	file:
HTAB_SIZE	compat/libusb-1.0/libusb/os/windows_usb.h	90;"	d
HUB_PASS	compat/libusb-1.0/libusb/os/windows_usb.c	1177;"	d	file:
HasOverlappedIoCompletedSync	compat/libusb-1.0/libusb/os/poll_windows.h	36;"	d
HighSpeed	compat/libusb-1.0/libusb/os/windows_usb.h	564;"	d
Hs	driver-antrouter.c	/^	double Hs;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
Hs	driver-bmsc.c	/^	double Hs;$/;"	m	struct:BMSC_INFO	file:	access:public
Hs	driver-icarus.c	/^	double Hs;$/;"	m	struct:ICARUS_INFO	file:	access:public
HubDescriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_HUB_DESCRIPTOR  HubDescriptor;$/;"	m	struct:USB_HUB_INFORMATION	access:public
HubInformation	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USB_HUB_INFORMATION  HubInformation;$/;"	m	union:USB_NODE_INFORMATION::__anon35	access:public
HubIs2xCapable	compat/libusb-1.0/libusb/os/windows_usb.h	/^  ULONG  HubIs2xCapable : 1;$/;"	m	struct:USB_HUB_CAPABILITIES	access:public
HubIsArmedWakeOnConnect	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsArmedWakeOnConnect:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
HubIsBusPowered	compat/libusb-1.0/libusb/os/windows_usb.h	/^	BOOLEAN  HubIsBusPowered;$/;"	m	struct:USB_HUB_INFORMATION	access:public
HubIsHighSpeed	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsHighSpeed:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
HubIsHighSpeedCapable	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsHighSpeedCapable:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
HubIsMultiTt	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsMultiTt:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
HubIsMultiTtCapable	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsMultiTtCapable:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
HubIsRoot	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsRoot:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
I2C_BUS	i2c-context.h	22;"	d
I2C_CONTEXT_H	i2c-context.h	2;"	d
ICARUS_BUF_SIZE	driver-icarus.c	56;"	d	file:
ICARUS_CMR2_CHECK	driver-icarus.c	366;"	d	file:
ICARUS_CMR2_CMD_FLASH	driver-icarus.c	363;"	d	file:
ICARUS_CMR2_CMD_SPEED	driver-icarus.c	362;"	d	file:
ICARUS_CMR2_DATA_FLASH_OFF	driver-icarus.c	364;"	d	file:
ICARUS_CMR2_DATA_FLASH_ON	driver-icarus.c	365;"	d	file:
ICARUS_CMR2_PREFIX	driver-icarus.c	361;"	d	file:
ICARUS_CMR2_SPEED_DEC	driver-icarus.c	358;"	d	file:
ICARUS_CMR2_SPEED_DEF	driver-icarus.c	355;"	d	file:
ICARUS_CMR2_SPEED_DEF_INT	driver-icarus.c	351;"	d	file:
ICARUS_CMR2_SPEED_FACTOR	driver-icarus.c	349;"	d	file:
ICARUS_CMR2_SPEED_FAIL	driver-icarus.c	359;"	d	file:
ICARUS_CMR2_SPEED_INC	driver-icarus.c	357;"	d	file:
ICARUS_CMR2_SPEED_MAX	driver-icarus.c	356;"	d	file:
ICARUS_CMR2_SPEED_MAX_INT	driver-icarus.c	352;"	d	file:
ICARUS_CMR2_SPEED_MIN	driver-icarus.c	354;"	d	file:
ICARUS_CMR2_SPEED_MIN_INT	driver-icarus.c	350;"	d	file:
ICARUS_CMR2_TIMEOUT	driver-icarus.c	81;"	d	file:
ICARUS_HISTORY	driver-icarus.c	/^struct ICARUS_HISTORY {$/;"	s	file:
ICARUS_HISTORY::finish	driver-icarus.c	/^	struct timeval finish;$/;"	m	struct:ICARUS_HISTORY	typeref:struct:ICARUS_HISTORY::timeval	file:	access:public
ICARUS_HISTORY::hash_count_max	driver-icarus.c	/^	uint32_t hash_count_max;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
ICARUS_HISTORY::hash_count_min	driver-icarus.c	/^	uint32_t hash_count_min;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
ICARUS_HISTORY::sumTi	driver-icarus.c	/^	double sumTi;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
ICARUS_HISTORY::sumXi	driver-icarus.c	/^	double sumXi;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
ICARUS_HISTORY::sumXi2	driver-icarus.c	/^	double sumXi2;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
ICARUS_HISTORY::sumXiTi	driver-icarus.c	/^	double sumXiTi;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
ICARUS_HISTORY::values	driver-icarus.c	/^	uint32_t values;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
ICARUS_INFO	driver-icarus.c	/^struct ICARUS_INFO {$/;"	s	file:
ICARUS_INFO::Hs	driver-icarus.c	/^	double Hs;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::W	driver-icarus.c	/^	double W;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::ant	driver-icarus.c	/^	bool ant;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::antworks	driver-icarus.c	/^	struct work **antworks;$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::work	file:	access:public
ICARUS_INFO::base_work	driver-icarus.c	/^	struct work *base_work; \/\/ For when we roll work$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::work	file:	access:public
ICARUS_INFO::baud	driver-icarus.c	/^	int baud;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::cmr2_speed	driver-icarus.c	/^	uint8_t cmr2_speed;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::count	driver-icarus.c	/^	int count;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::do_icarus_timing	driver-icarus.c	/^	bool do_icarus_timing;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::fail_time	driver-icarus.c	/^	int fail_time;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::failing	driver-icarus.c	/^	bool failing;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::flash_next_work	driver-icarus.c	/^	bool flash_next_work;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::fpga_count	driver-icarus.c	/^	int fpga_count;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::fullnonce	driver-icarus.c	/^	double fullnonce;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::g_work	driver-icarus.c	/^	struct work *g_work[MAX_CHIP_NUM][MAX_WORK_BUFFER_SIZE];$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::work	file:	access:public
ICARUS_INFO::golden_hashes	driver-icarus.c	/^	uint64_t golden_hashes;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::golden_tv	driver-icarus.c	/^	struct timeval golden_tv;$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::timeval	file:	access:public
ICARUS_INFO::hash_count_range	driver-icarus.c	/^	uint64_t hash_count_range;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::history	driver-icarus.c	/^	struct ICARUS_HISTORY history[INFO_HISTORY+1];$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::ICARUS_HISTORY	file:	access:public
ICARUS_INFO::history_count	driver-icarus.c	/^	uint64_t history_count;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::history_time	driver-icarus.c	/^	struct timeval history_time;$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::timeval	file:	access:public
ICARUS_INFO::ident	driver-icarus.c	/^	enum sub_ident ident;$/;"	m	struct:ICARUS_INFO	typeref:enum:ICARUS_INFO::sub_ident	file:	access:public
ICARUS_INFO::intinfo	driver-icarus.c	/^	int intinfo;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::last_nonce	driver-icarus.c	/^	uint32_t last_nonce[MAX_CHIP_NUM][MAX_WORK_BUFFER_SIZE];$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::lock	driver-icarus.c	/^	pthread_mutex_t lock;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::min_data_count	driver-icarus.c	/^	uint32_t min_data_count;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::nonce_mask	driver-icarus.c	/^	uint32_t nonce_mask;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::nonce_size	driver-icarus.c	/^	int nonce_size;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::nonces	driver-icarus.c	/^	int nonces;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::nonces_checked	driver-icarus.c	/^	uint64_t nonces_checked;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::nonces_correction	driver-icarus.c	/^	uint64_t nonces_correction[NONCE_CORRECTION_TIMES];$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::nonces_correction_tests	driver-icarus.c	/^	uint64_t nonces_correction_tests;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::nonces_correction_times	driver-icarus.c	/^	uint64_t nonces_correction_times;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::nonces_fail	driver-icarus.c	/^	uint64_t nonces_fail;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::read_time	driver-icarus.c	/^	int read_time;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::read_time_limit	driver-icarus.c	/^	int read_time_limit;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::rmdev	driver-icarus.c	/^	ROCKMINER_DEVICE_INFO rmdev;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::rock_init	driver-icarus.c	/^	char rock_init[64];$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::speed_next_work	driver-icarus.c	/^	bool speed_next_work;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::timeout	driver-icarus.c	/^	int timeout;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::timing_mode	driver-icarus.c	/^	enum timing_mode timing_mode;$/;"	m	struct:ICARUS_INFO	typeref:enum:ICARUS_INFO::timing_mode	file:	access:public
ICARUS_INFO::u3	driver-icarus.c	/^	bool u3;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::values	driver-icarus.c	/^	uint32_t values;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::work_division	driver-icarus.c	/^	int work_division;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_INFO::workid	driver-icarus.c	/^	int workid;$/;"	m	struct:ICARUS_INFO	file:	access:public
ICARUS_IO_SPEED	driver-icarus.c	54;"	d	file:
ICARUS_MIDSTATE_SIZE	driver-icarus.c	343;"	d	file:
ICARUS_READ_COUNT_MIN	driver-icarus.c	101;"	d	file:
ICARUS_READ_COUNT_TIMING	driver-icarus.c	93;"	d	file:
ICARUS_READ_REDUCE	driver-icarus.c	105;"	d	file:
ICARUS_READ_SIZE	driver-icarus.c	59;"	d	file:
ICARUS_READ_TIME	driver-icarus.c	73;"	d	file:
ICARUS_READ_TIME_LIMIT_MAX	driver-icarus.c	89;"	d	file:
ICARUS_REV3_HASH_TIME	driver-icarus.c	113;"	d	file:
ICARUS_TIMEOUT_MS	usbutils.c	61;"	d	file:
ICARUS_UNUSED_SIZE	driver-icarus.c	344;"	d	file:
ICARUS_WAIT_TIMEOUT	driver-icarus.c	79;"	d	file:
ICARUS_WORK	driver-icarus.c	/^struct ICARUS_WORK {$/;"	s	file:
ICARUS_WORK::check	driver-icarus.c	/^	uint8_t check;$/;"	m	struct:ICARUS_WORK	file:	access:public
ICARUS_WORK::cmd	driver-icarus.c	/^	uint8_t cmd;$/;"	m	struct:ICARUS_WORK	file:	access:public
ICARUS_WORK::data	driver-icarus.c	/^	uint8_t data;$/;"	m	struct:ICARUS_WORK	file:	access:public
ICARUS_WORK::id	driver-icarus.c	/^	uint8_t id; \/\/ Used only by ANT, otherwise unused by other icarus$/;"	m	struct:ICARUS_WORK	file:	access:public
ICARUS_WORK::midstate	driver-icarus.c	/^	uint8_t midstate[ICARUS_MIDSTATE_SIZE];$/;"	m	struct:ICARUS_WORK	file:	access:public
ICARUS_WORK::prefix	driver-icarus.c	/^	uint8_t prefix;$/;"	m	struct:ICARUS_WORK	file:	access:public
ICARUS_WORK::unused	driver-icarus.c	/^	uint8_t unused[ANT_UNUSED_SIZE];$/;"	m	struct:ICARUS_WORK	file:	access:public
ICARUS_WORK::work	driver-icarus.c	/^	uint8_t work[ICARUS_WORK_SIZE];$/;"	m	struct:ICARUS_WORK	file:	access:public
ICARUS_WORK_DATA_OFFSET	driver-icarus.c	347;"	d	file:
ICARUS_WORK_SIZE	driver-icarus.c	345;"	d	file:
ICA_NONCE_ERROR	driver-icarus.c	607;"	d	file:
ICA_NONCE_OK	driver-icarus.c	608;"	d	file:
ICA_NONCE_RESTART	driver-icarus.c	609;"	d	file:
ICA_NONCE_TIMEOUT	driver-icarus.c	610;"	d	file:
ICA_WAIT_TIMEOUT	driver-icarus.c	76;"	d	file:
IDEMPOTENT	ccan/compiler/compiler.h	73;"	d
IDEMPOTENT	ccan/compiler/compiler.h	75;"	d
IDENTITY	driver-klondike.c	/^} IDENTITY;$/;"	t	typeref:struct:klondike_id	file:
IDENT_AMU	usbutils.h	/^	IDENT_AMU,$/;"	e	enum:sub_ident
IDENT_ANU	usbutils.h	/^	IDENT_ANU,$/;"	e	enum:sub_ident
IDENT_AU3	usbutils.h	/^	IDENT_AU3,$/;"	e	enum:sub_ident
IDENT_AV2	usbutils.h	/^	IDENT_AV2,$/;"	e	enum:sub_ident
IDENT_AVA	usbutils.h	/^	IDENT_AVA,$/;"	e	enum:sub_ident
IDENT_BAJ	usbutils.h	/^	IDENT_BAJ,$/;"	e	enum:sub_ident
IDENT_BAL	usbutils.h	/^	IDENT_BAL,$/;"	e	enum:sub_ident
IDENT_BAM	usbutils.h	/^	IDENT_BAM,$/;"	e	enum:sub_ident
IDENT_BAS	usbutils.h	/^	IDENT_BAS,$/;"	e	enum:sub_ident
IDENT_BBF	usbutils.h	/^	IDENT_BBF,$/;"	e	enum:sub_ident
IDENT_BET	usbutils.h	/^	IDENT_BET,$/;"	e	enum:sub_ident
IDENT_BF1	usbutils.h	/^	IDENT_BF1,$/;"	e	enum:sub_ident
IDENT_BFL	usbutils.h	/^	IDENT_BFL,$/;"	e	enum:sub_ident
IDENT_BLT	usbutils.h	/^	IDENT_BLT,$/;"	e	enum:sub_ident
IDENT_BMA	usbutils.h	/^	IDENT_BMA,$/;"	e	enum:sub_ident
IDENT_BMM	usbutils.h	/^	IDENT_BMM,$/;"	e	enum:sub_ident
IDENT_BMS	usbutils.h	/^	IDENT_BMS,$/;"	e	enum:sub_ident
IDENT_BTB	usbutils.h	/^	IDENT_BTB,$/;"	e	enum:sub_ident
IDENT_BXF	usbutils.h	/^	IDENT_BXF,$/;"	e	enum:sub_ident
IDENT_BXM	usbutils.h	/^	IDENT_BXM,$/;"	e	enum:sub_ident
IDENT_CMR1	usbutils.h	/^	IDENT_CMR1,$/;"	e	enum:sub_ident
IDENT_CMR2	usbutils.h	/^	IDENT_CMR2,$/;"	e	enum:sub_ident
IDENT_CTA	usbutils.h	/^	IDENT_CTA,$/;"	e	enum:sub_ident
IDENT_DRB	usbutils.h	/^	IDENT_DRB,$/;"	e	enum:sub_ident
IDENT_HFA	usbutils.h	/^	IDENT_HFA,$/;"	e	enum:sub_ident
IDENT_HRO	usbutils.h	/^	IDENT_HRO,$/;"	e	enum:sub_ident
IDENT_ICA	usbutils.h	/^	IDENT_ICA,$/;"	e	enum:sub_ident
IDENT_KLN	usbutils.h	/^	IDENT_KLN,$/;"	e	enum:sub_ident
IDENT_LIN	usbutils.h	/^	IDENT_LIN,$/;"	e	enum:sub_ident
IDENT_LLT	usbutils.h	/^	IDENT_LLT,$/;"	e	enum:sub_ident
IDENT_MMQ	usbutils.h	/^	IDENT_MMQ,$/;"	e	enum:sub_ident
IDENT_NFU	usbutils.h	/^	IDENT_NFU,$/;"	e	enum:sub_ident
IDENT_OSM	usbutils.h	/^	IDENT_OSM$/;"	e	enum:sub_ident
IDENT_UNK	usbutils.h	/^	IDENT_UNK = 0,$/;"	e	enum:sub_ident
IDLE	driver-drillbit.h	/^  IDLE,            \/* Has no work *\/$/;"	e	enum:drillbit_chip_state
IDVENDOR_FTDI	usbutils.c	467;"	d	file:
ID_TIMEOUT	driver-drillbit.c	233;"	d	file:
IGNORE_SHORT_PACKETS	compat/libusb-1.0/libusb/os/windows_usb.h	554;"	d
INET_PTON	util.h	17;"	d
INET_PTON	util.h	43;"	d
INFO_HISTORY	driver-antrouter.c	166;"	d	file:
INFO_HISTORY	driver-bmsc.c	154;"	d	file:
INFO_HISTORY	driver-icarus.c	174;"	d	file:
INIT	api.c	/^static const char *INIT = "Initialising";$/;"	v	file:
INITLOCK	miner.h	761;"	d
INITLOCK	miner.h	768;"	d
INIT_LIST_HEAD	elist.h	23;"	d
INT16_C	lib/stdint.in.h	542;"	d
INT16_C	lib/stdint.in.h	544;"	d
INT16_MAX	lib/stdint.in.h	321;"	d
INT16_MAX	lib/stdint.in.h	324;"	d
INT16_MIN	lib/stdint.in.h	320;"	d
INT16_MIN	lib/stdint.in.h	323;"	d
INT32_C	lib/stdint.in.h	547;"	d
INT32_C	lib/stdint.in.h	549;"	d
INT32_MAX	lib/stdint.in.h	328;"	d
INT32_MAX	lib/stdint.in.h	331;"	d
INT32_MIN	lib/stdint.in.h	327;"	d
INT32_MIN	lib/stdint.in.h	330;"	d
INT64_C	lib/stdint.in.h	552;"	d
INT64_C	lib/stdint.in.h	555;"	d
INT64_C	lib/stdint.in.h	557;"	d
INT64_C	lib/stdint.in.h	559;"	d
INT64_MAX	lib/stdint.in.h	338;"	d
INT64_MIN	lib/stdint.in.h	337;"	d
INT8_C	lib/stdint.in.h	537;"	d
INT8_C	lib/stdint.in.h	539;"	d
INT8_MAX	lib/stdint.in.h	314;"	d
INT8_MAX	lib/stdint.in.h	317;"	d
INT8_MIN	lib/stdint.in.h	313;"	d
INT8_MIN	lib/stdint.in.h	316;"	d
INTERFACE_DESC_LENGTH	compat/libusb-1.0/libusb/descriptor.c	34;"	d	file:
INTERRUPT	usbutils.c	/^static const char *INTERRUPT = "Interrupt";$/;"	v	file:
INTINFO	usbutils.c	469;"	d	file:
INTMAX_C	lib/stdint.in.h	571;"	d
INTMAX_C	lib/stdint.in.h	573;"	d
INTMAX_C	lib/stdint.in.h	575;"	d
INTMAX_C	lib/stdint.in.h	577;"	d
INTMAX_MAX	lib/stdint.in.h	435;"	d
INTMAX_MAX	lib/stdint.in.h	438;"	d
INTMAX_MAX	lib/stdint.in.h	441;"	d
INTMAX_MIN	lib/stdint.in.h	434;"	d
INTMAX_MIN	lib/stdint.in.h	437;"	d
INTMAX_MIN	lib/stdint.in.h	440;"	d
INTPTR_MAX	lib/stdint.in.h	426;"	d
INTPTR_MAX	lib/stdint.in.h	429;"	d
INTPTR_MIN	lib/stdint.in.h	425;"	d
INTPTR_MIN	lib/stdint.in.h	428;"	d
INT_FAST16_MAX	lib/stdint.in.h	398;"	d
INT_FAST16_MAX	lib/stdint.in.h	401;"	d
INT_FAST16_MIN	lib/stdint.in.h	397;"	d
INT_FAST16_MIN	lib/stdint.in.h	400;"	d
INT_FAST32_MAX	lib/stdint.in.h	405;"	d
INT_FAST32_MAX	lib/stdint.in.h	408;"	d
INT_FAST32_MIN	lib/stdint.in.h	404;"	d
INT_FAST32_MIN	lib/stdint.in.h	407;"	d
INT_FAST64_MAX	lib/stdint.in.h	412;"	d
INT_FAST64_MAX	lib/stdint.in.h	415;"	d
INT_FAST64_MIN	lib/stdint.in.h	411;"	d
INT_FAST64_MIN	lib/stdint.in.h	414;"	d
INT_FAST8_MAX	lib/stdint.in.h	391;"	d
INT_FAST8_MAX	lib/stdint.in.h	394;"	d
INT_FAST8_MIN	lib/stdint.in.h	390;"	d
INT_FAST8_MIN	lib/stdint.in.h	393;"	d
INT_LEAST16_MAX	lib/stdint.in.h	359;"	d
INT_LEAST16_MAX	lib/stdint.in.h	362;"	d
INT_LEAST16_MIN	lib/stdint.in.h	358;"	d
INT_LEAST16_MIN	lib/stdint.in.h	361;"	d
INT_LEAST32_MAX	lib/stdint.in.h	366;"	d
INT_LEAST32_MAX	lib/stdint.in.h	369;"	d
INT_LEAST32_MIN	lib/stdint.in.h	365;"	d
INT_LEAST32_MIN	lib/stdint.in.h	368;"	d
INT_LEAST64_MAX	lib/stdint.in.h	373;"	d
INT_LEAST64_MAX	lib/stdint.in.h	376;"	d
INT_LEAST64_MIN	lib/stdint.in.h	372;"	d
INT_LEAST64_MIN	lib/stdint.in.h	375;"	d
INT_LEAST8_MAX	lib/stdint.in.h	352;"	d
INT_LEAST8_MAX	lib/stdint.in.h	355;"	d
INT_LEAST8_MIN	lib/stdint.in.h	351;"	d
INT_LEAST8_MIN	lib/stdint.in.h	354;"	d
INVALID_COMMAND	driver-bitfury.c	60;"	d	file:
INVALID_WINFD	compat/libusb-1.0/libusb/os/poll_windows.c	/^const struct winfd INVALID_WINFD = {-1, INVALID_HANDLE_VALUE, NULL, RW_NONE};$/;"	v	typeref:struct:winfd
INVINETADDR	util.h	15;"	d
INVINETADDR	util.h	39;"	d
INVOP	driver-bab.c	1345;"	d	file:
INVSOCK	api-example.c	36;"	d	file:
INVSOCK	api-example.c	49;"	d	file:
INVSOCK	util.h	14;"	d
INVSOCK	util.h	38;"	d
IN_FMT_FFL	logging.h	34;"	d
IOCTL_USBFS_BULK	compat/libusb-1.0/libusb/os/linux_usbfs.h	127;"	d
IOCTL_USBFS_CLAIMINTF	compat/libusb-1.0/libusb/os/linux_usbfs.h	136;"	d
IOCTL_USBFS_CLAIM_PORT	compat/libusb-1.0/libusb/os/linux_usbfs.h	145;"	d
IOCTL_USBFS_CLEAR_HALT	compat/libusb-1.0/libusb/os/linux_usbfs.h	142;"	d
IOCTL_USBFS_CONNECT	compat/libusb-1.0/libusb/os/linux_usbfs.h	144;"	d
IOCTL_USBFS_CONNECTINFO	compat/libusb-1.0/libusb/os/linux_usbfs.h	138;"	d
IOCTL_USBFS_CONTROL	compat/libusb-1.0/libusb/os/linux_usbfs.h	126;"	d
IOCTL_USBFS_DISCARDURB	compat/libusb-1.0/libusb/os/linux_usbfs.h	133;"	d
IOCTL_USBFS_DISCONNECT	compat/libusb-1.0/libusb/os/linux_usbfs.h	143;"	d
IOCTL_USBFS_GETDRIVER	compat/libusb-1.0/libusb/os/linux_usbfs.h	131;"	d
IOCTL_USBFS_GET_CAPABILITIES	compat/libusb-1.0/libusb/os/linux_usbfs.h	147;"	d
IOCTL_USBFS_HUB_PORTINFO	compat/libusb-1.0/libusb/os/linux_usbfs.h	140;"	d
IOCTL_USBFS_IOCTL	compat/libusb-1.0/libusb/os/linux_usbfs.h	139;"	d
IOCTL_USBFS_REAPURB	compat/libusb-1.0/libusb/os/linux_usbfs.h	134;"	d
IOCTL_USBFS_REAPURBNDELAY	compat/libusb-1.0/libusb/os/linux_usbfs.h	135;"	d
IOCTL_USBFS_RELEASEINTF	compat/libusb-1.0/libusb/os/linux_usbfs.h	137;"	d
IOCTL_USBFS_RELEASE_PORT	compat/libusb-1.0/libusb/os/linux_usbfs.h	146;"	d
IOCTL_USBFS_RESET	compat/libusb-1.0/libusb/os/linux_usbfs.h	141;"	d
IOCTL_USBFS_RESETEP	compat/libusb-1.0/libusb/os/linux_usbfs.h	128;"	d
IOCTL_USBFS_SETCONFIG	compat/libusb-1.0/libusb/os/linux_usbfs.h	130;"	d
IOCTL_USBFS_SETINTF	compat/libusb-1.0/libusb/os/linux_usbfs.h	129;"	d
IOCTL_USBFS_SUBMITURB	compat/libusb-1.0/libusb/os/linux_usbfs.h	132;"	d
IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION	compat/libusb-1.0/libusb/os/windows_usb.h	377;"	d
IOCTL_USB_GET_HUB_CAPABILITIES	compat/libusb-1.0/libusb/os/windows_usb.h	374;"	d
IOCTL_USB_GET_HUB_CAPABILITIES_EX	compat/libusb-1.0/libusb/os/windows_usb.h	371;"	d
IOCTL_USB_GET_NODE_CONNECTION_ATTRIBUTES	compat/libusb-1.0/libusb/os/windows_usb.h	389;"	d
IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX	compat/libusb-1.0/libusb/os/windows_usb.h	386;"	d
IOCTL_USB_GET_NODE_CONNECTION_NAME	compat/libusb-1.0/libusb/os/windows_usb.h	392;"	d
IOCTL_USB_GET_NODE_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	383;"	d
IOCTL_USB_GET_ROOT_HUB_NAME	compat/libusb-1.0/libusb/os/windows_usb.h	380;"	d
IOCTRL_LOG	driver-minion.c	1249;"	d	file:
IOSTAT	driver-minion.c	/^} IOSTAT;$/;"	t	typeref:struct:iostat	file:
IO_OBJECT_NULL	compat/libusb-1.0/libusb/os/darwin_usb.h	123;"	d
IO_STAT_NOW	driver-minion.c	709;"	d	file:
IO_STAT_NOW	driver-minion.c	808;"	d	file:
IO_STAT_STORE	driver-minion.c	710;"	d	file:
IO_STAT_STORE	driver-minion.c	809;"	d	file:
IPACCESS	api.c	/^struct IPACCESS {$/;"	s	file:
IPACCESS::group	api.c	/^	char group;$/;"	m	struct:IPACCESS	file:	access:public
IPACCESS::ip	api.c	/^	struct in6_addr ip;$/;"	m	struct:IPACCESS	typeref:struct:IPACCESS::in6_addr	file:	access:public
IPACCESS::mask	api.c	/^	struct in6_addr mask;$/;"	m	struct:IPACCESS	typeref:struct:IPACCESS::in6_addr	file:	access:public
IPV6_ADD_MEMBERSHIP	api.c	125;"	d	file:
IPV6_DROP_MEMBERSHIP	api.c	126;"	d	file:
ISJSON	api.c	/^static const char ISJSON = '{';$/;"	v	file:
ISOCHRONOUS_A_D	usbutils.c	/^static const char *ISOCHRONOUS_A_D = "Isochronous+Async+Data";$/;"	v	file:
ISOCHRONOUS_A_F	usbutils.c	/^static const char *ISOCHRONOUS_A_F = "Isochronous+Async+Feedback";$/;"	v	file:
ISOCHRONOUS_A_I	usbutils.c	/^static const char *ISOCHRONOUS_A_I = "Isochronous+Async+Implicit";$/;"	v	file:
ISOCHRONOUS_A_X	usbutils.c	/^static const char *ISOCHRONOUS_A_X = "Isochronous+Async+?";$/;"	v	file:
ISOCHRONOUS_D_D	usbutils.c	/^static const char *ISOCHRONOUS_D_D = "Isochronous+Adaptive+Data";$/;"	v	file:
ISOCHRONOUS_D_F	usbutils.c	/^static const char *ISOCHRONOUS_D_F = "Isochronous+Adaptive+Feedback";$/;"	v	file:
ISOCHRONOUS_D_I	usbutils.c	/^static const char *ISOCHRONOUS_D_I = "Isochronous+Adaptive+Implicit";$/;"	v	file:
ISOCHRONOUS_D_X	usbutils.c	/^static const char *ISOCHRONOUS_D_X = "Isochronous+Adaptive+?";$/;"	v	file:
ISOCHRONOUS_N_D	usbutils.c	/^static const char *ISOCHRONOUS_N_D = "Isochronous+None+Data";$/;"	v	file:
ISOCHRONOUS_N_F	usbutils.c	/^static const char *ISOCHRONOUS_N_F = "Isochronous+None+Feedback";$/;"	v	file:
ISOCHRONOUS_N_I	usbutils.c	/^static const char *ISOCHRONOUS_N_I = "Isochronous+None+Implicit";$/;"	v	file:
ISOCHRONOUS_N_X	usbutils.c	/^static const char *ISOCHRONOUS_N_X = "Isochronous+None+?";$/;"	v	file:
ISOCHRONOUS_S_D	usbutils.c	/^static const char *ISOCHRONOUS_S_D = "Isochronous+Sync+Data";$/;"	v	file:
ISOCHRONOUS_S_F	usbutils.c	/^static const char *ISOCHRONOUS_S_F = "Isochronous+Sync+Feedback";$/;"	v	file:
ISOCHRONOUS_S_I	usbutils.c	/^static const char *ISOCHRONOUS_S_I = "Isochronous+Sync+Implicit";$/;"	v	file:
ISOCHRONOUS_S_X	usbutils.c	/^static const char *ISOCHRONOUS_S_X = "Isochronous+Sync+?";$/;"	v	file:
ISOCHRONOUS_X	usbutils.c	/^static const char *ISOCHRONOUS_X = "Isochronous+?";$/;"	v	file:
ISPRIVGROUP	api.c	635;"	d	file:
ISSETC	fpgautils.c	253;"	d	file:
ISSETI	fpgautils.c	236;"	d	file:
ISSETL	fpgautils.c	268;"	d	file:
ISSETO	fpgautils.c	244;"	d	file:
IS_ADDR_READ	driver-minion.c	318;"	d	file:
IS_ADDR_WRITE	driver-minion.c	319;"	d	file:
IS_COMPILE_CONSTANT	ccan/compiler/compiler.h	189;"	d
IS_COMPILE_CONSTANT	ccan/compiler/compiler.h	192;"	d
IS_EPIN	compat/libusb-1.0/libusb/libusbi.h	219;"	d
IS_EPOUT	compat/libusb-1.0/libusb/libusbi.h	220;"	d
IS_RESULT	driver-minion.c	452;"	d	file:
IS_XFERIN	compat/libusb-1.0/libusb/libusbi.h	221;"	d
IS_XFEROUT	compat/libusb-1.0/libusb/libusbi.h	222;"	d
ITRANSFER_CTX	compat/libusb-1.0/libusb/libusbi.h	216;"	d
ITS_DEAD_JIM	driver-modminer.c	40;"	d	file:
Identity	driver-drillbit.c	/^} Identity;$/;"	t	typeref:struct:__anon6	file:
Inet_Pton	util.c	/^int Inet_Pton(int af, const char *src, void *dst)$/;"	f	signature:(int af, const char *src, void *dst)
Inet_Pton	util.h	/^	int Inet_Pton(int af, const char *src, void *dst);$/;"	p	signature:(int af, const char *src, void *dst)
Inet_Pton4	util.c	/^static int Inet_Pton4(const char *src, char *dst)$/;"	f	file:	signature:(const char *src, char *dst)
Inet_Pton6	util.c	/^static int Inet_Pton6(const char *src, char *dst)$/;"	f	file:	signature:(const char *src, char *dst)
InterfaceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	34;"	d
InterfaceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	40;"	d
InterfaceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	46;"	d
InterfaceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	52;"	d
InterfaceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	58;"	d
InterfaceInterfaceID	compat/libusb-1.0/libusb/os/darwin_usb.h	64;"	d
InterfaceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	35;"	d
InterfaceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	41;"	d
InterfaceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	47;"	d
InterfaceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	53;"	d
InterfaceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	59;"	d
InterfaceVersion	compat/libusb-1.0/libusb/os/darwin_usb.h	65;"	d
Interval	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR          Interval;$/;"	m	struct:__anon36	access:public
JANSSON_H	compat/jansson-2.6/src/jansson.h	9;"	d
JANSSON_MAJOR_VERSION	compat/jansson-2.6/src/jansson.h	23;"	d
JANSSON_MICRO_VERSION	compat/jansson-2.6/src/jansson.h	25;"	d
JANSSON_MINOR_VERSION	compat/jansson-2.6/src/jansson.h	24;"	d
JANSSON_PRIVATE_H	compat/jansson-2.6/src/jansson_private.h	9;"	d
JANSSON_VERSION	compat/jansson-2.6/src/jansson.h	28;"	d
JANSSON_VERSION_HEX	compat/jansson-2.6/src/jansson.h	32;"	d
JE	cgminer.c	/^static struct JE {$/;"	s	file:
JE::buf	cgminer.c	/^	char *buf;$/;"	m	struct:JE	file:	access:public
JE::next	cgminer.c	/^	struct JE *next;$/;"	m	struct:JE	typeref:struct:JE::JE	file:	access:public
JOBQUE	driver-klondike.c	/^} JOBQUE;$/;"	t	typeref:struct:jobque	file:
JOIN_CMD	api.c	138;"	d	file:
JP_ARRAYSIZE	driver-bflsc.c	1799;"	d	file:
JP_COMMAND	driver-bflsc.c	1794;"	d	file:
JP_JOBSARRY	driver-bflsc.c	1798;"	d	file:
JP_JOBSINARRY	driver-bflsc.c	1797;"	d	file:
JP_SIGNATURE	driver-bflsc.c	1796;"	d	file:
JP_STREAMLENGTH	driver-bflsc.c	1795;"	d	file:
JSON0	api.c	273;"	d	file:
JSON1	api.c	274;"	d	file:
JSON2	api.c	275;"	d	file:
JSON3	api.c	276;"	d	file:
JSON4	api.c	277;"	d	file:
JSON4_TRUNCATED	api.c	279;"	d	file:
JSON5	api.c	280;"	d	file:
JSON6	api.c	281;"	d	file:
JSON_ACTION	api.c	290;"	d	file:
JSON_ARRAY	compat/jansson-2.6/src/jansson.h	/^    JSON_ARRAY,$/;"	e	enum:__anon27
JSON_ASC	api.c	297;"	d	file:
JSON_ASCS	api.c	301;"	d	file:
JSON_BETWEEN_JOIN	api.c	316;"	d	file:
JSON_BYE	api.c	304;"	d	file:
JSON_CHECK	api.c	308;"	d	file:
JSON_CLOSE	api.c	306;"	d	file:
JSON_COMMAND	api.c	/^static const char *JSON_COMMAND = "command";$/;"	v	file:
JSON_COMPACT	compat/jansson-2.6/src/jansson.h	256;"	d
JSON_DEBUGSET	api.c	310;"	d	file:
JSON_DECODE_ANY	compat/jansson-2.6/src/jansson.h	241;"	d
JSON_DECODE_INT_AS_REAL	compat/jansson-2.6/src/jansson.h	242;"	d
JSON_DEVDETAILS	api.c	303;"	d	file:
JSON_DEVS	api.c	284;"	d	file:
JSON_DISABLE_EOF_CHECK	compat/jansson-2.6/src/jansson.h	240;"	d
JSON_ENCODE_ANY	compat/jansson-2.6/src/jansson.h	260;"	d
JSON_END	api.c	314;"	d	file:
JSON_END_TRUNCATED	api.c	315;"	d	file:
JSON_ENSURE_ASCII	compat/jansson-2.6/src/jansson.h	257;"	d
JSON_ERROR_SOURCE_LENGTH	compat/jansson-2.6/src/jansson.h	116;"	d
JSON_ERROR_TEXT_LENGTH	compat/jansson-2.6/src/jansson.h	115;"	d
JSON_ESCAPE_SLASH	compat/jansson-2.6/src/jansson.h	261;"	d
JSON_FALSE	compat/jansson-2.6/src/jansson.h	/^    JSON_FALSE,$/;"	e	enum:__anon27
JSON_INCLUDE_CONF	cgminer.c	458;"	d	file:
JSON_INDENT	compat/jansson-2.6/src/jansson.h	255;"	d
JSON_INTEGER	compat/jansson-2.6/src/jansson.h	/^    JSON_INTEGER,$/;"	e	enum:__anon27
JSON_INTEGER_FORMAT	compat/jansson-2.6/src/jansson.h	58;"	d
JSON_INTEGER_FORMAT	compat/jansson-2.6/src/jansson.h	60;"	d
JSON_INTEGER_FORMAT	compat/jansson-2.6/src/jansson.h	64;"	d
JSON_LCD	api.c	313;"	d	file:
JSON_LOADS	util.h	71;"	d
JSON_LOAD_ERROR	cgminer.c	459;"	d	file:
JSON_LOAD_ERROR_LEN	cgminer.c	460;"	d	file:
JSON_MAX_DEPTH	cgminer.c	461;"	d	file:
JSON_MAX_DEPTH_ERR	cgminer.c	462;"	d	file:
JSON_MINECOIN	api.c	309;"	d	file:
JSON_MINECONFIG	api.c	289;"	d	file:
JSON_MINESTATS	api.c	307;"	d	file:
JSON_NOTIFY	api.c	302;"	d	file:
JSON_NULL	compat/jansson-2.6/src/jansson.h	/^    JSON_NULL$/;"	e	enum:__anon27
JSON_OBJECT	compat/jansson-2.6/src/jansson.h	/^    JSON_OBJECT,$/;"	e	enum:__anon27
JSON_PARAMETER	api.c	/^static const char *JSON_PARAMETER = "parameter";$/;"	v	file:
JSON_PGA	api.c	293;"	d	file:
JSON_PGAS	api.c	300;"	d	file:
JSON_POOLS	api.c	285;"	d	file:
JSON_PRESERVE_ORDER	compat/jansson-2.6/src/jansson.h	259;"	d
JSON_REAL	compat/jansson-2.6/src/jansson.h	/^    JSON_REAL,$/;"	e	enum:__anon27
JSON_REJECT_DUPLICATES	compat/jansson-2.6/src/jansson.h	239;"	d
JSON_RESTART	api.c	305;"	d	file:
JSON_SETCONFIG	api.c	311;"	d	file:
JSON_SORT_KEYS	compat/jansson-2.6/src/jansson.h	258;"	d
JSON_START	api.c	283;"	d	file:
JSON_STATUS	api.c	287;"	d	file:
JSON_STRICT	compat/jansson-2.6/src/jansson.h	219;"	d
JSON_STRING	compat/jansson-2.6/src/jansson.h	/^    JSON_STRING,$/;"	e	enum:__anon27
JSON_SUMMARY	api.c	286;"	d	file:
JSON_TRUE	compat/jansson-2.6/src/jansson.h	/^    JSON_TRUE,$/;"	e	enum:__anon27
JSON_USBSTATS	api.c	312;"	d	file:
JSON_VALIDATE_ONLY	compat/jansson-2.6/src/jansson.h	218;"	d
JSON_VERSION	api.c	288;"	d	file:
JSON_WEB_ERROR	cgminer.c	463;"	d	file:
JUMPTABLE	usbutils.h	291;"	d
K1	driver-klondike.c	32;"	d	file:
K16	driver-klondike.c	33;"	d	file:
K64	driver-klondike.c	34;"	d	file:
KERNEL	compat/libusb-1.0/libusb/os/linux_netlink.c	43;"	d	file:
KLINE	driver-klondike.c	/^} KLINE;$/;"	t	typeref:struct:kline	file:
KLIST	driver-klondike.c	/^} KLIST;$/;"	t	typeref:struct:klist	file:
KLIST_FFL	klist.h	15;"	d
KLIST_FFL_ARGS	klist.h	18;"	d
KLIST_FFL_HERE	klist.h	16;"	d
KLIST_FFL_PASS	klist.h	17;"	d
KLIST_H	klist.h	11;"	d
KLN_CMD_ABORT	driver-klondike.c	41;"	d	file:
KLN_CMD_CONFIG	driver-klondike.c	42;"	d	file:
KLN_CMD_ENABLE	driver-klondike.c	43;"	d	file:
KLN_CMD_ENABLE_OFF	driver-klondike.c	49;"	d	file:
KLN_CMD_ENABLE_ON	driver-klondike.c	50;"	d	file:
KLN_CMD_IDENT	driver-klondike.c	44;"	d	file:
KLN_CMD_NONCE	driver-klondike.c	45;"	d	file:
KLN_CMD_STATUS	driver-klondike.c	46;"	d	file:
KLN_CMD_WORK	driver-klondike.c	47;"	d	file:
KLN_COOLED_DOWN	driver-klondike.c	64;"	d	file:
KLN_ISS_IGNORE	driver-klondike.c	80;"	d	file:
KLN_KILLWORK_TEMP	driver-klondike.c	63;"	d	file:
KLONDIKE_TIMEOUT_MS	usbutils.c	70;"	d	file:
KLONDIKE_TIMEOUT_MS	usbutils.c	86;"	d	file:
KNAME_RANGE	driver-bitforce.c	66;"	d	file:
KNAME_WORK	driver-bitforce.c	65;"	d	file:
KNC_ACCEPTED	knc-asic.h	67;"	d
KNC_ASIC_ACK_ACCEPT	knc-asic.h	15;"	d
KNC_ASIC_ACK_CRC	knc-asic.h	14;"	d
KNC_ASIC_ACK_MASK	knc-asic.h	16;"	d
KNC_ASIC_ACK_MATCH	knc-asic.h	17;"	d
KNC_ASIC_CMD_GETINFO	knc-asic.h	7;"	d
KNC_ASIC_CMD_HALT	knc-asic.h	10;"	d
KNC_ASIC_CMD_REPORT	knc-asic.h	11;"	d
KNC_ASIC_CMD_SETWORK	knc-asic.h	8;"	d
KNC_ASIC_CMD_SETWORK_CLEAN	knc-asic.h	9;"	d
KNC_ASIC_VERSION_JUPITER	knc-asic.h	20;"	d
KNC_ASIC_VERSION_NEPTUNE	knc-asic.h	21;"	d
KNC_COUNT_UNIT	driver-knc.c	678;"	d	file:
KNC_ERR_ACK	knc-asic.h	69;"	d
KNC_ERR_CRC	knc-asic.h	68;"	d
KNC_ERR_CRCACK	knc-asic.h	70;"	d
KNC_ERR_MASK	knc-asic.h	72;"	d
KNC_ERR_UNAVAIL	knc-asic.h	71;"	d
KNC_INFO	driver-knc.c	/^				KNC_INFO$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
KNC_IS_ERROR	knc-asic.h	73;"	d
KNC_MAX_ASICS	knc-asic.h	25;"	d
KNC_MAX_CORES_PER_DIE	knc-asic.h	24;"	d
KNC_NONCES_PER_REPORT	knc-asic.h	41;"	d
KNC_NO_RESPONSE	driver-knc.c	/^				KNC_NO_RESPONSE,$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
KNC_REPORT	driver-knc.c	/^				KNC_REPORT,$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
KNC_SETWORK	driver-knc.c	/^				KNC_SETWORK,$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
KNC_SPI_BUFFERS	driver-knc.c	98;"	d	file:
KNC_SPI_DONE	driver-knc.c	/^			KNC_SPI_DONE$/;"	e	enum:knc_state::knc_spi_buffer::__anon56	file:
KNC_SPI_IDLE	driver-knc.c	/^			KNC_SPI_IDLE=0,$/;"	e	enum:knc_state::knc_spi_buffer::__anon56	file:
KNC_SPI_PENDING	driver-knc.c	/^			KNC_SPI_PENDING,$/;"	e	enum:knc_state::knc_spi_buffer::__anon56	file:
KNC_UNKNOWN	driver-knc.c	/^				KNC_UNKNOWN = 0,$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
KNC_VERSION_JUPITER	knc-asic.h	/^		KNC_VERSION_JUPITER,$/;"	e	enum:knc_die_info::__anon58
KNC_VERSION_NEPTUNE	knc-asic.h	/^		KNC_VERSION_NEPTUNE$/;"	e	enum:knc_die_info::__anon58
KNC_VERSION_UNKNOWN	knc-asic.h	/^		KNC_VERSION_UNKNOWN = 0,$/;"	e	enum:knc_die_info::__anon58
KSENDHD	driver-klondike.c	124;"	d	file:
K_2	driver-klondike.c	105;"	d	file:
K_4	driver-klondike.c	108;"	d	file:
K_HASHCLOCK	driver-klondike.c	117;"	d	file:
K_HASHCOUNT	driver-klondike.c	114;"	d	file:
K_ITEM	klist.h	/^} K_ITEM;$/;"	t	typeref:struct:k_item
K_LIST	klist.h	/^} K_LIST;$/;"	t	typeref:struct:k_list
K_MAXCOUNT	driver-klondike.c	115;"	d	file:
K_NONCE	driver-klondike.c	116;"	d	file:
K_RLOCK	klist.h	61;"	d
K_RUNLOCK	klist.h	62;"	d
K_SERIAL	driver-klondike.c	113;"	d	file:
K_STORE	klist.h	54;"	d
K_WLOCK	klist.h	59;"	d
K_WUNLOCK	klist.h	60;"	d
LANCELOT_HASH_TIME	driver-antrouter.c	110;"	d	file:
LANCELOT_HASH_TIME	driver-bmsc.c	98;"	d	file:
LANCELOT_HASH_TIME	driver-icarus.c	114;"	d	file:
LATENCY_STD	usbutils.h	203;"	d
LATENCY_UNUSED	usbutils.h	202;"	d
LATE_UPDATE_LIMIT	driver-klondike.c	89;"	d	file:
LATE_UPDATE_MS	driver-klondike.c	86;"	d	file:
LATE_UPDATE_NODEV_MS	driver-klondike.c	95;"	d	file:
LATE_UPDATE_SLEEP_MS	driver-klondike.c	92;"	d	file:
LFSTR	driver-bflsc.h	14;"	d
LIBBITFURY_H	libbitfury.h	11;"	d
LIBUSBI_H	compat/libusb-1.0/libusb/libusbi.h	22;"	d
LIBUSB_5GBPS_OPERATION	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_5GBPS_OPERATION      = 8,$/;"	e	enum:libusb_supported_speed
LIBUSB_CALL	compat/libusb-1.0/libusb/libusb.h	103;"	d
LIBUSB_CALL	compat/libusb-1.0/libusb/libusb.h	105;"	d
LIBUSB_CAP_HAS_CAPABILITY	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CAP_HAS_CAPABILITY = 0,$/;"	e	enum:libusb_capability
LIBUSB_CAP_HAS_HOTPLUG	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CAP_HAS_HOTPLUG    = 1,$/;"	e	enum:libusb_capability
LIBUSB_CLASS_APPLICATION	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_APPLICATION = 0xfe,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_AUDIO	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_AUDIO = 1,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_COMM	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_COMM = 2,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_CONTENT_SECURITY	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_CONTENT_SECURITY = 0x0d,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_DATA	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_DATA = 10,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_DIAGNOSTIC_DEVICE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_DIAGNOSTIC_DEVICE = 0xdc,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_HID	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_HID = 3,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_HUB	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_HUB = 9,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_IMAGE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_IMAGE = 6,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_MASS_STORAGE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_MASS_STORAGE = 8,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PERSONAL_HEALTHCARE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_PERSONAL_HEALTHCARE = 0x0f,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PER_INTERFACE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_PER_INTERFACE = 0,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PHYSICAL	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_PHYSICAL = 5,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PRINTER	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_PRINTER = 7,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PTP	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_PTP = 6, \/* legacy name from libusb-0.1 usb.h *\/$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_SMART_CARD	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_SMART_CARD = 0x0b,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_VENDOR_SPEC	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_VENDOR_SPEC = 0xff$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_VIDEO	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_VIDEO = 0x0e,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_WIRELESS	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_CLASS_WIRELESS = 0xe0,$/;"	e	enum:libusb_class_code
LIBUSB_CONTROL_SETUP_SIZE	compat/libusb-1.0/libusb/libusb.h	784;"	d
LIBUSB_DARWIN_H	compat/libusb-1.0/libusb/os/darwin_usb.h	21;"	d
LIBUSB_DT_BOS	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_BOS = 0x0f,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_BOS_MAX_SIZE	compat/libusb-1.0/libusb/libusb.h	256;"	d
LIBUSB_DT_BOS_SIZE	compat/libusb-1.0/libusb/libusb.h	253;"	d
LIBUSB_DT_CONFIG	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_CONFIG = 0x02,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_CONFIG_SIZE	compat/libusb-1.0/libusb/libusb.h	247;"	d
LIBUSB_DT_DEVICE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_DEVICE = 0x01,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_DEVICE_CAPABILITY	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_DEVICE_CAPABILITY = 0x10,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_DEVICE_SIZE	compat/libusb-1.0/libusb/libusb.h	246;"	d
LIBUSB_DT_ENDPOINT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_ENDPOINT = 0x05,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_ENDPOINT_AUDIO_SIZE	compat/libusb-1.0/libusb/libusb.h	250;"	d
LIBUSB_DT_ENDPOINT_SIZE	compat/libusb-1.0/libusb/libusb.h	249;"	d
LIBUSB_DT_HID	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_HID = 0x21,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_HUB	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_HUB = 0x29,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_HUB_NONVAR_SIZE	compat/libusb-1.0/libusb/libusb.h	251;"	d
LIBUSB_DT_INTERFACE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_INTERFACE = 0x04,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_INTERFACE_SIZE	compat/libusb-1.0/libusb/libusb.h	248;"	d
LIBUSB_DT_PHYSICAL	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_PHYSICAL = 0x23,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_REPORT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_REPORT = 0x22,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_SS_ENDPOINT_COMPANION	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_SS_ENDPOINT_COMPANION = 0x30$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_SS_ENDPOINT_COMPANION_SIZE	compat/libusb-1.0/libusb/libusb.h	252;"	d
LIBUSB_DT_STRING	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_DT_STRING = 0x03,$/;"	e	enum:libusb_descriptor_type
LIBUSB_ENDPOINT_ADDRESS_MASK	compat/libusb-1.0/libusb/libusb.h	260;"	d
LIBUSB_ENDPOINT_DIR_MASK	compat/libusb-1.0/libusb/libusb.h	261;"	d
LIBUSB_ENDPOINT_IN	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ENDPOINT_IN = 0x80,$/;"	e	enum:libusb_endpoint_direction
LIBUSB_ENDPOINT_OUT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ENDPOINT_OUT = 0x00$/;"	e	enum:libusb_endpoint_direction
LIBUSB_ERROR_ACCESS	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_ACCESS = -3,$/;"	e	enum:libusb_error
LIBUSB_ERROR_BUSY	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_BUSY = -6,$/;"	e	enum:libusb_error
LIBUSB_ERROR_INTERRUPTED	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_INTERRUPTED = -10,$/;"	e	enum:libusb_error
LIBUSB_ERROR_INVALID_PARAM	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_INVALID_PARAM = -2,$/;"	e	enum:libusb_error
LIBUSB_ERROR_IO	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_IO = -1,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NOT_FOUND	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_NOT_FOUND = -5,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NOT_SUPPORTED	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_NOT_SUPPORTED = -12,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NO_DEVICE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_NO_DEVICE = -4,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NO_MEM	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_NO_MEM = -11,$/;"	e	enum:libusb_error
LIBUSB_ERROR_OTHER	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_OTHER = -99,$/;"	e	enum:libusb_error
LIBUSB_ERROR_OVERFLOW	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_OVERFLOW = -8,$/;"	e	enum:libusb_error
LIBUSB_ERROR_PIPE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_PIPE = -9,$/;"	e	enum:libusb_error
LIBUSB_ERROR_TIMEOUT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ERROR_TIMEOUT = -7,$/;"	e	enum:libusb_error
LIBUSB_FULL_SPEED_OPERATION	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_FULL_SPEED_OPERATION = 2,$/;"	e	enum:libusb_supported_speed
LIBUSB_GETTIMEOFDAY_WIN32	compat/libusb-1.0/libusb/libusbi.h	241;"	d
LIBUSB_H	compat/libusb-1.0/libusb/libusb.h	24;"	d
LIBUSB_HIGH_SPEED_OPERATION	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_HIGH_SPEED_OPERATION = 4,$/;"	e	enum:libusb_supported_speed
LIBUSB_HOTPLUG_ENUMERATE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_HOTPLUG_ENUMERATE = 1,$/;"	e	enum:__anon41
LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED = 0x01,$/;"	e	enum:__anon42
LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT    = 0x02,$/;"	e	enum:__anon42
LIBUSB_HOTPLUG_MATCH_ANY	compat/libusb-1.0/libusb/libusb.h	1707;"	d
LIBUSB_ISO_SYNC_TYPE_ADAPTIVE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_ADAPTIVE = 2,$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_SYNC_TYPE_ASYNC	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_ASYNC = 1,$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_SYNC_TYPE_MASK	compat/libusb-1.0/libusb/libusb.h	372;"	d
LIBUSB_ISO_SYNC_TYPE_NONE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_NONE = 0,$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_SYNC_TYPE_SYNC	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_SYNC = 3$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_USAGE_TYPE_DATA	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ISO_USAGE_TYPE_DATA = 0,$/;"	e	enum:libusb_iso_usage_type
LIBUSB_ISO_USAGE_TYPE_FEEDBACK	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ISO_USAGE_TYPE_FEEDBACK = 1,$/;"	e	enum:libusb_iso_usage_type
LIBUSB_ISO_USAGE_TYPE_IMPLICIT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_ISO_USAGE_TYPE_IMPLICIT = 2,$/;"	e	enum:libusb_iso_usage_type
LIBUSB_ISO_USAGE_TYPE_MASK	compat/libusb-1.0/libusb/libusb.h	393;"	d
LIBUSB_LOW_SPEED_OPERATION	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_LOW_SPEED_OPERATION  = 1,$/;"	e	enum:libusb_supported_speed
LIBUSB_LPM_SUPPORT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_LPM_SUPPORT = 2,$/;"	e	enum:libusb_capability_attributes
LIBUSB_MAJOR	compat/libusb-1.0/libusb/version.h	3;"	d
LIBUSB_MICRO	compat/libusb-1.0/libusb/version.h	9;"	d
LIBUSB_MINOR	compat/libusb-1.0/libusb/version.h	6;"	d
LIBUSB_NANO	compat/libusb-1.0/libusb/version.h	13;"	d
LIBUSB_POLL_POSIX_H	compat/libusb-1.0/libusb/os/poll_posix.h	2;"	d
LIBUSB_RC	compat/libusb-1.0/libusb/version.h	17;"	d
LIBUSB_RECIPIENT_DEVICE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_RECIPIENT_DEVICE = 0x00,$/;"	e	enum:libusb_request_recipient
LIBUSB_RECIPIENT_ENDPOINT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_RECIPIENT_ENDPOINT = 0x02,$/;"	e	enum:libusb_request_recipient
LIBUSB_RECIPIENT_INTERFACE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_RECIPIENT_INTERFACE = 0x01,$/;"	e	enum:libusb_request_recipient
LIBUSB_RECIPIENT_OTHER	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_RECIPIENT_OTHER = 0x03,$/;"	e	enum:libusb_request_recipient
LIBUSB_REQUEST_CLEAR_FEATURE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_CLEAR_FEATURE = 0x01,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_CONFIGURATION	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_GET_CONFIGURATION = 0x08,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_DESCRIPTOR	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_GET_DESCRIPTOR = 0x06,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_INTERFACE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_GET_INTERFACE = 0x0A,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_STATUS	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_GET_STATUS = 0x00,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_ADDRESS	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_SET_ADDRESS = 0x05,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_CONFIGURATION	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_SET_CONFIGURATION = 0x09,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_DESCRIPTOR	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_SET_DESCRIPTOR = 0x07,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_FEATURE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_SET_FEATURE = 0x03,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_INTERFACE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_SET_INTERFACE = 0x0B,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SYNCH_FRAME	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_SYNCH_FRAME = 0x0C,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_TYPE_CLASS	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_CLASS = (0x01 << 5),$/;"	e	enum:libusb_request_type
LIBUSB_REQUEST_TYPE_RESERVED	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_RESERVED = (0x03 << 5)$/;"	e	enum:libusb_request_type
LIBUSB_REQUEST_TYPE_STANDARD	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_STANDARD = (0x00 << 5),$/;"	e	enum:libusb_request_type
LIBUSB_REQUEST_TYPE_VENDOR	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_VENDOR = (0x02 << 5),$/;"	e	enum:libusb_request_type
LIBUSB_SPEED_FULL	compat/libusb-1.0/libusb/libusb.h	/^    LIBUSB_SPEED_FULL = 2,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_HIGH	compat/libusb-1.0/libusb/libusb.h	/^    LIBUSB_SPEED_HIGH = 3,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_LOW	compat/libusb-1.0/libusb/libusb.h	/^    LIBUSB_SPEED_LOW = 1,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_SUPER	compat/libusb-1.0/libusb/libusb.h	/^    LIBUSB_SPEED_SUPER = 4,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_UNKNOWN	compat/libusb-1.0/libusb/libusb.h	/^    LIBUSB_SPEED_UNKNOWN = 0,$/;"	e	enum:libusb_speed
LIBUSB_SS_USB_CAP_TYPE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_SS_USB_CAP_TYPE  = 3,$/;"	e	enum:libusb_capability_type
LIBUSB_SS_USB_DEVICE_CAPABILITY_SIZE	compat/libusb-1.0/libusb/libusb.h	255;"	d
LIBUSB_SUCCESS	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_SUCCESS = 0,$/;"	e	enum:libusb_error
LIBUSB_THREADS_POSIX_H	compat/libusb-1.0/libusb/os/threads_posix.h	22;"	d
LIBUSB_THREADS_WINDOWS_H	compat/libusb-1.0/libusb/os/threads_windows.h	22;"	d
LIBUSB_TRANSFER_ADD_ZERO_PACKET	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_ADD_ZERO_PACKET = 1 << 3,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_CANCELLED	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_CANCELLED,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_COMPLETED	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_COMPLETED,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_ERROR	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_ERROR,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_FREE_BUFFER	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_FREE_BUFFER = 1<<1,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_FREE_TRANSFER	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_FREE_TRANSFER = 1<<2,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_NO_DEVICE	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_NO_DEVICE,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_OVERFLOW	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_OVERFLOW,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_SHORT_NOT_OK	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_SHORT_NOT_OK = 1<<0,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_STALL	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_STALL,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_TIMED_OUT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_TIMED_OUT,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_TO_USBI_TRANSFER	compat/libusb-1.0/libusb/libusbi.h	419;"	d
LIBUSB_TRANSFER_TYPE_BULK	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_BULK = 2,$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_CONTROL	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_CONTROL = 0,$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_INTERRUPT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_INTERRUPT = 3$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_ISOCHRONOUS	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_ISOCHRONOUS = 1,$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_MASK	compat/libusb-1.0/libusb/libusb.h	275;"	d
LIBUSB_USBFS_H	compat/libusb-1.0/libusb/os/linux_usbfs.h	22;"	d
LIBUSB_USB_2_0_EXTENSION_DEVICE_CAPABILITY_SIZE	compat/libusb-1.0/libusb/libusb.h	254;"	d
LIBUSB_USB_CAP_TYPE_EXT	compat/libusb-1.0/libusb/libusb.h	/^	LIBUSB_USB_CAP_TYPE_EXT = 2,$/;"	e	enum:libusb_capability_type
LIFE_DEAD	miner.h	/^	LIFE_DEAD,$/;"	e	enum:alive
LIFE_INIT	miner.h	/^	LIFE_INIT,$/;"	e	enum:alive
LIFE_NOSTART	miner.h	/^	LIFE_NOSTART,$/;"	e	enum:alive
LIFE_SICK	miner.h	/^	LIFE_SICK,$/;"	e	enum:alive
LIFE_WELL	miner.h	/^	LIFE_WELL,$/;"	e	enum:alive
LIMIT_HIST_ITEMS	driver-minion.c	586;"	d	file:
LIMIT_NITEMS	driver-bab.c	304;"	d	file:
LIMIT_PERF_ITEMS	driver-minion.c	687;"	d	file:
LIMIT_RES_ITEMS	driver-minion.c	578;"	d	file:
LIMIT_RITEMS	driver-bab.c	292;"	d	file:
LIMIT_SBITEMS	api.c	671;"	d	file:
LIMIT_SITEMS	driver-bab.c	277;"	d	file:
LIMIT_TASK_ITEMS	driver-minion.c	554;"	d	file:
LIMIT_WITEMS	driver-bab.c	264;"	d	file:
LIMIT_WORK_ITEMS	driver-minion.c	530;"	d	file:
LIMIT_XFF_ITEMS	driver-minion.c	695;"	d	file:
LINUX	miner.h	87;"	d
LIST_HEAD	elist.h	20;"	d
LIST_HEAD_INIT	elist.h	18;"	d
LIST_SEPARATOR	compat/libusb-1.0/libusb/os/windows_usb.h	89;"	d
LOCAL_swap32be	driver-spondoolies-sp10.c	48;"	d	file:
LOCAL_swap32be	driver-spondoolies-sp10.c	53;"	d	file:
LOCAL_swap32be	driver-spondoolies-sp30.c	48;"	d	file:
LOCAL_swap32be	driver-spondoolies-sp30.c	53;"	d	file:
LOCAL_swap32le	driver-spondoolies-sp10.c	50;"	d	file:
LOCAL_swap32le	driver-spondoolies-sp10.c	55;"	d	file:
LOCAL_swap32le	driver-spondoolies-sp30.c	50;"	d	file:
LOCAL_swap32le	driver-spondoolies-sp30.c	55;"	d	file:
LOCKINFO	api.c	/^} LOCKINFO;$/;"	t	typeref:struct:lockinfo	file:
LOCKLINE	api.c	/^} LOCKLINE;$/;"	t	typeref:struct:lockline	file:
LOCKLIST	api.c	/^} LOCKLIST;$/;"	t	typeref:struct:locklist	file:
LOCKMSG	api.c	1538;"	d	file:
LOCKMSGFFL	api.c	1540;"	d	file:
LOCKMSGFLUSH	api.c	1541;"	d	file:
LOCKMSGMORE	api.c	1539;"	d	file:
LOCKSTAT	api.c	/^} LOCKSTAT;$/;"	t	typeref:struct:lockstat	file:
LOCK_FMT_FFL	api.c	1536;"	d	file:
LOCK_TRACKING	miner.h	740;"	d
LOGBUFSIZ	logging.h	29;"	d
LOG_DEBUG	logging.h	/^	LOG_DEBUG,$/;"	e	enum:__anon50
LOG_ERR	logging.h	/^	LOG_ERR,$/;"	e	enum:__anon50
LOG_INFO	logging.h	/^	LOG_INFO,$/;"	e	enum:__anon50
LOG_LEVEL_DEBUG	compat/libusb-1.0/libusb/libusbi.h	/^	LOG_LEVEL_DEBUG,$/;"	e	enum:usbi_log_level
LOG_LEVEL_ERROR	compat/libusb-1.0/libusb/libusbi.h	/^	LOG_LEVEL_ERROR,$/;"	e	enum:usbi_log_level
LOG_LEVEL_INFO	compat/libusb-1.0/libusb/libusbi.h	/^	LOG_LEVEL_INFO,$/;"	e	enum:usbi_log_level
LOG_LEVEL_WARNING	compat/libusb-1.0/libusb/libusbi.h	/^	LOG_LEVEL_WARNING,$/;"	e	enum:usbi_log_level
LOG_NOTICE	logging.h	/^	LOG_NOTICE,$/;"	e	enum:__anon50
LOG_WARNING	logging.h	/^	LOG_WARNING,$/;"	e	enum:__anon50
LONG_NEEDLE_THRESHOLD	lib/memmem.c	76;"	d	file:
LONG_NEEDLE_THRESHOLD	lib/str-two-way.h	66;"	d
LONG_NEEDLE_THRESHOLD	lib/str-two-way.h	68;"	d
LOOPBACK_END	driver-bitfury.c	75;"	d	file:
LOOP_BREAK	compat/libusb-1.0/libusb/os/windows_usb.c	46;"	d	file:
LOOP_CHECK	compat/libusb-1.0/libusb/os/windows_usb.c	45;"	d	file:
LowSpeed	compat/libusb-1.0/libusb/os/windows_usb.h	562;"	d
Lval	miner.php	/^		$Lval = '';$/;"	v
MAJ	sha2.h	47;"	d
MAX	compat/libusb-1.0/libusb/libusbi.h	118;"	d
MAX	lib/str-two-way.h	452;"	d
MAX	lib/str-two-way.h	72;"	d
MAX	miner.h	239;"	d
MAXIMUM_TRANSFER_SIZE	compat/libusb-1.0/libusb/os/windows_usb.h	558;"	d
MAXRECEIVESIZE	API.java	/^	static private final int MAXRECEIVESIZE = 65535;$/;"	f	class:API	file:	access:private
MAX_ASICS	driver-knc.c	29;"	d	file:
MAX_ASICS	knc-transport.h	12;"	d
MAX_BUF_LEN	compat/jansson-2.6/src/load.c	1024;"	d	file:
MAX_BULK_BUFFER_LENGTH	compat/libusb-1.0/libusb/os/linux_usbfs.h	85;"	d
MAX_BYTES_IN_SPI_XSFER	knc-transport.h	17;"	d
MAX_CHAINS_PER_BOARD	A1-common.h	71;"	d
MAX_CHAIN_LENGTH	A1-common.h	22;"	d
MAX_CHIP_NUM	driver-icarus.c	199;"	d	file:
MAX_CMD_LENGTH	A1-common.h	29;"	d
MAX_CORES_PER_DIE	driver-knc.c	31;"	d	file:
MAX_CTRL_BUFFER_LENGTH	compat/libusb-1.0/libusb/os/linux_usbfs.h	86;"	d
MAX_CTRL_BUFFER_LENGTH	compat/libusb-1.0/libusb/os/windows_usb.h	80;"	d
MAX_DEVICES	miner.h	1183;"	d
MAX_DEVICE_NUM	driver-icarus.c	197;"	d	file:
MAX_ENUM_GUIDS	compat/libusb-1.0/libusb/os/windows_usb.c	1174;"	d	file:
MAX_FDS	compat/libusb-1.0/libusb/os/poll_windows.h	48;"	d
MAX_GUID_STRING_LENGTH	compat/libusb-1.0/libusb/os/windows_usb.h	83;"	d
MAX_INTEGER_STR_LENGTH	compat/jansson-2.6/src/dump.c	22;"	d	file:
MAX_ISO_BUFFER_LENGTH	compat/libusb-1.0/libusb/os/linux_usbfs.h	84;"	d
MAX_JOBS_IN_MINERGATE	driver-spondoolies-sp10.h	30;"	d
MAX_JOBS_PENDING_IN_MINERGATE_SP30	driver-spondoolies-sp30.h	29;"	d
MAX_KEY_LENGTH	compat/libusb-1.0/libusb/os/windows_usb.h	85;"	d
MAX_KLINES	driver-klondike.c	57;"	d	file:
MAX_MIN_DATA_COUNT	driver-antrouter.c	158;"	d	file:
MAX_MIN_DATA_COUNT	driver-bmsc.c	146;"	d	file:
MAX_MIN_DATA_COUNT	driver-icarus.c	166;"	d	file:
MAX_NROLES	driver-spondoolies-sp10.h	31;"	d
MAX_NROLES	driver-spondoolies-sp30.h	30;"	d
MAX_PATH_LENGTH	compat/libusb-1.0/libusb/os/windows_usb.h	84;"	d
MAX_PLL_WAIT_CYCLES	driver-SPI-bitmine-A1.c	278;"	d	file:
MAX_REAL_STR_LENGTH	compat/jansson-2.6/src/dump.c	23;"	d	file:
MAX_REQUESTS	driver-spondoolies-sp10-p.h	54;"	d
MAX_REQUESTS_SP30	driver-spondoolies-sp30-p.h	46;"	d
MAX_RESPONDS	driver-spondoolies-sp10-p.h	55;"	d
MAX_RESPONDS_SP30	driver-spondoolies-sp30-p.h	47;"	d
MAX_RESULTS	driver-drillbit.c	20;"	d	file:
MAX_SPI_MESSAGE	driver-knc.c	97;"	d	file:
MAX_SPI_RESPONSES	driver-knc.c	96;"	d	file:
MAX_SPI_SIZE	driver-knc.c	95;"	d	file:
MAX_START_DELAY_MS	driver-bitforce.c	61;"	d	file:
MAX_TIMER_SEMAPHORES	compat/libusb-1.0/libusb/os/windows_usb.h	86;"	d
MAX_TRIES	driver-icarus.c	202;"	d	file:
MAX_USB_DEVICES	compat/libusb-1.0/libusb/os/windows_usb.h	81;"	d
MAX_USB_STRING_LENGTH	compat/libusb-1.0/libusb/os/windows_usb.h	82;"	d
MAX_WORK_BUFFER_SIZE	driver-icarus.c	198;"	d	file:
MAX_WORK_COUNT	driver-klondike.c	60;"	d	file:
MCAST_ADDR	MCast.java	/^	static private final String MCAST_ADDR = "224.0.0.75";$/;"	f	class:MCast	file:	access:private
MCAST_CODE	MCast.java	/^	static private final String MCAST_CODE = "FTW";$/;"	f	class:MCast	file:	access:private
MCAST_PORT	MCast.java	/^	static private final int MCAST_PORT = 4028;$/;"	f	class:MCast	file:	access:private
MCAST_REPORT	MCast.java	/^	static private final int MCAST_REPORT = 4027;$/;"	f	class:MCast	file:	access:private
MCAST_WAIT4	MCast.java	/^	static private final int MCAST_WAIT4 = 1000;$/;"	f	class:MCast	file:	access:private
MCP2210_BUFFER_LENGTH	mcp2210.h	13;"	d
MCP2210_GET_GPIO_PIN_DIR	mcp2210.h	32;"	d
MCP2210_GET_GPIO_PIN_VAL	mcp2210.h	30;"	d
MCP2210_GET_GPIO_SETTING	mcp2210.h	27;"	d
MCP2210_GET_SPI_SETTING	mcp2210.h	34;"	d
MCP2210_GPIO_INPUT	mcp2210.h	24;"	d
MCP2210_GPIO_OUTPUT	mcp2210.h	23;"	d
MCP2210_GPIO_PIN_HIGH	mcp2210.h	21;"	d
MCP2210_GPIO_PIN_LOW	mcp2210.h	20;"	d
MCP2210_H	mcp2210.h	11;"	d
MCP2210_PIN_CS	mcp2210.h	17;"	d
MCP2210_PIN_DEDICATED	mcp2210.h	18;"	d
MCP2210_PIN_GPIO	mcp2210.h	16;"	d
MCP2210_SET_GPIO_PIN_DIR	mcp2210.h	31;"	d
MCP2210_SET_GPIO_PIN_VAL	mcp2210.h	29;"	d
MCP2210_SET_GPIO_SETTING	mcp2210.h	28;"	d
MCP2210_SET_SPI_SETTING	mcp2210.h	33;"	d
MCP2210_SPI_CANCEL	mcp2210.h	26;"	d
MCP2210_SPI_TRANSFER	mcp2210.h	35;"	d
MCP2210_SPI_TRANSFER_ERROR_IP	mcp2210.h	39;"	d
MCP2210_SPI_TRANSFER_ERROR_NA	mcp2210.h	38;"	d
MCP2210_SPI_TRANSFER_SUCCESS	mcp2210.h	37;"	d
MCP2210_TRANSFER_MAX	mcp2210.h	14;"	d
MCast	MCast.java	/^	public MCast()$/;"	m	class:MCast	access:public	signature:()
MCast	MCast.java	/^class MCast implements Runnable$/;"	c	inherits:Runnable
MCast.MCAST_ADDR	MCast.java	/^	static private final String MCAST_ADDR = "224.0.0.75";$/;"	f	class:MCast	file:	access:private
MCast.MCAST_CODE	MCast.java	/^	static private final String MCAST_CODE = "FTW";$/;"	f	class:MCast	file:	access:private
MCast.MCAST_PORT	MCast.java	/^	static private final int MCAST_PORT = 4028;$/;"	f	class:MCast	file:	access:private
MCast.MCAST_REPORT	MCast.java	/^	static private final int MCAST_REPORT = 4027;$/;"	f	class:MCast	file:	access:private
MCast.MCAST_WAIT4	MCast.java	/^	static private final int MCAST_WAIT4 = 1000;$/;"	f	class:MCast	file:	access:private
MCast.MCast	MCast.java	/^	public MCast()$/;"	m	class:MCast	access:public	signature:()
MCast.addr	MCast.java	/^	static private String addr = MCAST_ADDR;$/;"	f	class:MCast	file:	access:private
MCast.code	MCast.java	/^	static private String code = MCAST_CODE;$/;"	f	class:MCast	file:	access:private
MCast.got_last	MCast.java	/^	static boolean got_last = false;$/;"	f	class:MCast	access:default
MCast.init	MCast.java	/^	public void init()$/;"	m	class:MCast	access:public	signature:()
MCast.last	MCast.java	/^	static private Date last = null;$/;"	f	class:MCast	file:	access:private
MCast.listen	MCast.java	/^	static private Thread listen = null;$/;"	f	class:MCast	file:	access:private
MCast.lock	MCast.java	/^	static private final Integer lock = new Integer(666);$/;"	f	class:MCast	file:	access:private
MCast.main	MCast.java	/^	public static void main(String[] params) throws Exception$/;"	m	class:MCast	access:public	signature:(String[] params)
MCast.mcast_addr	MCast.java	/^	private InetAddress mcast_addr = null;$/;"	f	class:MCast	file:	access:private
MCast.port	MCast.java	/^	private int port(String _port, String name)$/;"	m	class:MCast	file:	access:private	signature:(String _port, String name)
MCast.port	MCast.java	/^	static private int port = MCAST_PORT;$/;"	f	class:MCast	file:	access:private
MCast.ready	MCast.java	/^	static private boolean ready = false;$/;"	f	class:MCast	file:	access:private
MCast.report	MCast.java	/^	static private int report = MCAST_REPORT;$/;"	f	class:MCast	file:	access:private
MCast.run	MCast.java	/^	public void run() \/\/ listen$/;"	m	class:MCast	access:public	signature:()
MCast.sendMCast	MCast.java	/^	public void sendMCast()$/;"	m	class:MCast	access:public	signature:()
MCast.set_addr	MCast.java	/^	public void set_addr(String _addr)$/;"	m	class:MCast	access:public	signature:(String _addr)
MCast.set_code	MCast.java	/^	public void set_code(String _code)$/;"	m	class:MCast	access:public	signature:(String _code)
MCast.set_port	MCast.java	/^	public void set_port(String _port)$/;"	m	class:MCast	access:public	signature:(String _port)
MCast.set_report	MCast.java	/^	public void set_report(String _report)$/;"	m	class:MCast	access:public	signature:(String _report)
MCast.set_wait	MCast.java	/^	public void set_wait(String _wait4)$/;"	m	class:MCast	access:public	signature:(String _wait4)
MCast.start	MCast.java	/^	static private Date start = null;$/;"	f	class:MCast	file:	access:private
MCast.usAge	MCast.java	/^	static public void usAge()$/;"	m	class:MCast	access:public	signature:()
MCast.verbose	MCast.java	/^	static public boolean verbose = false;$/;"	f	class:MCast	access:public
MCast.wait4	MCast.java	/^	static private int wait4 = MCAST_WAIT4;$/;"	f	class:MCast	file:	access:private
MERKLE7_OFFSET	driver-minion.c	468;"	d	file:
MERKLE_BYTES	driver-bab.c	160;"	d	file:
MERKLE_BYTES	driver-bflsc.h	180;"	d
MERKLE_BYTES	driver-klondike.c	54;"	d	file:
MERKLE_BYTES	driver-minion.c	469;"	d	file:
MERKLE_OFFSET	driver-bab.c	159;"	d	file:
MERKLE_OFFSET	driver-bflsc.h	179;"	d
MERKLE_OFFSET	driver-klondike.c	53;"	d	file:
METHOD_BUFFERED	compat/libusb-1.0/libusb/os/windows_usb.h	331;"	d
MIDSTATE_BYTES	driver-bab.c	158;"	d	file:
MIDSTATE_BYTES	driver-bflsc.h	178;"	d
MIDSTATE_BYTES	driver-klondike.c	52;"	d	file:
MIDSTATE_BYTES	driver-minion.c	467;"	d	file:
MIDSTATE_UINTS	driver-bab.c	163;"	d	file:
MIN	compat/libusb-1.0/libusb/libusbi.h	117;"	d
MIN	miner.h	236;"	d
MINERGATE_ADAPTER_QUEUE_SP30	driver-spondoolies-sp30-p.h	48;"	d
MINERGATE_DATA_ID	driver-spondoolies-sp10-p.h	/^} MINERGATE_DATA_ID;$/;"	t	typeref:enum:__anon43
MINERGATE_DATA_ID_DO_JOB_REQ	driver-spondoolies-sp10-p.h	/^	MINERGATE_DATA_ID_DO_JOB_REQ = 2,$/;"	e	enum:__anon43
MINERGATE_DATA_ID_DO_JOB_REQ_SP30	driver-spondoolies-sp30-p.h	/^  MINERGATE_DATA_ID_DO_JOB_REQ_SP30 = 5,$/;"	e	enum:__anon63
MINERGATE_DATA_ID_DO_JOB_RSP	driver-spondoolies-sp10-p.h	/^	MINERGATE_DATA_ID_DO_JOB_RSP = 3, $/;"	e	enum:__anon43
MINERGATE_DATA_ID_DO_JOB_RSP_SP30	driver-spondoolies-sp30-p.h	/^  MINERGATE_DATA_ID_DO_JOB_RSP_SP30 = 6,$/;"	e	enum:__anon63
MINERGATE_DATA_ID_SP30	driver-spondoolies-sp30-p.h	/^} MINERGATE_DATA_ID_SP30;$/;"	t	typeref:enum:__anon63
MINERGATE_PROTOCOL_VERSION	driver-spondoolies-sp10-p.h	32;"	d
MINERGATE_PROTOCOL_VERSION_SP30	driver-spondoolies-sp30-p.h	26;"	d
MINERGATE_SOCKET_FILE	driver-spondoolies-sp10-p.h	33;"	d
MINERGATE_SOCKET_FILE_SP30	driver-spondoolies-sp30-p.h	27;"	d
MINERGATE_TOTAL_QUEUE	driver-spondoolies-sp10-p.h	56;"	d
MINION_ADDR_READ	driver-minion.c	313;"	d	file:
MINION_ADDR_WRITE	driver-minion.c	312;"	d	file:
MINION_ALL_INT	driver-minion.c	214;"	d	file:
MINION_BUFSIZ	driver-minion.c	305;"	d	file:
MINION_CHIPS	driver-minion.c	133;"	d	file:
MINION_CHIP_DELAY	driver-minion.c	44;"	d	file:
MINION_CHIP_OFF	driver-minion.c	42;"	d	file:
MINION_CHIP_ON	driver-minion.c	43;"	d	file:
MINION_CHIP_PER_PIN	driver-minion.c	131;"	d	file:
MINION_CHIP_SIG	driver-minion.c	340;"	d	file:
MINION_CHIP_SIG_SHIFT1	driver-minion.c	354;"	d	file:
MINION_CHIP_SIG_SHIFT2	driver-minion.c	355;"	d	file:
MINION_CHIP_SIG_SHIFT3	driver-minion.c	356;"	d	file:
MINION_CHIP_SIG_SHIFT4	driver-minion.c	357;"	d	file:
MINION_CLR_s	driver-minion.c	625;"	d	file:
MINION_CMD_FULL_INT	driver-minion.c	211;"	d	file:
MINION_CMD_INT	driver-minion.c	210;"	d	file:
MINION_CMD_QUE	driver-minion.c	158;"	d	file:
MINION_CORES	driver-minion.c	134;"	d	file:
MINION_CORE_ACT0_31	driver-minion.c	282;"	d	file:
MINION_CORE_ACT32_63	driver-minion.c	283;"	d	file:
MINION_CORE_ACT64_95	driver-minion.c	284;"	d	file:
MINION_CORE_ACT96_98	driver-minion.c	285;"	d	file:
MINION_CORE_ALL	driver-minion.c	290;"	d	file:
MINION_CORE_ENA0_31	driver-minion.c	278;"	d	file:
MINION_CORE_ENA32_63	driver-minion.c	279;"	d	file:
MINION_CORE_ENA64_95	driver-minion.c	280;"	d	file:
MINION_CORE_ENA96_98	driver-minion.c	281;"	d	file:
MINION_CORE_REGS	driver-minion.c	156;"	d	file:
MINION_CORE_REPS	driver-minion.c	181;"	d	file:
MINION_CORE_SIZ	driver-minion.c	288;"	d	file:
MINION_FFL	driver-minion.c	146;"	d	file:
MINION_FFL_ARGS	driver-minion.c	149;"	d	file:
MINION_FFL_HERE	driver-minion.c	147;"	d	file:
MINION_FFL_PASS	driver-minion.c	148;"	d	file:
MINION_FREQ_DEF	driver-minion.c	366;"	d	file:
MINION_FREQ_FACTOR	driver-minion.c	368;"	d	file:
MINION_FREQ_FACTOR_MAX	driver-minion.c	371;"	d	file:
MINION_FREQ_FACTOR_MIN	driver-minion.c	370;"	d	file:
MINION_FREQ_MAX	driver-minion.c	367;"	d	file:
MINION_FREQ_MIN	driver-minion.c	365;"	d	file:
MINION_FREQ_RESET_STEP	driver-minion.c	369;"	d	file:
MINION_GPIO_ACT	driver-minion.c	203;"	d	file:
MINION_GPIO_ACT_HI	driver-minion.c	205;"	d	file:
MINION_GPIO_ACT_LO	driver-minion.c	204;"	d	file:
MINION_GPIO_DIR	driver-minion.c	195;"	d	file:
MINION_GPIO_DIR_READ	driver-minion.c	196;"	d	file:
MINION_GPIO_DIR_WRITE	driver-minion.c	197;"	d	file:
MINION_GPIO_DIS	driver-minion.c	193;"	d	file:
MINION_GPIO_EDGE	driver-minion.c	198;"	d	file:
MINION_GPIO_EDGE_BOTH	driver-minion.c	202;"	d	file:
MINION_GPIO_EDGE_FALLING	driver-minion.c	201;"	d	file:
MINION_GPIO_EDGE_NONE	driver-minion.c	199;"	d	file:
MINION_GPIO_EDGE_RISING	driver-minion.c	200;"	d	file:
MINION_GPIO_ENA	driver-minion.c	191;"	d	file:
MINION_GPIO_ENA_VAL	driver-minion.c	192;"	d	file:
MINION_GPIO_PIN	driver-minion.c	194;"	d	file:
MINION_GPIO_RESULT_INT_PIN	driver-minion.c	187;"	d	file:
MINION_GPIO_SYS	driver-minion.c	190;"	d	file:
MINION_GPIO_VALUE	driver-minion.c	206;"	d	file:
MINION_HISTORY_s	driver-minion.c	589;"	d	file:
MINION_IDLE_MESSAGE_ms	driver-minion.c	408;"	d	file:
MINION_LED_TEST_TIME	driver-minion.c	363;"	d	file:
MINION_LOG	driver-minion.c	1252;"	d	file:
MINION_MAX_CHIP	driver-minion.c	129;"	d	file:
MINION_MAX_RES	driver-minion.c	465;"	d	file:
MINION_MAX_RESET_CHECK	driver-minion.c	632;"	d	file:
MINION_MAX_TASK_ID	driver-minion.c	471;"	d	file:
MINION_MIN_CHIP	driver-minion.c	128;"	d	file:
MINION_NOCHIP_SIG	driver-minion.c	338;"	d	file:
MINION_NOCHIP_SIG2	driver-minion.c	339;"	d	file:
MINION_NONCE_RANGE	driver-minion.c	302;"	d	file:
MINION_NONCE_RANGES	driver-minion.c	159;"	d	file:
MINION_NONCE_START	driver-minion.c	301;"	d	file:
MINION_NONCE_mS	driver-minion.c	494;"	d	file:
MINION_OVERSIZE_TASK	driver-minion.c	1352;"	d	file:
MINION_PAGE_SIZE	driver-minion.c	58;"	d	file:
MINION_PIN_AFTER	driver-minion.c	121;"	d	file:
MINION_PIN_BEFORE	driver-minion.c	119;"	d	file:
MINION_PIN_COUNT	driver-minion.c	123;"	d	file:
MINION_PIN_SLEEP	driver-minion.c	120;"	d	file:
MINION_POWERCYCLE_GPIO	driver-minion.c	41;"	d	file:
MINION_POWER_TIME	driver-minion.c	49;"	d	file:
MINION_QUE_0	driver-minion.c	297;"	d	file:
MINION_QUE_HIGH	driver-minion.c	142;"	d	file:
MINION_QUE_LOW	driver-minion.c	144;"	d	file:
MINION_QUE_MAX	driver-minion.c	141;"	d	file:
MINION_QUE_R	driver-minion.c	298;"	d	file:
MINION_QUE_SEND	driver-minion.c	143;"	d	file:
MINION_REPLY_mS	driver-minion.c	505;"	d	file:
MINION_RESET2_PERCENT	driver-minion.c	394;"	d	file:
MINION_RESET2_s	driver-minion.c	600;"	d	file:
MINION_RESET_COUNT	driver-minion.c	594;"	d	file:
MINION_RESET_DELAY_s	driver-minion.c	397;"	d	file:
MINION_RESET_PERCENT	driver-minion.c	392;"	d	file:
MINION_RESET_s	driver-minion.c	591;"	d	file:
MINION_RESULT_FULL_INT	driver-minion.c	209;"	d	file:
MINION_RESULT_INT	driver-minion.c	208;"	d	file:
MINION_RESULT_INT_SIZE	driver-minion.c	498;"	d	file:
MINION_RES_BUF	driver-minion.c	157;"	d	file:
MINION_RES_DATA	driver-minion.c	293;"	d	file:
MINION_RES_DATA_SIZ	driver-minion.c	459;"	d	file:
MINION_RES_PEEK	driver-minion.c	294;"	d	file:
MINION_ROCKCHIP	driver-minion.c	35;"	d	file:
MINION_SCAN_mS	driver-minion.c	513;"	d	file:
MINION_SHOW_IO	driver-minion.c	1258;"	d	file:
MINION_SIG_TRIES	driver-minion.c	347;"	d	file:
MINION_SPI_BUFSIZ	driver-minion.c	86;"	d	file:
MINION_SPI_BUS	driver-minion.c	78;"	d	file:
MINION_SPI_CHIP	driver-minion.c	79;"	d	file:
MINION_SPI_LED_OFF	driver-minion.c	360;"	d	file:
MINION_SPI_LED_ON	driver-minion.c	359;"	d	file:
MINION_SPI_SPEED	driver-minion.c	82;"	d	file:
MINION_SPI_SPEED	driver-minion.c	84;"	d	file:
MINION_STATS_UPDATE_RAND_mS	driver-minion.c	405;"	d	file:
MINION_STATS_UPDATE_TIME_mS	driver-minion.c	404;"	d	file:
MINION_SYS_BUF_TRIG	driver-minion.c	177;"	d	file:
MINION_SYS_CHIP_SIG	driver-minion.c	164;"	d	file:
MINION_SYS_CHIP_STA	driver-minion.c	165;"	d	file:
MINION_SYS_FIFO_STA	driver-minion.c	175;"	d	file:
MINION_SYS_FREQ_CTL	driver-minion.c	168;"	d	file:
MINION_SYS_IDLE_CNT	driver-minion.c	178;"	d	file:
MINION_SYS_INT_CLR	driver-minion.c	173;"	d	file:
MINION_SYS_INT_ENA	driver-minion.c	172;"	d	file:
MINION_SYS_INT_STA	driver-minion.c	174;"	d	file:
MINION_SYS_MISC_CTL	driver-minion.c	170;"	d	file:
MINION_SYS_NONCE_LED	driver-minion.c	169;"	d	file:
MINION_SYS_QUE_TRIG	driver-minion.c	176;"	d	file:
MINION_SYS_REGS	driver-minion.c	155;"	d	file:
MINION_SYS_RSTN_CTL	driver-minion.c	171;"	d	file:
MINION_SYS_SIZ	driver-minion.c	184;"	d	file:
MINION_SYS_SPI_LED	driver-minion.c	166;"	d	file:
MINION_SYS_TEMP_CTL	driver-minion.c	167;"	d	file:
MINION_TASK_mS	driver-minion.c	487;"	d	file:
MINION_TEMP_100	driver-minion.c	250;"	d	file:
MINION_TEMP_40	driver-minion.c	247;"	d	file:
MINION_TEMP_60	driver-minion.c	248;"	d	file:
MINION_TEMP_80	driver-minion.c	249;"	d	file:
MINION_TEMP_CTL_BITS	driver-minion.c	266;"	d	file:
MINION_TEMP_CTL_DEF	driver-minion.c	267;"	d	file:
MINION_TEMP_CTL_DISABLE	driver-minion.c	274;"	d	file:
MINION_TEMP_CTL_DISABLE_VALUE	driver-minion.c	275;"	d	file:
MINION_TEMP_CTL_MAX	driver-minion.c	265;"	d	file:
MINION_TEMP_CTL_MAX_VALUE	driver-minion.c	270;"	d	file:
MINION_TEMP_CTL_MIN	driver-minion.c	264;"	d	file:
MINION_TEMP_CTL_MIN_VALUE	driver-minion.c	269;"	d	file:
MINION_TEMP_CTL_STEP	driver-minion.c	268;"	d	file:
MINION_TEMP_DISABLE	driver-minion.c	273;"	d	file:
MINION_TEMP_HI_INT	driver-minion.c	213;"	d	file:
MINION_TEMP_LOW_INT	driver-minion.c	212;"	d	file:
MINION_TEMP_OVER	driver-minion.c	251;"	d	file:
MINION_UNEXPECTED_TASK	driver-minion.c	1351;"	d	file:
MINTASK_LOG	driver-minion.c	1255;"	d	file:
MIN_DATA_COUNT	driver-antrouter.c	156;"	d	file:
MIN_DATA_COUNT	driver-bmsc.c	144;"	d	file:
MIN_DATA_COUNT	driver-icarus.c	164;"	d	file:
MIN_SEC_UNSET	miner.h	411;"	d
MODE_BULK_READ	usbutils.c	1031;"	d	file:
MODE_BULK_READ_STR	usbutils.c	1045;"	d	file:
MODE_BULK_WRITE	usbutils.c	1032;"	d	file:
MODE_BULK_WRITE_STR	usbutils.c	1046;"	d	file:
MODE_CTRL_READ	usbutils.c	1029;"	d	file:
MODE_CTRL_READ_STR	usbutils.c	1043;"	d	file:
MODE_CTRL_WRITE	usbutils.c	1030;"	d	file:
MODE_CTRL_WRITE_STR	usbutils.c	1044;"	d	file:
MODE_DEFAULT	driver-antrouter.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_DEFAULT	driver-bmsc.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_DEFAULT	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_DEFAULT_STR	driver-antrouter.c	/^static const char *MODE_DEFAULT_STR = "default";$/;"	v	file:
MODE_DEFAULT_STR	driver-bmsc.c	/^static const char *MODE_DEFAULT_STR = "default";$/;"	v	file:
MODE_DEFAULT_STR	driver-icarus.c	/^static const char *MODE_DEFAULT_STR = "default";$/;"	v	file:
MODE_LONG	driver-antrouter.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_LONG	driver-bmsc.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_LONG	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_LONG_STR	driver-antrouter.c	/^static const char *MODE_LONG_STR = "long";$/;"	v	file:
MODE_LONG_STR	driver-bmsc.c	/^static const char *MODE_LONG_STR = "long";$/;"	v	file:
MODE_LONG_STR	driver-icarus.c	/^static const char *MODE_LONG_STR = "long";$/;"	v	file:
MODE_LONG_STREQ	driver-antrouter.c	/^static const char *MODE_LONG_STREQ = "long=";$/;"	v	file:
MODE_LONG_STREQ	driver-bmsc.c	/^static const char *MODE_LONG_STREQ = "long=";$/;"	v	file:
MODE_LONG_STREQ	driver-icarus.c	/^static const char *MODE_LONG_STREQ = "long=";$/;"	v	file:
MODE_NONE	usbutils.c	1028;"	d	file:
MODE_NONE_STR	usbutils.c	1042;"	d	file:
MODE_SEP_STR	usbutils.c	1041;"	d	file:
MODE_SHORT	driver-antrouter.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_SHORT	driver-bmsc.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_SHORT	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_SHORT_STR	driver-antrouter.c	/^static const char *MODE_SHORT_STR = "short";$/;"	v	file:
MODE_SHORT_STR	driver-bmsc.c	/^static const char *MODE_SHORT_STR = "short";$/;"	v	file:
MODE_SHORT_STR	driver-icarus.c	/^static const char *MODE_SHORT_STR = "short";$/;"	v	file:
MODE_SHORT_STREQ	driver-antrouter.c	/^static const char *MODE_SHORT_STREQ = "short=";$/;"	v	file:
MODE_SHORT_STREQ	driver-bmsc.c	/^static const char *MODE_SHORT_STREQ = "short=";$/;"	v	file:
MODE_SHORT_STREQ	driver-icarus.c	/^static const char *MODE_SHORT_STREQ = "short=";$/;"	v	file:
MODE_UNKNOWN_STR	driver-antrouter.c	/^static const char *MODE_UNKNOWN_STR = "unknown";$/;"	v	file:
MODE_UNKNOWN_STR	driver-bmsc.c	/^static const char *MODE_UNKNOWN_STR = "unknown";$/;"	v	file:
MODE_UNKNOWN_STR	driver-icarus.c	/^static const char *MODE_UNKNOWN_STR = "unknown";$/;"	v	file:
MODE_VALUE	driver-antrouter.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_VALUE	driver-bmsc.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_VALUE	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	e	enum:timing_mode	file:
MODE_VALUE_STR	driver-antrouter.c	/^static const char *MODE_VALUE_STR = "value";$/;"	v	file:
MODE_VALUE_STR	driver-bmsc.c	/^static const char *MODE_VALUE_STR = "value";$/;"	v	file:
MODE_VALUE_STR	driver-icarus.c	/^static const char *MODE_VALUE_STR = "value";$/;"	v	file:
MODMINER_CHECK_WORK	driver-modminer.c	67;"	d	file:
MODMINER_CLOCK_CUTOFF	driver-modminer.c	54;"	d	file:
MODMINER_CLOCK_DEAD	driver-modminer.c	53;"	d	file:
MODMINER_CLOCK_DOWN	driver-modminer.c	50;"	d	file:
MODMINER_CLOCK_OVERHEAT	driver-modminer.c	52;"	d	file:
MODMINER_CLOCK_SET	driver-modminer.c	49;"	d	file:
MODMINER_CLOCK_UP	driver-modminer.c	48;"	d	file:
MODMINER_CUTOFF_TEMP	driver-modminer.c	30;"	d	file:
MODMINER_DEF_CLOCK	driver-modminer.c	45;"	d	file:
MODMINER_EARLY_UP	driver-modminer.c	86;"	d	file:
MODMINER_FPGA_COUNT	driver-modminer.c	59;"	d	file:
MODMINER_GET_IDCODE	driver-modminer.c	61;"	d	file:
MODMINER_GET_REG	driver-modminer.c	76;"	d	file:
MODMINER_GET_USERCODE	driver-modminer.c	62;"	d	file:
MODMINER_GET_VERSION	driver-modminer.c	58;"	d	file:
MODMINER_HW_ERROR_PERCENT	driver-modminer.c	35;"	d	file:
MODMINER_MAX_CLOCK	driver-modminer.c	44;"	d	file:
MODMINER_MIN_BACK	driver-modminer.c	88;"	d	file:
MODMINER_MIN_CLOCK	driver-modminer.c	46;"	d	file:
MODMINER_OVERHEAT_TEMP	driver-modminer.c	31;"	d	file:
MODMINER_PING	driver-modminer.c	57;"	d	file:
MODMINER_PROGRAM	driver-modminer.c	63;"	d	file:
MODMINER_READ_CLOCK	driver-modminer.c	65;"	d	file:
MODMINER_RECOVER_TEMP	driver-modminer.c	32;"	d	file:
MODMINER_SEND_WORK	driver-modminer.c	66;"	d	file:
MODMINER_SET_CLOCK	driver-modminer.c	64;"	d	file:
MODMINER_SET_REG	driver-modminer.c	74;"	d	file:
MODMINER_TEMP1	driver-modminer.c	69;"	d	file:
MODMINER_TEMP2	driver-modminer.c	71;"	d	file:
MODMINER_TEMP_UP_LIMIT	driver-modminer.c	33;"	d	file:
MODMINER_TIMEOUT_MS	usbutils.c	67;"	d	file:
MODMINER_TIMEOUT_MS	usbutils.c	83;"	d	file:
MODMINER_TRY_UP	driver-modminer.c	82;"	d	file:
MSG_ACCDENY	api.c	342;"	d	file:
MSG_ACCOK	api.c	343;"	d	file:
MSG_ACTPOOL	api.c	372;"	d	file:
MSG_ADDPOOL	api.c	352;"	d	file:
MSG_ALRDISP	api.c	347;"	d	file:
MSG_ALRENAP	api.c	346;"	d	file:
MSG_ASCDEV	api.c	417;"	d	file:
MSG_ASCDIS	api.c	422;"	d	file:
MSG_ASCENA	api.c	421;"	d	file:
MSG_ASCHELP	api.c	432;"	d	file:
MSG_ASCIDENT	api.c	424;"	d	file:
MSG_ASCLRDIS	api.c	420;"	d	file:
MSG_ASCLRENA	api.c	419;"	d	file:
MSG_ASCNOID	api.c	425;"	d	file:
MSG_ASCNON	api.c	416;"	d	file:
MSG_ASCNOSET	api.c	431;"	d	file:
MSG_ASCSETERR	api.c	434;"	d	file:
MSG_ASCSETOK	api.c	433;"	d	file:
MSG_ASCUNW	api.c	423;"	d	file:
MSG_ASCUSBNODEV	api.c	427;"	d	file:
MSG_BADFN	api.c	340;"	d	file:
MSG_CHECK	api.c	377;"	d	file:
MSG_CONPAR	api.c	390;"	d	file:
MSG_CONVAL	api.c	391;"	d	file:
MSG_DEBUGSET	api.c	384;"	d	file:
MSG_DEVDETAILS	api.c	374;"	d	file:
MSG_DEVS	api.c	323;"	d	file:
MSG_DISHPLG	api.c	410;"	d	file:
MSG_DISLASTP	api.c	348;"	d	file:
MSG_DISPOOL	api.c	345;"	d	file:
MSG_DONTWAIT	miner.h	81;"	d
MSG_DUPPID	api.c	379;"	d	file:
MSG_ENAPOOL	api.c	344;"	d	file:
MSG_FOO	api.c	382;"	d	file:
MSG_HOTPLUG	api.c	409;"	d	file:
MSG_INVASC	api.c	418;"	d	file:
MSG_INVBOOL	api.c	381;"	d	file:
MSG_INVCMD	api.c	326;"	d	file:
MSG_INVHPLG	api.c	408;"	d	file:
MSG_INVINT	api.c	337;"	d	file:
MSG_INVJSON	api.c	330;"	d	file:
MSG_INVNEG	api.c	437;"	d	file:
MSG_INVNUM	api.c	389;"	d	file:
MSG_INVPDP	api.c	350;"	d	file:
MSG_INVPGA	api.c	357;"	d	file:
MSG_INVPID	api.c	333;"	d	file:
MSG_LCD	api.c	441;"	d	file:
MSG_LOCKDIS	api.c	440;"	d	file:
MSG_LOCKOK	api.c	439;"	d	file:
MSG_MINECOIN	api.c	383;"	d	file:
MSG_MINECONFIG	api.c	338;"	d	file:
MSG_MINESTATS	api.c	375;"	d	file:
MSG_MISASCOPT	api.c	430;"	d	file:
MSG_MISBOOL	api.c	380;"	d	file:
MSG_MISCHK	api.c	376;"	d	file:
MSG_MISCMD	api.c	331;"	d	file:
MSG_MISFN	api.c	339;"	d	file:
MSG_MISHPLG	api.c	412;"	d	file:
MSG_MISID	api.c	327;"	d	file:
MSG_MISPDP	api.c	349;"	d	file:
MSG_MISPGAOPT	api.c	396;"	d	file:
MSG_MISPID	api.c	332;"	d	file:
MSG_MISVAL	api.c	335;"	d	file:
MSG_NOADL	api.c	336;"	d	file:
MSG_NODEVS	api.c	324;"	d	file:
MSG_NOHPLG	api.c	411;"	d	file:
MSG_NOPOOL	api.c	322;"	d	file:
MSG_NOTIFY	api.c	361;"	d	file:
MSG_NOUSTA	api.c	393;"	d	file:
MSG_NUMASC	api.c	414;"	d	file:
MSG_NUMPGA	api.c	360;"	d	file:
MSG_PGADEV	api.c	356;"	d	file:
MSG_PGADIS	api.c	367;"	d	file:
MSG_PGAENA	api.c	366;"	d	file:
MSG_PGAHELP	api.c	398;"	d	file:
MSG_PGAIDENT	api.c	385;"	d	file:
MSG_PGALRDIS	api.c	365;"	d	file:
MSG_PGALRENA	api.c	364;"	d	file:
MSG_PGANOID	api.c	386;"	d	file:
MSG_PGANON	api.c	355;"	d	file:
MSG_PGANOSET	api.c	397;"	d	file:
MSG_PGASETERR	api.c	400;"	d	file:
MSG_PGASETOK	api.c	399;"	d	file:
MSG_PGAUNW	api.c	368;"	d	file:
MSG_PGAUSBNODEV	api.c	407;"	d	file:
MSG_POOL	api.c	321;"	d	file:
MSG_POOLPRIO	api.c	378;"	d	file:
MSG_REMLASTP	api.c	371;"	d	file:
MSG_REMPOOL	api.c	373;"	d	file:
MSG_SAVED	api.c	341;"	d	file:
MSG_SETCONFIG	api.c	387;"	d	file:
MSG_SETQUOTA	api.c	438;"	d	file:
MSG_SUMM	api.c	325;"	d	file:
MSG_SWITCHP	api.c	334;"	d	file:
MSG_TOOMANYP	api.c	351;"	d	file:
MSG_UNKCON	api.c	388;"	d	file:
MSG_USBSTA	api.c	392;"	d	file:
MSG_VERSION	api.c	329;"	d	file:
MSG_ZERINV	api.c	404;"	d	file:
MSG_ZERMIS	api.c	403;"	d	file:
MSG_ZERNOSUM	api.c	406;"	d	file:
MSG_ZERSUM	api.c	405;"	d	file:
MUNAVAILABLE	api.c	/^static const char *MUNAVAILABLE = " - API multicast listener will not be available";$/;"	v	file:
MUR_FMIX	uthash.h	545;"	d
MUR_GETBLOCK	uthash.h	523;"	d
MUR_GETBLOCK	uthash.h	539;"	d
MUR_ONE_THREE	uthash.h	533;"	d
MUR_ONE_THREE	uthash.h	537;"	d
MUR_PLUS0_ALIGNED	uthash.h	525;"	d
MUR_PLUS1_ALIGNED	uthash.h	526;"	d
MUR_PLUS2_ALIGNED	uthash.h	527;"	d
MUR_PLUS3_ALIGNED	uthash.h	528;"	d
MUR_ROTL32	uthash.h	544;"	d
MUR_THREE_ONE	uthash.h	531;"	d
MUR_THREE_ONE	uthash.h	535;"	d
MUR_TWO_TWO	uthash.h	532;"	d
MUR_TWO_TWO	uthash.h	536;"	d
M_PHASE_CURRENT	hf_protocol.h	60;"	d
M_VOLTAGE	hf_protocol.h	59;"	d
MaxPower	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  MaxPower;$/;"	m	struct:libusb_config_descriptor	access:public
MaxPower	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  MaxPower;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
MaximumPacketSize	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT         MaximumPacketSize;$/;"	m	struct:__anon36	access:public
MiParentInformation	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USB_MI_PARENT_INFORMATION  MiParentInformation;$/;"	m	union:USB_NODE_INFORMATION::__anon35	access:public
NANOSEC	driver-antrouter.c	116;"	d	file:
NANOSEC	driver-bmsc.c	104;"	d	file:
NANOSEC	driver-icarus.c	120;"	d	file:
NEEDED	ccan/compiler/compiler.h	116;"	d
NEEDED	ccan/compiler/compiler.h	119;"	d
NEEDED	ccan/compiler/compiler.h	145;"	d
NFU_PIN_LED	driver-bitfury.h	32;"	d
NFU_PIN_PWR_EN	driver-bitfury.h	34;"	d
NFU_PIN_PWR_EN0	driver-bitfury.h	35;"	d
NFU_PIN_SCK_OVR	driver-bitfury.h	33;"	d
NITEM	driver-bab.c	/^} NITEM;$/;"	t	typeref:struct:nitem	file:
NITEM	noncedup.c	/^} NITEM;$/;"	t	typeref:struct:nitem	file:
NO	api.c	/^static const char *NO = "N";$/;"	v	file:
NOCOLON	driver-bflsc.c	/^	NOCOLON,$/;"	e	enum:breakmode	file:
NOCONTROLDEV	usbutils.c	28;"	d	file:
NODEV	usbutils.c	26;"	d	file:
NONCE_BAD_NONCE	driver-minion.c	/^	NONCE_BAD_NONCE,$/;"	e	enum:nonce_state	file:
NONCE_BAD_WORK	driver-minion.c	/^	NONCE_BAD_WORK,$/;"	e	enum:nonce_state	file:
NONCE_CHIP_NO_OFFSET	driver-icarus.c	/^	NONCE_CHIP_NO_OFFSET,$/;"	e	enum:__anon8	file:
NONCE_COMMAND	driver-icarus.c	/^} NONCE_COMMAND;$/;"	t	typeref:enum:__anon9	file:
NONCE_COMMAND_OFFSET	driver-icarus.c	/^	NONCE_COMMAND_OFFSET,$/;"	e	enum:__anon8	file:
NONCE_CORRECTION_TIMES	driver-icarus.c	201;"	d	file:
NONCE_DATA	driver-icarus.c	/^} NONCE_DATA;$/;"	t	typeref:struct:nonce_data	file:
NONCE_DATA1_OFFSET	driver-icarus.c	/^	NONCE_DATA1_OFFSET = 0,$/;"	e	enum:__anon8	file:
NONCE_DATA2_OFFSET	driver-icarus.c	/^	NONCE_DATA2_OFFSET,$/;"	e	enum:__anon8	file:
NONCE_DATA3_OFFSET	driver-icarus.c	/^	NONCE_DATA3_OFFSET,$/;"	e	enum:__anon8	file:
NONCE_DATA4_OFFSET	driver-icarus.c	/^	NONCE_DATA4_OFFSET,$/;"	e	enum:__anon8	file:
NONCE_DATA_CMD	driver-icarus.c	/^	NONCE_DATA_CMD = 0,$/;"	e	enum:__anon9	file:
NONCE_DUP_NONCE	driver-minion.c	/^	NONCE_DUP_NONCE,$/;"	e	enum:nonce_state	file:
NONCE_GET_TASK_CMD	driver-icarus.c	/^	NONCE_GET_TASK_CMD,$/;"	e	enum:__anon9	file:
NONCE_GOOD_NONCE	driver-minion.c	/^	NONCE_GOOD_NONCE,$/;"	e	enum:nonce_state	file:
NONCE_MAX_OFFSET	driver-icarus.c	/^	NONCE_MAX_OFFSET$/;"	e	enum:__anon8	file:
NONCE_NO_NONCE	driver-minion.c	/^	NONCE_NO_NONCE,$/;"	e	enum:nonce_state	file:
NONCE_NO_WORK	driver-minion.c	/^	NONCE_NO_WORK,$/;"	e	enum:nonce_state	file:
NONCE_OFFSET	driver-icarus.c	/^} NONCE_OFFSET;$/;"	t	typeref:enum:__anon8	file:
NONCE_SPI_ERR	driver-minion.c	/^	NONCE_SPI_ERR$/;"	e	enum:nonce_state	file:
NONCE_TASK_CMD_OFFSET	driver-icarus.c	/^	NONCE_TASK_CMD_OFFSET,$/;"	e	enum:__anon8	file:
NONCE_TASK_COMPLETE_CMD	driver-icarus.c	/^	NONCE_TASK_COMPLETE_CMD,$/;"	e	enum:__anon9	file:
NONCE_TASK_NO_OFFSET	driver-icarus.c	/^	NONCE_TASK_NO_OFFSET,$/;"	e	enum:__anon8	file:
NONE	api.c	/^static __maybe_unused const char *NONE = "None";$/;"	v	file:
NOOP	driver-modminer.c	/^static const char NOOP[] = MODMINER_PING "\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff";$/;"	v	file:
NOPRIVGROUP	api.c	634;"	d	file:
NORETURN	ccan/compiler/compiler.h	39;"	d
NORETURN	ccan/compiler/compiler.h	41;"	d
NORMAL	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	NORMAL = 0,$/;"	e	enum:reap_action	file:
NOSTART	api.c	/^static const char *NOSTART = "NoStart";$/;"	v	file:
NO_DECLTYPE	uthash.h	39;"	d
NULLSTR	api.c	/^static const char *NULLSTR = "(null)";$/;"	v	file:
NUL_DEVICE	compat/libusb-1.0/libusb/os/poll_windows.c	73;"	d	file:
NUL_DEVICE	compat/libusb-1.0/libusb/os/poll_windows.c	75;"	d	file:
NUM_DIES_IN_ASIC	knc-transport.h	13;"	d
NoDeviceConnected	compat/libusb-1.0/libusb/os/windows_usb.h	/^	NoDeviceConnected,$/;"	e	enum:USB_CONNECTION_STATUS
NodeName	compat/libusb-1.0/libusb/os/windows_usb.h	/^	WCHAR  NodeName[1];$/;"	m	struct:USB_NODE_CONNECTION_NAME	access:public
NodeName	compat/libusb-1.0/libusb/os/windows_usb.h	/^	WCHAR NodeName[MAX_PATH_LENGTH];$/;"	m	struct:USB_NODE_CONNECTION_NAME_FIXED	access:public
NodeType	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_HUB_NODE  NodeType;$/;"	m	struct:USB_NODE_INFORMATION	access:public
NumberOfInterfaces	compat/libusb-1.0/libusb/os/windows_usb.h	/^  ULONG  NumberOfInterfaces;$/;"	m	struct:USB_MI_PARENT_INFORMATION	access:public
NumberOfOpenPipes	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  NumberOfOpenPipes;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
OLD_WORK_MS	driver-klondike.c	72;"	d	file:
ONECOLON	driver-bflsc.c	/^	ONECOLON,$/;"	e	enum:breakmode	file:
ONLY	api-example.c	/^static int ONLY;$/;"	v	file:
OPT_CB_ARG	ccan/opt/opt.h	335;"	d
OPT_CB_NOARG	ccan/opt/opt.h	326;"	d
OPT_CB_WITHARG	ccan/opt/opt.h	345;"	d
OPT_END	ccan/opt/opt.h	/^	OPT_END = 16,		\/* End of the table. *\/$/;"	e	enum:opt_type
OPT_ENDTABLE	ccan/opt/opt.h	92;"	d
OPT_HASARG	ccan/opt/opt.h	/^	OPT_HASARG = 2,		\/* -f arg|--foo=arg|--foo arg *\/$/;"	e	enum:opt_type
OPT_NOARG	ccan/opt/opt.h	/^	OPT_NOARG = 1,		\/* -f|--foo *\/$/;"	e	enum:opt_type
OPT_PROCESSARG	ccan/opt/opt.h	/^	OPT_PROCESSARG = 4,$/;"	e	enum:opt_type
OPT_SHOW_LEN	ccan/opt/opt.h	261;"	d
OPT_SPACE_PAD	ccan/opt/usage.c	23;"	d	file:
OPT_SUBTABLE	ccan/opt/opt.h	/^	OPT_SUBTABLE = 8,	\/* Actually, longopt points to a subtable... *\/$/;"	e	enum:opt_type
OPT_SUBTABLE	ccan/opt/opt.h	82;"	d
OPT_WITHOUT_ARG	ccan/opt/opt.h	32;"	d
OPT_WITH_ARG	ccan/opt/opt.h	67;"	d
OPT_WITH_CBARG	ccan/opt/opt.h	74;"	d
OP_ABORT	hf_protocol.h	36;"	d
OP_ADDRESS	hf_protocol.h	28;"	d
OP_BAUD	hf_protocol.h	31;"	d
OP_CLOCKGATE	hf_protocol.h	42;"	d
OP_CONFIG	hf_protocol.h	39;"	d
OP_CORE_MAP	hf_protocol.h	81;"	d
OP_DFU	hf_protocol.h	72;"	d
OP_DIE_STATUS	hf_protocol.h	74;"	d
OP_FAN	hf_protocol.h	83;"	d
OP_GET_TRACE	hf_protocol.h	69;"	d
OP_GPIO	hf_protocol.h	38;"	d
OP_GROUP	hf_protocol.h	41;"	d
OP_GWQ_STATUS	hf_protocol.h	75;"	d
OP_HASH	hf_protocol.h	34;"	d
OP_HIGHEST	hf_protocol.h	30;"	d
OP_LOOPBACK_UART	hf_protocol.h	71;"	d
OP_LOOPBACK_USB	hf_protocol.h	70;"	d
OP_NAME	hf_protocol.h	84;"	d
OP_NONCE	hf_protocol.h	35;"	d
OP_NULL	hf_protocol.h	24;"	d
OP_PING	hf_protocol.h	80;"	d
OP_PLL_CONFIG	hf_protocol.h	27;"	d
OP_POWER	driver-hashfast.h	52;"	d
OP_READDRESS	hf_protocol.h	29;"	d
OP_RESET	hf_protocol.h	26;"	d
OP_ROOT	hf_protocol.h	25;"	d
OP_SETTINGS	driver-hashfast.h	51;"	d
OP_STATISTICS	hf_protocol.h	40;"	d
OP_STATUS	hf_protocol.h	37;"	d
OP_UNROOT	hf_protocol.h	32;"	d
OP_USB_DEBUG	hf_protocol.h	85;"	d
OP_USB_GWQSTATS	hf_protocol.h	78;"	d
OP_USB_INIT	hf_protocol.h	68;"	d
OP_USB_NOTICE	hf_protocol.h	79;"	d
OP_USB_SHUTDOWN	hf_protocol.h	73;"	d
OP_USB_STATS1	hf_protocol.h	77;"	d
OP_VERSION	hf_protocol.h	82;"	d
OP_WORK_RESTART	hf_protocol.h	76;"	d
OSINFO	api.c	/^static const char *OSINFO =$/;"	v	file:
O_CLOEXEC	driver-antrouter.c	83;"	d	file:
O_CLOEXEC	driver-avalon.c	30;"	d	file:
O_CLOEXEC	driver-avalon2.c	27;"	d	file:
O_CLOEXEC	driver-bitmain.c	25;"	d	file:
O_CLOEXEC	driver-blockerupter.c	15;"	d	file:
O_CLOEXEC	driver-hashratio.c	25;"	d	file:
O_CLOEXEC	fpgautils.c	28;"	d	file:
P	knc-asic.c	175;"	d	file:
PACK32	sha2.c	47;"	d	file:
PARAM_ASC	api.c	/^	PARAM_ASC,$/;"	e	enum:code_parameters	file:
PARAM_ASCMAX	api.c	/^	PARAM_ASCMAX,$/;"	e	enum:code_parameters	file:
PARAM_BOOL	api.c	/^	PARAM_BOOL,$/;"	e	enum:code_parameters	file:
PARAM_BOTH	api.c	/^	PARAM_BOTH,$/;"	e	enum:code_parameters	file:
PARAM_CMD	api.c	/^	PARAM_CMD,$/;"	e	enum:code_parameters	file:
PARAM_DMAX	api.c	/^	PARAM_DMAX,$/;"	e	enum:code_parameters	file:
PARAM_INT	api.c	/^	PARAM_INT,$/;"	e	enum:code_parameters	file:
PARAM_NONE	api.c	/^	PARAM_NONE$/;"	e	enum:code_parameters	file:
PARAM_PGA	api.c	/^	PARAM_PGA,$/;"	e	enum:code_parameters	file:
PARAM_PGAMAX	api.c	/^	PARAM_PGAMAX,$/;"	e	enum:code_parameters	file:
PARAM_PID	api.c	/^	PARAM_PID,$/;"	e	enum:code_parameters	file:
PARAM_PMAX	api.c	/^	PARAM_PMAX,$/;"	e	enum:code_parameters	file:
PARAM_POOL	api.c	/^	PARAM_POOL,$/;"	e	enum:code_parameters	file:
PARAM_POOLMAX	api.c	/^	PARAM_POOLMAX,$/;"	e	enum:code_parameters	file:
PARAM_SET	api.c	/^	PARAM_SET,$/;"	e	enum:code_parameters	file:
PARAM_STR	api.c	/^	PARAM_STR,$/;"	e	enum:code_parameters	file:
PARSE_BXF_MSG	driver-bitfury.c	1081;"	d	file:
PDEVINST	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef DEVNODE *PDEVNODE, *PDEVINST;$/;"	t
PDEVNODE	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef DEVNODE *PDEVNODE, *PDEVINST;$/;"	t
PERF_ITEM	driver-minion.c	/^} PERF_ITEM;$/;"	t	typeref:struct:perf_item	file:
PIPE_TRANSFER_TIMEOUT	compat/libusb-1.0/libusb/os/windows_usb.h	553;"	d
PL2303_CTRL_DTR	usbutils.h	102;"	d
PL2303_CTRL_OUT	usbutils.h	105;"	d
PL2303_CTRL_RTS	usbutils.h	103;"	d
PL2303_REPLY_CTRL	usbutils.h	112;"	d
PL2303_REQUEST_CTRL	usbutils.h	108;"	d
PL2303_REQUEST_LINE	usbutils.h	109;"	d
PL2303_REQUEST_VENDOR	usbutils.h	110;"	d
PL2303_VALUE_CTRL	usbutils.h	114;"	d
PL2303_VALUE_LINE	usbutils.h	115;"	d
PL2303_VALUE_LINE0	usbutils.h	116;"	d
PL2303_VALUE_LINE1	usbutils.h	117;"	d
PL2303_VALUE_LINE_SIZE	usbutils.h	118;"	d
PL2303_VALUE_VENDOR	usbutils.h	119;"	d
PL2303_VENDOR_OUT	usbutils.h	106;"	d
PLL_CYCLE_WAIT_TIME	driver-SPI-bitmine-A1.c	279;"	d	file:
POLLERR	compat/libusb-1.0/libusb/os/poll_windows.h	53;"	d
POLLHUP	compat/libusb-1.0/libusb/os/poll_windows.h	54;"	d
POLLIN	compat/libusb-1.0/libusb/os/poll_windows.h	50;"	d
POLLNVAL	compat/libusb-1.0/libusb/os/poll_windows.h	55;"	d
POLLOUT	compat/libusb-1.0/libusb/os/poll_windows.h	52;"	d
POLLPRI	compat/libusb-1.0/libusb/os/poll_windows.h	51;"	d
POOL_BALANCE	miner.h	/^	POOL_BALANCE,$/;"	e	enum:pool_strategy
POOL_DISABLED	miner.h	/^	POOL_DISABLED,$/;"	e	enum:pool_enable
POOL_ENABLED	miner.h	/^	POOL_ENABLED,$/;"	e	enum:pool_enable
POOL_FAILOVER	miner.h	/^	POOL_FAILOVER,$/;"	e	enum:pool_strategy
POOL_LOADBALANCE	miner.h	/^	POOL_LOADBALANCE,$/;"	e	enum:pool_strategy
POOL_REJECTING	miner.h	/^	POOL_REJECTING,$/;"	e	enum:pool_enable
POOL_ROTATE	miner.h	/^	POOL_ROTATE,$/;"	e	enum:pool_strategy
POOL_ROUNDROBIN	miner.h	/^	POOL_ROUNDROBIN,$/;"	e	enum:pool_strategy
PRINTF_FMT	ccan/compiler/compiler.h	57;"	d
PRINTF_FMT	ccan/compiler/compiler.h	60;"	d
PRINT_UNSUPPORTED_API	compat/libusb-1.0/libusb/os/windows_usb.h	145;"	d
PRIO_PROCESS	compat.h	/^	PRIO_PROCESS		= 0,$/;"	e	enum:__anon52
PRIVGROUP	api.c	633;"	d	file:
PROTOCOL_GLOBAL_WORK_QUEUE	hf_protocol.h	56;"	d
PROTOCOL_USB_MAPPED_SERIAL	hf_protocol.h	55;"	d
PROXY_HTTP	util.c	782;"	d	file:
PROXY_HTTP	util.c	789;"	d	file:
PROXY_HTTP_1_0	util.c	783;"	d	file:
PROXY_HTTP_1_0	util.c	790;"	d	file:
PROXY_SOCKS4	util.c	784;"	d	file:
PROXY_SOCKS4	util.c	791;"	d	file:
PROXY_SOCKS4A	util.c	786;"	d	file:
PROXY_SOCKS4A	util.c	793;"	d	file:
PROXY_SOCKS5	util.c	785;"	d	file:
PROXY_SOCKS5	util.c	792;"	d	file:
PROXY_SOCKS5H	util.c	787;"	d	file:
PROXY_SOCKS5H	util.c	794;"	d	file:
PTH	compat.h	79;"	d
PTH	compat.h	81;"	d
PTH	compat.h	85;"	d
PTRDIFF_MAX	lib/stdint.in.h	455;"	d
PTRDIFF_MAX	lib/stdint.in.h	459;"	d
PTRDIFF_MAX	lib/stdint.in.h	462;"	d
PTRDIFF_MAX	lib/stdint.in.h	467;"	d
PTRDIFF_MIN	lib/stdint.in.h	454;"	d
PTRDIFF_MIN	lib/stdint.in.h	458;"	d
PTRDIFF_MIN	lib/stdint.in.h	461;"	d
PTRDIFF_MIN	lib/stdint.in.h	465;"	d
PULSE_CLOCK_IO_HIGH	driver-bitfury.c	69;"	d	file:
PULSE_CLOCK_IO_LOW	driver-bitfury.c	70;"	d	file:
PUSB_CONFIGURATION_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_CONFIGURATION_DESCRIPTOR, *PUSB_CONFIGURATION_DESCRIPTOR;$/;"	t	typeref:struct:USB_CONFIGURATION_DESCRIPTOR
PUSB_CONNECTION_STATUS	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_CONNECTION_STATUS, *PUSB_CONNECTION_STATUS;$/;"	t	typeref:enum:USB_CONNECTION_STATUS
PUSB_DESCRIPTOR_REQUEST	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_DESCRIPTOR_REQUEST, *PUSB_DESCRIPTOR_REQUEST;$/;"	t	typeref:struct:USB_DESCRIPTOR_REQUEST
PUSB_DEVICE_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct libusb_device_descriptor USB_DEVICE_DESCRIPTOR, *PUSB_DEVICE_DESCRIPTOR;$/;"	t	typeref:struct:
PUSB_ENDPOINT_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_ENDPOINT_DESCRIPTOR, *PUSB_ENDPOINT_DESCRIPTOR;$/;"	t	typeref:struct:USB_ENDPOINT_DESCRIPTOR
PUSB_HUB_CAPABILITIES	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_CAPABILITIES, *PUSB_HUB_CAPABILITIES;$/;"	t	typeref:struct:USB_HUB_CAPABILITIES
PUSB_HUB_CAPABILITIES_EX	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_CAPABILITIES_EX, *PUSB_HUB_CAPABILITIES_EX;$/;"	t	typeref:struct:USB_HUB_CAPABILITIES_EX
PUSB_HUB_CAP_FLAGS	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_CAP_FLAGS, *PUSB_HUB_CAP_FLAGS;$/;"	t	typeref:struct:USB_HUB_CAP_FLAGS
PUSB_HUB_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_DESCRIPTOR, *PUSB_HUB_DESCRIPTOR;$/;"	t	typeref:struct:USB_HUB_DESCRIPTOR
PUSB_HUB_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_INFORMATION, *PUSB_HUB_INFORMATION;$/;"	t	typeref:struct:USB_HUB_INFORMATION
PUSB_INTERFACE_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_INTERFACE_DESCRIPTOR, *PUSB_INTERFACE_DESCRIPTOR;$/;"	t	typeref:struct:USB_INTERFACE_DESCRIPTOR
PUSB_MI_PARENT_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_MI_PARENT_INFORMATION, *PUSB_MI_PARENT_INFORMATION;$/;"	t	typeref:struct:USB_MI_PARENT_INFORMATION
PUSB_NODE_CONNECTION_INFORMATION_EX	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_INFORMATION_EX, *PUSB_NODE_CONNECTION_INFORMATION_EX;$/;"	t	typeref:struct:USB_NODE_CONNECTION_INFORMATION_EX
PUSB_NODE_CONNECTION_NAME	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_NAME, *PUSB_NODE_CONNECTION_NAME;$/;"	t	typeref:struct:USB_NODE_CONNECTION_NAME
PUSB_NODE_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_NODE_INFORMATION, *PUSB_NODE_INFORMATION;$/;"	t	typeref:struct:USB_NODE_INFORMATION
PUSB_PIPE_INFO	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_PIPE_INFO, *PUSB_PIPE_INFO;$/;"	t	typeref:struct:USB_PIPE_INFO
PUSB_ROOT_HUB_NAME	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_ROOT_HUB_NAME, *PUSB_ROOT_HUB_NAME;$/;"	t	typeref:struct:USB_ROOT_HUB_NAME
PUT_ULONG_BE	knc-asic.c	138;"	d	file:
PUT_ULONG_LE	knc-asic.c	148;"	d	file:
PWINUSB_INTERFACE_HANDLE	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef void *WINUSB_INTERFACE_HANDLE, *PWINUSB_INTERFACE_HANDLE;$/;"	t
PWINUSB_PIPE_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^} WINUSB_PIPE_INFORMATION, *PWINUSB_PIPE_INFORMATION;$/;"	t	typeref:struct:__anon36
PWINUSB_SETUP_PACKET	compat/libusb-1.0/libusb/os/windows_usb.h	/^} WINUSB_SETUP_PACKET, *PWINUSB_SETUP_PACKET;$/;"	t	typeref:struct:__anon37
PipeId	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR          PipeId;$/;"	m	struct:__anon36	access:public
PipeType	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USBD_PIPE_TYPE PipeType;$/;"	m	struct:__anon36	access:public
QUEUE	api.c	47;"	d	file:
QUE_BLOCKDATA	driver-bflsc.h	193;"	d
QUE_CC	driver-bflsc.h	196;"	d
QUE_CHIP_V2	driver-bflsc.h	202;"	d
QUE_FLD_MAX_V1	driver-bflsc.h	200;"	d
QUE_FLD_MAX_V2	driver-bflsc.h	205;"	d
QUE_FLD_MIN_V1	driver-bflsc.h	199;"	d
QUE_FLD_MIN_V2	driver-bflsc.h	204;"	d
QUE_MAX_RESULTS	driver-bflsc.h	118;"	d
QUE_MIDSTATE	driver-bflsc.h	192;"	d
QUE_NONCECOUNT_V1	driver-bflsc.h	198;"	d
QUE_NONCECOUNT_V2	driver-bflsc.h	203;"	d
QUE_RES_LINES_MIN	driver-bflsc.h	191;"	d
QUE_UID	driver-bflsc.h	195;"	d
QUIET	cgminer.c	324;"	d	file:
QueueJobPackStructure	driver-bflsc.h	/^struct QueueJobPackStructure {$/;"	s
QueueJobPackStructure::endOfWrapper	driver-bflsc.h	/^	uint8_t endOfWrapper;$/;"	m	struct:QueueJobPackStructure	access:public
QueueJobPackStructure::jobs	driver-bflsc.h	/^	struct QueueJobStructure jobs[5];$/;"	m	struct:QueueJobPackStructure	typeref:struct:QueueJobPackStructure::QueueJobStructure	access:public
QueueJobPackStructure::jobsInArray	driver-bflsc.h	/^	uint8_t jobsInArray;$/;"	m	struct:QueueJobPackStructure	access:public
QueueJobPackStructure::payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:QueueJobPackStructure	access:public
QueueJobPackStructure::signature	driver-bflsc.h	/^	uint8_t signature;$/;"	m	struct:QueueJobPackStructure	access:public
QueueJobStructure	driver-bflsc.h	/^struct QueueJobStructure {$/;"	s
QueueJobStructure::blockData	driver-bflsc.h	/^	uint8_t blockData[MERKLE_BYTES];$/;"	m	struct:QueueJobStructure	access:public
QueueJobStructure::endOfBlock	driver-bflsc.h	/^	uint8_t endOfBlock;$/;"	m	struct:QueueJobStructure	access:public
QueueJobStructure::midState	driver-bflsc.h	/^	uint8_t midState[MIDSTATE_BYTES];$/;"	m	struct:QueueJobStructure	access:public
QueueJobStructure::payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:QueueJobStructure	access:public
R	knc-asic.c	169;"	d	file:
RAW_IO	compat/libusb-1.0/libusb/os/windows_usb.h	557;"	d
RBUFSIZE	miner.h	1251;"	d
READ_ADDR	driver-minion.c	315;"	d	file:
READ_DEBUG	driver-klondike.c	404;"	d	file:
READ_FAIL	driver-blockerupter.h	38;"	d
READ_NL	driver-bflsc.c	310;"	d	file:
READ_OK	driver-bflsc.c	309;"	d	file:
READ_OK	driver-blockerupter.h	37;"	d
READ_WRITE_BYTES_SPI0	driver-bitfury.c	79;"	d	file:
READ_WRITE_BYTES_SPI0	libbitfury.c	283;"	d	file:
REASON_DEV_COMMS_ERROR	miner.h	/^	REASON_DEV_COMMS_ERROR,$/;"	e	enum:dev_reason
REASON_DEV_COMMS_ERROR_STR	miner.h	407;"	d
REASON_DEV_DEAD_IDLE_600	miner.h	/^	REASON_DEV_DEAD_IDLE_600,$/;"	e	enum:dev_reason
REASON_DEV_DEAD_IDLE_600_STR	miner.h	403;"	d
REASON_DEV_NOSTART	miner.h	/^	REASON_DEV_NOSTART,$/;"	e	enum:dev_reason
REASON_DEV_NOSTART_STR	miner.h	404;"	d
REASON_DEV_OVER_HEAT	miner.h	/^	REASON_DEV_OVER_HEAT,$/;"	e	enum:dev_reason
REASON_DEV_OVER_HEAT_STR	miner.h	405;"	d
REASON_DEV_SICK_IDLE_60	miner.h	/^	REASON_DEV_SICK_IDLE_60,$/;"	e	enum:dev_reason
REASON_DEV_SICK_IDLE_60_STR	miner.h	402;"	d
REASON_DEV_THERMAL_CUTOFF	miner.h	/^	REASON_DEV_THERMAL_CUTOFF,$/;"	e	enum:dev_reason
REASON_DEV_THERMAL_CUTOFF_STR	miner.h	406;"	d
REASON_DEV_THROTTLE	miner.h	/^	REASON_DEV_THROTTLE,$/;"	e	enum:dev_reason
REASON_DEV_THROTTLE_STR	miner.h	408;"	d
REASON_NONE	miner.h	398;"	d
REASON_THREAD_FAIL_INIT	miner.h	/^	REASON_THREAD_FAIL_INIT,$/;"	e	enum:dev_reason
REASON_THREAD_FAIL_INIT_STR	miner.h	399;"	d
REASON_THREAD_FAIL_QUEUE	miner.h	/^	REASON_THREAD_FAIL_QUEUE,$/;"	e	enum:dev_reason
REASON_THREAD_FAIL_QUEUE_STR	miner.h	401;"	d
REASON_THREAD_ZERO_HASH	miner.h	/^	REASON_THREAD_ZERO_HASH,$/;"	e	enum:dev_reason
REASON_THREAD_ZERO_HASH_STR	miner.h	400;"	d
REASON_UNKNOWN_STR	miner.h	409;"	d
RECVSIZE	miner.h	1252;"	d
REINIT_TIME_FIRST_MS	driver-bflsc.h	384;"	d
REINIT_TIME_FIRST_MS	driver-bitforce.c	72;"	d	file:
REINIT_TIME_MAX	driver-bflsc.h	388;"	d
REINIT_TIME_MAX	driver-bitforce.c	76;"	d	file:
REINIT_TIME_MAX_MS	driver-bflsc.h	386;"	d
REINIT_TIME_MAX_MS	driver-bitforce.c	74;"	d	file:
REJECTING	api.c	/^static const char *REJECTING = "Rejecting";$/;"	v	file:
REPLY_SIZE	driver-klondike.c	56;"	d	file:
REPLY_WAIT_TIME	driver-klondike.c	58;"	d	file:
REQUEST_PERIOD	driver-spondoolies-sp10.h	81;"	d
REQUEST_PERIOD	driver-spondoolies-sp30.h	82;"	d
REQUEST_SIZE	driver-spondoolies-sp10.h	82;"	d
REQUEST_SIZE	driver-spondoolies-sp30.h	83;"	d
RESET_HI_TIME_MS	A1-board-selector.h	8;"	d
RESET_LOW_TIME_MS	A1-board-selector.h	7;"	d
RESULT_TIMEOUT	driver-drillbit.c	19;"	d	file:
RES_CHIPID	driver-minion.c	441;"	d	file:
RES_CORE	driver-minion.c	442;"	d	file:
RES_GOLD	driver-minion.c	440;"	d	file:
RES_ITEM	driver-minion.c	/^} RES_ITEM;$/;"	t	typeref:struct:res_item	file:
RES_NONCE	driver-minion.c	444;"	d	file:
RES_TASK	driver-minion.c	443;"	d	file:
RETURN_TYPE	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef DWORD RETURN_TYPE;$/;"	t
RETURN_TYPE	lib/memmem.c	32;"	d	file:
RETURN_TYPE	lib/str-two-way.h	453;"	d
RITEM	driver-bab.c	/^} RITEM;$/;"	t	typeref:struct:ritem	file:
RM_CHIP_MASK	driver-icarus.c	205;"	d	file:
RM_CMD_MASK	driver-icarus.c	203;"	d	file:
RM_PRODUCT_MASK	driver-icarus.c	206;"	d	file:
RM_PRODUCT_RBOX	driver-icarus.c	207;"	d	file:
RM_PRODUCT_T1	driver-icarus.c	208;"	d	file:
RM_PRODUCT_T2	driver-icarus.c	209;"	d	file:
RM_PRODUCT_TEST	driver-icarus.c	210;"	d	file:
RM_STATUS_MASK	driver-icarus.c	204;"	d	file:
ROCKMINER_CHIP_INFO	driver-icarus.c	/^} ROCKMINER_CHIP_INFO;$/;"	t	typeref:struct:rockminer_chip_info	file:
ROCKMINER_DEVICE_INFO	driver-icarus.c	/^} ROCKMINER_DEVICE_INFO;$/;"	t	typeref:struct:rockminer_device_info	file:
ROCKMINER_MAX	driver-icarus.c	/^	ROCKMINER_MAX$/;"	e	enum:__anon10	file:
ROCKMINER_PRODUCT_T	driver-icarus.c	/^} ROCKMINER_PRODUCT_T;$/;"	t	typeref:enum:__anon10	file:
ROCKMINER_RBOX	driver-icarus.c	/^	ROCKMINER_RBOX = 0,$/;"	e	enum:__anon10	file:
ROCKMINER_T1	driver-icarus.c	/^	ROCKMINER_T1,$/;"	e	enum:__anon10	file:
ROCKMINER_T2	driver-icarus.c	/^	ROCKMINER_T2,$/;"	e	enum:__anon10	file:
ROCK_READ_SIZE	driver-icarus.c	60;"	d	file:
ROTR	knc-asic.c	158;"	d	file:
ROTR	sha2.h	45;"	d
RSTN_CTL_FLUSH_CMD_QUEUE	driver-minion.c	223;"	d	file:
RSTN_CTL_FLUSH_RESULTS	driver-minion.c	222;"	d	file:
RSTN_CTL_RESET_CORES	driver-minion.c	221;"	d	file:
RSTN_CTL_SHA_MGR_RESET	driver-minion.c	225;"	d	file:
RSTN_CTL_SPI_SW_RSTN	driver-minion.c	224;"	d	file:
RW_NONE	compat/libusb-1.0/libusb/os/poll_windows.h	/^	RW_NONE,$/;"	e	enum:rw_type
RW_READ	compat/libusb-1.0/libusb/os/poll_windows.h	/^	RW_READ,$/;"	e	enum:rw_type
RW_WRITE	compat/libusb-1.0/libusb/os/poll_windows.h	/^	RW_WRITE,$/;"	e	enum:rw_type
RenameThread	util.c	/^void RenameThread(const char* name)$/;"	f	signature:(const char* name)
RenameThread	util.h	/^void RenameThread(const char* name);$/;"	p	signature:(const char* name)
ReservedMBZ	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG ReservedMBZ:26;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
RootHubName	compat/libusb-1.0/libusb/os/windows_usb.h	/^	WCHAR  RootHubName[1];$/;"	m	struct:USB_ROOT_HUB_NAME	access:public
RootHubName	compat/libusb-1.0/libusb/os/windows_usb.h	/^	WCHAR RootHubName[MAX_PATH_LENGTH];$/;"	m	struct:USB_ROOT_HUB_NAME_FIXED	access:public
Rval	miner.php	/^			$Rval = '';$/;"	v
S0	knc-asic.c	160;"	d	file:
S1	knc-asic.c	161;"	d	file:
S2	knc-asic.c	163;"	d	file:
S3	knc-asic.c	164;"	d	file:
SBEXTEND	api.c	680;"	d	file:
SBITEM	api.c	/^} SBITEM;$/;"	t	typeref:struct:sbitem	file:
SCAN_ADJUST_RANGE	driver-knc.c	39;"	d	file:
SECOND_BASE	libbitfury.c	121;"	d	file:
SECTOMS	driver-antrouter.c	98;"	d	file:
SECTOMS	driver-bmsc.c	86;"	d	file:
SECTOMS	driver-icarus.c	102;"	d	file:
SECTOMS	usbutils.c	1079;"	d	file:
SEND_FAIL	driver-blockerupter.h	36;"	d
SEND_INACTIVE	util.c	/^	SEND_INACTIVE$/;"	e	enum:send_ret	file:
SEND_OK	driver-blockerupter.h	35;"	d
SEND_OK	util.c	/^	SEND_OK,$/;"	e	enum:send_ret	file:
SEND_SELECTFAIL	util.c	/^	SEND_SELECTFAIL,$/;"	e	enum:send_ret	file:
SEND_SENDFAIL	util.c	/^	SEND_SENDFAIL,$/;"	e	enum:send_ret	file:
SEPARATOR	api-example.c	/^static const char SEPARATOR = '|';$/;"	v	file:
SEPARATOR	api.c	/^static const char SEPARATOR = '|';$/;"	v	file:
SEPSTR	api.c	136;"	d	file:
SEQ0	usbutils.c	1024;"	d	file:
SEQ1	usbutils.c	1025;"	d	file:
SERIALISE	driver-drillbit.c	1027;"	d	file:
SET_HASHCLOCK	driver-klondike.c	119;"	d	file:
SET_HEAD_READ	driver-minion.c	322;"	d	file:
SET_HEAD_SIZ	driver-minion.c	323;"	d	file:
SET_HEAD_WRITE	driver-minion.c	321;"	d	file:
SET_OUT_ACBUS	driver-bitfury.c	77;"	d	file:
SET_OUT_ADBUS	driver-bitfury.c	76;"	d	file:
SEVERITY_ERR	api.c	/^	SEVERITY_ERR,$/;"	e	enum:code_severity	file:
SEVERITY_FAIL	api.c	/^	SEVERITY_FAIL$/;"	e	enum:code_severity	file:
SEVERITY_INFO	api.c	/^	SEVERITY_INFO,$/;"	e	enum:code_severity	file:
SEVERITY_SUCC	api.c	/^	SEVERITY_SUCC,$/;"	e	enum:code_severity	file:
SEVERITY_WARN	api.c	/^	SEVERITY_WARN,$/;"	e	enum:code_severity	file:
SHA256STR	api.c	/^static const char *SHA256STR = "sha256";$/;"	v	file:
SHA256_BLOCK_SIZE	sha2.h	42;"	d
SHA256_DIGEST_SIZE	sha2.h	41;"	d
SHA256_F1	sha2.h	49;"	d
SHA256_F2	sha2.h	50;"	d
SHA256_F3	sha2.h	51;"	d
SHA256_F4	sha2.h	52;"	d
SHA256_SCR	sha2.c	55;"	d	file:
SHA2_H	sha2.h	39;"	d
SHFR	sha2.h	44;"	d
SHORT_PACKET_TERMINATE	compat/libusb-1.0/libusb/os/windows_usb.h	551;"	d
SHR	knc-asic.c	157;"	d	file:
SHUT_RDWR	api-example.c	138;"	d	file:
SHUT_RDWR	util.h	63;"	d
SICK	api.c	/^static const char *SICK = "Sick";$/;"	v	file:
SIGABRT_COMPAT	lib/sigaction.c	71;"	d	file:
SIGABRT_COMPAT	lib/sigaction.c	72;"	d	file:
SIGABRT_COMPAT	lib/sigprocmask.c	50;"	d	file:
SIGABRT_COMPAT	lib/sigprocmask.c	51;"	d	file:
SIGABRT_COMPAT_MASK	lib/sigprocmask.c	54;"	d	file:
SIGABRT_COMPAT_MASK	lib/sigprocmask.c	56;"	d	file:
SIGKILL	lib/sigaction.c	61;"	d	file:
SIGKILL	lib/sigprocmask.c	40;"	d	file:
SIGPIPE_handler	lib/sigprocmask.c	/^static handler_t SIGPIPE_handler = SIG_DFL;$/;"	v	file:
SIGSTOP	lib/sigaction.c	64;"	d	file:
SIGSTOP	lib/sigprocmask.c	43;"	d	file:
SIG_ATOMIC_MAX	lib/stdint.in.h	473;"	d
SIG_ATOMIC_MAX	lib/stdint.in.h	477;"	d
SIG_ATOMIC_MIN	lib/stdint.in.h	472;"	d
SIG_ATOMIC_MIN	lib/stdint.in.h	474;"	d
SIO_RESET_PURGE_RX	driver-bitfury.h	45;"	d
SIO_RESET_PURGE_TX	driver-bitfury.h	46;"	d
SIO_RESET_REQUEST	driver-bitfury.h	40;"	d
SIO_RESET_SIO	driver-bitfury.h	50;"	d
SIO_SET_BITMODE_REQUEST	driver-bitfury.h	44;"	d
SIO_SET_ERROR_CHAR_REQUEST	driver-bitfury.h	43;"	d
SIO_SET_EVENT_CHAR_REQUEST	driver-bitfury.h	42;"	d
SIO_SET_LATENCY_TIMER_REQUEST	driver-bitfury.h	41;"	d
SITEM	driver-bab.c	/^} SITEM;$/;"	t	typeref:struct:sitem	file:
SIZE_MAX	lib/stdint.in.h	483;"	d
SIZE_MAX	lib/stdint.in.h	486;"	d
SIZE_MAX	lib/stdint.in.h	488;"	d
SIZE_MAX	lib/stdint.in.h	491;"	d
SK	driver-bitfury.c	33;"	d	file:
SLEEP_MS_AFTER_CS	A1-desk-board-selector.c	29;"	d	file:
SOCKBUFALLOCSIZ	api.c	665;"	d	file:
SOCKERRMSG	api-example.c	127;"	d	file:
SOCKERRMSG	api-example.c	41;"	d	file:
SOCKERRMSG	util.h	19;"	d
SOCKERRMSG	util.h	46;"	d
SOCKETFAIL	api-example.c	35;"	d	file:
SOCKETFAIL	api-example.c	48;"	d	file:
SOCKETFAIL	util.h	13;"	d
SOCKETFAIL	util.h	37;"	d
SOCKETINIT	api-example.c	131;"	d	file:
SOCKETINIT	api-example.c	39;"	d	file:
SOCKETTYPE	api-example.c	47;"	d	file:
SOCKETTYPE	util.h	12;"	d
SOCKETTYPE	util.h	36;"	d
SOCKSIZ	api-example.c	190;"	d	file:
SPDRP_ADDRESS	compat/libusb-1.0/libusb/os/windows_usb.h	46;"	d
SPDRP_INSTALL_STATE	compat/libusb-1.0/libusb/os/windows_usb.h	49;"	d
SPIBUF_SIZE	driver-bitfury.h	37;"	d
SPI_BITS_PER_WORD	knc-transport-spi.c	24;"	d	file:
SPI_CONTEXT_H	spi-context.h	2;"	d
SPI_DELAY_USECS	knc-transport-spi.c	26;"	d	file:
SPI_DEVICE_TEMPLATE	knc-transport-spi.c	22;"	d	file:
SPI_DEVICE_TEMPLATE	spi-context.h	9;"	d
SPI_MAX_SPEED	knc-transport-spi.c	25;"	d	file:
SPI_MODE	knc-transport-spi.c	23;"	d	file:
SPONDA_HFILE	driver-spondoolies-sp10.h	12;"	d
SPONDA_HFILE	driver-spondoolies-sp30.h	12;"	d
SPONDWORK_STATE	driver-spondoolies-sp10.h	/^} SPONDWORK_STATE;$/;"	t	typeref:enum:spond_work_state
SPONDWORK_STATE	driver-spondoolies-sp30.h	/^} SPONDWORK_STATE;$/;"	t	typeref:enum:spond_work_state
SPONDWORK_STATE_EMPTY	driver-spondoolies-sp10.h	/^	SPONDWORK_STATE_EMPTY,$/;"	e	enum:spond_work_state
SPONDWORK_STATE_EMPTY	driver-spondoolies-sp30.h	/^	SPONDWORK_STATE_EMPTY,$/;"	e	enum:spond_work_state
SPONDWORK_STATE_IN_BUSY	driver-spondoolies-sp10.h	/^	SPONDWORK_STATE_IN_BUSY,$/;"	e	enum:spond_work_state
SPONDWORK_STATE_IN_BUSY	driver-spondoolies-sp30.h	/^	SPONDWORK_STATE_IN_BUSY,$/;"	e	enum:spond_work_state
SP_NTIME	driver-spondoolies-sp10.h	18;"	d
STATBEFORELEN	cgminer.c	2976;"	d	file:
STATS_TIMEVAL	usbutils.c	1083;"	d	file:
STATS_TIMEVAL	usbutils.c	1088;"	d	file:
STATUS_COMPLETED_SYNCHRONOUSLY	compat/libusb-1.0/libusb/os/poll_windows.h	35;"	d
STATUS_REPARSE	compat/libusb-1.0/libusb/os/poll_windows.h	33;"	d
STAT_CTR_INTERVAL	cgminer.c	/^	STAT_CTR_INTERVAL		= 10000000,$/;"	e	enum:__anon61	file:
STAT_SLEEP_INTERVAL	cgminer.c	/^	STAT_SLEEP_INTERVAL		= 1,$/;"	e	enum:__anon61	file:
STA_CORES	driver-minion.c	400;"	d	file:
STA_FREQ	driver-minion.c	401;"	d	file:
STA_TEMP	driver-minion.c	399;"	d	file:
STRBUFFER_FACTOR	compat/jansson-2.6/src/strbuffer.c	18;"	d	file:
STRBUFFER_H	compat/jansson-2.6/src/strbuffer.h	9;"	d
STRBUFFER_MIN_SIZE	compat/jansson-2.6/src/strbuffer.c	17;"	d	file:
STRBUFFER_SIZE_MAX	compat/jansson-2.6/src/strbuffer.c	19;"	d	file:
STRBUFLEN	usbutils.c	952;"	d	file:
STREAM_STATE_EOF	compat/jansson-2.6/src/load.c	25;"	d	file:
STREAM_STATE_ERROR	compat/jansson-2.6/src/load.c	26;"	d	file:
STREAM_STATE_OK	compat/jansson-2.6/src/load.c	24;"	d	file:
SUBMIT_FAILED	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	SUBMIT_FAILED,$/;"	e	enum:reap_action	file:
SUSPEND_DELAY	compat/libusb-1.0/libusb/os/windows_usb.h	560;"	d
SYSFS_DEVICE_PATH	compat/libusb-1.0/libusb/os/linux_usbfs.h	26;"	d
SYS_MISC_CTL_DEFAULT	driver-minion.c	241;"	d	file:
SYS_MISC_CTL_DEFAULT	driver-minion.c	243;"	d	file:
SYS_RSTN_CTL_FLUSH	driver-minion.c	235;"	d	file:
SYS_RSTN_CTL_INIT	driver-minion.c	228;"	d	file:
SZ_SERIALISED_AUTOTUNEREQUEST	driver-drillbit.c	70;"	d	file:
SZ_SERIALISED_BOARDCONFIG	driver-drillbit.c	91;"	d	file:
SZ_SERIALISED_IDENTITY	driver-drillbit.c	109;"	d	file:
SZ_SERIALISED_WORKREQUEST	driver-drillbit.c	43;"	d	file:
SZ_SERIALISED_WORKRESULT	driver-drillbit.c	53;"	d	file:
SaveString	driver-bflsc.h	/^struct SaveString {$/;"	s
SaveString::payloadData	driver-bflsc.h	/^	uint8_t payloadData[BFLSC_MAXPAYLOAD];$/;"	m	struct:SaveString	access:public
SaveString::payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:SaveString	access:public
ScheduleOffset	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ScheduleOffset;$/;"	m	struct:USB_PIPE_INFO	access:public
SendCmd	driver-klondike.c	/^static bool SendCmd(struct cgpu_info *klncgpu, KLINE *kline, int datalen)$/;"	f	file:	signature:(struct cgpu_info *klncgpu, KLINE *kline, int datalen)
SendCmdGetReply	driver-klondike.c	/^static KLIST *SendCmdGetReply(struct cgpu_info *klncgpu, KLINE *kline, int datalen)$/;"	f	file:	signature:(struct cgpu_info *klncgpu, KLINE *kline, int datalen)
SetupPacket	compat/libusb-1.0/libusb/os/windows_usb.h	/^		} SetupPacket;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31	typeref:struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
SetupPacket	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} SetupPacket;$/;"	m	struct:USB_DESCRIPTOR_REQUEST	typeref:struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
Speed	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  Speed;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
Strcasestr	util.c	/^char *Strcasestr(char *haystack, const char *needle)$/;"	f	signature:(char *haystack, const char *needle)
Strcasestr	util.h	/^char *Strcasestr(char *haystack, const char *needle);$/;"	p	signature:(char *haystack, const char *needle)
Strsep	util.c	/^char *Strsep(char **stringp, const char *delim)$/;"	f	signature:(char **stringp, const char *delim)
Strsep	util.h	/^char *Strsep(char **stringp, const char *delim);$/;"	p	signature:(char **stringp, const char *delim)
TACH_FACTOR	driver-klondike.c	61;"	d	file:
TAILBUFSIZ	miner.h	1495;"	d
TASK_ITEM	driver-minion.c	/^} TASK_ITEM;$/;"	t	typeref:struct:task_item	file:
TCK_D5	driver-bitfury.c	66;"	d	file:
TCK_DIVISOR	driver-bitfury.c	74;"	d	file:
TCK_X5	driver-bitfury.c	65;"	d	file:
TEMP_UPDATE_INT_MS	driver-SPI-bitmine-A1.c	908;"	d	file:
TEST_MODE	driver-antrouter.h	8;"	d
THISIF	usbutils.c	474;"	d	file:
TIMEOUT	driver-drillbit.c	18;"	d	file:
TIMER_REQUEST_RETRY_MS	compat/libusb-1.0/libusb/os/windows_usb.h	87;"	d
TIMESPEC_IS_SET	compat/libusb-1.0/libusb/libusbi.h	120;"	d
TIMESPEC_TO_TIMEVAL	compat/libusb-1.0/libusb/os/poll_windows.h	101;"	d
TIMEVAL_USECS	driver-antrouter.h	26;"	d
TIME_AVG_CONSTANT	driver-bitforce.c	63;"	d	file:
TIME_BANDS	driver-minion.c	813;"	d	file:
TMPBUFSIZ	api.c	43;"	d	file:
TOKEN_EOF	compat/jansson-2.6/src/load.c	29;"	d	file:
TOKEN_FALSE	compat/jansson-2.6/src/load.c	34;"	d	file:
TOKEN_INTEGER	compat/jansson-2.6/src/load.c	31;"	d	file:
TOKEN_INVALID	compat/jansson-2.6/src/load.c	28;"	d	file:
TOKEN_NULL	compat/jansson-2.6/src/load.c	35;"	d	file:
TOKEN_REAL	compat/jansson-2.6/src/load.c	32;"	d	file:
TOKEN_STRING	compat/jansson-2.6/src/load.c	30;"	d	file:
TOKEN_TRUE	compat/jansson-2.6/src/load.c	33;"	d	file:
TOP_STRATEGY	miner.h	305;"	d
TRANSFER_CTX	compat/libusb-1.0/libusb/libusbi.h	215;"	d
TRIMPOT_MPC4X_H	A1-trimpot-mcp4x.h	2;"	d
TRISTATE_IO	driver-bitfury.c	73;"	d	file:
TRUESTR	api.c	/^static const char *TRUESTR = "true";$/;"	v	file:
TRYLOCK	miner.h	758;"	d
TRYLOCK	miner.h	765;"	d
TVF	driver-bflsc.c	1584;"	d	file:
TVFMS	driver-bflsc.c	1585;"	d	file:
TWELVE_MHZ	driver-bitfury.c	30;"	d	file:
U1	A1-board-selector-CCR.c	/^	uint8_t U1;$/;"	m	struct:chain_mapping	file:	access:public
U1_tca9535	A1-board-selector-CCD.c	/^struct i2c_ctx *U1_tca9535;$/;"	v	typeref:struct:i2c_ctx
U1_tca9548	A1-board-selector-CCR.c	/^static struct i2c_ctx *U1_tca9548;$/;"	v	typeref:struct:i2c_ctx	file:
U32SIZE	hf_protocol.h	121;"	d
U3_tca9535	A1-board-selector-CCR.c	/^static struct i2c_ctx *U3_tca9535;$/;"	v	typeref:struct:i2c_ctx	file:
U3p0	A1-board-selector-CCR.c	/^	uint8_t U3p0;$/;"	m	struct:chain_mapping	file:	access:public
U3p1	A1-board-selector-CCR.c	/^	uint8_t U3p1;$/;"	m	struct:chain_mapping	file:	access:public
U4_tca9535	A1-board-selector-CCR.c	/^static struct i2c_ctx *U4_tca9535;$/;"	v	typeref:struct:i2c_ctx	file:
UINT16_C	lib/stdint.in.h	543;"	d
UINT16_C	lib/stdint.in.h	545;"	d
UINT16_MAX	lib/stdint.in.h	322;"	d
UINT16_MAX	lib/stdint.in.h	325;"	d
UINT32_C	lib/stdint.in.h	548;"	d
UINT32_C	lib/stdint.in.h	550;"	d
UINT32_MAX	lib/stdint.in.h	329;"	d
UINT32_MAX	lib/stdint.in.h	332;"	d
UINT64_C	lib/stdint.in.h	553;"	d
UINT64_C	lib/stdint.in.h	562;"	d
UINT64_C	lib/stdint.in.h	564;"	d
UINT64_C	lib/stdint.in.h	566;"	d
UINT64_MAX	lib/stdint.in.h	342;"	d
UINT8_C	lib/stdint.in.h	538;"	d
UINT8_C	lib/stdint.in.h	540;"	d
UINT8_MAX	lib/stdint.in.h	315;"	d
UINT8_MAX	lib/stdint.in.h	318;"	d
UINTMAX_C	lib/stdint.in.h	580;"	d
UINTMAX_C	lib/stdint.in.h	582;"	d
UINTMAX_C	lib/stdint.in.h	584;"	d
UINTMAX_C	lib/stdint.in.h	586;"	d
UINTMAX_MAX	lib/stdint.in.h	444;"	d
UINTMAX_MAX	lib/stdint.in.h	446;"	d
UINTMAX_MAX	lib/stdint.in.h	448;"	d
UINTPTR_MAX	lib/stdint.in.h	427;"	d
UINTPTR_MAX	lib/stdint.in.h	430;"	d
UINT_FAST16_MAX	lib/stdint.in.h	399;"	d
UINT_FAST16_MAX	lib/stdint.in.h	402;"	d
UINT_FAST32_MAX	lib/stdint.in.h	406;"	d
UINT_FAST32_MAX	lib/stdint.in.h	409;"	d
UINT_FAST64_MAX	lib/stdint.in.h	418;"	d
UINT_FAST64_MAX	lib/stdint.in.h	420;"	d
UINT_FAST8_MAX	lib/stdint.in.h	392;"	d
UINT_FAST8_MAX	lib/stdint.in.h	395;"	d
UINT_LEAST16_MAX	lib/stdint.in.h	360;"	d
UINT_LEAST16_MAX	lib/stdint.in.h	363;"	d
UINT_LEAST32_MAX	lib/stdint.in.h	367;"	d
UINT_LEAST32_MAX	lib/stdint.in.h	370;"	d
UINT_LEAST64_MAX	lib/stdint.in.h	379;"	d
UINT_LEAST64_MAX	lib/stdint.in.h	381;"	d
UINT_LEAST8_MAX	lib/stdint.in.h	353;"	d
UINT_LEAST8_MAX	lib/stdint.in.h	356;"	d
UNAVAILABLE	api.c	/^static const char *UNAVAILABLE = " - API will not be available";$/;"	v	file:
UNKNOWN	api.c	/^static const char *UNKNOWN = "Unknown";$/;"	v	file:
UNKNOWN	usbutils.c	/^static const char *UNKNOWN = "Unknown";$/;"	v	file:
UNNEEDED	ccan/compiler/compiler.h	142;"	d
UNNEEDED	ccan/compiler/compiler.h	97;"	d
UNPACK32	driver-avalon2.c	62;"	d	file:
UNPACK32	sha2.c	39;"	d	file:
UNUSED	ccan/compiler/compiler.h	138;"	d
UNUSED	ccan/compiler/compiler.h	148;"	d
UNUSED_BITS	A1-board-selector-CCD.c	39;"	d	file:
UNUSED_BITS	A1-desk-board-selector.c	28;"	d	file:
UPDATE_HISTORY	driver-bab.c	334;"	d	file:
USBDEBUG	usbutils.c	965;"	d	file:
USBD_PIPE_TYPE	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef enum USBD_PIPE_TYPE {$/;"	g
USBD_PIPE_TYPE	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USBD_PIPE_TYPE;$/;"	t	typeref:enum:USBD_PIPE_TYPE
USBEP	usbutils.c	473;"	d	file:
USBFS_CAP_BULK_CONTINUATION	compat/libusb-1.0/libusb/os/linux_usbfs.h	122;"	d
USBFS_CAP_BULK_SCATTER_GATHER	compat/libusb-1.0/libusb/os/linux_usbfs.h	124;"	d
USBFS_CAP_NO_PACKET_SIZE_LIM	compat/libusb-1.0/libusb/os/linux_usbfs.h	123;"	d
USBFS_CAP_ZERO_PACKET	compat/libusb-1.0/libusb/os/linux_usbfs.h	121;"	d
USBFS_MAXDRIVERNAME	compat/libusb-1.0/libusb/os/linux_usbfs.h	58;"	d
USBFS_URB_BULK_CONTINUATION	compat/libusb-1.0/libusb/os/linux_usbfs.h	67;"	d
USBFS_URB_ISO_ASAP	compat/libusb-1.0/libusb/os/linux_usbfs.h	66;"	d
USBFS_URB_QUEUE_BULK	compat/libusb-1.0/libusb/os/linux_usbfs.h	68;"	d
USBFS_URB_SHORT_NOT_OK	compat/libusb-1.0/libusb/os/linux_usbfs.h	65;"	d
USBFS_URB_TYPE_BULK	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	USBFS_URB_TYPE_BULK = 3,$/;"	e	enum:usbfs_urb_type
USBFS_URB_TYPE_CONTROL	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	USBFS_URB_TYPE_CONTROL = 2,$/;"	e	enum:usbfs_urb_type
USBFS_URB_TYPE_INTERRUPT	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	USBFS_URB_TYPE_INTERRUPT = 1,$/;"	e	enum:usbfs_urb_type
USBFS_URB_TYPE_ISO	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	USBFS_URB_TYPE_ISO = 0,$/;"	e	enum:usbfs_urb_type
USBFS_URB_ZERO_PACKET	compat/libusb-1.0/libusb/os/linux_usbfs.h	69;"	d
USBIF	usbutils.c	475;"	d	file:
USBI_CLOCK_MONOTONIC	compat/libusb-1.0/libusb/libusbi.h	/^  USBI_CLOCK_MONOTONIC,$/;"	e	enum:__anon40
USBI_CLOCK_REALTIME	compat/libusb-1.0/libusb/libusbi.h	/^  USBI_CLOCK_REALTIME$/;"	e	enum:__anon40
USBI_GET_CONTEXT	compat/libusb-1.0/libusb/libusbi.h	212;"	d
USBI_HOTPLUG_H	compat/libusb-1.0/libusb/hotplug.h	23;"	d
USBI_MUTEX_INITIALIZER	compat/libusb-1.0/libusb/os/threads_posix.h	27;"	d
USBI_MUTEX_INITIALIZER	compat/libusb-1.0/libusb/os/threads_windows.h	27;"	d
USBI_TRANSFER_CANCELLING	compat/libusb-1.0/libusb/libusbi.h	/^	USBI_TRANSFER_CANCELLING = 1 << 2,$/;"	e	enum:usbi_transfer_flags
USBI_TRANSFER_DEVICE_DISAPPEARED	compat/libusb-1.0/libusb/libusbi.h	/^	USBI_TRANSFER_DEVICE_DISAPPEARED = 1 << 3,$/;"	e	enum:usbi_transfer_flags
USBI_TRANSFER_OS_HANDLES_TIMEOUT	compat/libusb-1.0/libusb/libusbi.h	/^	USBI_TRANSFER_OS_HANDLES_TIMEOUT = 1 << 1,$/;"	e	enum:usbi_transfer_flags
USBI_TRANSFER_TIMED_OUT	compat/libusb-1.0/libusb/libusbi.h	/^	USBI_TRANSFER_TIMED_OUT = 1 << 0,$/;"	e	enum:usbi_transfer_flags
USBI_TRANSFER_TO_LIBUSB_TRANSFER	compat/libusb-1.0/libusb/libusbi.h	416;"	d
USBI_TRANSFER_UPDATED_FDS	compat/libusb-1.0/libusb/libusbi.h	/^	USBI_TRANSFER_UPDATED_FDS = 1 << 4,$/;"	e	enum:usbi_transfer_flags
USBUTILS_H	usbutils.h	12;"	d
USB_API_COMPOSITE	compat/libusb-1.0/libusb/os/windows_usb.h	112;"	d
USB_API_HUB	compat/libusb-1.0/libusb/os/windows_usb.h	111;"	d
USB_API_MAX	compat/libusb-1.0/libusb/os/windows_usb.h	114;"	d
USB_API_UNSUPPORTED	compat/libusb-1.0/libusb/os/windows_usb.h	110;"	d
USB_API_WINUSB	compat/libusb-1.0/libusb/os/windows_usb.h	113;"	d
USB_CONFIG	usbutils.c	57;"	d	file:
USB_CONFIGURATION_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_CONFIGURATION_DESCRIPTOR {$/;"	s
USB_CONFIGURATION_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_CONFIGURATION_DESCRIPTOR, *PUSB_CONFIGURATION_DESCRIPTOR;$/;"	t	typeref:struct:USB_CONFIGURATION_DESCRIPTOR
USB_CONFIGURATION_DESCRIPTOR::MaxPower	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  MaxPower;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
USB_CONFIGURATION_DESCRIPTOR::bConfigurationValue	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bConfigurationValue;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
USB_CONFIGURATION_DESCRIPTOR::bDescriptorType	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bDescriptorType;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
USB_CONFIGURATION_DESCRIPTOR::bLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bLength;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
USB_CONFIGURATION_DESCRIPTOR::bNumInterfaces	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bNumInterfaces;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
USB_CONFIGURATION_DESCRIPTOR::bmAttributes	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bmAttributes;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
USB_CONFIGURATION_DESCRIPTOR::iConfiguration	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  iConfiguration;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
USB_CONFIGURATION_DESCRIPTOR::wTotalLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT wTotalLength;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
USB_CONFIGURATION_DESCRIPTOR_SHORT	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_CONFIGURATION_DESCRIPTOR_SHORT {$/;"	s
USB_CONFIGURATION_DESCRIPTOR_SHORT	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_CONFIGURATION_DESCRIPTOR_SHORT;$/;"	t	typeref:struct:USB_CONFIGURATION_DESCRIPTOR_SHORT
USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^		ULONG ConnectionIndex;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31	access:public
USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::SetupPacket	compat/libusb-1.0/libusb/os/windows_usb.h	/^		} SetupPacket;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31	typeref:struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32::bRequest	compat/libusb-1.0/libusb/os/windows_usb.h	/^			UCHAR bRequest;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32::bmRequest	compat/libusb-1.0/libusb/os/windows_usb.h	/^			UCHAR bmRequest;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32::wIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^			USHORT wIndex;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32::wLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^			USHORT wLength;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32::wValue	compat/libusb-1.0/libusb/os/windows_usb.h	/^			USHORT wValue;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
USB_CONFIGURATION_DESCRIPTOR_SHORT::data	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_CONFIGURATION_DESCRIPTOR data;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT	access:public
USB_CONFIGURATION_DESCRIPTOR_SHORT::req	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} req;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT	typeref:struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31	access:public
USB_CONFIGURATION_DESCRIPTOR_TYPE	compat/libusb-1.0/libusb/os/windows_usb.h	302;"	d
USB_CONNECTION_STATUS	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef enum USB_CONNECTION_STATUS {$/;"	g
USB_CONNECTION_STATUS	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_CONNECTION_STATUS, *PUSB_CONNECTION_STATUS;$/;"	t	typeref:enum:USB_CONNECTION_STATUS
USB_DESCRIPTOR_REQUEST	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_DESCRIPTOR_REQUEST {$/;"	s
USB_DESCRIPTOR_REQUEST	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_DESCRIPTOR_REQUEST, *PUSB_DESCRIPTOR_REQUEST;$/;"	t	typeref:struct:USB_DESCRIPTOR_REQUEST
USB_DESCRIPTOR_REQUEST::ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ConnectionIndex;$/;"	m	struct:USB_DESCRIPTOR_REQUEST	access:public
USB_DESCRIPTOR_REQUEST::SetupPacket	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} SetupPacket;$/;"	m	struct:USB_DESCRIPTOR_REQUEST	typeref:struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
USB_DESCRIPTOR_REQUEST::__anon33::bRequest	compat/libusb-1.0/libusb/os/windows_usb.h	/^		UCHAR  bRequest;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
USB_DESCRIPTOR_REQUEST::__anon33::bmRequest	compat/libusb-1.0/libusb/os/windows_usb.h	/^		UCHAR  bmRequest;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
USB_DESCRIPTOR_REQUEST::__anon33::wIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USHORT  wIndex;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
USB_DESCRIPTOR_REQUEST::__anon33::wLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USHORT  wLength;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
USB_DESCRIPTOR_REQUEST::__anon33::wValue	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USHORT  wValue;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
USB_DEVICE_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct libusb_device_descriptor USB_DEVICE_DESCRIPTOR, *PUSB_DEVICE_DESCRIPTOR;$/;"	t	typeref:struct:libusb_device_descriptor
USB_DEVICE_DESCRIPTOR_TYPE	compat/libusb-1.0/libusb/os/windows_usb.h	301;"	d
USB_ENDPOINT_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_ENDPOINT_DESCRIPTOR {$/;"	s
USB_ENDPOINT_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_ENDPOINT_DESCRIPTOR, *PUSB_ENDPOINT_DESCRIPTOR;$/;"	t	typeref:struct:USB_ENDPOINT_DESCRIPTOR
USB_ENDPOINT_DESCRIPTOR::bDescriptorType	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bDescriptorType;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
USB_ENDPOINT_DESCRIPTOR::bEndpointAddress	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bEndpointAddress;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
USB_ENDPOINT_DESCRIPTOR::bInterval	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterval;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
USB_ENDPOINT_DESCRIPTOR::bLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bLength;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
USB_ENDPOINT_DESCRIPTOR::bmAttributes	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bmAttributes;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
USB_ENDPOINT_DESCRIPTOR::wMaxPacketSize	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT  wMaxPacketSize;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
USB_ENDPOINT_DESCRIPTOR_TYPE	compat/libusb-1.0/libusb/os/windows_usb.h	305;"	d
USB_EPS	usbutils.c	93;"	d	file:
USB_EPS_CTRL	usbutils.c	100;"	d	file:
USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION	compat/libusb-1.0/libusb/os/windows_usb.h	320;"	d
USB_GET_HUB_CAPABILITIES	compat/libusb-1.0/libusb/os/windows_usb.h	322;"	d
USB_GET_HUB_CAPABILITIES_EX	compat/libusb-1.0/libusb/os/windows_usb.h	327;"	d
USB_GET_NODE_CONNECTION_INFORMATION_EX	compat/libusb-1.0/libusb/os/windows_usb.h	324;"	d
USB_GET_NODE_CONNECTION_NAME	compat/libusb-1.0/libusb/os/windows_usb.h	321;"	d
USB_GET_NODE_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	319;"	d
USB_HUB_CAPABILITIES	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_HUB_CAPABILITIES {$/;"	s
USB_HUB_CAPABILITIES	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_CAPABILITIES, *PUSB_HUB_CAPABILITIES;$/;"	t	typeref:struct:USB_HUB_CAPABILITIES
USB_HUB_CAPABILITIES::HubIs2xCapable	compat/libusb-1.0/libusb/os/windows_usb.h	/^  ULONG  HubIs2xCapable : 1;$/;"	m	struct:USB_HUB_CAPABILITIES	access:public
USB_HUB_CAPABILITIES_EX	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_HUB_CAPABILITIES_EX {$/;"	s
USB_HUB_CAPABILITIES_EX	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_CAPABILITIES_EX, *PUSB_HUB_CAPABILITIES_EX;$/;"	t	typeref:struct:USB_HUB_CAPABILITIES_EX
USB_HUB_CAPABILITIES_EX::CapabilityFlags	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_HUB_CAP_FLAGS CapabilityFlags;$/;"	m	struct:USB_HUB_CAPABILITIES_EX	access:public
USB_HUB_CAP_FLAGS	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_HUB_CAP_FLAGS {$/;"	s
USB_HUB_CAP_FLAGS	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_CAP_FLAGS, *PUSB_HUB_CAP_FLAGS;$/;"	t	typeref:struct:USB_HUB_CAP_FLAGS
USB_HUB_CAP_FLAGS::HubIsArmedWakeOnConnect	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsArmedWakeOnConnect:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
USB_HUB_CAP_FLAGS::HubIsHighSpeed	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsHighSpeed:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
USB_HUB_CAP_FLAGS::HubIsHighSpeedCapable	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsHighSpeedCapable:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
USB_HUB_CAP_FLAGS::HubIsMultiTt	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsMultiTt:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
USB_HUB_CAP_FLAGS::HubIsMultiTtCapable	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsMultiTtCapable:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
USB_HUB_CAP_FLAGS::HubIsRoot	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG HubIsRoot:1;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
USB_HUB_CAP_FLAGS::ReservedMBZ	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG ReservedMBZ:26;$/;"	m	struct:USB_HUB_CAP_FLAGS	access:public
USB_HUB_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_HUB_DESCRIPTOR {$/;"	s
USB_HUB_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_DESCRIPTOR, *PUSB_HUB_DESCRIPTOR;$/;"	t	typeref:struct:USB_HUB_DESCRIPTOR
USB_HUB_DESCRIPTOR::bDescriptorLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bDescriptorLength;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
USB_HUB_DESCRIPTOR::bDescriptorType	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bDescriptorType;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
USB_HUB_DESCRIPTOR::bHubControlCurrent	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bHubControlCurrent;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
USB_HUB_DESCRIPTOR::bNumberOfPorts	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bNumberOfPorts;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
USB_HUB_DESCRIPTOR::bPowerOnToPowerGood	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bPowerOnToPowerGood;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
USB_HUB_DESCRIPTOR::bRemoveAndPowerMask	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bRemoveAndPowerMask[64];$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
USB_HUB_DESCRIPTOR::wHubCharacteristics	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USHORT  wHubCharacteristics;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
USB_HUB_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_HUB_INFORMATION {$/;"	s
USB_HUB_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_INFORMATION, *PUSB_HUB_INFORMATION;$/;"	t	typeref:struct:USB_HUB_INFORMATION
USB_HUB_INFORMATION::HubDescriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_HUB_DESCRIPTOR  HubDescriptor;$/;"	m	struct:USB_HUB_INFORMATION	access:public
USB_HUB_INFORMATION::HubIsBusPowered	compat/libusb-1.0/libusb/os/windows_usb.h	/^	BOOLEAN  HubIsBusPowered;$/;"	m	struct:USB_HUB_INFORMATION	access:public
USB_HUB_NAME_FIXED	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_HUB_NAME_FIXED {$/;"	s
USB_HUB_NAME_FIXED	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_NAME_FIXED;$/;"	t	typeref:struct:USB_HUB_NAME_FIXED
USB_HUB_NAME_FIXED::__anon34::node	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USB_NODE_CONNECTION_NAME_FIXED node;$/;"	m	union:USB_HUB_NAME_FIXED::__anon34	access:public
USB_HUB_NAME_FIXED::__anon34::root	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USB_ROOT_HUB_NAME_FIXED root;$/;"	m	union:USB_HUB_NAME_FIXED::__anon34	access:public
USB_HUB_NAME_FIXED::u	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} u;$/;"	m	struct:USB_HUB_NAME_FIXED	typeref:union:USB_HUB_NAME_FIXED::__anon34	access:public
USB_HUB_NODE	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef enum USB_HUB_NODE {$/;"	g
USB_HUB_NODE	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_HUB_NODE;$/;"	t	typeref:enum:USB_HUB_NODE
USB_INIT_FAIL	usbutils.c	2144;"	d	file:
USB_INIT_IGNORE	usbutils.c	2146;"	d	file:
USB_INIT_OK	usbutils.c	2145;"	d	file:
USB_INTERFACE_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_INTERFACE_DESCRIPTOR {$/;"	s
USB_INTERFACE_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_INTERFACE_DESCRIPTOR, *PUSB_INTERFACE_DESCRIPTOR;$/;"	t	typeref:struct:USB_INTERFACE_DESCRIPTOR
USB_INTERFACE_DESCRIPTOR::bAlternateSetting	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bAlternateSetting;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR::bDescriptorType	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bDescriptorType;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR::bInterfaceClass	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterfaceClass;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR::bInterfaceNumber	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterfaceNumber;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR::bInterfaceProtocol	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterfaceProtocol;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR::bInterfaceSubClass	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterfaceSubClass;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR::bLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bLength;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR::bNumEndpoints	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bNumEndpoints;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR::iInterface	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  iInterface;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
USB_INTERFACE_DESCRIPTOR_TYPE	compat/libusb-1.0/libusb/os/windows_usb.h	304;"	d
USB_MAXCONFIG	compat/libusb-1.0/libusb/libusbi.h	50;"	d
USB_MAXENDPOINTS	compat/libusb-1.0/libusb/libusbi.h	48;"	d
USB_MAXINTERFACES	compat/libusb-1.0/libusb/libusbi.h	49;"	d
USB_MAX_READ	usbutils.h	210;"	d
USB_MI_PARENT_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_MI_PARENT_INFORMATION {$/;"	s
USB_MI_PARENT_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_MI_PARENT_INFORMATION, *PUSB_MI_PARENT_INFORMATION;$/;"	t	typeref:struct:USB_MI_PARENT_INFORMATION
USB_MI_PARENT_INFORMATION::NumberOfInterfaces	compat/libusb-1.0/libusb/os/windows_usb.h	/^  ULONG  NumberOfInterfaces;$/;"	m	struct:USB_MI_PARENT_INFORMATION	access:public
USB_NODE_CONNECTION_INFORMATION_EX	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_NODE_CONNECTION_INFORMATION_EX {$/;"	s
USB_NODE_CONNECTION_INFORMATION_EX	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_INFORMATION_EX, *PUSB_NODE_CONNECTION_INFORMATION_EX;$/;"	t	typeref:struct:USB_NODE_CONNECTION_INFORMATION_EX
USB_NODE_CONNECTION_INFORMATION_EX::ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ConnectionIndex;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
USB_NODE_CONNECTION_INFORMATION_EX::ConnectionStatus	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_CONNECTION_STATUS  ConnectionStatus;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
USB_NODE_CONNECTION_INFORMATION_EX::CurrentConfigurationValue	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  CurrentConfigurationValue;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
USB_NODE_CONNECTION_INFORMATION_EX::DeviceAddress	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USHORT  DeviceAddress;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
USB_NODE_CONNECTION_INFORMATION_EX::DeviceDescriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_DEVICE_DESCRIPTOR  DeviceDescriptor;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
USB_NODE_CONNECTION_INFORMATION_EX::DeviceIsHub	compat/libusb-1.0/libusb/os/windows_usb.h	/^	BOOLEAN  DeviceIsHub;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
USB_NODE_CONNECTION_INFORMATION_EX::NumberOfOpenPipes	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  NumberOfOpenPipes;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
USB_NODE_CONNECTION_INFORMATION_EX::Speed	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  Speed;$/;"	m	struct:USB_NODE_CONNECTION_INFORMATION_EX	access:public
USB_NODE_CONNECTION_NAME	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_NODE_CONNECTION_NAME {$/;"	s
USB_NODE_CONNECTION_NAME	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_NAME, *PUSB_NODE_CONNECTION_NAME;$/;"	t	typeref:struct:USB_NODE_CONNECTION_NAME
USB_NODE_CONNECTION_NAME::ActualLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ActualLength;$/;"	m	struct:USB_NODE_CONNECTION_NAME	access:public
USB_NODE_CONNECTION_NAME::ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ConnectionIndex;$/;"	m	struct:USB_NODE_CONNECTION_NAME	access:public
USB_NODE_CONNECTION_NAME::NodeName	compat/libusb-1.0/libusb/os/windows_usb.h	/^	WCHAR  NodeName[1];$/;"	m	struct:USB_NODE_CONNECTION_NAME	access:public
USB_NODE_CONNECTION_NAME_FIXED	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_NODE_CONNECTION_NAME_FIXED {$/;"	s
USB_NODE_CONNECTION_NAME_FIXED	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_NODE_CONNECTION_NAME_FIXED;$/;"	t	typeref:struct:USB_NODE_CONNECTION_NAME_FIXED
USB_NODE_CONNECTION_NAME_FIXED::ActualLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG ActualLength;$/;"	m	struct:USB_NODE_CONNECTION_NAME_FIXED	access:public
USB_NODE_CONNECTION_NAME_FIXED::ConnectionIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG ConnectionIndex;$/;"	m	struct:USB_NODE_CONNECTION_NAME_FIXED	access:public
USB_NODE_CONNECTION_NAME_FIXED::NodeName	compat/libusb-1.0/libusb/os/windows_usb.h	/^	WCHAR NodeName[MAX_PATH_LENGTH];$/;"	m	struct:USB_NODE_CONNECTION_NAME_FIXED	access:public
USB_NODE_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_NODE_INFORMATION {$/;"	s
USB_NODE_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_NODE_INFORMATION, *PUSB_NODE_INFORMATION;$/;"	t	typeref:struct:USB_NODE_INFORMATION
USB_NODE_INFORMATION::NodeType	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_HUB_NODE  NodeType;$/;"	m	struct:USB_NODE_INFORMATION	access:public
USB_NODE_INFORMATION::__anon35::HubInformation	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USB_HUB_INFORMATION  HubInformation;$/;"	m	union:USB_NODE_INFORMATION::__anon35	access:public
USB_NODE_INFORMATION::__anon35::MiParentInformation	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USB_MI_PARENT_INFORMATION  MiParentInformation;$/;"	m	union:USB_NODE_INFORMATION::__anon35	access:public
USB_NODE_INFORMATION::u	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} u;$/;"	m	struct:USB_NODE_INFORMATION	typeref:union:USB_NODE_INFORMATION::__anon35	access:public
USB_NOSTAT	usbutils.h	238;"	d
USB_PARSE_COMMANDS	usbutils.h	/^	USB_PARSE_COMMANDS(ENUMERATION)$/;"	e	enum:usb_cmds
USB_PARSE_COMMANDS	usbutils.h	293;"	d
USB_PIPE_INFO	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_PIPE_INFO {$/;"	s
USB_PIPE_INFO	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_PIPE_INFO, *PUSB_PIPE_INFO;$/;"	t	typeref:struct:USB_PIPE_INFO
USB_PIPE_INFO::EndpointDescriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_ENDPOINT_DESCRIPTOR  EndpointDescriptor;$/;"	m	struct:USB_PIPE_INFO	access:public
USB_PIPE_INFO::ScheduleOffset	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ScheduleOffset;$/;"	m	struct:USB_PIPE_INFO	access:public
USB_READ_BUFSIZE	usbutils.h	216;"	d
USB_REJECT	usbutils.c	1084;"	d	file:
USB_REJECT	usbutils.c	1089;"	d	file:
USB_REQUEST_CLEAR_FEATURE	compat/libusb-1.0/libusb/os/windows_usb.h	308;"	d
USB_REQUEST_GET_CONFIGURATION	compat/libusb-1.0/libusb/os/windows_usb.h	313;"	d
USB_REQUEST_GET_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	311;"	d
USB_REQUEST_GET_INTERFACE	compat/libusb-1.0/libusb/os/windows_usb.h	315;"	d
USB_REQUEST_GET_STATUS	compat/libusb-1.0/libusb/os/windows_usb.h	307;"	d
USB_REQUEST_SET_ADDRESS	compat/libusb-1.0/libusb/os/windows_usb.h	310;"	d
USB_REQUEST_SET_CONFIGURATION	compat/libusb-1.0/libusb/os/windows_usb.h	314;"	d
USB_REQUEST_SET_DESCRIPTOR	compat/libusb-1.0/libusb/os/windows_usb.h	312;"	d
USB_REQUEST_SET_FEATURE	compat/libusb-1.0/libusb/os/windows_usb.h	309;"	d
USB_REQUEST_SET_INTERFACE	compat/libusb-1.0/libusb/os/windows_usb.h	316;"	d
USB_REQUEST_SYNC_FRAME	compat/libusb-1.0/libusb/os/windows_usb.h	317;"	d
USB_RETRY_MAX	usbutils.c	2950;"	d	file:
USB_ROOT_HUB_NAME	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_ROOT_HUB_NAME {$/;"	s
USB_ROOT_HUB_NAME	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_ROOT_HUB_NAME, *PUSB_ROOT_HUB_NAME;$/;"	t	typeref:struct:USB_ROOT_HUB_NAME
USB_ROOT_HUB_NAME::ActualLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG  ActualLength;$/;"	m	struct:USB_ROOT_HUB_NAME	access:public
USB_ROOT_HUB_NAME::RootHubName	compat/libusb-1.0/libusb/os/windows_usb.h	/^	WCHAR  RootHubName[1];$/;"	m	struct:USB_ROOT_HUB_NAME	access:public
USB_ROOT_HUB_NAME_FIXED	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef struct USB_ROOT_HUB_NAME_FIXED {$/;"	s
USB_ROOT_HUB_NAME_FIXED	compat/libusb-1.0/libusb/os/windows_usb.h	/^} USB_ROOT_HUB_NAME_FIXED;$/;"	t	typeref:struct:USB_ROOT_HUB_NAME_FIXED
USB_ROOT_HUB_NAME_FIXED::ActualLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	ULONG ActualLength;$/;"	m	struct:USB_ROOT_HUB_NAME_FIXED	access:public
USB_ROOT_HUB_NAME_FIXED::RootHubName	compat/libusb-1.0/libusb/os/windows_usb.h	/^	WCHAR RootHubName[MAX_PATH_LENGTH];$/;"	m	struct:USB_ROOT_HUB_NAME_FIXED	access:public
USB_STATS	usbutils.c	1081;"	d	file:
USB_STATS	usbutils.c	1087;"	d	file:
USB_STRING_DESCRIPTOR_TYPE	compat/libusb-1.0/libusb/os/windows_usb.h	303;"	d
USB_TMOS	usbutils.h	243;"	d
USB_TMO_0	usbutils.h	240;"	d
USB_TMO_1	usbutils.h	241;"	d
USB_TMO_2	usbutils.h	242;"	d
USB_TYPE_FTDI	usbutils.h	/^	USB_TYPE_FTDI$/;"	e	enum:usb_types
USB_TYPE_STD	usbutils.h	/^	USB_TYPE_STD = 0,$/;"	e	enum:usb_types
USE_DEFAULT_TIMEOUT	driver-modminer.c	291;"	d	file:
USE_FPGA	cgminer.c	111;"	d	file:
UTF_H	compat/jansson-2.6/src/utf.h	9;"	d
UTHASH_H	uthash.h	25;"	d
UTHASH_VERSION	uthash.h	67;"	d
UT_hash_bucket	uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_bucket::count	uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket	access:public
UT_hash_bucket::expand_mult	uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket	access:public
UT_hash_bucket::hh_head	uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle	access:public
UT_hash_handle	uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_handle::hashv	uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::hh_next	uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
UT_hash_handle::hh_prev	uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
UT_hash_handle::key	uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::keylen	uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::next	uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::prev	uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::tbl	uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table	access:public
UT_hash_table	uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
UT_hash_table::bloom_bv	uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::bloom_nbits	uthash.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::bloom_sig	uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::buckets	uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::hho	uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::ideal_chain_maxlen	uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::ineff_expands	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::log2_num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::noexpand	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::nonideal_items	uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::num_items	uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::signature	uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::tail	uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle	access:public
UsbHub	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UsbHub,$/;"	e	enum:USB_HUB_NODE
UsbMIParent	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UsbMIParent$/;"	e	enum:USB_HUB_NODE
UsbdPipeTypeBulk	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UsbdPipeTypeBulk,$/;"	e	enum:USBD_PIPE_TYPE
UsbdPipeTypeControl	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UsbdPipeTypeControl,$/;"	e	enum:USBD_PIPE_TYPE
UsbdPipeTypeInterrupt	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UsbdPipeTypeInterrupt$/;"	e	enum:USBD_PIPE_TYPE
UsbdPipeTypeIsochronous	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UsbdPipeTypeIsochronous,$/;"	e	enum:USBD_PIPE_TYPE
VALC	fpgautils.c	254;"	d	file:
VALCC	fpgautils.c	284;"	d	file:
VALIDGROUP	api.c	637;"	d	file:
VALO	fpgautils.c	245;"	d	file:
W	driver-antrouter.c	/^	double W;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
W	driver-bmsc.c	/^	double W;$/;"	m	struct:BMSC_INFO	file:	access:public
W	driver-icarus.c	/^	double W;$/;"	m	struct:ICARUS_INFO	file:	access:public
W32NS_IN6ADDRSZ	util.c	131;"	d	file:
W32NS_INADDRSZ	util.c	130;"	d	file:
W32NS_INT16SZ	util.c	132;"	d	file:
WAITFOROK	bitforce-firmware-flash.c	31;"	d	file:
WANT_CRYPTOPP_ASM32	miner.h	223;"	d
WARN_UNUSED_RESULT	ccan/compiler/compiler.h	211;"	d
WARN_UNUSED_RESULT	ccan/compiler/compiler.h	213;"	d
WATCHDOG_DEAD_COUNT	cgminer.c	8836;"	d	file:
WATCHDOG_DEAD_TIME	cgminer.c	8834;"	d	file:
WATCHDOG_INTERVAL	cgminer.c	8832;"	d	file:
WATCHDOG_SICK_COUNT	cgminer.c	8835;"	d	file:
WATCHDOG_SICK_TIME	cgminer.c	8833;"	d	file:
WCHAR_MAX	lib/stdint.in.h	511;"	d
WCHAR_MAX	lib/stdint.in.h	514;"	d
WCHAR_MIN	lib/stdint.in.h	510;"	d
WCHAR_MIN	lib/stdint.in.h	512;"	d
WEAK_CHIP_SYS_CLK	driver-SPI-bitmine-A1.c	383;"	d	file:
WEAK_CHIP_THRESHOLD	driver-SPI-bitmine-A1.c	381;"	d	file:
WINDOWS_2003	compat/libusb-1.0/libusb/os/poll_windows.h	/^	WINDOWS_2003,	\/\/ also includes XP 64$/;"	e	enum:windows_version
WINDOWS_UNSUPPORTED	compat/libusb-1.0/libusb/os/poll_windows.h	/^	WINDOWS_UNSUPPORTED,$/;"	e	enum:windows_version
WINDOWS_VISTA_AND_LATER	compat/libusb-1.0/libusb/os/poll_windows.h	/^	WINDOWS_VISTA_AND_LATER,$/;"	e	enum:windows_version
WINDOWS_XP	compat/libusb-1.0/libusb/os/poll_windows.h	/^	WINDOWS_XP,$/;"	e	enum:windows_version
WINT_MAX	lib/stdint.in.h	519;"	d
WINT_MAX	lib/stdint.in.h	522;"	d
WINT_MIN	lib/stdint.in.h	518;"	d
WINT_MIN	lib/stdint.in.h	520;"	d
WINUSB_INTERFACE_HANDLE	compat/libusb-1.0/libusb/os/windows_usb.h	/^typedef void *WINUSB_INTERFACE_HANDLE, *PWINUSB_INTERFACE_HANDLE;$/;"	t
WINUSB_PIPE_INFORMATION	compat/libusb-1.0/libusb/os/windows_usb.h	/^} WINUSB_PIPE_INFORMATION, *PWINUSB_PIPE_INFORMATION;$/;"	t	typeref:struct:__anon36
WINUSB_SETUP_PACKET	compat/libusb-1.0/libusb/os/windows_usb.h	/^} WINUSB_SETUP_PACKET, *PWINUSB_SETUP_PACKET;$/;"	t	typeref:struct:__anon37
WIN_CALLBACK_EXTRA	usbutils.c	78;"	d	file:
WIN_WRITE_CBEXTRA	usbutils.c	79;"	d	file:
WITEM	driver-bab.c	/^} WITEM;$/;"	t	typeref:struct:witem	file:
WORKCFG	driver-klondike.c	/^} WORKCFG;$/;"	t	typeref:struct:klondike_cfg	file:
WORKING_NOQUEUED	driver-drillbit.h	/^  WORKING_NOQUEUED, \/* Has current work but nothing queued as "next work" *\/$/;"	e	enum:drillbit_chip_state
WORKING_QUEUED	driver-drillbit.h	/^  WORKING_QUEUED   \/* Has current work and a piece of work queued for after that *\/$/;"	e	enum:drillbit_chip_state
WORKRESULT	driver-klondike.c	/^} WORKRESULT;$/;"	t	typeref:struct:_workresult	file:
WORKSTATUS	driver-klondike.c	/^} WORKSTATUS;$/;"	t	typeref:struct:klondike_status	file:
WORKS_PER_CORE	driver-knc.c	32;"	d	file:
WORKTASK	driver-klondike.c	/^} WORKTASK;$/;"	t	typeref:struct:_worktask	file:
WORK_BITS	driver-bab.c	1742;"	d	file:
WORK_CHECK_INTERVAL_MS	driver-bitforce.c	60;"	d	file:
WORK_HISTORY_LEN	driver-drillbit.h	16;"	d
WORK_ITEM	driver-minion.c	/^} WORK_ITEM;$/;"	t	typeref:struct:work_item	file:
WORK_MERKLE7	driver-bab.c	1740;"	d	file:
WORK_NONCE	driver-bab.c	1743;"	d	file:
WORK_NTIME	driver-bab.c	1741;"	d	file:
WP	uthash.h	529;"	d
WRITE_ADDR	driver-minion.c	316;"	d	file:
WRITE_BYTES_SPI0	driver-bitfury.c	78;"	d	file:
WRITE_JOB_LENGTH	A1-common.h	21;"	d
WRITE_SIZE	driver-modminer.c	488;"	d	file:
WR_CLOCK_VALUE	hf_protocol.h	148;"	d
WR_COMMAND_SHIFT	hf_protocol.h	155;"	d
WR_MHZ_DECREASE	hf_protocol.h	150;"	d
WR_MHZ_INCREASE	hf_protocol.h	149;"	d
WR_NO_CHANGE	hf_protocol.h	147;"	d
WR_PERCENT_DECREASE	hf_protocol.h	152;"	d
WR_PERCENT_INCREASE	hf_protocol.h	151;"	d
WR_REVERT	hf_protocol.h	153;"	d
WSAERRORS	api-example.c	/^	struct WSAERRORS {$/;"	s	file:
WSAERRORS	api.c	/^struct WSAERRORS {$/;"	s	file:
WSAERRORS::code	api-example.c	/^		char *code;$/;"	m	struct:WSAERRORS	file:	access:public
WSAERRORS::code	api.c	/^	char *code;$/;"	m	struct:WSAERRORS	file:	access:public
WSAERRORS::id	api-example.c	/^		int id;$/;"	m	struct:WSAERRORS	file:	access:public
WSAERRORS::id	api.c	/^	int id;$/;"	m	struct:WSAERRORS	file:	access:public
WSAErrorMsg	api-example.c	/^	static char *WSAErrorMsg()$/;"	f	file:
WSAErrorMsg	api.c	/^char *WSAErrorMsg(void) {$/;"	f	signature:(void)
WSAErrorMsg	util.h	/^	extern char *WSAErrorMsg(void);$/;"	p	signature:(void)
WSAErrors	api-example.c	/^	} WSAErrors[] = {$/;"	v	typeref:struct:WSAERRORS
WSAErrors	api.c	/^} WSAErrors[] = {$/;"	v	typeref:struct:WSAERRORS
WSA_Data	api-example.c	/^	static WSADATA WSA_Data;$/;"	v	file:
WSAbuf	api-example.c	/^	static char WSAbuf[1024];$/;"	v	file:
WSAbuf	api.c	/^static char WSAbuf[1024];$/;"	v	file:
WorkRequest	driver-drillbit.c	/^} WorkRequest;$/;"	t	typeref:struct:__anon1	file:
WorkResult	driver-drillbit.c	/^} WorkResult;$/;"	t	typeref:struct:__anon2	file:
XFF_ITEM	driver-minion.c	/^} XFF_ITEM;$/;"	t	typeref:struct:xff_item	file:
YES	api.c	/^static const char *YES = "Y";$/;"	v	file:
_	lib/stddef.in.h	43;"	d
_	lib/stdint.in.h	61;"	d
_	lib/string.in.h	30;"	d
_ASC	api.c	255;"	d	file:
_ASCS	api.c	259;"	d	file:
_AVALON2_H_	driver-avalon2.h	12;"	d
_BLOCKERUPTER_H	driver-blockerupter.h	2;"	d
_BSD_SOURCE	bitforce-firmware-flash.c	10;"	d	file:
_BYE	api.c	262;"	d	file:
_CGMINER_NEPTUNE_H	knc-asic.h	2;"	d
_CHECK	api.c	265;"	d	file:
_CRC_H_	crc.h	19;"	d
_DEBUGSET	api.c	267;"	d	file:
_DEVDETAILS	api.c	261;"	d	file:
_DEVS	api.c	243;"	d	file:
_GL_ARG_NONNULL	arg-nonnull.h	22;"	d
_GL_ARG_NONNULL	arg-nonnull.h	24;"	d
_GL_ATTRIBUTE_PURE	lib/string.in.h	43;"	d
_GL_CXXALIASWARN	c++defs.h	220;"	d
_GL_CXXALIASWARN	c++defs.h	239;"	d
_GL_CXXALIASWARN1	c++defs.h	247;"	d
_GL_CXXALIASWARN1	c++defs.h	267;"	d
_GL_CXXALIASWARN1_1	c++defs.h	250;"	d
_GL_CXXALIASWARN1_2	c++defs.h	255;"	d
_GL_CXXALIASWARN1_2	c++defs.h	260;"	d
_GL_CXXALIASWARN1_2	c++defs.h	263;"	d
_GL_CXXALIASWARN_1	c++defs.h	222;"	d
_GL_CXXALIASWARN_2	c++defs.h	227;"	d
_GL_CXXALIASWARN_2	c++defs.h	232;"	d
_GL_CXXALIASWARN_2	c++defs.h	235;"	d
_GL_CXXALIAS_RPL	c++defs.h	115;"	d
_GL_CXXALIAS_RPL_1	c++defs.h	118;"	d
_GL_CXXALIAS_RPL_1	c++defs.h	125;"	d
_GL_CXXALIAS_RPL_CAST_1	c++defs.h	135;"	d
_GL_CXXALIAS_RPL_CAST_1	c++defs.h	143;"	d
_GL_CXXALIAS_SYS	c++defs.h	161;"	d
_GL_CXXALIAS_SYS	c++defs.h	168;"	d
_GL_CXXALIAS_SYS_CAST	c++defs.h	178;"	d
_GL_CXXALIAS_SYS_CAST	c++defs.h	186;"	d
_GL_CXXALIAS_SYS_CAST2	c++defs.h	202;"	d
_GL_CXXALIAS_SYS_CAST2	c++defs.h	211;"	d
_GL_CXXDEFS_H	c++defs.h	18;"	d
_GL_EXTERN_C	c++defs.h	82;"	d
_GL_EXTERN_C	c++defs.h	84;"	d
_GL_FUNCDECL_RPL	c++defs.h	94;"	d
_GL_FUNCDECL_RPL	lib/string.in.h	/^_GL_FUNCDECL_RPL (memchr, void *, (void const *__s, int __c, size_t __n)$/;"	p	signature:(memchr, void *, (void const *__s, int __c, size_t __n) _GL_ATTRIBUTE_PURE _GL_ARG_NONNULL ((1)))
_GL_FUNCDECL_RPL_1	c++defs.h	96;"	d
_GL_FUNCDECL_SYS	c++defs.h	106;"	d
_GL_JUST_INCLUDE_SYSTEM_INTTYPES_H	lib/stdint.in.h	35;"	d
_GL_JUST_INCLUDE_SYSTEM_INTTYPES_H	lib/stdint.in.h	94;"	d
_GL_JUST_INCLUDE_SYSTEM_WCHAR_H	lib/stdint.in.h	506;"	d
_GL_JUST_INCLUDE_SYSTEM_WCHAR_H	lib/stdint.in.h	508;"	d
_GL_SIG_HANDLER_H	lib/sig-handler.h	19;"	d
_GL_STDDEF_WINT_T	lib/stddef.in.h	44;"	d
_GL_WARN_EXTERN_C	warn-on-use.h	105;"	d
_GL_WARN_EXTERN_C	warn-on-use.h	107;"	d
_GL_WARN_ON_USE	warn-on-use.h	68;"	d
_GL_WARN_ON_USE	warn-on-use.h	72;"	d
_GL_WARN_ON_USE	warn-on-use.h	75;"	d
_GL_WARN_ON_USE_CXX	warn-on-use.h	88;"	d
_GL_WARN_ON_USE_CXX	warn-on-use.h	93;"	d
_GL_WARN_ON_USE_CXX	warn-on-use.h	96;"	d
_GNU_SOURCE	compat/jansson-2.6/src/dump.c	9;"	d	file:
_GNU_SOURCE	compat/jansson-2.6/src/load.c	9;"	d	file:
_GNU_SOURCE	compat/jansson-2.6/src/strbuffer.c	9;"	d	file:
_GNU_SOURCE	compat/jansson-2.6/src/value.c	9;"	d	file:
_HASHRATIO_H_	driver-hashratio.h	12;"	d
_HF_PROTOCOL_BE_H_	hf_protocol_be.h	15;"	d
_HF_PROTOCOL_H_	hf_protocol.h	15;"	d
_LCD	api.c	270;"	d	file:
_LINUX_LIST_H	elist.h	2;"	d
_MEMORY_DEBUG_MASTER	api.c	10;"	d	file:
_MINECOIN	api.c	266;"	d	file:
_MINECONFIG	api.c	248;"	d	file:
_MINESTATS	api.c	264;"	d	file:
_NOTIFY	api.c	260;"	d	file:
_PGA	api.c	251;"	d	file:
_PGAS	api.c	258;"	d	file:
_POOLS	api.c	244;"	d	file:
_RESTART	api.c	263;"	d	file:
_SETCONFIG	api.c	268;"	d	file:
_SSIZE_T_DEFINED	compat/libusb-1.0/libusb/libusb.h	31;"	d
_STATUS	api.c	246;"	d	file:
_STDINT_MAX	lib/stdint.in.h	103;"	d
_STDINT_MIN	lib/stdint.in.h	100;"	d
_SUMMARY	api.c	245;"	d	file:
_TIMESPEC_DEFINED	compat/libusb-1.0/libusb/os/threads_windows.h	48;"	d
_UINT32_T	lib/stdint.in.h	191;"	d
_UINT64_T	lib/stdint.in.h	192;"	d
_UINT8_T	lib/stdint.in.h	190;"	d
_USBSTATS	api.c	269;"	d	file:
_VERSION	api.c	247;"	d	file:
_W32_FT_OFFSET	compat/libusb-1.0/libusb/core.c	1859;"	d	file:
_XOPEN_SOURCE	compat/libusb-1.0/libusb/os/threads_posix.c	24;"	d	file:
_XOPEN_SOURCE	compat/libusb-1.0/libusb/os/threads_posix.c	25;"	d	file:
_XOPEN_SOURCE	compat/libusb-1.0/libusb/os/threads_posix.c	28;"	d	file:
__BENCH_BLOCK_H__	bench_block.h	2;"	d
__COMPAT_H__	compat.h	2;"	d
__DRIVER_ANTROUTER_H__	driver-antrouter.h	2;"	d
__LOGGING_H__	logging.h	2;"	d
__MINER_H__	miner.h	2;"	d
__STDINT_H__	lib/stdint.in.h	50;"	d
__UTIL_H__	util.h	2;"	d
____MINERGATE_LIB30_H___	driver-spondoolies-sp30-p.h	14;"	d
____MINERGATE_LIB_H___	driver-spondoolies-sp10-p.h	14;"	d
__add_queued	cgminer.c	/^void __add_queued(struct cgpu_info *cgpu, struct work *work)$/;"	f	signature:(struct cgpu_info *cgpu, struct work *work)
__add_queued	miner.h	/^extern void __add_queued(struct cgpu_info *cgpu, struct work *work);$/;"	p	signature:(struct cgpu_info *cgpu, struct work *work)
__anon11::freq	driver-icarus.c	/^	float freq;$/;"	m	struct:__anon11	file:	access:public
__anon11::hex	driver-icarus.c	/^	uint16_t hex;$/;"	m	struct:__anon11	file:	access:public
__anon13::cgminer_work	driver-spondoolies-sp30.h	/^	struct work      *cgminer_work;$/;"	m	struct:__anon13	typeref:struct:__anon13::work	access:public
__anon13::job_id	driver-spondoolies-sp30.h	/^	int              job_id;$/;"	m	struct:__anon13	access:public
__anon13::merkle_root	driver-spondoolies-sp30.h	/^	uint32_t         merkle_root;$/;"	m	struct:__anon13	access:public
__anon13::start_time	driver-spondoolies-sp30.h	/^	time_t           start_time;$/;"	m	struct:__anon13	access:public
__anon13::state	driver-spondoolies-sp30.h	/^	SPONDWORK_STATE  state;$/;"	m	struct:__anon13	access:public
__anon14::column	compat/jansson-2.6/src/pack_unpack.c	/^    int column;$/;"	m	struct:__anon14	file:	access:public
__anon14::line	compat/jansson-2.6/src/pack_unpack.c	/^    int line;$/;"	m	struct:__anon14	file:	access:public
__anon14::pos	compat/jansson-2.6/src/pack_unpack.c	/^    size_t pos;$/;"	m	struct:__anon14	file:	access:public
__anon14::token	compat/jansson-2.6/src/pack_unpack.c	/^    char token;$/;"	m	struct:__anon14	file:	access:public
__anon15::column	compat/jansson-2.6/src/pack_unpack.c	/^    int column;$/;"	m	struct:__anon15	file:	access:public
__anon15::error	compat/jansson-2.6/src/pack_unpack.c	/^    json_error_t *error;$/;"	m	struct:__anon15	file:	access:public
__anon15::flags	compat/jansson-2.6/src/pack_unpack.c	/^    size_t flags;$/;"	m	struct:__anon15	file:	access:public
__anon15::fmt	compat/jansson-2.6/src/pack_unpack.c	/^    const char *fmt;$/;"	m	struct:__anon15	file:	access:public
__anon15::line	compat/jansson-2.6/src/pack_unpack.c	/^    int line;$/;"	m	struct:__anon15	file:	access:public
__anon15::next_token	compat/jansson-2.6/src/pack_unpack.c	/^    token_t next_token;$/;"	m	struct:__anon15	file:	access:public
__anon15::pos	compat/jansson-2.6/src/pack_unpack.c	/^    size_t pos;$/;"	m	struct:__anon15	file:	access:public
__anon15::prev_token	compat/jansson-2.6/src/pack_unpack.c	/^    token_t prev_token;$/;"	m	struct:__anon15	file:	access:public
__anon15::start	compat/jansson-2.6/src/pack_unpack.c	/^    const char *start;$/;"	m	struct:__anon15	file:	access:public
__anon15::token	compat/jansson-2.6/src/pack_unpack.c	/^    token_t token;$/;"	m	struct:__anon15	file:	access:public
__anon16::buffer	compat/jansson-2.6/src/load.c	/^    char buffer[5];$/;"	m	struct:__anon16	file:	access:public
__anon16::buffer_pos	compat/jansson-2.6/src/load.c	/^    size_t buffer_pos;$/;"	m	struct:__anon16	file:	access:public
__anon16::column	compat/jansson-2.6/src/load.c	/^    int column, last_column;$/;"	m	struct:__anon16	file:	access:public
__anon16::data	compat/jansson-2.6/src/load.c	/^    void *data;$/;"	m	struct:__anon16	file:	access:public
__anon16::get	compat/jansson-2.6/src/load.c	/^    get_func get;$/;"	m	struct:__anon16	file:	access:public
__anon16::last_column	compat/jansson-2.6/src/load.c	/^    int column, last_column;$/;"	m	struct:__anon16	file:	access:public
__anon16::line	compat/jansson-2.6/src/load.c	/^    int line;$/;"	m	struct:__anon16	file:	access:public
__anon16::position	compat/jansson-2.6/src/load.c	/^    size_t position;$/;"	m	struct:__anon16	file:	access:public
__anon16::state	compat/jansson-2.6/src/load.c	/^    int state;$/;"	m	struct:__anon16	file:	access:public
__anon17::__anon18::integer	compat/jansson-2.6/src/load.c	/^        json_int_t integer;$/;"	m	union:__anon17::__anon18	file:	access:public
__anon17::__anon18::real	compat/jansson-2.6/src/load.c	/^        double real;$/;"	m	union:__anon17::__anon18	file:	access:public
__anon17::__anon18::string	compat/jansson-2.6/src/load.c	/^        char *string;$/;"	m	union:__anon17::__anon18	file:	access:public
__anon17::saved_text	compat/jansson-2.6/src/load.c	/^    strbuffer_t saved_text;$/;"	m	struct:__anon17	file:	access:public
__anon17::stream	compat/jansson-2.6/src/load.c	/^    stream_t stream;$/;"	m	struct:__anon17	file:	access:public
__anon17::token	compat/jansson-2.6/src/load.c	/^    int token;$/;"	m	struct:__anon17	file:	access:public
__anon17::value	compat/jansson-2.6/src/load.c	/^    } value;$/;"	m	struct:__anon17	typeref:union:__anon17::__anon18	file:	access:public
__anon19::data	compat/jansson-2.6/src/load.c	/^    const char *data;$/;"	m	struct:__anon19	file:	access:public
__anon19::pos	compat/jansson-2.6/src/load.c	/^    int pos;$/;"	m	struct:__anon19	file:	access:public
__anon1::chip_id	driver-drillbit.c	/^	uint16_t chip_id;$/;"	m	struct:__anon1	file:	access:public
__anon1::data	driver-drillbit.c	/^	uint8_t data[12];$/;"	m	struct:__anon1	file:	access:public
__anon1::midstate	driver-drillbit.c	/^	uint8_t midstate[32];$/;"	m	struct:__anon1	file:	access:public
__anon20::data	compat/jansson-2.6/src/load.c	/^    const char *data;$/;"	m	struct:__anon20	file:	access:public
__anon20::len	compat/jansson-2.6/src/load.c	/^    size_t len;$/;"	m	struct:__anon20	file:	access:public
__anon20::pos	compat/jansson-2.6/src/load.c	/^    size_t pos;$/;"	m	struct:__anon20	file:	access:public
__anon21::arg	compat/jansson-2.6/src/load.c	/^    void *arg;$/;"	m	struct:__anon21	file:	access:public
__anon21::callback	compat/jansson-2.6/src/load.c	/^    json_load_callback_t callback;$/;"	m	struct:__anon21	file:	access:public
__anon21::data	compat/jansson-2.6/src/load.c	/^    char data[MAX_BUF_LEN];$/;"	m	struct:__anon21	file:	access:public
__anon21::len	compat/jansson-2.6/src/load.c	/^    size_t len;$/;"	m	struct:__anon21	file:	access:public
__anon21::pos	compat/jansson-2.6/src/load.c	/^    size_t pos;$/;"	m	struct:__anon21	file:	access:public
__anon22::hashtable	compat/jansson-2.6/src/jansson_private.h	/^    hashtable_t hashtable;$/;"	m	struct:__anon22	access:public
__anon22::json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon22	access:public
__anon22::serial	compat/jansson-2.6/src/jansson_private.h	/^    size_t serial;$/;"	m	struct:__anon22	access:public
__anon22::visited	compat/jansson-2.6/src/jansson_private.h	/^    int visited;$/;"	m	struct:__anon22	access:public
__anon23::entries	compat/jansson-2.6/src/jansson_private.h	/^    size_t entries;$/;"	m	struct:__anon23	access:public
__anon23::json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon23	access:public
__anon23::size	compat/jansson-2.6/src/jansson_private.h	/^    size_t size;$/;"	m	struct:__anon23	access:public
__anon23::table	compat/jansson-2.6/src/jansson_private.h	/^    json_t **table;$/;"	m	struct:__anon23	access:public
__anon23::visited	compat/jansson-2.6/src/jansson_private.h	/^    int visited;$/;"	m	struct:__anon23	access:public
__anon24::json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon24	access:public
__anon24::value	compat/jansson-2.6/src/jansson_private.h	/^    char *value;$/;"	m	struct:__anon24	access:public
__anon25::json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon25	access:public
__anon25::value	compat/jansson-2.6/src/jansson_private.h	/^    double value;$/;"	m	struct:__anon25	access:public
__anon26::json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon26	access:public
__anon26::value	compat/jansson-2.6/src/jansson_private.h	/^    json_int_t value;$/;"	m	struct:__anon26	access:public
__anon28::column	compat/jansson-2.6/src/jansson.h	/^    int column;$/;"	m	struct:__anon28	access:public
__anon28::line	compat/jansson-2.6/src/jansson.h	/^    int line;$/;"	m	struct:__anon28	access:public
__anon28::position	compat/jansson-2.6/src/jansson.h	/^    int position;$/;"	m	struct:__anon28	access:public
__anon28::source	compat/jansson-2.6/src/jansson.h	/^    char source[JSON_ERROR_SOURCE_LENGTH];$/;"	m	struct:__anon28	access:public
__anon28::text	compat/jansson-2.6/src/jansson.h	/^    char text[JSON_ERROR_TEXT_LENGTH];$/;"	m	struct:__anon28	access:public
__anon29::length	compat/jansson-2.6/src/strbuffer.h	/^    size_t length;   \/* bytes used *\/$/;"	m	struct:__anon29	access:public
__anon29::size	compat/jansson-2.6/src/strbuffer.h	/^    size_t size;     \/* bytes allocated *\/$/;"	m	struct:__anon29	access:public
__anon29::value	compat/jansson-2.6/src/strbuffer.h	/^    char *value;$/;"	m	struct:__anon29	access:public
__anon2::chip_id	driver-drillbit.c	/^	uint16_t chip_id;$/;"	m	struct:__anon2	file:	access:public
__anon2::is_idle	driver-drillbit.c	/^	uint8_t is_idle;$/;"	m	struct:__anon2	file:	access:public
__anon2::nonce	driver-drillbit.c	/^	uint32_t nonce[MAX_RESULTS];$/;"	m	struct:__anon2	file:	access:public
__anon2::num_nonces	driver-drillbit.c	/^	uint8_t num_nonces;$/;"	m	struct:__anon2	file:	access:public
__anon36::Interval	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR          Interval;$/;"	m	struct:__anon36	access:public
__anon36::MaximumPacketSize	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT         MaximumPacketSize;$/;"	m	struct:__anon36	access:public
__anon36::PipeId	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR          PipeId;$/;"	m	struct:__anon36	access:public
__anon36::PipeType	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USBD_PIPE_TYPE PipeType;$/;"	m	struct:__anon36	access:public
__anon37::index	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT index;$/;"	m	struct:__anon37	access:public
__anon37::length	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT length;$/;"	m	struct:__anon37	access:public
__anon37::request	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  request;$/;"	m	struct:__anon37	access:public
__anon37::request_type	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  request_type;$/;"	m	struct:__anon37	access:public
__anon37::value	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT value;$/;"	m	struct:__anon37	access:public
__anon38::mutex	compat/libusb-1.0/libusb/os/poll_windows.c	/^	CRITICAL_SECTION mutex; \/\/ lock for fds$/;"	m	struct:__anon38	file:	access:public
__anon38::original_handle	compat/libusb-1.0/libusb/os/poll_windows.c	/^	HANDLE original_handle;$/;"	m	struct:__anon38	file:	access:public
__anon38::thread_id	compat/libusb-1.0/libusb/os/poll_windows.c	/^	DWORD thread_id;$/;"	m	struct:__anon38	file:	access:public
__anon3::clock_div2	driver-drillbit.c	/^	uint8_t clock_div2;	 \/\/ Apply the \/2 clock divider (both internal and external), where available$/;"	m	struct:__anon3	file:	access:public
__anon3::clock_freq	driver-drillbit.c	/^	uint16_t clock_freq; \/\/ Clock frequency in MHz (or clock level 30-48 for Bitfury internal clock level)$/;"	m	struct:__anon3	file:	access:public
__anon3::core_voltage	driver-drillbit.c	/^	uint16_t core_voltage; \/\/ Millivolts$/;"	m	struct:__anon3	file:	access:public
__anon3::use_ext_clock	driver-drillbit.c	/^	uint8_t use_ext_clock; \/\/ Flag. Ignored on boards without external clocks$/;"	m	struct:__anon3	file:	access:public
__anon44::difficulty	driver-spondoolies-sp10-p.h	/^	uint32_t difficulty;$/;"	m	struct:__anon44	access:public
__anon44::leading_zeroes	driver-spondoolies-sp10-p.h	/^	uint8_t leading_zeroes;$/;"	m	struct:__anon44	access:public
__anon44::midstate	driver-spondoolies-sp10-p.h	/^	uint32_t midstate[8];$/;"	m	struct:__anon44	access:public
__anon44::mrkle_root	driver-spondoolies-sp10-p.h	/^	uint32_t mrkle_root;$/;"	m	struct:__anon44	access:public
__anon44::ntime_limit	driver-spondoolies-sp10-p.h	/^	uint8_t ntime_limit;$/;"	m	struct:__anon44	access:public
__anon44::ntime_offset	driver-spondoolies-sp10-p.h	/^	uint8_t ntime_offset;$/;"	m	struct:__anon44	access:public
__anon44::resr1	driver-spondoolies-sp10-p.h	/^	uint8_t resr1;$/;"	m	struct:__anon44	access:public
__anon44::timestamp	driver-spondoolies-sp10-p.h	/^	uint32_t timestamp;$/;"	m	struct:__anon44	access:public
__anon44::work_id_in_sw	driver-spondoolies-sp10-p.h	/^	uint32_t work_id_in_sw;$/;"	m	struct:__anon44	access:public
__anon45::mrkle_root	driver-spondoolies-sp10-p.h	/^	uint32_t mrkle_root;     \/\/ to validate$/;"	m	struct:__anon45	access:public
__anon45::ntime_offset	driver-spondoolies-sp10-p.h	/^	uint8_t  ntime_offset;$/;"	m	struct:__anon45	access:public
__anon45::res	driver-spondoolies-sp10-p.h	/^	uint8_t  res;            \/\/ 0 = done, 1 = overflow, 2 = dropped bist$/;"	m	struct:__anon45	access:public
__anon45::resrv1	driver-spondoolies-sp10-p.h	/^	uint8_t  resrv1;$/;"	m	struct:__anon45	access:public
__anon45::resrv2	driver-spondoolies-sp10-p.h	/^	uint8_t  resrv2;$/;"	m	struct:__anon45	access:public
__anon45::winner_nonce	driver-spondoolies-sp10-p.h	/^	uint32_t winner_nonce[2];$/;"	m	struct:__anon45	access:public
__anon45::work_id_in_sw	driver-spondoolies-sp10-p.h	/^	uint32_t work_id_in_sw;$/;"	m	struct:__anon45	access:public
__anon46::magic	driver-spondoolies-sp10-p.h	/^	uint16_t magic; \/\/ 0xcafe$/;"	m	struct:__anon46	access:public
__anon46::mask	driver-spondoolies-sp10-p.h	/^	uint8_t mask; \/\/ 0x01 = first request, 0x2 = drop old work$/;"	m	struct:__anon46	access:public
__anon46::protocol_version	driver-spondoolies-sp10-p.h	/^	uint8_t protocol_version;$/;"	m	struct:__anon46	access:public
__anon46::req	driver-spondoolies-sp10-p.h	/^	minergate_do_job_req req[MAX_REQUESTS]; \/\/ array of requests$/;"	m	struct:__anon46	access:public
__anon46::req_count	driver-spondoolies-sp10-p.h	/^	uint16_t req_count;$/;"	m	struct:__anon46	access:public
__anon46::request_id	driver-spondoolies-sp10-p.h	/^	uint8_t request_id;$/;"	m	struct:__anon46	access:public
__anon46::requester_id	driver-spondoolies-sp10-p.h	/^	uint8_t requester_id;$/;"	m	struct:__anon46	access:public
__anon47::gh_div_10_rate	driver-spondoolies-sp10-p.h	/^	uint8_t gh_div_10_rate; \/\/ == $/;"	m	struct:__anon47	access:public
__anon47::magic	driver-spondoolies-sp10-p.h	/^	uint16_t magic; \/\/ 0xcafe$/;"	m	struct:__anon47	access:public
__anon47::protocol_version	driver-spondoolies-sp10-p.h	/^	uint8_t protocol_version;$/;"	m	struct:__anon47	access:public
__anon47::request_id	driver-spondoolies-sp10-p.h	/^	uint8_t request_id;$/;"	m	struct:__anon47	access:public
__anon47::requester_id	driver-spondoolies-sp10-p.h	/^	uint8_t requester_id;$/;"	m	struct:__anon47	access:public
__anon47::rsp	driver-spondoolies-sp10-p.h	/^	minergate_do_job_rsp rsp[MAX_RESPONDS]; \/\/ array of responce$/;"	m	struct:__anon47	access:public
__anon47::rsp_count	driver-spondoolies-sp10-p.h	/^	uint16_t rsp_count;$/;"	m	struct:__anon47	access:public
__anon49::request	driver-minion.c	/^	int request;$/;"	m	struct:__anon49	file:	access:public
__anon49::value	driver-minion.c	/^	int value;$/;"	m	struct:__anon49	file:	access:public
__anon4::chip_id	driver-drillbit.c	/^	uint16_t chip_id;$/;"	m	struct:__anon4	file:	access:public
__anon4::increase_clock	driver-drillbit.c	/^	uint8_t increase_clock;$/;"	m	struct:__anon4	file:	access:public
__anon51::cgminer_work	driver-spondoolies-sp10.h	/^	struct work      *cgminer_work;$/;"	m	struct:__anon51	typeref:struct:__anon51::work	access:public
__anon51::job_id	driver-spondoolies-sp10.h	/^	int              job_id[MAX_NROLES];$/;"	m	struct:__anon51	access:public
__anon51::merkle_root	driver-spondoolies-sp10.h	/^	uint32_t         merkle_root;$/;"	m	struct:__anon51	access:public
__anon51::ntime_clones	driver-spondoolies-sp10.h	/^	int              ntime_clones;$/;"	m	struct:__anon51	access:public
__anon51::start_time	driver-spondoolies-sp10.h	/^	time_t           start_time;$/;"	m	struct:__anon51	access:public
__anon51::state	driver-spondoolies-sp10.h	/^	SPONDWORK_STATE  state;$/;"	m	struct:__anon51	access:public
__anon53::name	util.c	/^	const char *name;$/;"	m	struct:__anon53	file:	access:public
__anon53::proxytype	util.c	/^	proxytypes_t proxytype;$/;"	m	struct:__anon53	file:	access:public
__anon5::clock_div2	driver-drillbit.c	/^	uint8_t clock_div2;	\/\/ Apply the \/2 clock divider (both internal and external)$/;"	m	struct:__anon5	file:	access:public
__anon5::core_voltage	driver-drillbit.c	/^	uint8_t core_voltage; \/\/ Set to flags defined above$/;"	m	struct:__anon5	file:	access:public
__anon5::ext_clock_freq	driver-drillbit.c	/^	uint16_t ext_clock_freq;$/;"	m	struct:__anon5	file:	access:public
__anon5::int_clock_level	driver-drillbit.c	/^	uint8_t int_clock_level; \/\/ Clock level (30-48 without divider), see asic.c for details$/;"	m	struct:__anon5	file:	access:public
__anon5::use_ext_clock	driver-drillbit.c	/^	uint8_t use_ext_clock; \/\/ Ignored on boards without external clocks$/;"	m	struct:__anon5	file:	access:public
__anon60::request	driver-bab.c	/^	int request;$/;"	m	struct:__anon60	file:	access:public
__anon60::value	driver-bab.c	/^	int value;$/;"	m	struct:__anon60	file:	access:public
__anon62::block	sha2.h	/^    unsigned char block[2 * SHA256_BLOCK_SIZE];$/;"	m	struct:__anon62	access:public
__anon62::h	sha2.h	/^    uint32_t h[8];$/;"	m	struct:__anon62	access:public
__anon62::len	sha2.h	/^    unsigned int len;$/;"	m	struct:__anon62	access:public
__anon62::tot_len	sha2.h	/^    unsigned int tot_len;$/;"	m	struct:__anon62	access:public
__anon64::difficulty	driver-spondoolies-sp30-p.h	/^  uint32_t difficulty;$/;"	m	struct:__anon64	access:public
__anon64::leading_zeroes	driver-spondoolies-sp30-p.h	/^  uint8_t leading_zeroes;$/;"	m	struct:__anon64	access:public
__anon64::midstate	driver-spondoolies-sp30-p.h	/^  uint32_t midstate[8];$/;"	m	struct:__anon64	access:public
__anon64::mrkle_root	driver-spondoolies-sp30-p.h	/^  uint32_t mrkle_root;$/;"	m	struct:__anon64	access:public
__anon64::ntime_limit	driver-spondoolies-sp30-p.h	/^  uint8_t ntime_limit; \/\/ max ntime - should be 60$/;"	m	struct:__anon64	access:public
__anon64::resr1	driver-spondoolies-sp30-p.h	/^  uint8_t resr1;$/;"	m	struct:__anon64	access:public
__anon64::resr2	driver-spondoolies-sp30-p.h	/^  uint8_t resr2;$/;"	m	struct:__anon64	access:public
__anon64::timestamp	driver-spondoolies-sp30-p.h	/^  uint32_t timestamp;$/;"	m	struct:__anon64	access:public
__anon64::work_id_in_sw	driver-spondoolies-sp30-p.h	/^  uint32_t work_id_in_sw;$/;"	m	struct:__anon64	access:public
__anon65::job_complete	driver-spondoolies-sp30-p.h	/^  uint8_t job_complete; $/;"	m	struct:__anon65	access:public
__anon65::mrkle_root	driver-spondoolies-sp30-p.h	/^  uint32_t mrkle_root; \/\/ to validate$/;"	m	struct:__anon65	access:public
__anon65::ntime_offset	driver-spondoolies-sp30-p.h	/^  uint8_t  ntime_offset;$/;"	m	struct:__anon65	access:public
__anon65::res	driver-spondoolies-sp30-p.h	/^  uint8_t res; \/\/ 0 = done, 1 = overflow, 2 = dropped bist$/;"	m	struct:__anon65	access:public
__anon65::resrv2	driver-spondoolies-sp30-p.h	/^  uint8_t resrv2; $/;"	m	struct:__anon65	access:public
__anon65::winner_nonce	driver-spondoolies-sp30-p.h	/^  uint32_t winner_nonce;  $/;"	m	struct:__anon65	access:public
__anon65::work_id_in_sw	driver-spondoolies-sp30-p.h	/^  uint32_t work_id_in_sw;$/;"	m	struct:__anon65	access:public
__anon66::magic	driver-spondoolies-sp30-p.h	/^  uint16_t magic;   \/\/ 0xcaf4$/;"	m	struct:__anon66	access:public
__anon66::mask	driver-spondoolies-sp30-p.h	/^	uint8_t mask; \/\/ 0x01 = first request, 0x2 = drop old work$/;"	m	struct:__anon66	access:public
__anon66::protocol_version	driver-spondoolies-sp30-p.h	/^  uint8_t protocol_version;$/;"	m	struct:__anon66	access:public
__anon66::req	driver-spondoolies-sp30-p.h	/^  minergate_do_job_req_sp30 req[MAX_REQUESTS_SP30]; \/\/ array of requests$/;"	m	struct:__anon66	access:public
__anon66::req_count	driver-spondoolies-sp30-p.h	/^  uint16_t req_count;$/;"	m	struct:__anon66	access:public
__anon66::request_id	driver-spondoolies-sp30-p.h	/^  uint8_t request_id;$/;"	m	struct:__anon66	access:public
__anon66::requester_id	driver-spondoolies-sp30-p.h	/^  uint8_t requester_id;$/;"	m	struct:__anon66	access:public
__anon67::gh_div_50_rate	driver-spondoolies-sp30-p.h	/^  uint8_t gh_div_50_rate;$/;"	m	struct:__anon67	access:public
__anon67::magic	driver-spondoolies-sp30-p.h	/^  uint16_t magic;   \/\/ 0xcaf4$/;"	m	struct:__anon67	access:public
__anon67::protocol_version	driver-spondoolies-sp30-p.h	/^  uint8_t protocol_version;$/;"	m	struct:__anon67	access:public
__anon67::request_id	driver-spondoolies-sp30-p.h	/^  uint8_t request_id;$/;"	m	struct:__anon67	access:public
__anon67::requester_id	driver-spondoolies-sp30-p.h	/^  uint8_t requester_id;$/;"	m	struct:__anon67	access:public
__anon67::rsp	driver-spondoolies-sp30-p.h	/^  minergate_do_job_rsp_sp30 rsp[MAX_RESPONDS_SP30]; \/\/ array of responces$/;"	m	struct:__anon67	access:public
__anon67::rsp_count	driver-spondoolies-sp30-p.h	/^  uint16_t rsp_count;$/;"	m	struct:__anon67	access:public
__anon6::capabilities	driver-drillbit.c	/^	uint16_t capabilities;$/;"	m	struct:__anon6	file:	access:public
__anon6::num_chips	driver-drillbit.c	/^	uint8_t num_chips;$/;"	m	struct:__anon6	file:	access:public
__anon6::product	driver-drillbit.c	/^	char product[8];$/;"	m	struct:__anon6	file:	access:public
__anon6::protocol_version	driver-drillbit.c	/^	uint8_t protocol_version;$/;"	m	struct:__anon6	file:	access:public
__anon6::serial	driver-drillbit.c	/^	uint32_t serial;$/;"	m	struct:__anon6	file:	access:public
__anon7::config	driver-drillbit.c	/^	BoardConfig config;$/;"	m	struct:__anon7	file:	access:public
__anon7::hh	driver-drillbit.c	/^	UT_hash_handle hh;$/;"	m	struct:__anon7	file:	access:public
__anon7::key	driver-drillbit.c	/^	char key[9];$/;"	m	struct:__anon7	file:	access:public
__bflsc_initialise	driver-bflsc.c	/^static void __bflsc_initialise(struct cgpu_info *bflsc)$/;"	f	file:	signature:(struct cgpu_info *bflsc)
__bin2hex	miner.h	/^extern void __bin2hex(char *s, const unsigned char *p, size_t len);$/;"	p	signature:(char *s, const unsigned char *p, size_t len)
__bin2hex	util.c	/^void __bin2hex(char *s, const unsigned char *p, size_t len)$/;"	f	signature:(char *s, const unsigned char *p, size_t len)
__board_selector_reset	A1-desk-board-selector.c	/^static bool __board_selector_reset(void)$/;"	f	file:	signature:(void)
__buf	usbutils.c	/^	struct seminfo *__buf;$/;"	m	union:semun	typeref:struct:semun::seminfo	file:	access:public
__build_gbt_txns	cgminer.c	/^static void __build_gbt_txns(struct pool *pool, json_t *res_val)$/;"	f	file:	signature:(struct pool *pool, json_t *res_val)
__builtin_expect	lib/memmem.c	29;"	d	file:
__ccd_board_selector_reset	A1-board-selector-CCD.c	/^static bool __ccd_board_selector_reset(uint8_t mask)$/;"	f	file:	signature:(uint8_t mask)
__ccr_board_selector_reset	A1-board-selector-CCR.c	/^static bool __ccr_board_selector_reset(uint8_t p0, uint8_t p1)$/;"	f	file:	signature:(uint8_t p0, uint8_t p1)
__do_ioctl	driver-minion.c	/^static int __do_ioctl(struct cgpu_info *minioncgpu, struct minion_info *minioninfo,$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int pin, uint8_t *obuf, uint32_t osiz, uint8_t *rbuf, uint32_t rsiz, uint64_t *ioseq, MINION_FFL_ARGS)
__find_work_byid	cgminer.c	/^struct work *__find_work_byid(struct work *que, uint32_t id)$/;"	f	signature:(struct work *que, uint32_t id)
__find_work_byid	miner.h	/^extern struct work *__find_work_byid(struct work *que, uint32_t id);$/;"	p	signature:(struct work *que, uint32_t id)
__find_work_bymidstate	cgminer.c	/^struct work *__find_work_bymidstate(struct work *que, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)$/;"	f	signature:(struct work *que, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)
__find_work_bymidstate	miner.h	/^extern struct work *__find_work_bymidstate(struct work *que, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen);$/;"	p	signature:(struct work *que, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)
__gbt_merkleroot	cgminer.c	/^static void __gbt_merkleroot(struct pool *pool, unsigned char *merkle_root)$/;"	f	file:	signature:(struct pool *pool, unsigned char *merkle_root)
__get_queued	cgminer.c	/^struct work *__get_queued(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
__get_queued	miner.h	/^extern struct work *__get_queued(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
__get_thread	cgminer.c	/^static struct thr_info *__get_thread(int thr_id)$/;"	f	file:	signature:(int thr_id)
__hfa_send_frame	driver-hashfast.c	/^static bool __hfa_send_frame(struct cgpu_info *hashfast, uint8_t opcode, int tx_length,$/;"	f	file:	signature:(struct cgpu_info *hashfast, uint8_t opcode, int tx_length, uint8_t *packet)
__is_in_use	usbutils.c	/^static bool __is_in_use(uint8_t bus_number, uint8_t device_address)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address)
__json_array_string	util.c	/^static char *__json_array_string(json_t *val, unsigned int entry)$/;"	f	file:	signature:(json_t *val, unsigned int entry)
__kill_work	cgminer.c	/^static void __kill_work(void)$/;"	f	file:	signature:(void)
__list_add	elist.h	/^static inline void __list_add(struct list_head *new,$/;"	f	signature:(struct list_head *new, struct list_head *prev, struct list_head *next)
__list_del	elist.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f	signature:(struct list_head *prev, struct list_head *next)
__list_splice	elist.h	/^static inline void __list_splice(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
__maybe_unused	miner.h	218;"	d
__memchr	lib/memchr.c	/^__memchr (void const *s, int c_in, size_t n)$/;"	f	signature:(void const *s, int c_in, size_t n)
__memchr	lib/memchr.c	48;"	d	file:
__memchr	lib/memchr.c	54;"	d	file:
__quit	cgminer.c	/^void __quit(int status, bool clean)$/;"	f	signature:(int status, bool clean)
__quit	miner.h	/^extern void __quit(int status, bool clean);$/;"	p	signature:(int status, bool clean)
__read_sysfs_attr	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int __read_sysfs_attr(struct libusb_context *ctx,$/;"	f	file:	signature:(struct libusb_context *ctx, const char *devname, const char *attr)
__release_cgpu	usbutils.c	/^static bool __release_cgpu(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
__remove_in_use	usbutils.c	/^static void __remove_in_use(uint8_t bus_number, uint8_t device_address, bool blacklist)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address, bool blacklist)
__setup_gbt_solo	cgminer.c	/^static void __setup_gbt_solo(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
__stratum_send	util.c	/^static enum send_ret __stratum_send(struct pool *pool, char *s, ssize_t len)$/;"	f	file:	signature:(struct pool *pool, char *s, ssize_t len)
__suspend_stratum	util.c	/^static void __suspend_stratum(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
__total_staged	cgminer.c	/^static int __total_staged(void)$/;"	f	file:	signature:(void)
__usb_detect	usbutils.c	/^void __usb_detect(struct device_drv *drv, struct cgpu_info *(*device_detect)(struct libusb_device *, struct usb_find_devices *),$/;"	f	signature:(struct device_drv *drv, struct cgpu_info *(*device_detect)(struct libusb_device *, struct usb_find_devices *), bool single)
__usb_detect	usbutils.h	/^void __usb_detect(struct device_drv *drv, struct cgpu_info *(*device_detect)(struct libusb_device *, struct usb_find_devices *),$/;"	p	signature:(struct device_drv *drv, struct cgpu_info *(*device_detect)(struct libusb_device *, struct usb_find_devices *), bool single)
__usb_transfer	usbutils.c	/^int __usb_transfer(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, unsigned int timeout, __maybe_unused enum usb_cmds cmd)$/;"	f	signature:(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, unsigned int timeout, __maybe_unused enum usb_cmds cmd)
__work_completed	cgminer.c	/^void __work_completed(struct cgpu_info *cgpu, struct work *work)$/;"	f	signature:(struct cgpu_info *cgpu, struct work *work)
__work_completed	miner.h	/^extern void __work_completed(struct cgpu_info *cgpu, struct work *work);$/;"	p	signature:(struct cgpu_info *cgpu, struct work *work)
_access_endpoint	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^_access_endpoint(struct libusb_transfer *transfer)$/;"	f	signature:(struct libusb_transfer *transfer)
_access_endpoint	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int _access_endpoint(struct libusb_transfer *);$/;"	p	file:	signature:(struct libusb_transfer *)
_ant_nullisnow	driver-antrouter.h	/^const struct timeval *_ant_nullisnow(const struct timeval *tvp, struct timeval *tvp_buf)$/;"	f	signature:(const struct timeval *tvp, struct timeval *tvp_buf)
_applog	logging.c	/^void _applog(int prio, const char *str, bool force)$/;"	f	signature:(int prio, const char *str, bool force)
_applog	logging.h	/^extern void _applog(int prio, const char *str, bool force);$/;"	p	signature:(int prio, const char *str, bool force)
_bab_add_buf	driver-bab.c	/^static void _bab_add_buf(K_ITEM *item, const uint8_t *data, size_t siz, const char *file, const char *func, const int line)$/;"	f	file:	signature:(K_ITEM *item, const uint8_t *data, size_t siz, const char *file, const char *func, const int line)
_bab_add_buf_rev	driver-bab.c	/^static void _bab_add_buf_rev(K_ITEM *item, const uint8_t *data, uint32_t siz, const char *file, const char *func, const int line)$/;"	f	file:	signature:(K_ITEM *item, const uint8_t *data, uint32_t siz, const char *file, const char *func, const int line)
_bab_add_data	driver-bab.c	/^static void _bab_add_data(K_ITEM *item, uint32_t addr, const uint8_t *data, size_t siz, const char *file, const char *func, const int line)$/;"	f	file:	signature:(K_ITEM *item, uint32_t addr, const uint8_t *data, size_t siz, const char *file, const char *func, const int line)
_bab_add_noops	driver-bab.c	/^static void _bab_add_noops(K_ITEM *item, size_t siz, const char *file, const char *func, const int line)$/;"	f	file:	signature:(K_ITEM *item, size_t siz, const char *file, const char *func, const int line)
_bab_config_reg	driver-bab.c	/^static void _bab_config_reg(K_ITEM *item, uint32_t reg, bool enable, const char *file, const char *func, const int line)$/;"	f	file:	signature:(K_ITEM *item, uint32_t reg, bool enable, const char *file, const char *func, const int line)
_bab_reset	driver-bab.c	/^static void _bab_reset(__maybe_unused struct cgpu_info *babcgpu, struct bab_info *babinfo, int bank, int times)$/;"	f	file:	signature:(__maybe_unused struct cgpu_info *babcgpu, struct bab_info *babinfo, int bank, int times)
_bab_txrx	driver-bab.c	/^static bool _bab_txrx(struct cgpu_info *babcgpu, struct bab_info *babinfo, K_ITEM *item, bool detect_ignore, const char *file, const char *func, const int line)$/;"	f	file:	signature:(struct cgpu_info *babcgpu, struct bab_info *babinfo, K_ITEM *item, bool detect_ignore, const char *file, const char *func, const int line)
_beginthreadex	compat/libusb-1.0/libusb/os/windows_usb.h	57;"	d
_cache_active_config_descriptor	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^_cache_active_config_descriptor(struct libusb_device *dev, int fd)$/;"	f	signature:(struct libusb_device *dev, int fd)
_cache_active_config_descriptor	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int _cache_active_config_descriptor(struct libusb_device *, int);$/;"	p	file:	signature:(struct libusb_device *, int)
_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb-int.c	/^void _callback(void (*fn)(void *arg), void *arg)$/;"	f	signature:(void (*fn)(void *arg), void *arg)
_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb-int.c	/^void _callback(void (*fn)(void *arg), void *arg);$/;"	p	file:	signature:(void (*fn)(void *arg), void *arg)
_callback_onearg	ccan/typesafe_cb/test/run.c	/^static void _callback_onearg(void (*fn)(void *arg), void *arg)$/;"	f	file:	signature:(void (*fn)(void *arg), void *arg)
_callback_postargs	ccan/typesafe_cb/test/run.c	/^static void _callback_postargs(void (*fn)(void *arg, int a, int b), void *arg)$/;"	f	file:	signature:(void (*fn)(void *arg, int a, int b), void *arg)
_callback_preargs	ccan/typesafe_cb/test/run.c	/^static void _callback_preargs(void (*fn)(int a, int b, void *arg), void *arg)$/;"	f	file:	signature:(void (*fn)(int a, int b, void *arg), void *arg)
_cg_dlock	miner.h	/^static inline void _cg_dlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_dwilock	miner.h	/^static inline void _cg_dwilock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_dwlock	miner.h	/^static inline void _cg_dwlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_ilock	miner.h	/^static inline void _cg_ilock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_memcpy	util.c	/^void _cg_memcpy(void *dest, const void *src, unsigned int n, const char *file, const char *func, const int line)$/;"	f	signature:(void *dest, const void *src, unsigned int n, const char *file, const char *func, const int line)
_cg_memcpy	util.h	/^void _cg_memcpy(void *dest, const void *src, unsigned int n, const char *file, const char *func, const int line);$/;"	p	signature:(void *dest, const void *src, unsigned int n, const char *file, const char *func, const int line)
_cg_rlock	miner.h	/^static inline void _cg_rlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_runlock	miner.h	/^static inline void _cg_runlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_ruwlock	miner.h	/^static inline void _cg_ruwlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_uilock	miner.h	/^static inline void _cg_uilock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_ulock	miner.h	/^static inline void _cg_ulock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_wlock	miner.h	/^static inline void _cg_wlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cg_wunlock	miner.h	/^static inline void _cg_wunlock(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cglock_init	miner.h	/^static inline void _cglock_init(cglock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(cglock_t *lock, const char *file, const char *func, const int line)
_cgpu_devid_counter	cgminer.c	/^struct _cgpu_devid_counter {$/;"	s	file:
_cgpu_devid_counter::hh	cgminer.c	/^	UT_hash_handle hh;$/;"	m	struct:_cgpu_devid_counter	file:	access:public
_cgpu_devid_counter::lastid	cgminer.c	/^	int lastid;$/;"	m	struct:_cgpu_devid_counter	file:	access:public
_cgpu_devid_counter::name	cgminer.c	/^	char name[4];$/;"	m	struct:_cgpu_devid_counter	file:	access:public
_cgsem_init	util.c	/^void _cgsem_init(cgsem_t *cgsem, const char *file, const char *func, const int line)$/;"	f	signature:(cgsem_t *cgsem, const char *file, const char *func, const int line)
_cgsem_init	util.h	/^void _cgsem_init(cgsem_t *cgsem, const char *file, const char *func, const int line);$/;"	p	signature:(cgsem_t *cgsem, const char *file, const char *func, const int line)
_cgsem_mswait	util.c	/^int _cgsem_mswait(cgsem_t *cgsem, int ms, const char *file, const char *func, const int line)$/;"	f	signature:(cgsem_t *cgsem, int ms, const char *file, const char *func, const int line)
_cgsem_mswait	util.h	/^int _cgsem_mswait(cgsem_t *cgsem, int ms, const char *file, const char *func, const int line);$/;"	p	signature:(cgsem_t *cgsem, int ms, const char *file, const char *func, const int line)
_cgsem_post	util.c	/^void _cgsem_post(cgsem_t *cgsem, const char *file, const char *func, const int line)$/;"	f	signature:(cgsem_t *cgsem, const char *file, const char *func, const int line)
_cgsem_post	util.h	/^void _cgsem_post(cgsem_t *cgsem, const char *file, const char *func, const int line);$/;"	p	signature:(cgsem_t *cgsem, const char *file, const char *func, const int line)
_cgsem_wait	util.c	/^void _cgsem_wait(cgsem_t *cgsem, const char *file, const char *func, const int line)$/;"	f	signature:(cgsem_t *cgsem, const char *file, const char *func, const int line)
_cgsem_wait	util.h	/^void _cgsem_wait(cgsem_t *cgsem, const char *file, const char *func, const int line);$/;"	p	signature:(cgsem_t *cgsem, const char *file, const char *func, const int line)
_check_is_entry	ccan/opt/opt.h	/^static inline int _check_is_entry(struct opt_table *e UNUSED) { return 0; }$/;"	f	signature:(struct opt_table *e UNUSED)
_close	compat/libusb-1.0/libusb/os/poll_windows.c	/^extern int _close(int fd);$/;"	p	file:	signature:(int fd)
_copy_work	cgminer.c	/^static void _copy_work(struct work *work, const struct work *base_work, int noffset)$/;"	f	file:	signature:(struct work *work, const struct work *base_work, int noffset)
_device_handle_priv	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static struct linux_device_handle_priv *_device_handle_priv($/;"	f	file:	signature:( struct libusb_device_handle *handle)
_device_handle_priv	compat/libusb-1.0/libusb/os/windows_usb.h	/^static inline struct windows_device_handle_priv *_device_handle_priv($/;"	f	signature:( struct libusb_device_handle *handle)
_device_priv	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static struct linux_device_priv *_device_priv(struct libusb_device *dev)$/;"	f	file:	signature:(struct libusb_device *dev)
_device_priv	compat/libusb-1.0/libusb/os/windows_usb.h	/^static inline struct windows_device_priv *_device_priv(struct libusb_device *dev) {$/;"	f	signature:(struct libusb_device *dev)
_discard_work	cgminer.c	/^void _discard_work(struct work *work)$/;"	f	signature:(struct work *work)
_discard_work	miner.h	/^extern void _discard_work(struct work *work);$/;"	p	signature:(struct work *work)
_do_ioctl	driver-minion.c	/^static int _do_ioctl(struct minion_info *minioninfo, int pin, uint8_t *obuf, uint32_t osiz, uint8_t *rbuf, uint32_t rsiz, uint64_t *ioseq, MINION_FFL_ARGS)$/;"	f	file:	signature:(struct minion_info *minioninfo, int pin, uint8_t *obuf, uint32_t osiz, uint8_t *rbuf, uint32_t rsiz, uint64_t *ioseq, MINION_FFL_ARGS)
_errno_to_libusb	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^_errno_to_libusb(int err)$/;"	f	signature:(int err)
_errno_to_libusb	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int _errno_to_libusb(int);$/;"	p	file:	signature:(int)
_fd_to_index_and_lock	compat/libusb-1.0/libusb/os/poll_windows.c	/^int _fd_to_index_and_lock(int fd)$/;"	f	signature:(int fd)
_free_index	compat/libusb-1.0/libusb/os/poll_windows.c	/^void _free_index(int _index)$/;"	f	signature:(int _index)
_free_work	cgminer.c	/^void _free_work(struct work *work)$/;"	f	signature:(struct work *work)
_free_work	miner.h	/^extern void _free_work(struct work *work);$/;"	p	signature:(struct work *work)
_get_usbfs_path	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static void _get_usbfs_path(struct libusb_device *dev, char *path)$/;"	f	file:	signature:(struct libusb_device *dev, char *path)
_in_use	usbutils.c	/^static bool _in_use(struct usb_in_use_list *head, uint8_t bus_number,$/;"	f	file:	signature:(struct usb_in_use_list *head, uint8_t bus_number, uint8_t device_address)
_io_new	api.c	/^static struct io_data *_io_new(size_t initial, bool socket_buf)$/;"	f	file:	signature:(size_t initial, bool socket_buf)
_is_usbdev_entry	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int _is_usbdev_entry(struct dirent *entry, int *bus_p, int *dev_p)$/;"	f	file:	signature:(struct dirent *entry, int *bus_p, int *dev_p)
_k_add_head	klist.c	/^void _k_add_head(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS)
_k_add_head	klist.h	/^extern void _k_add_head(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS)
_k_add_tail	klist.c	/^void _k_add_tail(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS)
_k_add_tail	klist.h	/^extern void _k_add_tail(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS)
_k_free_list	klist.c	/^K_LIST *_k_free_list(K_LIST *list, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *list, KLIST_FFL_ARGS)
_k_free_list	klist.h	/^extern K_LIST *_k_free_list(K_LIST *list, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *list, KLIST_FFL_ARGS)
_k_free_store	klist.c	/^K_STORE *_k_free_store(K_STORE *store, KLIST_FFL_ARGS)$/;"	f	signature:(K_STORE *store, KLIST_FFL_ARGS)
_k_free_store	klist.h	/^extern K_STORE *_k_free_store(K_STORE *store, KLIST_FFL_ARGS);$/;"	p	signature:(K_STORE *store, KLIST_FFL_ARGS)
_k_insert_after	klist.c	/^void _k_insert_after(K_LIST *list, K_ITEM *item, K_ITEM *after, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *list, K_ITEM *item, K_ITEM *after, KLIST_FFL_ARGS)
_k_insert_after	klist.h	/^extern void _k_insert_after(K_LIST *list, K_ITEM *item, K_ITEM *after, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *list, K_ITEM *item, K_ITEM *after, KLIST_FFL_ARGS)
_k_insert_before	klist.c	/^void _k_insert_before(K_LIST *list, K_ITEM *item, K_ITEM *before, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *list, K_ITEM *item, K_ITEM *before, KLIST_FFL_ARGS)
_k_insert_before	klist.h	/^extern void _k_insert_before(K_LIST *list, K_ITEM *item, K_ITEM *before, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *list, K_ITEM *item, K_ITEM *before, KLIST_FFL_ARGS)
_k_list_transfer_to_head	klist.c	/^void _k_list_transfer_to_head(K_LIST *from, K_LIST *to, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *from, K_LIST *to, KLIST_FFL_ARGS)
_k_list_transfer_to_head	klist.h	/^void _k_list_transfer_to_head(K_LIST *from, K_LIST *to, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *from, K_LIST *to, KLIST_FFL_ARGS)
_k_list_transfer_to_tail	klist.c	/^void _k_list_transfer_to_tail(K_LIST *from, K_LIST *to, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *from, K_LIST *to, KLIST_FFL_ARGS)
_k_list_transfer_to_tail	klist.h	/^void _k_list_transfer_to_tail(K_LIST *from, K_LIST *to, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *from, K_LIST *to, KLIST_FFL_ARGS)
_k_new_list	klist.c	/^K_LIST *_k_new_list(const char *name, size_t siz, int allocate, int limit, bool do_tail, KLIST_FFL_ARGS)$/;"	f	signature:(const char *name, size_t siz, int allocate, int limit, bool do_tail, KLIST_FFL_ARGS)
_k_new_list	klist.h	/^extern K_LIST *_k_new_list(const char *name, size_t siz, int allocate, int limit, bool do_tail, KLIST_FFL_ARGS);$/;"	p	signature:(const char *name, size_t siz, int allocate, int limit, bool do_tail, KLIST_FFL_ARGS)
_k_unlink_head	klist.c	/^K_ITEM *_k_unlink_head(K_LIST *list, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *list, KLIST_FFL_ARGS)
_k_unlink_head	klist.h	/^extern K_ITEM *_k_unlink_head(K_LIST *list, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *list, KLIST_FFL_ARGS)
_k_unlink_head_zero	klist.c	/^K_ITEM *_k_unlink_head_zero(K_LIST *list, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *list, KLIST_FFL_ARGS)
_k_unlink_head_zero	klist.h	/^extern K_ITEM *_k_unlink_head_zero(K_LIST *list, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *list, KLIST_FFL_ARGS)
_k_unlink_item	klist.c	/^void _k_unlink_item(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS)
_k_unlink_item	klist.h	/^extern void _k_unlink_item(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *list, K_ITEM *item, KLIST_FFL_ARGS)
_k_unlink_tail	klist.c	/^K_ITEM *_k_unlink_tail(K_LIST *list, KLIST_FFL_ARGS)$/;"	f	signature:(K_LIST *list, KLIST_FFL_ARGS)
_k_unlink_tail	klist.h	/^extern K_ITEM *_k_unlink_tail(K_LIST *list, KLIST_FFL_ARGS);$/;"	p	signature:(K_LIST *list, KLIST_FFL_ARGS)
_knc_core_next_slot	driver-knc.c	/^static int _knc_core_next_slot(struct knc_core_state *core)$/;"	f	file:	signature:(struct knc_core_state *core)
_minion_txrx	driver-minion.c	/^static bool _minion_txrx(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, TASK_ITEM *task, MINION_FFL_ARGS)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, TASK_ITEM *task, MINION_FFL_ARGS)
_mutex_init	miner.h	/^static inline void _mutex_init(pthread_mutex_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_mutex_t *lock, const char *file, const char *func, const int line)
_mutex_lock	miner.h	/^static inline void _mutex_lock(pthread_mutex_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_mutex_t *lock, const char *file, const char *func, const int line)
_mutex_trylock	miner.h	/^static inline int _mutex_trylock(pthread_mutex_t *lock, __maybe_unused const char *file, __maybe_unused const char *func, __maybe_unused const int line)$/;"	f	signature:(pthread_mutex_t *lock, __maybe_unused const char *file, __maybe_unused const char *func, __maybe_unused const int line)
_mutex_unlock	miner.h	/^static inline void _mutex_unlock(pthread_mutex_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_mutex_t *lock, const char *file, const char *func, const int line)
_mutex_unlock_noyield	miner.h	/^static inline void _mutex_unlock_noyield(pthread_mutex_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_mutex_t *lock, const char *file, const char *func, const int line)
_now_gettimeofday	driver-antrouter.c	/^static void _now_gettimeofday(struct timeval *);$/;"	p	file:	signature:(struct timeval *)
_now_gettimeofday	driver-antrouter.c	/^void _now_gettimeofday(struct timeval *tv)$/;"	f	file:	signature:(struct timeval *tv)
_now_gettimeofday	driver-antrouter.c	/^void _now_gettimeofday(struct timeval *tv)$/;"	f	signature:(struct timeval *tv)
_now_is_not_set	driver-antrouter.c	/^static void _now_is_not_set(__maybe_unused struct timeval *tv)$/;"	f	file:	signature:(__maybe_unused struct timeval *tv)
_open	compat/libusb-1.0/libusb/os/poll_windows.c	/^extern int _open(char* name, int flags);$/;"	p	file:	signature:(char* name, int flags)
_open_bitstream	fpgautils.c	/^static FILE *_open_bitstream(const char *path, const char *subdir, const char *filename)$/;"	f	file:	signature:(const char *path, const char *subdir, const char *filename)
_open_bitstream	fpgautils.c	471;"	d	file:
_open_bitstream3	fpgautils.c	477;"	d	file:
_open_sysfs_attr	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int _open_sysfs_attr(struct libusb_device *dev, const char *attr)$/;"	f	file:	signature:(struct libusb_device *dev, const char *attr)
_opt_register	ccan/opt/opt.c	/^void _opt_register(const char *names, enum opt_type type,$/;"	f	signature:(const char *names, enum opt_type type, char *(*cb)(void *arg), char *(*cb_arg)(const char *optarg, void *arg), void (*show)(char buf[OPT_SHOW_LEN], const void *arg), const void *arg, const char *desc)
_opt_register	ccan/opt/opt.h	/^void _opt_register(const char *names, enum opt_type type,$/;"	p	signature:(const char *names, enum opt_type type, char *(*cb)(void *arg), char *(*cb_arg)(const char *optarg, void *arg), void (*show)(char buf[OPT_SHOW_LEN], const void *arg), const void *arg, const char *desc)
_pad0	driver-avalon.h	/^	uint8_t _pad0			:4;$/;"	m	struct:avalon_task	access:public
_pad0	driver-avalon.h	/^	uint8_t _pad0[2];$/;"	m	struct:avalon_result	access:public
_pad1	driver-avalon.h	/^	uint8_t _pad1[3];$/;"	m	struct:avalon_task	access:public
_pad2	driver-avalon.h	/^	uint32_t _pad2;$/;"	m	struct:avalon_task	access:public
_poll_fd	compat/libusb-1.0/libusb/os/poll_windows.c	/^} _poll_fd[MAX_FDS];$/;"	v	typeref:struct:__anon38
_quit	cgminer.c	/^void _quit(int status)$/;"	f	signature:(int status)
_quit	miner.h	/^extern void _quit(int status);$/;"	p	signature:(int status)
_rd_lock	miner.h	/^static inline void _rd_lock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_rwlock_t *lock, const char *file, const char *func, const int line)
_rd_unlock	miner.h	/^static inline void _rd_unlock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_rwlock_t *lock, const char *file, const char *func, const int line)
_rd_unlock_noyield	miner.h	/^static inline void _rd_unlock_noyield(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_rwlock_t *lock, const char *file, const char *func, const int line)
_recalloc	util.c	/^void _recalloc(void **ptr, size_t old, size_t new, const char *file, const char *func, const int line)$/;"	f	signature:(void **ptr, size_t old, size_t new, const char *file, const char *func, const int line)
_recalloc	util.h	/^void _recalloc(void **ptr, size_t old, size_t new, const char *file, const char *func, const int line);$/;"	p	signature:(void **ptr, size_t old, size_t new, const char *file, const char *func, const int line)
_register_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb.c	/^static void _register_callback(void (*cb)(void *arg), void *arg)$/;"	f	file:	signature:(void (*cb)(void *arg), void *arg)
_register_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb_postargs.c	/^static void _register_callback(void (*cb)(void *arg, int x), void *arg)$/;"	f	file:	signature:(void (*cb)(void *arg, int x), void *arg)
_register_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb_preargs.c	/^static void _register_callback(void (*cb)(int x, void *arg), void *arg)$/;"	f	file:	signature:(void (*cb)(int x, void *arg), void *arg)
_register_callback	ccan/typesafe_cb/test/compile_ok-typesafe_cb-NULL.c	/^static void _register_callback(void (*cb)(const void *arg), const void *arg)$/;"	f	file:	signature:(void (*cb)(const void *arg), const void *arg)
_register_callback	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	/^static void _register_callback(void (*cb)(void *arg), void *arg)$/;"	f	file:	signature:(void (*cb)(void *arg), void *arg)
_register_callback	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	/^static void _register_callback(void (*cb)(void *arg), void *arg)$/;"	f	file:	signature:(void (*cb)(void *arg), void *arg)
_register_callback_post	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	/^static void _register_callback_post(void (*cb)(void *arg, int x), void *arg)$/;"	f	file:	signature:(void (*cb)(void *arg, int x), void *arg)
_register_callback_post	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	/^static void _register_callback_post(void (*cb)(void *arg, int x), void *arg)$/;"	f	file:	signature:(void (*cb)(void *arg, int x), void *arg)
_register_callback_pre	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	/^static void _register_callback_pre(void (*cb)(int x, void *arg), void *arg)$/;"	f	file:	signature:(void (*cb)(int x, void *arg), void *arg)
_register_callback_pre	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	/^static void _register_callback_pre(void (*cb)(int x, void *arg), void *arg)$/;"	f	file:	signature:(void (*cb)(int x, void *arg), void *arg)
_rw_unlock	miner.h	/^static inline void _rw_unlock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_rwlock_t *lock, const char *file, const char *func, const int line)
_rwlock_init	miner.h	/^static inline void _rwlock_init(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_rwlock_t *lock, const char *file, const char *func, const int line)
_select_read	fpgautils.c	/^size_t _select_read(int fd, char *buf, size_t bufsiz, struct timeval *timeout, struct timeval *char_timeout, int finished)$/;"	f	signature:(int fd, char *buf, size_t bufsiz, struct timeval *timeout, struct timeval *char_timeout, int finished)
_select_read	fpgautils.h	/^extern size_t _select_read(int fd, char *buf, size_t bufsiz, struct timeval *timeout, struct timeval *char_timeout, int finished);$/;"	p	signature:(int fd, char *buf, size_t bufsiz, struct timeval *timeout, struct timeval *char_timeout, int finished)
_select_wait_read	fpgautils.c	/^static bool _select_wait_read(int fd, struct timeval *timeout)$/;"	f	file:	signature:(int fd, struct timeval *timeout)
_select_write	fpgautils.c	/^size_t _select_write(int fd, char *buf, size_t siz, struct timeval *timeout)$/;"	f	signature:(int fd, char *buf, size_t siz, struct timeval *timeout)
_select_write	fpgautils.h	/^extern size_t _select_write(int fd, char *buf, size_t siz, struct timeval *timeout);$/;"	p	signature:(int fd, char *buf, size_t siz, struct timeval *timeout)
_serial_detect	fpgautils.c	/^int _serial_detect(struct device_drv *drv, detectone_func_t detectone, autoscan_func_t autoscan, bool forceauto)$/;"	f	signature:(struct device_drv *drv, detectone_func_t detectone, autoscan_func_t autoscan, bool forceauto)
_serial_detect	fpgautils.h	/^extern int _serial_detect(struct device_drv *drv, detectone_func_t, autoscan_func_t, bool force_autoscan);$/;"	p	signature:(struct device_drv *drv, detectone_func_t, autoscan_func_t, bool force_autoscan)
_serial_read	driver-antrouter.h	/^ssize_t _serial_read(int fd, char *buf, size_t buflen, char *eol);$/;"	p	signature:(int fd, char *buf, size_t buflen, char *eol)
_serial_read	fpgautils.c	/^ssize_t _serial_read(int fd, char *buf, size_t bufsiz, char *eol)$/;"	f	signature:(int fd, char *buf, size_t bufsiz, char *eol)
_serial_read	fpgautils.h	/^extern ssize_t _serial_read(int fd, char *buf, size_t buflen, char *eol);$/;"	p	signature:(int fd, char *buf, size_t buflen, char *eol)
_set_some_value	ccan/typesafe_cb/test/compile_fail-cast_if_type-promotable.c	/^static void _set_some_value(void *val)$/;"	f	file:	signature:(void *val)
_set_some_value	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast.c	/^void _set_some_value(void *val)$/;"	f	signature:(void *val)
_set_some_value	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast.c	/^void _set_some_value(void *val);$/;"	p	file:	signature:(void *val)
_set_some_value	ccan/typesafe_cb/test/run.c	/^static void _set_some_value(void *val)$/;"	f	file:	signature:(void *val)
_simplelog	logging.c	/^void _simplelog(int prio, const char *str, bool force)$/;"	f	signature:(int prio, const char *str, bool force)
_simplelog	logging.h	/^extern void _simplelog(int prio, const char *str, bool force);$/;"	p	signature:(int prio, const char *str, bool force)
_snprintf	compat/libusb-1.0/libusb/os/poll_windows.c	/^extern int _snprintf(char *buffer, size_t count, const char *format, ...);$/;"	p	file:	signature:(char *buffer, size_t count, const char *format, ...)
_snprintf	compat/libusb-1.0/libusb/os/windows_usb.h	/^extern int _snprintf(char *buffer, size_t count, const char *format, ...);$/;"	p	signature:(char *buffer, size_t count, const char *format, ...)
_stage_work	cgminer.c	/^static void _stage_work(struct work *work)$/;"	f	file:	signature:(struct work *work)
_stage_work	cgminer.c	/^static void _stage_work(struct work *work);$/;"	p	file:	signature:(struct work *work)
_strdup	compat/libusb-1.0/libusb/os/windows_usb.h	/^extern char *_strdup(const char *strSource);$/;"	p	signature:(const char *strSource)
_sync_control_transfer	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^_sync_control_transfer(struct usbi_transfer *itransfer)$/;"	f	signature:(struct usbi_transfer *itransfer)
_sync_control_transfer	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int _sync_control_transfer(struct usbi_transfer *);$/;"	p	file:	signature:(struct usbi_transfer *)
_sync_gen_transfer	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^_sync_gen_transfer(struct usbi_transfer *itransfer)$/;"	f	signature:(struct usbi_transfer *itransfer)
_sync_gen_transfer	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int _sync_gen_transfer(struct usbi_transfer *);$/;"	p	file:	signature:(struct usbi_transfer *)
_transfer	driver-antrouter.c	/^static void _transfer(struct cgpu_info *antrouter, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *antrouter, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, enum usb_cmds cmd)
_transfer	driver-bmsc.c	/^static void _transfer(struct cgpu_info *bmsc, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *bmsc, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, enum usb_cmds cmd)
_transfer	driver-icarus.c	/^static void _transfer(struct cgpu_info *icarus, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *icarus, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, enum usb_cmds cmd)
_usb_ftdi_set_latency	usbutils.c	/^int _usb_ftdi_set_latency(struct cgpu_info *cgpu, int intinfo)$/;"	f	signature:(struct cgpu_info *cgpu, int intinfo)
_usb_ftdi_set_latency	usbutils.h	/^int _usb_ftdi_set_latency(struct cgpu_info *cgpu, int intinfo);$/;"	p	signature:(struct cgpu_info *cgpu, int intinfo)
_usb_init	usbutils.c	/^static int _usb_init(struct cgpu_info *cgpu, struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct cgpu_info *cgpu, struct libusb_device *dev, struct usb_find_devices *found)
_usb_interface	usbutils.c	/^int _usb_interface(struct cgpu_info *cgpu, int intinfo)$/;"	f	signature:(struct cgpu_info *cgpu, int intinfo)
_usb_interface	usbutils.h	/^int _usb_interface(struct cgpu_info *cgpu, int intinfo);$/;"	p	signature:(struct cgpu_info *cgpu, int intinfo)
_usb_read	usbutils.c	/^int _usb_read(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz,$/;"	f	signature:(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz, int *processed, int timeout, const char *end, enum usb_cmds cmd, bool readonce, bool cancellable)
_usb_read	usbutils.h	/^int _usb_read(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz, int *processed, int timeout, const char *end, enum usb_cmds cmd, bool readonce, bool cancellable);$/;"	p	signature:(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz, int *processed, int timeout, const char *end, enum usb_cmds cmd, bool readonce, bool cancellable)
_usb_transfer	usbutils.c	/^int _usb_transfer(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, unsigned int timeout, enum usb_cmds cmd)$/;"	f	signature:(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, unsigned int timeout, enum usb_cmds cmd)
_usb_transfer	usbutils.h	/^int _usb_transfer(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, unsigned int timeout, enum usb_cmds cmd);$/;"	p	signature:(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint32_t *data, int siz, unsigned int timeout, enum usb_cmds cmd)
_usb_transfer_read	usbutils.c	/^int _usb_transfer_read(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, char *buf, int bufsiz, int *amount, unsigned int timeout, __maybe_unused enum usb_cmds cmd)$/;"	f	signature:(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, char *buf, int bufsiz, int *amount, unsigned int timeout, __maybe_unused enum usb_cmds cmd)
_usb_transfer_read	usbutils.h	/^int _usb_transfer_read(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, char *buf, int bufsiz, int *amount, unsigned int timeout, enum usb_cmds cmd);$/;"	p	signature:(struct cgpu_info *cgpu, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, char *buf, int bufsiz, int *amount, unsigned int timeout, enum usb_cmds cmd)
_usb_uninit	usbutils.c	/^static void _usb_uninit(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
_usb_write	usbutils.c	/^int _usb_write(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz, int *processed, int timeout, enum usb_cmds cmd)$/;"	f	signature:(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz, int *processed, int timeout, enum usb_cmds cmd)
_usb_write	usbutils.h	/^int _usb_write(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz, int *processed, int timeout, enum usb_cmds);$/;"	p	signature:(struct cgpu_info *cgpu, int intinfo, int epinfo, char *buf, size_t bufsiz, int *processed, int timeout, enum usb_cmds)
_usbi_log	compat/libusb-1.0/libusb/libusbi.h	138;"	d
_usbi_log	compat/libusb-1.0/libusb/libusbi.h	140;"	d
_valid_ascii	util.c	/^static bool _valid_ascii(char *s, const char *file, const char *func, const int line)$/;"	f	file:	signature:(char *s, const char *file, const char *func, const int line)
_valid_hex	util.c	/^static bool _valid_hex(char *s, const char *file, const char *func, const int line)$/;"	f	file:	signature:(char *s, const char *file, const char *func, const int line)
_verify_intmax_size	lib/stdint.in.h	/^typedef int _verify_intmax_size[sizeof (intmax_t) == sizeof (uintmax_t)$/;"	t
_wlog	cgminer.c	/^void _wlog(const char *str)$/;"	f	signature:(const char *str)
_wlog	miner.h	/^extern void _wlog(const char *str);$/;"	p	signature:(const char *str)
_wlogprint	cgminer.c	/^void _wlogprint(const char *str)$/;"	f	signature:(const char *str)
_wlogprint	miner.h	/^extern void _wlogprint(const char *str);$/;"	p	signature:(const char *str)
_workresult	driver-klondike.c	/^typedef struct _workresult {$/;"	s	file:
_workresult::cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:_workresult	file:	access:public
_workresult::dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:_workresult	file:	access:public
_workresult::nonce	driver-klondike.c	/^	uint8_t nonce[4];$/;"	m	struct:_workresult	file:	access:public
_workresult::workid	driver-klondike.c	/^	uint8_t workid;$/;"	m	struct:_workresult	file:	access:public
_worktask	driver-klondike.c	/^typedef struct _worktask {$/;"	s	file:
_worktask::cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:_worktask	file:	access:public
_worktask::dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:_worktask	file:	access:public
_worktask::merkle	driver-klondike.c	/^	uint8_t merkle[12];$/;"	m	struct:_worktask	file:	access:public
_worktask::midstate	driver-klondike.c	/^	uint8_t midstate[32];$/;"	m	struct:_worktask	file:	access:public
_worktask::workid	driver-klondike.c	/^	uint8_t workid;$/;"	m	struct:_worktask	file:	access:public
_wr_lock	miner.h	/^static inline void _wr_lock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_rwlock_t *lock, const char *file, const char *func, const int line)
_wr_trylock	miner.h	/^static inline int _wr_trylock(pthread_rwlock_t *lock, __maybe_unused const char *file, __maybe_unused const char *func, __maybe_unused const int line)$/;"	f	signature:(pthread_rwlock_t *lock, __maybe_unused const char *file, __maybe_unused const char *func, __maybe_unused const int line)
_wr_unlock	miner.h	/^static inline void _wr_unlock(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_rwlock_t *lock, const char *file, const char *func, const int line)
_wr_unlock_noyield	miner.h	/^static inline void _wr_unlock_noyield(pthread_rwlock_t *lock, const char *file, const char *func, const int line)$/;"	f	signature:(pthread_rwlock_t *lock, const char *file, const char *func, const int line)
a	miner.php	/^				$a = $alldata['Accepted'];$/;"	v
a	miner.php	/^		$a = $_GET[$name];$/;"	v
a	miner.php	/^	$a = $_POST[$name];$/;"	v
a	miner.php	/^ $a = null;$/;"	v
a	miner.php	/^ if ($a == '' || $a == null)$/;"	v
a1_board_selector_exit	A1-desk-board-selector.c	/^void a1_board_selector_exit(void)$/;"	f	signature:(void)
a1_board_selector_init	A1-desk-board-selector.c	/^bool a1_board_selector_init(void)$/;"	f	signature:(void)
a1_board_selector_reset_all_boards	A1-desk-board-selector.c	/^bool a1_board_selector_reset_all_boards(void)$/;"	f	signature:(void)
a1_board_selector_reset_board	A1-desk-board-selector.c	/^bool a1_board_selector_reset_board(void)$/;"	f	signature:(void)
a1_board_selector_select_board	A1-desk-board-selector.c	/^bool a1_board_selector_select_board(uint8_t board)$/;"	f	signature:(uint8_t board)
abandon_work	cgminer.c	/^static inline bool abandon_work(struct work *work, struct timeval *wdiff, uint64_t hashes)$/;"	f	file:	signature:(struct work *work, struct timeval *wdiff, uint64_t hashes)
abort_control	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*abort_control)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
abort_transfers	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*abort_transfers)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
abort_work	driver-SPI-bitmine-A1.c	/^static bool abort_work(struct A1_chain *a1)$/;"	f	file:	signature:(struct A1_chain *a1)
ac_fn_c_check_decl	compat/libusb-1.0/configure	/^ac_fn_c_check_decl ()$/;"	f
ac_fn_c_check_decl	configure	/^ac_fn_c_check_decl ()$/;"	f
ac_fn_c_check_func	compat/jansson-2.6/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_func	compat/libusb-1.0/configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	compat/jansson-2.6/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_compile	compat/libusb-1.0/configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	compat/jansson-2.6/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_header_mongrel	compat/libusb-1.0/configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_member	configure	/^ac_fn_c_check_member ()$/;"	f
ac_fn_c_check_type	compat/libusb-1.0/configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_compute_int	configure	/^ac_fn_c_compute_int ()$/;"	f
ac_fn_c_find_intX_t	compat/jansson-2.6/configure	/^ac_fn_c_find_intX_t ()$/;"	f
ac_fn_c_find_uintX_t	compat/jansson-2.6/configure	/^ac_fn_c_find_uintX_t ()$/;"	f
ac_fn_c_try_compile	compat/jansson-2.6/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_compile	compat/libusb-1.0/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	compat/jansson-2.6/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_cpp	compat/libusb-1.0/configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	compat/jansson-2.6/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_link	compat/libusb-1.0/configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	compat/jansson-2.6/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_c_try_run	compat/libusb-1.0/configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
accepted	driver-blockerupter.h	/^	int accepted;$/;"	m	struct:asic_info	access:public
accepted	driver-blockerupter.h	/^	int accepted;$/;"	m	struct:blockerupter_info	access:public
accepted	driver-blockerupter.h	/^	int accepted;$/;"	m	struct:board_info	access:public
accepted	miner.h	/^	int accepted;$/;"	m	struct:cgpu_info	access:public
accepted	miner.h	/^	int64_t accepted, rejected;$/;"	m	struct:pool	access:public
access	miner.php	/^	$access = api($rig, 'privileged');$/;"	v
acsv	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
action	miner.php	/^		$action = 'defined';$/;"	v
action	miner.php	/^		$action = 'found';$/;"	v
action_array	lib/sigaction.c	/^static struct sigaction volatile action_array[NSIG] \/* = 0 *\/;$/;"	v	file:
active	driver-cointerra.h	/^	uint16_t active;$/;"	m	struct:cointerra_info	access:public
active_board	A1-desk-board-selector.c	/^	uint8_t active_board;$/;"	m	struct:pcf8575_ctx	file:	access:public
active_chain	A1-board-selector-CCD.c	/^uint8_t active_chain = 255;$/;"	v
active_chain	A1-board-selector-CCR.c	/^static uint8_t active_chain;$/;"	v	file:
active_config	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  UInt8                 first_config, active_config;$/;"	m	struct:darwin_device_priv	access:public
active_config	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t active_config;$/;"	m	struct:windows_device_priv	access:public
active_contexts_list	compat/libusb-1.0/libusb/core.c	/^struct list_head active_contexts_list;$/;"	v	typeref:struct:list_head
active_contexts_lock	compat/libusb-1.0/libusb/core.c	/^usbi_mutex_static_t active_contexts_lock = USBI_MUTEX_INITIALIZER;$/;"	v
active_interface	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int active_interface;$/;"	m	struct:windows_device_handle_priv	access:public
active_slot	knc-asic.h	/^	int active_slot;$/;"	m	struct:knc_report	access:public
active_wq	A1-common.h	/^	struct work_queue active_wq;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::work_queue	access:public
actual_length	compat/libusb-1.0/libusb/libusb.h	/^	int actual_length;$/;"	m	struct:libusb_transfer	access:public
actual_length	compat/libusb-1.0/libusb/libusb.h	/^	unsigned int actual_length;$/;"	m	struct:libusb_iso_packet_descriptor	access:public
actual_length	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int actual_length;$/;"	m	struct:usbfs_urb	access:public
actual_length	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int actual_length;$/;"	m	struct:usbfs_iso_packet_desc	access:public
adapter_state	driver-spondoolies-sp10.h	/^	ADAPTER_STATE adapter_state;$/;"	m	struct:spond_adapter	access:public
adapter_state	driver-spondoolies-sp10.h	/^typedef enum adapter_state {$/;"	g
adapter_state	driver-spondoolies-sp30.h	/^	ADAPTER_STATE adapter_state;$/;"	m	struct:spond_adapter	access:public
adapter_state	driver-spondoolies-sp30.h	/^typedef enum adapter_state {$/;"	g
add	miner.php	/^				$add = array('total' => array());$/;"	v
add_cgpu	cgminer.c	/^bool add_cgpu(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
add_cgpu	miner.h	/^extern bool add_cgpu(struct cgpu_info*);$/;"	p	signature:(struct cgpu_info*)
add_css_names	miner.php	/^$add_css_names = array();$/;"	v
add_in_use	usbutils.c	/^static void add_in_use(uint8_t bus_number, uint8_t device_address, bool blacklist)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address, bool blacklist)
add_iso_packet_size	compat/libusb-1.0/libusb/libusbi.h	/^	size_t add_iso_packet_size;$/;"	m	struct:usbi_os_backend	access:public
add_item_buf	api.c	/^static void add_item_buf(K_ITEM *item, const char *str)$/;"	f	file:	signature:(K_ITEM *item, const char *str)
add_opt	ccan/opt/opt.c	/^static void add_opt(const struct opt_table *entry)$/;"	f	file:	signature:(const struct opt_table *entry)
add_pool	cgminer.c	/^struct pool *add_pool(void)$/;"	f	signature:(void)
add_pool	miner.h	/^extern struct pool *add_pool(void);$/;"	p	signature:(void)
add_pool_details	cgminer.c	/^bool add_pool_details(struct pool *pool, bool live, char *url, char *user, char *pass)$/;"	f	signature:(struct pool *pool, bool live, char *url, char *user, char *pass)
add_pool_details	miner.h	/^extern bool add_pool_details(struct pool *pool, bool live, char *url, char *user, char *pass);$/;"	p	signature:(struct pool *pool, bool live, char *url, char *user, char *pass)
add_queued	cgminer.c	/^void add_queued(struct cgpu_info *cgpu, struct work *work)$/;"	f	signature:(struct cgpu_info *cgpu, struct work *work)
add_queued	miner.h	/^extern void add_queued(struct cgpu_info *cgpu, struct work *work);$/;"	p	signature:(struct cgpu_info *cgpu, struct work *work)
add_serial	cgminer.c	/^static char *add_serial(char *arg)$/;"	f	file:	signature:(char *arg)
add_to_flying_list	compat/libusb-1.0/libusb/io.c	/^static int add_to_flying_list(struct usbi_transfer *transfer)$/;"	f	file:	signature:(struct usbi_transfer *transfer)
add_url	cgminer.c	/^static struct pool *add_url(void)$/;"	f	file:	signature:(void)
addgettry	api.c	/^static void addgettry(LOCKINFO *info, uint64_t id, const char *file, const char *func, const int linenum, bool get)$/;"	f	file:	signature:(LOCKINFO *info, uint64_t id, const char *file, const char *func, const int linenum, bool get)
addpool	api.c	/^static void addpool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
addr	A1-desk-board-selector.c	/^	uint8_t addr;$/;"	m	struct:pcf8575_ctx	file:	access:public
addr	A1-trimpot-mcp4x.h	/^	uint8_t addr;$/;"	m	struct:mcp4x	access:public
addr	MCast.java	/^	static private String addr = MCAST_ADDR;$/;"	f	class:MCast	file:	access:private
addr	i2c-context.h	/^	uint8_t addr;$/;"	m	struct:i2c_ctx	access:public
addr2txt	driver-minion.c	/^static const char *addr2txt(uint8_t addr)$/;"	f	file:	signature:(uint8_t addr)
address	driver-minion.c	/^	uint8_t address;$/;"	m	struct:task_item	file:	access:public
address_to_pubkeyhash	util.c	/^void address_to_pubkeyhash(unsigned char *pkh, const char *addr)$/;"	f	signature:(unsigned char *pkh, const char *addr)
address_to_pubkeyhash	util.h	/^void address_to_pubkeyhash(unsigned char *pkh, const char *addr);$/;"	p	signature:(unsigned char *pkh, const char *addr)
addtime	util.c	/^void addtime(struct timeval *a, struct timeval *b)$/;"	f	signature:(struct timeval *a, struct timeval *b)
addtime	util.h	/^void addtime(struct timeval *a, struct timeval *b);$/;"	p	signature:(struct timeval *a, struct timeval *b)
adj_fwidth	cgminer.c	/^static void adj_fwidth(float var, int *length)$/;"	f	file:	signature:(float var, int *length)
adj_width	cgminer.c	/^static void adj_width(int var, int *length)$/;"	f	file:	signature:(int var, int *length)
adjust_bxf_chips	driver-bitfury.c	/^static void adjust_bxf_chips(struct cgpu_info *bitfury, struct bitfury_info *info, int chip)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info, int chip)
adjust_fan	driver-avalon.c	/^static inline void adjust_fan(struct avalon_info *info)$/;"	f	file:	signature:(struct avalon_info *info)
adjust_fan	driver-avalon2.c	/^static void adjust_fan(struct avalon2_info *info)$/;"	f	file:	signature:(struct avalon2_info *info)
adjust_mostdevs	cgminer.c	/^static void adjust_mostdevs(void)$/;"	f	file:	signature:(void)
adjust_quota_gcd	cgminer.c	/^void adjust_quota_gcd(void)$/;"	f	signature:(void)
adjust_quota_gcd	miner.h	/^extern void adjust_quota_gcd(void);$/;"	p	signature:(void)
adl	miner.h	/^extern void adl(void);$/;"	p	signature:(void)
age_queued_work	cgminer.c	/^int age_queued_work(struct cgpu_info *cgpu, double secs)$/;"	f	signature:(struct cgpu_info *cgpu, double secs)
age_queued_work	miner.h	/^extern int age_queued_work(struct cgpu_info *cgpu, double secs);$/;"	p	signature:(struct cgpu_info *cgpu, double secs)
align_len	util.h	/^static inline void align_len(size_t *len)$/;"	f	signature:(size_t *len)
alive	miner.h	/^enum alive {$/;"	g
all	miner.php	/^	$all = explode('+', $section);$/;"	v
all_data_cb	util.c	/^static size_t all_data_cb(const void *ptr, size_t size, size_t nmemb,$/;"	f	file:	signature:(const void *ptr, size_t size, size_t nmemb, void *user_data)
alldata	miner.php	/^	$alldata = array();$/;"	v
alloca	miner.h	/^void *alloca (size_t);$/;"	p	signature:(size_t)
alloca	miner.h	50;"	d
alloca	miner.h	55;"	d
alloca	miner.h	58;"	d
allocate	klist.h	/^	int allocate;		\/\/ number to intially allocate and each time we run out$/;"	m	struct:k_list	access:public
allocate_kitem	driver-klondike.c	/^static KLIST *allocate_kitem(struct cgpu_info *klncgpu)$/;"	f	file:	signature:(struct cgpu_info *klncgpu)
allocate_minergate_packet_req	driver-spondoolies-sp10-p.c	/^minergate_req_packet *allocate_minergate_packet_req(uint8_t requester_id, uint8_t request_id)$/;"	f	signature:(uint8_t requester_id, uint8_t request_id)
allocate_minergate_packet_req	driver-spondoolies-sp10-p.h	/^minergate_req_packet *allocate_minergate_packet_req(uint8_t requester_id, uint8_t request_id);$/;"	p	signature:(uint8_t requester_id, uint8_t request_id)
allocate_minergate_packet_req_sp30	driver-spondoolies-sp30-p.c	/^minergate_req_packet_sp30 *allocate_minergate_packet_req_sp30(uint8_t requester_id,$/;"	f	signature:(uint8_t requester_id, uint8_t request_id)
allocate_minergate_packet_req_sp30	driver-spondoolies-sp30-p.h	/^minergate_req_packet_sp30* allocate_minergate_packet_req_sp30(uint8_t requester_id,uint8_t request_id);$/;"	p	signature:(uint8_t requester_id,uint8_t request_id)
allocate_minergate_packet_rsp	driver-spondoolies-sp10-p.c	/^minergate_rsp_packet *allocate_minergate_packet_rsp(uint8_t requester_id, uint8_t request_id)$/;"	f	signature:(uint8_t requester_id, uint8_t request_id)
allocate_minergate_packet_rsp	driver-spondoolies-sp10-p.h	/^minergate_rsp_packet *allocate_minergate_packet_rsp(uint8_t requester_id, uint8_t request_id);$/;"	p	signature:(uint8_t requester_id, uint8_t request_id)
allocate_minergate_packet_rsp_sp30	driver-spondoolies-sp30-p.c	/^minergate_rsp_packet_sp30 *allocate_minergate_packet_rsp_sp30(uint8_t requester_id,$/;"	f	signature:(uint8_t requester_id, uint8_t request_id)
allocate_minergate_packet_rsp_sp30	driver-spondoolies-sp30-p.h	/^minergate_rsp_packet_sp30* allocate_minergate_packet_rsp_sp30(uint8_t requester_id,uint8_t request_id);$/;"	p	signature:(uint8_t requester_id,uint8_t request_id)
allocated	ccan/opt/test/utils.c	/^static bool allocated = false;$/;"	v	file:
allowcustompages	miner.php	/^ if (isset($userlist['def']) && $allowcustompages === true)$/;"	v
allowcustompages	miner.php	/^$allowcustompages = true;$/;"	v
allowgen	miner.php	/^$allowgen = false;$/;"	v
alt_status	cgminer.c	/^static bool alt_status;$/;"	v	file:
altsetting	compat/libusb-1.0/libusb/libusb.h	/^	const struct libusb_interface_descriptor *altsetting;$/;"	m	struct:libusb_interface	typeref:struct:libusb_interface::libusb_interface_descriptor	access:public
altsetting	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int altsetting;$/;"	m	struct:usbfs_setinterface	access:public
ambtemp_avg	driver-cointerra.h	/^	uint16_t ambtemp_avg;$/;"	m	struct:cointerra_info	access:public
ambtemp_high	driver-cointerra.h	/^	uint16_t ambtemp_high;$/;"	m	struct:cointerra_info	access:public
ambtemp_low	driver-cointerra.h	/^	uint16_t ambtemp_low;$/;"	m	struct:cointerra_info	access:public
amu_epinfos	usbutils.c	/^static struct usb_epinfo amu_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
amu_ints	usbutils.c	/^static struct usb_intinfo amu_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
another	driver-minion.c	/^	bool another;$/;"	m	struct:res_item	file:	access:public
ans	miner.php	/^				$ans = $val;$/;"	v
ans	miner.php	/^			$ans = $val;$/;"	v
ans	miner.php	/^			$ans = explode('-', $buf, 4);$/;"	v
ans	miner.php	/^	$ans = null;$/;"	v
ant	driver-icarus.c	/^	bool ant;$/;"	m	struct:ICARUS_INFO	file:	access:public
ant_detect	driver-antrouter.c	/^void ant_detect(struct device_drv *drv, bool (*device_detect)(const char*))$/;"	f	signature:(struct device_drv *drv, bool (*device_detect)(const char*))
ant_init_time	driver-antrouter.c	/^static void ant_init_time();$/;"	p	file:
ant_init_time	driver-antrouter.c	/^void ant_init_time()$/;"	f	file:
antrouter_api_stats	driver-antrouter.c	/^static struct api_data *antrouter_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
antrouter_close	driver-antrouter.h	76;"	d
antrouter_detect	driver-antrouter.c	/^void antrouter_detect(bool __maybe_unused hotplug)$/;"	f	signature:(bool __maybe_unused hotplug)
antrouter_detect	driver-antrouter.h	/^extern void antrouter_detect(bool);$/;"	p	signature:(bool)
antrouter_detect_one	driver-antrouter.c	/^static bool antrouter_detect_one(const char *devpath)$/;"	f	file:	signature:(const char *devpath)
antrouter_drv	driver-antrouter.c	/^struct device_drv antrouter_drv = {$/;"	v	typeref:struct:device_drv
antrouter_get_nonce	driver-antrouter.c	/^static int antrouter_get_nonce(struct cgpu_info *antrouter, unsigned char *buf, struct timeval *tv_start,$/;"	f	file:	signature:(struct cgpu_info *antrouter, unsigned char *buf, struct timeval *tv_start, struct timeval *tv_finish, struct thr_info *thr, int read_time)
antrouter_identify	driver-antrouter.c	/^static void antrouter_identify(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
antrouter_initialise	driver-antrouter.c	/^static bool antrouter_initialise(struct cgpu_info *antrouter, int baud,float timeout)$/;"	f	file:	signature:(struct cgpu_info *antrouter, int baud,float timeout)
antrouter_open	driver-antrouter.c	490;"	d	file:
antrouter_open2	driver-antrouter.c	489;"	d	file:
antrouter_prepare	driver-antrouter.c	/^static bool antrouter_prepare(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
antrouter_read	driver-antrouter.c	/^int antrouter_read(uint8_t *buf, const int fd, struct timeval * const tvp_finish, struct thr_info * const thr, const struct timeval * const tvp_timeout, struct timeval * const tvp_now, int read_size,int *reallen)$/;"	f	signature:(uint8_t *buf, const int fd, struct timeval * const tvp_finish, struct thr_info * const thr, const struct timeval * const tvp_timeout, struct timeval * const tvp_now, int read_size,int *reallen)
antrouter_scanwork	driver-antrouter.c	/^static int64_t antrouter_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
antrouter_set	driver-antrouter.c	/^static char *antrouter_set(struct cgpu_info *cgpu, char *option, char *setting, char *replybuf)$/;"	f	file:	signature:(struct cgpu_info *cgpu, char *option, char *setting, char *replybuf)
antrouter_shutdown	driver-antrouter.c	/^static void antrouter_shutdown(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
antrouter_statline_before	driver-antrouter.c	/^static void antrouter_statline_before(char *buf, size_t bufsiz, struct cgpu_info *cgpu)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *cgpu)
antrouter_write	driver-antrouter.c	/^int antrouter_write(int fd, const void *buf, size_t bufLen)$/;"	f	signature:(int fd, const void *buf, size_t bufLen)
antworks	driver-icarus.c	/^	struct work **antworks;$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::work	file:	access:public
anu3_find_freqhex	driver-icarus.c	/^static uint16_t anu3_find_freqhex(void)$/;"	f	file:	signature:(void)
anu_find_freqhex	driver-icarus.c	/^static uint16_t anu_find_freqhex(void)$/;"	f	file:	signature:(void)
any	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^struct any {$/;"	s	file:
any	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^struct any {$/;"	s	file:
any::x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:any	file:	access:public
any::x	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^	int x;$/;"	m	struct:any	file:	access:public
api	api.c	/^void api(int api_thr_id)$/;"	f	signature:(int api_thr_id)
api	miner.h	/^extern void api(int thr_id);$/;"	p	signature:(int thr_id)
api	miner.php	/^function api($rig, $cmd)$/;"	f
api_add_avg	api.c	/^struct api_data *api_add_avg(struct api_data *root, char *name, float *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, float *data, bool copy_data)
api_add_avg	miner.h	/^extern struct api_data *api_add_avg(struct api_data *root, char *name, float *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, float *data, bool copy_data)
api_add_bool	api.c	/^struct api_data *api_add_bool(struct api_data *root, char *name, bool *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, bool *data, bool copy_data)
api_add_bool	miner.h	/^extern struct api_data *api_add_bool(struct api_data *root, char *name, bool *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, bool *data, bool copy_data)
api_add_const	api.c	/^struct api_data *api_add_const(struct api_data *root, char *name, const char *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, const char *data, bool copy_data)
api_add_const	miner.h	/^extern struct api_data *api_add_const(struct api_data *root, char *name, const char *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, const char *data, bool copy_data)
api_add_data_full	api.c	/^static struct api_data *api_add_data_full(struct api_data *root, char *name, enum api_data_type type, void *data, bool copy_data)$/;"	f	file:	signature:(struct api_data *root, char *name, enum api_data_type type, void *data, bool copy_data)
api_add_diff	api.c	/^struct api_data *api_add_diff(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_diff	miner.h	/^extern struct api_data *api_add_diff(struct api_data *root, char *name, double *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_double	api.c	/^struct api_data *api_add_double(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_double	miner.h	/^extern struct api_data *api_add_double(struct api_data *root, char *name, double *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_elapsed	api.c	/^struct api_data *api_add_elapsed(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_elapsed	miner.h	/^extern struct api_data *api_add_elapsed(struct api_data *root, char *name, double *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_escape	api.c	/^struct api_data *api_add_escape(struct api_data *root, char *name, char *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, char *data, bool copy_data)
api_add_escape	miner.h	/^extern struct api_data *api_add_escape(struct api_data *root, char *name, char *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, char *data, bool copy_data)
api_add_extra	api.c	/^static struct api_data *api_add_extra(struct api_data *root, struct api_data *extra)$/;"	f	file:	signature:(struct api_data *root, struct api_data *extra)
api_add_freq	api.c	/^struct api_data *api_add_freq(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_freq	miner.h	/^extern struct api_data *api_add_freq(struct api_data *root, char *name, double *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_hex32	api.c	/^struct api_data *api_add_hex32(struct api_data *root, char *name, uint32_t *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, uint32_t *data, bool copy_data)
api_add_hex32	miner.h	/^extern struct api_data *api_add_hex32(struct api_data *root, char *name, uint32_t *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, uint32_t *data, bool copy_data)
api_add_hs	api.c	/^struct api_data *api_add_hs(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_hs	miner.h	/^extern struct api_data *api_add_hs(struct api_data *root, char *name, double *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_int	api.c	/^struct api_data *api_add_int(struct api_data *root, char *name, int *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, int *data, bool copy_data)
api_add_int	miner.h	/^extern struct api_data *api_add_int(struct api_data *root, char *name, int *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, int *data, bool copy_data)
api_add_int16	api.c	/^struct api_data *api_add_int16(struct api_data *root, char *name, uint16_t *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, uint16_t *data, bool copy_data)
api_add_int16	miner.h	/^extern struct api_data *api_add_int16(struct api_data *root, char *name, uint16_t *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, uint16_t *data, bool copy_data)
api_add_int64	api.c	/^struct api_data *api_add_int64(struct api_data *root, char *name, int64_t *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, int64_t *data, bool copy_data)
api_add_mhs	api.c	/^struct api_data *api_add_mhs(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_mhs	miner.h	/^extern struct api_data *api_add_mhs(struct api_data *root, char *name, double *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_mhstotal	miner.h	/^extern struct api_data *api_add_mhstotal(struct api_data *root, char *name, double *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_mhtotal	api.c	/^struct api_data *api_add_mhtotal(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_percent	api.c	/^struct api_data *api_add_percent(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_percent	miner.h	/^extern struct api_data *api_add_percent(struct api_data *root, char *name, double *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_string	api.c	/^struct api_data *api_add_string(struct api_data *root, char *name, char *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, char *data, bool copy_data)
api_add_string	miner.h	/^extern struct api_data *api_add_string(struct api_data *root, char *name, char *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, char *data, bool copy_data)
api_add_temp	api.c	/^struct api_data *api_add_temp(struct api_data *root, char *name, float *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, float *data, bool copy_data)
api_add_temp	miner.h	/^extern struct api_data *api_add_temp(struct api_data *root, char *name, float *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, float *data, bool copy_data)
api_add_time	api.c	/^struct api_data *api_add_time(struct api_data *root, char *name, time_t *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, time_t *data, bool copy_data)
api_add_time	miner.h	/^extern struct api_data *api_add_time(struct api_data *root, char *name, time_t *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, time_t *data, bool copy_data)
api_add_timeval	api.c	/^struct api_data *api_add_timeval(struct api_data *root, char *name, struct timeval *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, struct timeval *data, bool copy_data)
api_add_timeval	miner.h	/^extern struct api_data *api_add_timeval(struct api_data *root, char *name, struct timeval *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, struct timeval *data, bool copy_data)
api_add_uint	api.c	/^struct api_data *api_add_uint(struct api_data *root, char *name, unsigned int *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, unsigned int *data, bool copy_data)
api_add_uint	miner.h	/^extern struct api_data *api_add_uint(struct api_data *root, char *name, unsigned int *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, unsigned int *data, bool copy_data)
api_add_uint16	api.c	/^struct api_data *api_add_uint16(struct api_data *root, char *name, uint16_t *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, uint16_t *data, bool copy_data)
api_add_uint16	miner.h	/^extern struct api_data *api_add_uint16(struct api_data *root, char *name, uint16_t *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, uint16_t *data, bool copy_data)
api_add_uint32	api.c	/^struct api_data *api_add_uint32(struct api_data *root, char *name, uint32_t *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, uint32_t *data, bool copy_data)
api_add_uint32	miner.h	/^extern struct api_data *api_add_uint32(struct api_data *root, char *name, uint32_t *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, uint32_t *data, bool copy_data)
api_add_uint64	api.c	/^struct api_data *api_add_uint64(struct api_data *root, char *name, uint64_t *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, uint64_t *data, bool copy_data)
api_add_uint64	miner.h	/^extern struct api_data *api_add_uint64(struct api_data *root, char *name, uint64_t *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, uint64_t *data, bool copy_data)
api_add_uint8	api.c	/^struct api_data *api_add_uint8(struct api_data *root, char *name, uint8_t *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, uint8_t *data, bool copy_data)
api_add_uint8	miner.h	/^extern struct api_data *api_add_uint8(struct api_data *root, char *name, uint8_t *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, uint8_t *data, bool copy_data)
api_add_utility	api.c	/^struct api_data *api_add_utility(struct api_data *root, char *name, double *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_utility	miner.h	/^extern struct api_data *api_add_utility(struct api_data *root, char *name, double *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, double *data, bool copy_data)
api_add_volts	api.c	/^struct api_data *api_add_volts(struct api_data *root, char *name, float *data, bool copy_data)$/;"	f	signature:(struct api_data *root, char *name, float *data, bool copy_data)
api_add_volts	miner.h	/^extern struct api_data *api_add_volts(struct api_data *root, char *name, float *data, bool copy_data);$/;"	p	signature:(struct api_data *root, char *name, float *data, bool copy_data)
api_command	api-example.py	/^api_command = sys.argv[1].split('|')$/;"	v
api_convert_escape	miner.php	/^function api_convert_escape($str)$/;"	f
api_data	miner.h	/^struct api_data {$/;"	s
api_data::data	miner.h	/^	void *data;$/;"	m	struct:api_data	access:public
api_data::data_was_malloc	miner.h	/^	bool data_was_malloc;$/;"	m	struct:api_data	access:public
api_data::name	miner.h	/^	char *name;$/;"	m	struct:api_data	access:public
api_data::next	miner.h	/^	struct api_data *next;$/;"	m	struct:api_data	typeref:struct:api_data::api_data	access:public
api_data::prev	miner.h	/^	struct api_data *prev;$/;"	m	struct:api_data	typeref:struct:api_data::api_data	access:public
api_data::type	miner.h	/^	enum api_data_type type;$/;"	m	struct:api_data	typeref:enum:api_data::api_data_type	access:public
api_data_type	miner.h	/^enum api_data_type {$/;"	g
api_didlock	api.c	/^void api_didlock(uint64_t id, int ret, void *lock, const char *file, const char *func, const int linenum)$/;"	f	signature:(uint64_t id, int ret, void *lock, const char *file, const char *func, const int linenum)
api_didlock	miner.h	/^extern void api_didlock(uint64_t id, int ret, void *lock, const char *file, const char *func, const int line);$/;"	p	signature:(uint64_t id, int ret, void *lock, const char *file, const char *func, const int line)
api_getlock	api.c	/^uint64_t api_getlock(void *lock, const char *file, const char *func, const int linenum)$/;"	f	signature:(void *lock, const char *file, const char *func, const int linenum)
api_getlock	miner.h	/^extern uint64_t api_getlock(void *lock, const char *file, const char *func, const int line);$/;"	p	signature:(void *lock, const char *file, const char *func, const int line)
api_gotlock	api.c	/^void api_gotlock(uint64_t id, void *lock, const char *file, const char *func, const int linenum)$/;"	f	signature:(uint64_t id, void *lock, const char *file, const char *func, const int linenum)
api_gotlock	miner.h	/^extern void api_gotlock(uint64_t id, void *lock, const char *file, const char *func, const int line);$/;"	p	signature:(uint64_t id, void *lock, const char *file, const char *func, const int line)
api_gunlock	api.c	/^void api_gunlock(void *lock, const char *file, const char *func, const int linenum)$/;"	f	signature:(void *lock, const char *file, const char *func, const int linenum)
api_gunlock	miner.h	/^extern void api_gunlock(void *lock, const char *file, const char *func, const int line);$/;"	p	signature:(void *lock, const char *file, const char *func, const int line)
api_handle	compat/libusb-1.0/libusb/os/windows_usb.h	/^	HANDLE api_handle; \/\/ used by the API to communicate with the device$/;"	m	struct:interface_handle_t	access:public
api_initlock	api.c	/^void api_initlock(void *lock, enum cglock_typ typ, const char *file, const char *func, const int linenum)$/;"	f	signature:(void *lock, enum cglock_typ typ, const char *file, const char *func, const int linenum)
api_initlock	miner.h	/^extern void api_initlock(void *lock, enum cglock_typ typ, const char *file, const char *func, const int line);$/;"	p	signature:(void *lock, enum cglock_typ typ, const char *file, const char *func, const int line)
api_ip	api-example.py	/^	api_ip = '127.0.0.1'$/;"	v
api_ip	api-example.py	/^	api_ip = sys.argv[2]$/;"	v
api_port	api-example.py	/^	api_port = 4028$/;"	v
api_port	api-example.py	/^	api_port = sys.argv[3]$/;"	v
api_thr_id	cgminer.c	/^static int api_thr_id;$/;"	v	file:
api_thread	cgminer.c	/^static void *api_thread(void *userdata)$/;"	f	file:	signature:(void *userdata)
api_trylock	api.c	/^uint64_t api_trylock(void *lock, const char *file, const char *func, const int linenum)$/;"	f	signature:(void *lock, const char *file, const char *func, const int linenum)
api_trylock	miner.h	/^extern uint64_t api_trylock(void *lock, const char *file, const char *func, const int line);$/;"	p	signature:(void *lock, const char *file, const char *func, const int line)
api_usb_stats	usbutils.c	/^struct api_data *api_usb_stats(__maybe_unused int *count)$/;"	f	signature:(__maybe_unused int *count)
api_usb_stats	usbutils.h	/^struct api_data *api_usb_stats(int *count);$/;"	p	signature:(int *count)
api_winusb_available	compat/libusb-1.0/libusb/os/windows_usb.c	/^bool api_winusb_available = false;$/;"	v
apib	compat/libusb-1.0/libusb/os/windows_usb.h	/^		struct windows_usb_api_backend const *apib; \/\/ an API backend (multiple drivers support),$/;"	m	struct:windows_device_priv::__anon30	access:public
apib	compat/libusb-1.0/libusb/os/windows_usb.h	/^	struct windows_usb_api_backend const *apib;$/;"	m	struct:windows_device_priv	access:public
apigroups	api.c	/^} apigroups['Z' - 'A' + 1]; \/\/ only A=0 to Z=25 (R: noprivs, W: allprivs)$/;"	v	typeref:struct:APIGROUPS
apiversion	api.c	/^static void apiversion(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
app_restart	cgminer.c	/^void app_restart(void)$/;"	f	signature:(void)
app_restart	miner.h	/^extern void app_restart(void);$/;"	p	signature:(void)
append	usbutils.c	/^static void append(char **buf, char *append, size_t *off, size_t *len)$/;"	f	file:	signature:(char **buf, char *append, size_t *off, size_t *len)
applog	logging.h	36;"	d
applog_and_exit	cgminer.c	/^static void applog_and_exit(const char *fmt, ...)$/;"	f	file:	signature:(const char *fmt, ...)
applog_hexdump	driver-SPI-bitmine-A1.c	/^static void applog_hexdump(char *prefix, uint8_t *buff, int len, int level)$/;"	f	file:	signature:(char *prefix, uint8_t *buff, int len, int level)
applogsiz	logging.h	56;"	d
arg	ccan/opt/opt.h	/^		void *arg;$/;"	m	union:opt_table::__anon48	access:public
arg	ccan/typesafe_cb/test/run.c	/^	const void *arg;$/;"	m	struct:callback_onearg	file:	access:public
arg	ccan/typesafe_cb/test/run.c	/^	const void *arg;$/;"	m	struct:callback_postargs	file:	access:public
arg	ccan/typesafe_cb/test/run.c	/^	const void *arg;$/;"	m	struct:callback_preargs	file:	access:public
arg	compat/jansson-2.6/src/load.c	/^    void *arg;$/;"	m	struct:__anon21	file:	access:public
arg	miner.php	/^	$arg = trim(getparam('arg', true));$/;"	v
arg_bad	ccan/opt/helpers.c	/^static char *arg_bad(const char *fmt, const char *arg)$/;"	f	file:	signature:(const char *fmt, const char *arg)
arm_timerfd_for_next_timeout	compat/libusb-1.0/libusb/io.c	/^static int arm_timerfd_for_next_timeout(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
array	usbutils.c	/^	unsigned short *array;$/;"	m	union:semun	file:	access:public
array_copy	compat/jansson-2.6/src/value.c	/^static void array_copy(json_t **dest, size_t dpos,$/;"	f	file:	signature:(json_t **dest, size_t dpos, json_t **src, size_t spos, size_t count)
array_move	compat/jansson-2.6/src/value.c	/^static void array_move(json_array_t *array, size_t dest,$/;"	f	file:	signature:(json_array_t *array, size_t dest, size_t src, size_t count)
array_nonce_fifo_full	driver-hashfast.h	/^	uint64_t array_nonce_fifo_full;             \/\/ System nonce Q overrun events$/;"	m	struct:hf_long_statistics	access:public
array_nonce_fifo_full	hf_protocol.h	/^	uint8_t array_nonce_fifo_full;              \/\/ System nonce Q overrun events$/;"	m	struct:hf_statistics	access:public
array_nonce_fifo_full	hf_protocol_be.h	/^	uint8_t array_nonce_fifo_full;              \/\/ System nonce Q overrun events$/;"	m	struct:hf_statistics	access:public
as_fn_append	compat/jansson-2.6/configure	/^  as_fn_append ()$/;"	f
as_fn_append	compat/libusb-1.0/configure	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	compat/jansson-2.6/configure	/^  as_fn_arith ()$/;"	f
as_fn_arith	compat/libusb-1.0/configure	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	compat/jansson-2.6/configure	/^as_fn_error ()$/;"	f
as_fn_error	compat/libusb-1.0/configure	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_exit	compat/jansson-2.6/configure	/^as_fn_exit ()$/;"	f
as_fn_exit	compat/libusb-1.0/configure	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	compat/jansson-2.6/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_failure	compat/libusb-1.0/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	compat/jansson-2.6/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	compat/libusb-1.0/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	compat/jansson-2.6/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_failure	compat/libusb-1.0/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	compat/jansson-2.6/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_ret_success	compat/libusb-1.0/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	compat/jansson-2.6/configure	/^as_fn_set_status ()$/;"	f
as_fn_set_status	compat/libusb-1.0/configure	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	compat/jansson-2.6/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_success	compat/libusb-1.0/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	compat/jansson-2.6/configure	/^as_fn_unset ()$/;"	f
as_fn_unset	compat/libusb-1.0/configure	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
asccount	api.c	/^static void asccount(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
ascdev	api.c	/^static void ascdev(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
ascdevice	api.c	/^static int ascdevice(int ascid)$/;"	f	file:	signature:(int ascid)
ascdisable	api.c	/^static void ascdisable(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
ascenable	api.c	/^static void ascenable(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
ascidentify	api.c	/^static void ascidentify(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
ascset	api.c	/^static void ascset(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
ascstatus	api.c	/^static void ascstatus(struct io_data *io_data, int asc, bool isjson, bool precom)$/;"	f	file:	signature:(struct io_data *io_data, int asc, bool isjson, bool precom)
asic	driver-avalon.h	/^	uint32_t asic;$/;"	m	struct:avalon_info	access:public
asic_count	driver-avalon.h	/^	int asic_count;$/;"	m	struct:avalon_info	access:public
asic_count	driver-hashfast.h	/^	int asic_count;                             \/\/ # of chips in the chain$/;"	m	struct:hashfast_info	access:public
asic_info	driver-blockerupter.h	/^typedef struct asic_info {$/;"	s
asic_info	driver-blockerupter.h	/^} asic_info;$/;"	t	typeref:struct:asic_info
asic_info::accepted	driver-blockerupter.h	/^	int accepted;$/;"	m	struct:asic_info	access:public
asic_info::bad	driver-blockerupter.h	/^	int bad;$/;"	m	struct:asic_info	access:public
asic_info::hashes	driver-blockerupter.h	/^	int hashes;$/;"	m	struct:asic_info	access:public
asic_info::hwe	driver-blockerupter.h	/^	double hwe;$/;"	m	struct:asic_info	access:public
asic_info::nonces	driver-blockerupter.h	/^	int nonces;$/;"	m	struct:asic_info	access:public
asic_num	driver-avalon.h	/^	uint8_t asic_num	:4;$/;"	m	struct:avalon_task	access:public
asic_num	driver-bitmain.h	/^	int asic_num;$/;"	m	struct:bitmain_info	access:public
asic_num	driver-bitmain.h	/^	uint8_t asic_num;$/;"	m	struct:bitmain_txconfig_token	access:public
asic_pll	driver-avalon.h	/^	uint8_t asic_pll		:1;$/;"	m	struct:avalon_task	access:public
asics	driver-blockerupter.h	/^	struct asic_info asics[BET_MAXASICS];$/;"	m	struct:board_info	typeref:struct:board_info::asic_info	access:public
asics	driver-cointerra.h	/^	uint8_t asics;$/;"	m	struct:cointerra_info	access:public
async_usb_transfers	usbutils.c	/^bool async_usb_transfers(void)$/;"	f	signature:(void)
async_usb_transfers	usbutils.h	/^bool async_usb_transfers(void);$/;"	p	signature:(void)
atrvec	libbitfury.c	/^static unsigned int atrvec[] = {$/;"	v	file:
atrvec_set	libbitfury.c	/^static bool atrvec_set;$/;"	v	file:
att	usbutils.h	/^	uint8_t att;$/;"	m	struct:usb_epinfo	access:public
attach_kernel_driver	compat/libusb-1.0/libusb/libusbi.h	/^	int (*attach_kernel_driver)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
attached	compat/libusb-1.0/libusb/libusbi.h	/^	int attached;$/;"	m	struct:libusb_device	access:public
auth_stratum	util.c	/^bool auth_stratum(struct pool *pool)$/;"	f	signature:(struct pool *pool)
auth_stratum	util.h	/^bool auth_stratum(struct pool *pool);$/;"	p	signature:(struct pool *pool)
auto_bad	driver-drillbit.c	/^static uint32_t auto_bad = 3;$/;"	v	file:
auto_claim	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int auto_claim(struct libusb_transfer *transfer, int *interface_number, int api_type)$/;"	f	file:	signature:(struct libusb_transfer *transfer, int *interface_number, int api_type)
auto_delta	driver-drillbit.h	/^  int auto_delta;$/;"	m	struct:drillbit_chip_info	access:public
auto_every	driver-drillbit.c	/^static uint32_t auto_every = 100;$/;"	v	file:
auto_good	driver-drillbit.c	/^static uint32_t auto_good = 1;$/;"	v	file:
auto_hw	driver-avalon.h	/^	int auto_hw;$/;"	m	struct:avalon_info	access:public
auto_hw	driver-bitmain.h	/^	int auto_hw;$/;"	m	struct:bitmain_info	access:public
auto_max	driver-drillbit.c	/^static uint32_t auto_max = 10;$/;"	v	file:
auto_max	driver-drillbit.h	/^  int auto_max;$/;"	m	struct:drillbit_chip_info	access:public
auto_nonces	driver-avalon.h	/^	int auto_nonces;$/;"	m	struct:avalon_info	access:public
auto_nonces	driver-bitmain.h	/^	int auto_nonces;$/;"	m	struct:bitmain_info	access:public
auto_queued	driver-avalon.h	/^	int auto_queued;$/;"	m	struct:avalon_info	access:public
auto_queued	driver-bitmain.h	/^	int auto_queued;$/;"	m	struct:bitmain_info	access:public
auto_release	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void auto_release(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
autoclaim_count	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int autoclaim_count[USB_MAXINTERFACES]; \/\/ For auto-release$/;"	m	struct:windows_device_handle_priv	access:public
autoclaim_lock	compat/libusb-1.0/libusb/os/windows_usb.c	/^usbi_mutex_t autoclaim_lock;$/;"	v
autorefresh	miner.php	/^		$autorefresh = intval($ref);$/;"	v
autorefresh	miner.php	/^ if ($ignorerefresh == true || $autorefresh == 0)$/;"	v
autorefresh	miner.php	/^# $autorefresh = default value, 0 means dont auto-refresh$/;"	v
autorefresh	miner.php	/^$autorefresh = 0;$/;"	v
autoscan_func_t	fpgautils.h	/^typedef int(*autoscan_func_t)();$/;"	t
autovoltage	driver-cointerra.h	/^	uint8_t  autovoltage;$/;"	m	struct:cointerra_info	access:public
autovoltage_complete	driver-cointerra.h	/^	bool autovoltage_complete;$/;"	m	struct:cointerra_info	access:public
ava2_epinfos	usbutils.c	/^static struct usb_epinfo ava2_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
ava2_ints	usbutils.c	/^static struct usb_intinfo ava2_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
ava_epinfos	usbutils.c	/^static struct usb_epinfo ava_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
ava_ints	usbutils.c	/^static struct usb_intinfo ava_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
available_work	driver-bab.c	/^	K_STORE *available_work;$/;"	m	struct:bab_info	file:	access:public
avalon2_api_stats	driver-avalon2.c	/^static struct api_data *avalon2_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
avalon2_close	driver-avalon2.h	153;"	d
avalon2_detect	driver-avalon2.c	/^static inline void avalon2_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
avalon2_detect_one	driver-avalon2.c	/^static struct cgpu_info *avalon2_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
avalon2_drv	driver-avalon2.c	/^struct device_drv avalon2_drv = {$/;"	v	typeref:struct:device_drv
avalon2_fan_fixed	driver-avalon2.h	/^enum avalon2_fan_fixed {$/;"	g
avalon2_fan_max	driver-avalon2.c	/^static int avalon2_fan_max = get_fan_pwm(AVA2_DEFAULT_FAN_MAX);$/;"	v	file:
avalon2_fan_min	driver-avalon2.c	/^static int avalon2_fan_min = get_fan_pwm(AVA2_DEFAULT_FAN_MIN);$/;"	v	file:
avalon2_gets	driver-avalon2.c	/^static inline int avalon2_gets(struct cgpu_info *avalon2, uint8_t *buf)$/;"	f	file:	signature:(struct cgpu_info *avalon2, uint8_t *buf)
avalon2_info	driver-avalon2.h	/^struct avalon2_info {$/;"	s
avalon2_info::dev_type	driver-avalon2.h	/^	int dev_type[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::enable	driver-avalon2.h	/^	bool enable[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::failing	driver-avalon2.h	/^	bool failing;$/;"	m	struct:avalon2_info	access:public
avalon2_info::fan	driver-avalon2.h	/^	int fan[2 * AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::fan_pct	driver-avalon2.h	/^	int fan_pct;$/;"	m	struct:avalon2_info	access:public
avalon2_info::fan_pwm	driver-avalon2.h	/^	int fan_pwm;$/;"	m	struct:avalon2_info	access:public
avalon2_info::get_frequency	driver-avalon2.h	/^	int get_frequency[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::get_voltage	driver-avalon2.h	/^	int get_voltage[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::hw_work	driver-avalon2.h	/^	int hw_work[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::hw_works	driver-avalon2.h	/^	int hw_works[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::last_stratum	driver-avalon2.h	/^	struct timeval last_stratum;$/;"	m	struct:avalon2_info	typeref:struct:avalon2_info::timeval	access:public
avalon2_info::led_red	driver-avalon2.h	/^	int led_red[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::local_work	driver-avalon2.h	/^	int local_work[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::local_works	driver-avalon2.h	/^	int local_works[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::matching_work	driver-avalon2.h	/^	int matching_work[AVA2_DEFAULT_MINERS * AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::mm_version	driver-avalon2.h	/^	char mm_version[AVA2_DEFAULT_MODULARS][16];$/;"	m	struct:avalon2_info	access:public
avalon2_info::modulars	driver-avalon2.h	/^	int modulars[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::pool	driver-avalon2.h	/^	struct pool pool;$/;"	m	struct:avalon2_info	typeref:struct:avalon2_info::pool	access:public
avalon2_info::pool_no	driver-avalon2.h	/^	int pool_no;$/;"	m	struct:avalon2_info	access:public
avalon2_info::power_good	driver-avalon2.h	/^	int power_good[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::set_frequency	driver-avalon2.h	/^	int set_frequency;$/;"	m	struct:avalon2_info	access:public
avalon2_info::set_voltage	driver-avalon2.h	/^	int set_voltage;$/;"	m	struct:avalon2_info	access:public
avalon2_info::temp	driver-avalon2.h	/^	int temp[2 * AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
avalon2_info::temp_max	driver-avalon2.h	/^	int temp_max;$/;"	m	struct:avalon2_info	access:public
avalon2_init_pkg	driver-avalon2.c	/^static int avalon2_init_pkg(struct avalon2_pkg *pkg, uint8_t type, uint8_t idx, uint8_t cnt)$/;"	f	file:	signature:(struct avalon2_pkg *pkg, uint8_t type, uint8_t idx, uint8_t cnt)
avalon2_initialise	driver-avalon2.c	/^static void avalon2_initialise(struct cgpu_info *avalon2)$/;"	f	file:	signature:(struct cgpu_info *avalon2)
avalon2_open	driver-avalon2.h	152;"	d
avalon2_pkg	driver-avalon2.h	/^struct avalon2_pkg {$/;"	s
avalon2_pkg::cnt	driver-avalon2.h	/^	uint8_t cnt;$/;"	m	struct:avalon2_pkg	access:public
avalon2_pkg::crc	driver-avalon2.h	/^	uint8_t crc[2];$/;"	m	struct:avalon2_pkg	access:public
avalon2_pkg::data	driver-avalon2.h	/^	uint8_t data[32];$/;"	m	struct:avalon2_pkg	access:public
avalon2_pkg::head	driver-avalon2.h	/^	uint8_t head[2];$/;"	m	struct:avalon2_pkg	access:public
avalon2_pkg::idx	driver-avalon2.h	/^	uint8_t idx;$/;"	m	struct:avalon2_pkg	access:public
avalon2_pkg::type	driver-avalon2.h	/^	uint8_t type;$/;"	m	struct:avalon2_pkg	access:public
avalon2_prepare	driver-avalon2.c	/^static bool avalon2_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
avalon2_ret	driver-avalon2.h	103;"	d
avalon2_scanhash	driver-avalon2.c	/^static int64_t avalon2_scanhash(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
avalon2_send_pkg	driver-avalon2.c	/^static int avalon2_send_pkg(struct cgpu_info *avalon2, const struct avalon2_pkg *pkg)$/;"	f	file:	signature:(struct cgpu_info *avalon2, const struct avalon2_pkg *pkg)
avalon2_shutdown	driver-avalon2.c	/^static void avalon2_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
avalon2_statline_before	driver-avalon2.c	/^static void avalon2_statline_before(char *buf, size_t bufsiz, struct cgpu_info *avalon2)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *avalon2)
avalon2_stratum_pkgs	driver-avalon2.c	/^static void avalon2_stratum_pkgs(struct cgpu_info *avalon2, struct pool *pool)$/;"	f	file:	signature:(struct cgpu_info *avalon2, struct pool *pool)
avalon2_update	driver-avalon2.c	/^static void avalon2_update(struct cgpu_info *avalon2)$/;"	f	file:	signature:(struct cgpu_info *avalon2)
avalon_adjust_freq	driver-avalon.c	/^static void avalon_adjust_freq(struct avalon_info *info, struct cgpu_info *avalon)$/;"	f	file:	signature:(struct avalon_info *info, struct cgpu_info *avalon)
avalon_api_stats	driver-avalon.c	/^static struct api_data *avalon_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
avalon_buffer_full	driver-avalon.h	187;"	d
avalon_calc_timeout	driver-avalon.c	/^static int avalon_calc_timeout(int frequency)$/;"	f	file:	signature:(int frequency)
avalon_create_task	driver-avalon.c	/^static inline void avalon_create_task(struct avalon_task *at,$/;"	f	file:	signature:(struct avalon_task *at, struct work *work)
avalon_cts	driver-avalon.c	/^static inline bool avalon_cts(char c)$/;"	f	file:	signature:(char c)
avalon_dec_freq	driver-avalon.c	/^static void avalon_dec_freq(struct avalon_info *info)$/;"	f	file:	signature:(struct avalon_info *info)
avalon_decode_nonce	driver-avalon.c	/^static bool avalon_decode_nonce(struct thr_info *thr, struct cgpu_info *avalon,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *avalon, struct avalon_info *info, struct avalon_result *ar, struct work *work)
avalon_detect	driver-avalon.c	/^static void avalon_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
avalon_detect_one	driver-avalon.c	/^static struct cgpu_info *avalon_detect_one(libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(libusb_device *dev, struct usb_find_devices *found)
avalon_drv	driver-avalon.c	/^struct device_drv avalon_drv = {$/;"	v	typeref:struct:device_drv
avalon_fill	driver-avalon.c	/^static bool avalon_fill(struct cgpu_info *avalon)$/;"	f	file:	signature:(struct cgpu_info *avalon)
avalon_flush_work	driver-avalon.c	/^static void avalon_flush_work(struct cgpu_info *avalon)$/;"	f	file:	signature:(struct cgpu_info *avalon)
avalon_get_results	driver-avalon.c	/^static void *avalon_get_results(void *userdata)$/;"	f	file:	signature:(void *userdata)
avalon_idle	driver-avalon.c	/^static void avalon_idle(struct cgpu_info *avalon, struct avalon_info *info)$/;"	f	file:	signature:(struct cgpu_info *avalon, struct avalon_info *info)
avalon_inc_freq	driver-avalon.c	/^static void avalon_inc_freq(struct avalon_info *info)$/;"	f	file:	signature:(struct avalon_info *info)
avalon_inc_nvw	driver-avalon.c	/^static void avalon_inc_nvw(struct avalon_info *info, struct thr_info *thr)$/;"	f	file:	signature:(struct avalon_info *info, struct thr_info *thr)
avalon_info	driver-avalon.h	/^struct avalon_info {$/;"	s
avalon_info::asic	driver-avalon.h	/^	uint32_t asic;$/;"	m	struct:avalon_info	access:public
avalon_info::asic_count	driver-avalon.h	/^	int asic_count;$/;"	m	struct:avalon_info	access:public
avalon_info::auto_hw	driver-avalon.h	/^	int auto_hw;$/;"	m	struct:avalon_info	access:public
avalon_info::auto_nonces	driver-avalon.h	/^	int auto_nonces;$/;"	m	struct:avalon_info	access:public
avalon_info::auto_queued	driver-avalon.h	/^	int auto_queued;$/;"	m	struct:avalon_info	access:public
avalon_info::baud	driver-avalon.h	/^	int baud;$/;"	m	struct:avalon_info	access:public
avalon_info::cgsent	driver-avalon.h	/^	cgtimer_t cgsent;$/;"	m	struct:avalon_info	access:public
avalon_info::core_voltage	driver-avalon.h	/^	int core_voltage;$/;"	m	struct:avalon_info	access:public
avalon_info::ctlr_ver	driver-avalon.h	/^	uint32_t ctlr_ver;$/;"	m	struct:avalon_info	access:public
avalon_info::decrement	driver-avalon.h	/^	int decrement;$/;"	m	struct:avalon_info	access:public
avalon_info::fan0	driver-avalon.h	/^	int fan0;$/;"	m	struct:avalon_info	access:public
avalon_info::fan1	driver-avalon.h	/^	int fan1;$/;"	m	struct:avalon_info	access:public
avalon_info::fan2	driver-avalon.h	/^	int fan2;$/;"	m	struct:avalon_info	access:public
avalon_info::fan_pwm	driver-avalon.h	/^	int fan_pwm;$/;"	m	struct:avalon_info	access:public
avalon_info::frequency	driver-avalon.h	/^	int frequency;$/;"	m	struct:avalon_info	access:public
avalon_info::idle	driver-avalon.h	/^	int idle;$/;"	m	struct:avalon_info	access:public
avalon_info::increment	driver-avalon.h	/^	int increment;$/;"	m	struct:avalon_info	access:public
avalon_info::lock	driver-avalon.h	/^	pthread_mutex_t lock;$/;"	m	struct:avalon_info	access:public
avalon_info::matching_work	driver-avalon.h	/^	int matching_work[AVALON_MAX_MINER_NUM];$/;"	m	struct:avalon_info	access:public
avalon_info::miner_count	driver-avalon.h	/^	int miner_count;$/;"	m	struct:avalon_info	access:public
avalon_info::no_matching_work	driver-avalon.h	/^	int no_matching_work;$/;"	m	struct:avalon_info	access:public
avalon_info::nonces	driver-avalon.h	/^	int nonces;$/;"	m	struct:avalon_info	access:public
avalon_info::optimal	driver-avalon.h	/^	bool optimal;$/;"	m	struct:avalon_info	access:public
avalon_info::overheat	driver-avalon.h	/^	bool overheat;$/;"	m	struct:avalon_info	access:public
avalon_info::qlock	driver-avalon.h	/^	pthread_mutex_t qlock;$/;"	m	struct:avalon_info	access:public
avalon_info::qsem	driver-avalon.h	/^	cgsem_t qsem;$/;"	m	struct:avalon_info	access:public
avalon_info::read_thr	driver-avalon.h	/^	pthread_t read_thr;$/;"	m	struct:avalon_info	access:public
avalon_info::reset	driver-avalon.h	/^	bool reset;$/;"	m	struct:avalon_info	access:public
avalon_info::send_delay	driver-avalon.h	/^	int send_delay;$/;"	m	struct:avalon_info	access:public
avalon_info::temp0	driver-avalon.h	/^	int temp0;$/;"	m	struct:avalon_info	access:public
avalon_info::temp1	driver-avalon.h	/^	int temp1;$/;"	m	struct:avalon_info	access:public
avalon_info::temp2	driver-avalon.h	/^	int temp2;$/;"	m	struct:avalon_info	access:public
avalon_info::temp_history_count	driver-avalon.h	/^	int temp_history_count;$/;"	m	struct:avalon_info	access:public
avalon_info::temp_history_index	driver-avalon.h	/^	int temp_history_index;$/;"	m	struct:avalon_info	access:public
avalon_info::temp_old	driver-avalon.h	/^	int temp_old;$/;"	m	struct:avalon_info	access:public
avalon_info::temp_sum	driver-avalon.h	/^	int temp_sum;$/;"	m	struct:avalon_info	access:public
avalon_info::thr	driver-avalon.h	/^	struct thr_info *thr;$/;"	m	struct:avalon_info	typeref:struct:avalon_info::thr_info	access:public
avalon_info::timeout	driver-avalon.h	/^	int timeout;$/;"	m	struct:avalon_info	access:public
avalon_info::version1	driver-avalon.h	/^	uint8_t version1;$/;"	m	struct:avalon_info	access:public
avalon_info::version2	driver-avalon.h	/^	uint8_t version2;$/;"	m	struct:avalon_info	access:public
avalon_info::version3	driver-avalon.h	/^	uint8_t version3;$/;"	m	struct:avalon_info	access:public
avalon_info::write_thr	driver-avalon.h	/^	pthread_t write_thr;$/;"	m	struct:avalon_info	access:public
avalon_init	driver-avalon.c	/^static void avalon_init(struct cgpu_info *avalon)$/;"	f	file:	signature:(struct cgpu_info *avalon)
avalon_init_task	driver-avalon.c	/^static int avalon_init_task(struct avalon_task *at,$/;"	f	file:	signature:(struct avalon_task *at, uint8_t reset, uint8_t ff, uint8_t fan, uint8_t timeout, uint8_t asic_num, uint8_t miner_num, uint8_t nonce_elf, uint8_t gate_miner, int frequency, int asic)
avalon_initialise	driver-avalon.c	/^static void avalon_initialise(struct cgpu_info *avalon)$/;"	f	file:	signature:(struct cgpu_info *avalon)
avalon_parse_results	driver-avalon.c	/^static void avalon_parse_results(struct cgpu_info *avalon, struct avalon_info *info,$/;"	f	file:	signature:(struct cgpu_info *avalon, struct avalon_info *info, struct thr_info *thr, char *buf, int *offset)
avalon_prepare	driver-avalon.c	/^static bool avalon_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
avalon_read	driver-avalon.c	/^static int avalon_read(struct cgpu_info *avalon, char *buf, size_t bufsize, int ep)$/;"	f	file:	signature:(struct cgpu_info *avalon, char *buf, size_t bufsize, int ep)
avalon_reset	driver-avalon.c	/^static int avalon_reset(struct cgpu_info *avalon, bool initial)$/;"	f	file:	signature:(struct cgpu_info *avalon, bool initial)
avalon_reset_auto	driver-avalon.c	/^static void avalon_reset_auto(struct avalon_info *info)$/;"	f	file:	signature:(struct avalon_info *info)
avalon_result	driver-avalon.h	/^struct avalon_result {$/;"	s
avalon_result::_pad0	driver-avalon.h	/^	uint8_t _pad0[2];$/;"	m	struct:avalon_result	access:public
avalon_result::chip_num	driver-avalon.h	/^	uint8_t chip_num;$/;"	m	struct:avalon_result	access:public
avalon_result::data	driver-avalon.h	/^	uint8_t data[12];$/;"	m	struct:avalon_result	access:public
avalon_result::fan0	driver-avalon.h	/^	uint8_t fan0;$/;"	m	struct:avalon_result	access:public
avalon_result::fan1	driver-avalon.h	/^	uint8_t fan1;$/;"	m	struct:avalon_result	access:public
avalon_result::fan2	driver-avalon.h	/^	uint8_t fan2;$/;"	m	struct:avalon_result	access:public
avalon_result::fifo_rp	driver-avalon.h	/^	uint16_t fifo_rp;$/;"	m	struct:avalon_result	access:public
avalon_result::fifo_wp	driver-avalon.h	/^	uint16_t fifo_wp;$/;"	m	struct:avalon_result	access:public
avalon_result::midstate	driver-avalon.h	/^	uint8_t midstate[32];$/;"	m	struct:avalon_result	access:public
avalon_result::miner_num	driver-avalon.h	/^	uint8_t miner_num;$/;"	m	struct:avalon_result	access:public
avalon_result::nonce	driver-avalon.h	/^	uint32_t nonce;$/;"	m	struct:avalon_result	access:public
avalon_result::pwm_data	driver-avalon.h	/^	uint8_t pwm_data;$/;"	m	struct:avalon_result	access:public
avalon_result::temp0	driver-avalon.h	/^	uint8_t temp0;$/;"	m	struct:avalon_result	access:public
avalon_result::temp1	driver-avalon.h	/^	uint8_t temp1;$/;"	m	struct:avalon_result	access:public
avalon_result::temp2	driver-avalon.h	/^	uint8_t temp2;$/;"	m	struct:avalon_result	access:public
avalon_result::timeout	driver-avalon.h	/^	uint8_t timeout;$/;"	m	struct:avalon_result	access:public
avalon_rotate_array	driver-avalon.c	/^static void avalon_rotate_array(struct cgpu_info *avalon, struct avalon_info *info)$/;"	f	file:	signature:(struct cgpu_info *avalon, struct avalon_info *info)
avalon_running_reset	driver-avalon.c	/^static void avalon_running_reset(struct cgpu_info *avalon,$/;"	f	file:	signature:(struct cgpu_info *avalon, struct avalon_info *info)
avalon_scanhash	driver-avalon.c	/^static int64_t avalon_scanhash(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
avalon_send_task	driver-avalon.c	/^static int avalon_send_task(const struct avalon_task *at, struct cgpu_info *avalon,$/;"	f	file:	signature:(const struct avalon_task *at, struct cgpu_info *avalon, struct avalon_info *info)
avalon_send_tasks	driver-avalon.c	/^static void *avalon_send_tasks(void *userdata)$/;"	f	file:	signature:(void *userdata)
avalon_set_device	driver-avalon.c	/^static char *avalon_set_device(struct cgpu_info *avalon, char *option, char *setting, char *replybuf)$/;"	f	file:	signature:(struct cgpu_info *avalon, char *option, char *setting, char *replybuf)
avalon_set_freq	driver-avalon.c	/^static void avalon_set_freq(struct cgpu_info *avalon, int frequency)$/;"	f	file:	signature:(struct cgpu_info *avalon, int frequency)
avalon_set_timeout	driver-avalon.c	/^static void avalon_set_timeout(struct avalon_info *info)$/;"	f	file:	signature:(struct avalon_info *info)
avalon_shutdown	driver-avalon.c	/^static void avalon_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
avalon_task	driver-avalon.h	/^struct avalon_task {$/;"	s
avalon_task::_pad0	driver-avalon.h	/^	uint8_t _pad0			:4;$/;"	m	struct:avalon_task	access:public
avalon_task::_pad1	driver-avalon.h	/^	uint8_t _pad1[3];$/;"	m	struct:avalon_task	access:public
avalon_task::_pad2	driver-avalon.h	/^	uint32_t _pad2;$/;"	m	struct:avalon_task	access:public
avalon_task::asic_num	driver-avalon.h	/^	uint8_t asic_num	:4;$/;"	m	struct:avalon_task	access:public
avalon_task::asic_pll	driver-avalon.h	/^	uint8_t asic_pll		:1;$/;"	m	struct:avalon_task	access:public
avalon_task::data	driver-avalon.h	/^	uint8_t data[12];$/;"	m	struct:avalon_task	access:public
avalon_task::fan_eft	driver-avalon.h	/^	uint8_t fan_eft		:1;$/;"	m	struct:avalon_task	access:public
avalon_task::fan_pwm_data	driver-avalon.h	/^	uint8_t fan_pwm_data;$/;"	m	struct:avalon_task	access:public
avalon_task::flush_fifo	driver-avalon.h	/^	uint8_t flush_fifo	:1;$/;"	m	struct:avalon_task	access:public
avalon_task::gate_miner	driver-avalon.h	/^	uint8_t gate_miner		:1;$/;"	m	struct:avalon_task	access:public
avalon_task::gate_miner_elf	driver-avalon.h	/^	uint8_t gate_miner_elf		:1;$/;"	m	struct:avalon_task	access:public
avalon_task::midstate	driver-avalon.h	/^	uint8_t midstate[32];$/;"	m	struct:avalon_task	access:public
avalon_task::miner_num	driver-avalon.h	/^	uint8_t miner_num;$/;"	m	struct:avalon_task	access:public
avalon_task::nonce_elf	driver-avalon.h	/^	uint8_t nonce_elf		:1;$/;"	m	struct:avalon_task	access:public
avalon_task::reset	driver-avalon.h	/^	uint8_t reset		:1;$/;"	m	struct:avalon_task	access:public
avalon_task::timeout_data	driver-avalon.h	/^	uint8_t timeout_data;$/;"	m	struct:avalon_task	access:public
avalon_task::timer_eft	driver-avalon.h	/^	uint8_t timer_eft	:1;$/;"	m	struct:avalon_task	access:public
avalon_update_temps	driver-avalon.c	/^static void avalon_update_temps(struct cgpu_info *avalon, struct avalon_info *info,$/;"	f	file:	signature:(struct cgpu_info *avalon, struct avalon_info *info, struct avalon_result *ar)
avalon_update_temps	driver-avalon.c	/^static void avalon_update_temps(struct cgpu_info *avalon, struct avalon_info *info,$/;"	p	file:	signature:(struct cgpu_info *avalon, struct avalon_info *info, struct avalon_result *ar)
avalon_valid_result	driver-avalon.c	/^static struct work *avalon_valid_result(struct cgpu_info *avalon, struct avalon_result *ar)$/;"	f	file:	signature:(struct cgpu_info *avalon, struct avalon_result *ar)
avalon_write	driver-avalon.c	/^static int avalon_write(struct cgpu_info *avalon, char *buf, ssize_t len, int ep)$/;"	f	file:	signature:(struct cgpu_info *avalon, char *buf, ssize_t len, int ep)
avg_wait_d	miner.h	/^	unsigned int avg_wait_d;$/;"	m	struct:cgpu_info	access:public
avg_wait_f	miner.h	/^	double avg_wait_f;$/;"	m	struct:cgpu_info	access:public
b	miner.php	/^ $b = '&nbsp;';$/;"	v
b	usbtest.py	/^	b=ser.read(4)$/;"	v
b	usbtest.py	/^	b=ser.readline()$/;"	v
b58tobin	util.c	/^void b58tobin(unsigned char *b58bin, const char *b58)$/;"	f	signature:(unsigned char *b58bin, const char *b58)
b58tobin	util.h	/^void b58tobin(unsigned char *b58bin, const char *b58);$/;"	p	signature:(unsigned char *b58bin, const char *b58)
b58tobin_tbl	util.c	/^static const int b58tobin_tbl[] = {$/;"	v	file:
bAlternateSetting	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bAlternateSetting;$/;"	m	struct:libusb_interface_descriptor	access:public
bAlternateSetting	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bAlternateSetting;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
bConfigurationValue	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bConfigurationValue;$/;"	m	struct:libusb_config_descriptor	access:public
bConfigurationValue	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bConfigurationValue;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
bDescriptorLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bDescriptorLength;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_bos_descriptor	access:public
bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_config_descriptor	access:public
bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_device_descriptor	access:public
bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_endpoint_descriptor	access:public
bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_interface_descriptor	access:public
bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_usb_2_0_device_capability_descriptor	access:public
bDescriptorType	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:usb_descriptor_header	access:public
bDescriptorType	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bDescriptorType;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
bDescriptorType	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bDescriptorType;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
bDescriptorType	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bDescriptorType;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
bDescriptorType	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bDescriptorType;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
bDevCapabilityType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
bDevCapabilityType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_usb_2_0_device_capability_descriptor	access:public
bDeviceClass	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDeviceClass;$/;"	m	struct:libusb_device_descriptor	access:public
bDeviceProtocol	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDeviceProtocol;$/;"	m	struct:libusb_device_descriptor	access:public
bDeviceSubClass	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDeviceSubClass;$/;"	m	struct:libusb_device_descriptor	access:public
bEndpointAddress	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bEndpointAddress;$/;"	m	struct:libusb_endpoint_descriptor	access:public
bEndpointAddress	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bEndpointAddress;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
bFunctionalitySupport	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bFunctionalitySupport;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
bHubControlCurrent	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bHubControlCurrent;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
bInterfaceClass	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterfaceClass;$/;"	m	struct:libusb_interface_descriptor	access:public
bInterfaceClass	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterfaceClass;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
bInterfaceNumber	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterfaceNumber;$/;"	m	struct:libusb_interface_descriptor	access:public
bInterfaceNumber	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterfaceNumber;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
bInterfaceProtocol	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterfaceProtocol;$/;"	m	struct:libusb_interface_descriptor	access:public
bInterfaceProtocol	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterfaceProtocol;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
bInterfaceSubClass	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterfaceSubClass;$/;"	m	struct:libusb_interface_descriptor	access:public
bInterfaceSubClass	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterfaceSubClass;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
bInterval	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterval;$/;"	m	struct:libusb_endpoint_descriptor	access:public
bInterval	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bInterval;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_bos_descriptor	access:public
bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_config_descriptor	access:public
bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_device_descriptor	access:public
bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_endpoint_descriptor	access:public
bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_interface_descriptor	access:public
bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_usb_2_0_device_capability_descriptor	access:public
bLength	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t  bLength;$/;"	m	struct:usb_descriptor_header	access:public
bLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bLength;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
bLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bLength;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
bLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bLength;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
bMaxBurst	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bMaxBurst;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
bMaxPacketSize0	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bMaxPacketSize0;$/;"	m	struct:libusb_device_descriptor	access:public
bNumConfigurations	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bNumConfigurations;$/;"	m	struct:libusb_device_descriptor	access:public
bNumDeviceCaps	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bNumDeviceCaps;$/;"	m	struct:libusb_bos_descriptor	access:public
bNumEndpoints	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bNumEndpoints;$/;"	m	struct:libusb_interface_descriptor	access:public
bNumEndpoints	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bNumEndpoints;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
bNumInterfaces	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bNumInterfaces;$/;"	m	struct:libusb_config_descriptor	access:public
bNumInterfaces	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bNumInterfaces;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
bNumberOfPorts	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bNumberOfPorts;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
bPowerOnToPowerGood	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bPowerOnToPowerGood;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
bRefresh	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bRefresh;$/;"	m	struct:libusb_endpoint_descriptor	access:public
bRemoveAndPowerMask	compat/libusb-1.0/libusb/os/windows_usb.h	/^	UCHAR  bRemoveAndPowerMask[64];$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
bRequest	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bRequest;$/;"	m	struct:libusb_control_setup	access:public
bRequest	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint8_t  bRequest;$/;"	m	struct:usbfs_ctrltransfer	access:public
bRequest	compat/libusb-1.0/libusb/os/windows_usb.h	/^			UCHAR bRequest;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
bRequest	compat/libusb-1.0/libusb/os/windows_usb.h	/^		UCHAR  bRequest;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
bSynchAddress	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bSynchAddress;$/;"	m	struct:libusb_endpoint_descriptor	access:public
bU1DevExitLat	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bU1DevExitLat;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
bU2DevExitLat	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t bU2DevExitLat;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
b_info	driver-blockerupter.h	/^	board_info b_info[BET_MAXBOARDS];$/;"	m	struct:blockerupter_info	access:public
bab_add_buf	driver-bab.c	89;"	d	file:
bab_add_data	driver-bab.c	93;"	d	file:
bab_api_stats	driver-bab.c	/^static struct api_data *bab_api_stats(struct cgpu_info *babcgpu)$/;"	f	file:	signature:(struct cgpu_info *babcgpu)
bab_config_reg	driver-bab.c	92;"	d	file:
bab_counters	driver-bab.c	/^static const uint8_t bab_counters[BAB_COUNTERS] = {$/;"	v	file:
bab_decnonce	driver-bab.c	/^static uint32_t bab_decnonce(uint32_t in)$/;"	f	file:	signature:(uint32_t in)
bab_detect	driver-bab.c	/^static void bab_detect(__maybe_unused bool hotplug)$/;"	f	file:	signature:(__maybe_unused bool hotplug)
bab_detect	driver-bab.c	/^static void bab_detect(bool hotplug)$/;"	f	file:	signature:(bool hotplug)
bab_detect_chips	driver-bab.c	/^void bab_detect_chips(struct cgpu_info *babcgpu, struct bab_info *babinfo, int bank, int first, int last)$/;"	f	signature:(struct cgpu_info *babcgpu, struct bab_info *babinfo, int bank, int first, int last)
bab_do_work	driver-bab.c	/^static bool bab_do_work(struct cgpu_info *babcgpu)$/;"	f	file:	signature:(struct cgpu_info *babcgpu)
bab_drv	driver-bab.c	/^struct device_drv bab_drv = {$/;"	v	typeref:struct:device_drv
bab_flush_work	driver-bab.c	/^static void bab_flush_work(struct cgpu_info *babcgpu)$/;"	f	file:	signature:(struct cgpu_info *babcgpu)
bab_get	driver-bab.c	/^static bool bab_get(__maybe_unused struct cgpu_info *babcgpu, struct bab_info *babinfo, struct timeval *when)$/;"	f	file:	signature:(__maybe_unused struct cgpu_info *babcgpu, struct bab_info *babinfo, struct timeval *when)
bab_get_options	driver-bab.c	/^static void bab_get_options(struct cgpu_info *babcgpu, struct bab_info *babinfo)$/;"	f	file:	signature:(struct cgpu_info *babcgpu, struct bab_info *babinfo)
bab_get_statline_before	driver-bab.c	/^static void bab_get_statline_before(char *buf, size_t bufsiz, struct cgpu_info *babcgpu)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *babcgpu)
bab_identify	driver-bab.c	/^static void bab_identify(__maybe_unused struct cgpu_info *babcgpu)$/;"	f	file:	signature:(__maybe_unused struct cgpu_info *babcgpu)
bab_info	driver-bab.c	/^struct bab_info {$/;"	s	file:
bab_info::available_work	driver-bab.c	/^	K_STORE *available_work;$/;"	m	struct:bab_info	file:	access:public
bab_info::bad_fast	driver-bab.c	/^	uint8_t bad_fast[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::bad_msg	driver-bab.c	/^	bool bad_msg[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::bad_nonces	driver-bab.c	/^	K_STORE *bad_nonces[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::bank_first_chip	driver-bab.c	/^	int bank_first_chip[BAB_MAXBANKS+1];$/;"	m	struct:bab_info	file:	access:public
bab_info::bank_last_chip	driver-bab.c	/^	int bank_last_chip[BAB_MAXBANKS+1];$/;"	m	struct:bab_info	file:	access:public
bab_info::banks	driver-bab.c	/^	int banks;$/;"	m	struct:bab_info	file:	access:public
bab_info::boards	driver-bab.c	/^	int boards;$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_bad	driver-bab.c	/^	uint64_t chip_bad[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_bank	driver-bab.c	/^	uint8_t chip_bank[BAB_MAXCHIPS+1];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_conf	driver-bab.c	/^	uint8_t chip_conf[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_cont_bad	driver-bab.c	/^	uint64_t chip_cont_bad[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_fast	driver-bab.c	/^	uint8_t chip_fast[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_good	driver-bab.c	/^	uint64_t chip_good[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_max_bad	driver-bab.c	/^	uint64_t chip_max_bad[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_miso	driver-bab.c	/^	uint64_t chip_miso[BAB_MAXCHIPS]; \/\/ msio errors$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_ncore	driver-bab.c	/^	uint64_t chip_ncore[BAB_MAXCHIPS][BAB_X_COORD][BAB_Y_COORD];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_nonces	driver-bab.c	/^	uint64_t chip_nonces[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_prev	driver-bab.c	/^	struct bab_work_reply chip_prev[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::bab_work_reply	file:	access:public
bab_info::chip_results	driver-bab.c	/^	struct bab_work_reply chip_results[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::bab_work_reply	file:	access:public
bab_info::chip_spie	driver-bab.c	/^	uint64_t chip_spie[BAB_MAXCHIPS]; \/\/ spi errors$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_spis	driver-bab.c	/^	uint32_t chip_spis[BAB_MAXCHIPS+1];$/;"	m	struct:bab_info	file:	access:public
bab_info::chip_work	driver-bab.c	/^	K_STORE *chip_work[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::chips	driver-bab.c	/^	int chips;$/;"	m	struct:bab_info	file:	access:public
bab_info::chips_per_bank	driver-bab.c	/^	int chips_per_bank[BAB_MAXBANKS+1];$/;"	m	struct:bab_info	file:	access:public
bab_info::core_bad	driver-bab.c	/^	uint64_t core_bad[BAB_MAXCHIPS][BAB_CORES];$/;"	m	struct:bab_info	file:	access:public
bab_info::core_good	driver-bab.c	/^	uint64_t core_good[BAB_MAXCHIPS][BAB_CORES];$/;"	m	struct:bab_info	file:	access:public
bab_info::def_speed	driver-bab.c	/^	uint8_t def_speed;$/;"	m	struct:bab_info	file:	access:public
bab_info::delay_bands	driver-bab.c	/^	uint64_t delay_bands[BAB_DELAY_BANDS+2];$/;"	m	struct:bab_info	file:	access:public
bab_info::delay_count	driver-bab.c	/^	uint64_t delay_count;$/;"	m	struct:bab_info	file:	access:public
bab_info::delay_max	driver-bab.c	/^	double delay_max;$/;"	m	struct:bab_info	file:	access:public
bab_info::delay_min	driver-bab.c	/^	double delay_min;$/;"	m	struct:bab_info	file:	access:public
bab_info::delay_usecs	driver-bab.c	/^	uint16_t delay_usecs;$/;"	m	struct:bab_info	file:	access:public
bab_info::did_lock	driver-bab.c	/^	pthread_mutex_t did_lock;$/;"	m	struct:bab_info	file:	access:public
bab_info::disabled	driver-bab.c	/^	bool disabled[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::discarded_e0s	driver-bab.c	/^	uint64_t discarded_e0s;$/;"	m	struct:bab_info	file:	access:public
bab_info::fail	driver-bab.c	/^	uint64_t fail;$/;"	m	struct:bab_info	file:	access:public
bab_info::fail_total_links	driver-bab.c	/^	uint64_t fail_total_links;$/;"	m	struct:bab_info	file:	access:public
bab_info::fail_total_tests	driver-bab.c	/^	uint64_t fail_total_tests;$/;"	m	struct:bab_info	file:	access:public
bab_info::fail_total_work_links	driver-bab.c	/^	uint64_t fail_total_work_links;$/;"	m	struct:bab_info	file:	access:public
bab_info::first_work	driver-bab.c	/^	struct timeval first_work[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:	access:public
bab_info::good_nonces	driver-bab.c	/^	K_STORE *good_nonces[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::gpio	driver-bab.c	/^	volatile unsigned *gpio;$/;"	m	struct:bab_info	file:	access:public
bab_info::ign_total_links	driver-bab.c	/^	uint64_t ign_total_links;$/;"	m	struct:bab_info	file:	access:public
bab_info::ign_total_tests	driver-bab.c	/^	uint64_t ign_total_tests;$/;"	m	struct:bab_info	file:	access:public
bab_info::ign_total_work_links	driver-bab.c	/^	uint64_t ign_total_work_links;$/;"	m	struct:bab_info	file:	access:public
bab_info::initial_ignored	driver-bab.c	/^	uint32_t initial_ignored;$/;"	m	struct:bab_info	file:	access:public
bab_info::initialised	driver-bab.c	/^	bool initialised;$/;"	m	struct:bab_info	file:	access:public
bab_info::last_did	driver-bab.c	/^	struct timeval last_did;$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:	access:public
bab_info::last_sent_work	driver-bab.c	/^	struct timeval last_sent_work;$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:	access:public
bab_info::last_tune	driver-bab.c	/^	struct timeval last_tune[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:	access:public
bab_info::max_links	driver-bab.c	/^	uint64_t max_links;$/;"	m	struct:bab_info	file:	access:public
bab_info::max_proc_links	driver-bab.c	/^	uint64_t max_proc_links;$/;"	m	struct:bab_info	file:	access:public
bab_info::max_speed	driver-bab.c	/^	uint8_t max_speed;$/;"	m	struct:bab_info	file:	access:public
bab_info::max_tests_per_nonce	driver-bab.c	/^	uint64_t max_tests_per_nonce;$/;"	m	struct:bab_info	file:	access:public
bab_info::min_speed	driver-bab.c	/^	uint8_t min_speed;$/;"	m	struct:bab_info	file:	access:public
bab_info::missing_chips_per_bank	driver-bab.c	/^	int missing_chips_per_bank[BAB_MAXBANKS+1];$/;"	m	struct:bab_info	file:	access:public
bab_info::new_nonces	driver-bab.c	/^	uint64_t new_nonces;$/;"	m	struct:bab_info	file:	access:public
bab_info::nfree_list	driver-bab.c	/^	K_LIST *nfree_list;$/;"	m	struct:bab_info	file:	access:public
bab_info::nonce_lock	driver-bab.c	/^	pthread_mutex_t nonce_lock;$/;"	m	struct:bab_info	file:	access:public
bab_info::nonce_offset_count	driver-bab.c	/^	uint64_t nonce_offset_count[BAB_NONCE_OFFSETS];$/;"	m	struct:bab_info	file:	access:public
bab_info::not_first_reply	driver-bab.c	/^	bool not_first_reply[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::ok_nonces	driver-bab.c	/^	uint64_t ok_nonces;$/;"	m	struct:bab_info	file:	access:public
bab_info::old_conf	driver-bab.c	/^	uint8_t old_conf[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::old_fast	driver-bab.c	/^	uint8_t old_fast[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::osc	driver-bab.c	/^	uint8_t osc[BAB_OSC];$/;"	m	struct:bab_info	file:	access:public
bab_info::process_reply	driver-bab.c	/^	cgsem_t process_reply;$/;"	m	struct:bab_info	file:	access:public
bab_info::reply_wait	driver-bab.c	/^	int reply_wait;$/;"	m	struct:bab_info	file:	access:public
bab_info::reply_waits	driver-bab.c	/^	uint64_t reply_waits;$/;"	m	struct:bab_info	file:	access:public
bab_info::res_list	driver-bab.c	/^	K_STORE *res_list;$/;"	m	struct:bab_info	file:	access:public
bab_info::res_thr	driver-bab.c	/^	struct thr_info res_thr;$/;"	m	struct:bab_info	typeref:struct:bab_info::thr_info	file:	access:public
bab_info::rfree_list	driver-bab.c	/^	K_LIST *rfree_list;$/;"	m	struct:bab_info	file:	access:public
bab_info::scan_work	driver-bab.c	/^	cgsem_t scan_work;$/;"	m	struct:bab_info	file:	access:public
bab_info::send_count	driver-bab.c	/^	uint64_t send_count;$/;"	m	struct:bab_info	file:	access:public
bab_info::send_max	driver-bab.c	/^	double send_max;$/;"	m	struct:bab_info	file:	access:public
bab_info::send_min	driver-bab.c	/^	double send_min;$/;"	m	struct:bab_info	file:	access:public
bab_info::send_total	driver-bab.c	/^	double send_total;$/;"	m	struct:bab_info	file:	access:public
bab_info::sfree_list	driver-bab.c	/^	K_LIST *sfree_list;$/;"	m	struct:bab_info	file:	access:public
bab_info::speed_hz	driver-bab.c	/^	uint32_t speed_hz;$/;"	m	struct:bab_info	file:	access:public
bab_info::spi_list	driver-bab.c	/^	K_STORE *spi_list;$/;"	m	struct:bab_info	file:	access:public
bab_info::spi_reply	driver-bab.c	/^	cgsem_t spi_reply;$/;"	m	struct:bab_info	file:	access:public
bab_info::spi_sent	driver-bab.c	/^	K_STORE *spi_sent;$/;"	m	struct:bab_info	file:	access:public
bab_info::spi_thr	driver-bab.c	/^	struct thr_info spi_thr;$/;"	m	struct:bab_info	typeref:struct:bab_info::thr_info	file:	access:public
bab_info::spi_work	driver-bab.c	/^	cgsem_t spi_work;$/;"	m	struct:bab_info	file:	access:public
bab_info::spifd	driver-bab.c	/^	int spifd;$/;"	m	struct:bab_info	file:	access:public
bab_info::tested_nonces	driver-bab.c	/^	uint64_t tested_nonces;$/;"	m	struct:bab_info	file:	access:public
bab_info::total_disabled	driver-bab.c	/^	int total_disabled;$/;"	m	struct:bab_info	file:	access:public
bab_info::total_links	driver-bab.c	/^	uint64_t total_links;$/;"	m	struct:bab_info	file:	access:public
bab_info::total_proc_links	driver-bab.c	/^	uint64_t total_proc_links;$/;"	m	struct:bab_info	file:	access:public
bab_info::total_tests	driver-bab.c	/^	uint64_t total_tests;$/;"	m	struct:bab_info	file:	access:public
bab_info::total_work_links	driver-bab.c	/^	uint64_t total_work_links;$/;"	m	struct:bab_info	file:	access:public
bab_info::trf_delay	driver-bab.c	/^	uint64_t trf_delay;$/;"	m	struct:bab_info	file:	access:public
bab_info::tune_down	driver-bab.c	/^	double tune_down;$/;"	m	struct:bab_info	file:	access:public
bab_info::tune_up	driver-bab.c	/^	double tune_up;$/;"	m	struct:bab_info	file:	access:public
bab_info::untested_nonces	driver-bab.c	/^	uint64_t untested_nonces;$/;"	m	struct:bab_info	file:	access:public
bab_info::version	driver-bab.c	/^	int version;$/;"	m	struct:bab_info	file:	access:public
bab_info::wfree_list	driver-bab.c	/^	K_LIST *wfree_list;$/;"	m	struct:bab_info	file:	access:public
bab_info::work_count	driver-bab.c	/^	uint32_t work_count[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bab_info::work_rolled	driver-bab.c	/^	uint64_t work_rolled;$/;"	m	struct:bab_info	file:	access:public
bab_info::work_unrolled	driver-bab.c	/^	uint64_t work_unrolled;$/;"	m	struct:bab_info	file:	access:public
bab_init_chips	driver-bab.c	/^static void bab_init_chips(struct cgpu_info *babcgpu, struct bab_info *babinfo)$/;"	f	file:	signature:(struct cgpu_info *babcgpu, struct bab_info *babinfo)
bab_init_gpio	driver-bab.c	/^static bool bab_init_gpio(struct cgpu_info *babcgpu, struct bab_info *babinfo, int bus, int chip)$/;"	f	file:	signature:(struct cgpu_info *babcgpu, struct bab_info *babinfo, int bus, int chip)
bab_ioc	driver-bab.c	/^} bab_ioc[] = {$/;"	v	typeref:struct:__anon60	file:
bab_memory	driver-bab.c	/^static const char *bab_memory = "\/dev\/mem";$/;"	v	file:
bab_memory_addr	driver-bab.c	/^static int bab_memory_addr = 0x20200000;$/;"	v	file:
bab_modules	driver-bab.c	/^static const char *bab_modules[] = {$/;"	v	file:
bab_ms3steps	driver-bab.c	/^static void bab_ms3steps(uint32_t *p)$/;"	f	file:	signature:(uint32_t *p)
bab_nonce_offsets	driver-bab.c	/^static const uint32_t bab_nonce_offsets[] = {-0x800000, 0, -0x400000};$/;"	v	file:
bab_options	driver-bab.c	/^static char *bab_options[] = {$/;"	v	file:
bab_osc_bits	driver-bab.c	/^static const uint8_t bab_osc_bits[BAB_OSC] =$/;"	v	file:
bab_put	driver-bab.c	/^static void bab_put(struct bab_info *babinfo, K_ITEM *sitem)$/;"	f	file:	signature:(struct bab_info *babinfo, K_ITEM *sitem)
bab_queue_full	driver-bab.c	/^static bool bab_queue_full(struct cgpu_info *babcgpu)$/;"	f	file:	signature:(struct cgpu_info *babcgpu)
bab_reg_dis	driver-bab.c	/^static const uint8_t bab_reg_dis[4] = { 0x00, 0x00, 0x00, 0x00 };$/;"	v	file:
bab_reg_ena	driver-bab.c	/^static const uint8_t bab_reg_ena[4] = { 0xc1, 0x6a, 0x59, 0xe3 };$/;"	v	file:
bab_res	driver-bab.c	/^static void *bab_res(void *userdata)$/;"	f	file:	signature:(void *userdata)
bab_reset	driver-bab.c	87;"	d	file:
bab_scanwork	driver-bab.c	/^static int64_t bab_scanwork(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
bab_set_osc	driver-bab.c	/^static void bab_set_osc(struct bab_info *babinfo, int chip)$/;"	f	file:	signature:(struct bab_info *babinfo, int chip)
bab_shutdown	driver-bab.c	/^static void bab_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bab_spi	driver-bab.c	/^static void *bab_spi(void *userdata)$/;"	f	file:	signature:(void *userdata)
bab_test_data	driver-bab.c	/^static const uint32_t bab_test_data[BAB_TEST_DATA] = {$/;"	v	file:
bab_thread_prepare	driver-bab.c	/^static bool bab_thread_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bab_txrx	driver-bab.c	88;"	d	file:
bab_w1	driver-bab.c	/^static const uint32_t bab_w1[BAB_W1] = {$/;"	v	file:
bab_w2	driver-bab.c	/^static const uint32_t bab_w2[BAB_W2] = {$/;"	v	file:
bab_work_reply	driver-bab.c	/^struct bab_work_reply {$/;"	s	file:
bab_work_reply::jobsel	driver-bab.c	/^	uint32_t jobsel;$/;"	m	struct:bab_work_reply	file:	access:public
bab_work_reply::nonce	driver-bab.c	/^	uint32_t nonce[BAB_REPLY_NONCES];$/;"	m	struct:bab_work_reply	file:	access:public
bab_work_reply::spichk	driver-bab.c	/^	uint32_t spichk;$/;"	m	struct:bab_work_reply	file:	access:public
bab_work_send	driver-bab.c	/^struct bab_work_send {$/;"	s	file:
bab_work_send::bits	driver-bab.c	/^	uint32_t bits;$/;"	m	struct:bab_work_send	file:	access:public
bab_work_send::merkle7	driver-bab.c	/^	uint32_t merkle7;$/;"	m	struct:bab_work_send	file:	access:public
bab_work_send::midstate	driver-bab.c	/^	uint32_t midstate[MIDSTATE_UINTS];$/;"	m	struct:bab_work_send	file:	access:public
bab_work_send::ms3steps	driver-bab.c	/^	uint32_t ms3steps[MIDSTATE_UINTS];$/;"	m	struct:bab_work_send	file:	access:public
bab_work_send::ntime	driver-bab.c	/^	uint32_t ntime;$/;"	m	struct:bab_work_send	file:	access:public
bad	driver-blockerupter.h	/^	int bad;$/;"	m	struct:asic_info	access:public
bad	driver-blockerupter.h	/^	int bad;$/;"	m	struct:board_info	access:public
bad	driver-spondoolies-sp10.h	/^	int bad;$/;"	m	struct:spond_adapter	access:public
bad	driver-spondoolies-sp30.h	/^	int bad;$/;"	m	struct:spond_adapter	access:public
bad_fast	driver-bab.c	/^	uint8_t bad_fast[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bad_font	miner.php	/^ $bad_font = "font-family:$bad_font_family; font-size:$bad_font_size;";$/;"	v
bad_font_family	miner.php	/^$bad_font_family = '"Times New Roman", Times, serif';$/;"	v
bad_font_size	miner.php	/^$bad_font_size = '18pt';$/;"	v
bad_msg	driver-bab.c	/^	bool bad_msg[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bad_nonces	driver-bab.c	/^	K_STORE *bad_nonces[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
bank_first_chip	driver-bab.c	/^	int bank_first_chip[BAB_MAXBANKS+1];$/;"	m	struct:bab_info	file:	access:public
bank_last_chip	driver-bab.c	/^	int bank_last_chip[BAB_MAXBANKS+1];$/;"	m	struct:bab_info	file:	access:public
bank_off	driver-bab.c	/^	uint32_t bank_off[BAB_MAXBANKS+2];$/;"	m	struct:sitem	file:	access:public
banks	driver-bab.c	/^	int banks;$/;"	m	struct:bab_info	file:	access:public
bar	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^struct bar {$/;"	s	file:
bar	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^struct bar {$/;"	s	file:
bar::x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:bar	file:	access:public
bar::x	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^	int x;$/;"	m	struct:bar	file:	access:public
base_cgpu	driver-bitfury.h	/^	struct cgpu_info *base_cgpu;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::cgpu_info	access:public
base_cgpu	driver-drillbit.h	/^  struct cgpu_info *base_cgpu;$/;"	m	struct:drillbit_info	typeref:struct:drillbit_info::cgpu_info	access:public
base_clock	driver-hashfast.h	/^	int base_clock;                             \/\/ Clock rate we actually got$/;"	m	struct:hashfast_info	access:public
base_work	driver-icarus.c	/^	struct work *base_work; \/\/ For when we roll work$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::work	file:	access:public
basic	miner.php	/^ $basic = array( 'GPU', 'Enable', 'Disable', 'Restart' );$/;"	v
baud	driver-antrouter.c	/^	int baud;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
baud	driver-avalon.h	/^	int baud;$/;"	m	struct:avalon_info	access:public
baud	driver-bitmain.h	/^	int baud;$/;"	m	struct:bitmain_info	access:public
baud	driver-bmsc.c	/^	int baud;$/;"	m	struct:BMSC_INFO	file:	access:public
baud	driver-icarus.c	/^	int baud;$/;"	m	struct:ICARUS_INFO	file:	access:public
baz	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^struct baz {$/;"	s	file:
baz	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^struct baz {$/;"	s	file:
baz::x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:baz	file:	access:public
baz::x	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^	int x;$/;"	m	struct:baz	file:	access:public
bbf_option_offset	driver-avalon.c	/^static int bbf_option_offset = -1;$/;"	v	file:
bbversion	miner.h	/^	char bbversion[12];$/;"	m	struct:pool	access:public
bcdDevice	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t bcdDevice;$/;"	m	struct:libusb_device_descriptor	access:public
bcdUSB	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t bcdUSB;$/;"	m	struct:libusb_device_descriptor	access:public
bcm	driver-minion.c	/^	int bcm; \/\/ this is what we use$/;"	m	struct:minion_select_pins	file:	access:public
be32toh	miner.h	175;"	d
be32toh	miner.h	188;"	d
be64toh	miner.h	176;"	d
be64toh	miner.h	189;"	d
beeper_ctrl	driver-bitmain.h	/^	uint8_t beeper_ctrl          :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bench_hidiff_bins	cgminer.c	/^static unsigned char bench_hidiff_bins[16][160];$/;"	v	file:
bench_hidiffs	bench_block.h	/^const char bench_hidiffs[16][324] = {$/;"	v
bench_lodiff_bins	cgminer.c	/^static unsigned char bench_lodiff_bins[16][160];$/;"	v	file:
bench_lodiffs	bench_block.h	/^const char bench_lodiffs[16][324] = {$/;"	v
bench_target	cgminer.c	/^static unsigned char bench_target[32];$/;"	v	file:
benchfile_data	cgminer.c	/^} benchfile_data[] = {$/;"	v	typeref:struct:benchfile_layout	file:
benchfile_dspwork	cgminer.c	/^static void benchfile_dspwork(struct work *work, uint32_t nonce)$/;"	f	file:	signature:(struct work *work, uint32_t nonce)
benchfile_get_work	cgminer.c	/^static bool benchfile_get_work(struct work *work)$/;"	f	file:	signature:(struct work *work)
benchfile_in	cgminer.c	/^static FILE *benchfile_in;$/;"	v	file:
benchfile_layout	cgminer.c	/^static struct benchfile_layout {$/;"	s	file:
benchfile_layout::length	cgminer.c	/^	int length;$/;"	m	struct:benchfile_layout	file:	access:public
benchfile_layout::name	cgminer.c	/^	char *name;$/;"	m	struct:benchfile_layout	file:	access:public
benchfile_line	cgminer.c	/^static int benchfile_line;$/;"	v	file:
benchfile_work	cgminer.c	/^static int benchfile_work;$/;"	v	file:
benchwork	cgminer.c	/^enum benchwork {$/;"	g	file:
best_diff	cgminer.c	/^uint64_t best_diff = 0;$/;"	v
best_diff	miner.h	/^	uint64_t best_diff;$/;"	m	struct:pool	access:public
best_share	cgminer.c	/^static char best_share[8] = "0";$/;"	v	file:
bet_epinfos	usbutils.c	/^static struct usb_epinfo bet_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bet_ints	usbutils.c	/^static struct usb_intinfo bet_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
bf1_api_stats	driver-bitfury.c	/^static struct api_data *bf1_api_stats(struct bitfury_info *info)$/;"	f	file:	signature:(struct bitfury_info *info)
bf1_close	driver-bitfury.c	/^static void bf1_close(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bf1_detect_one	driver-bitfury.c	/^static bool bf1_detect_one(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bf1_empty_buffer	driver-bitfury.c	/^static void bf1_empty_buffer(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bf1_getinfo	driver-bitfury.c	/^static bool bf1_getinfo(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bf1_identify	driver-bitfury.c	/^static void bf1_identify(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bf1_init	driver-bitfury.c	/^static void bf1_init(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bf1_open	driver-bitfury.c	/^static bool bf1_open(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bf1_reset	driver-bitfury.c	/^static bool bf1_reset(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bf1_scan	driver-bitfury.c	/^static int64_t bf1_scan(struct thr_info *thr, struct cgpu_info *bitfury,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *bitfury, struct bitfury_info *info)
bf_offsets	driver-drillbit.c	/^static const uint32_t bf_offsets[] = {-0x800000, 0, -0x400000};$/;"	v	file:
bfl_epinfos	usbutils.c	/^static struct usb_epinfo bfl_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bfl_ints	usbutils.c	/^static struct usb_intinfo bfl_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
bflsc28_queue_full	driver-bflsc.c	/^static bool bflsc28_queue_full(struct cgpu_info *bflsc)$/;"	f	file:	signature:(struct cgpu_info *bflsc)
bflsc28_queue_full	driver-bflsc.c	/^static bool bflsc28_queue_full(struct cgpu_info *bflsc);$/;"	p	file:	signature:(struct cgpu_info *bflsc)
bflsc_api_stats	driver-bflsc.c	/^static struct api_data *bflsc_api_stats(struct cgpu_info *bflsc)$/;"	f	file:	signature:(struct cgpu_info *bflsc)
bflsc_applog	driver-bflsc.c	/^static void bflsc_applog(struct cgpu_info *bflsc, int dev, enum usb_cmds cmd, int amount, int err)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev, enum usb_cmds cmd, int amount, int err)
bflsc_detect	driver-bflsc.c	/^static void bflsc_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
bflsc_detect_one	driver-bflsc.c	/^static struct cgpu_info *bflsc_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
bflsc_dev	driver-bflsc.h	/^struct bflsc_dev {$/;"	s
bflsc_dev::chips	driver-bflsc.h	/^	char *chips;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::dead	driver-bflsc.h	/^	bool dead; \/\/ TODO: handle seperate x-link devices failing?$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::engines	driver-bflsc.h	/^	int engines; \/\/ each engine represents a 'thread' in a chip$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::firmware	driver-bflsc.h	/^	char *firmware;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::flush_id	driver-bflsc.h	/^	uint64_t flush_id; \/\/ counter when results were last flushed$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::flushed	driver-bflsc.h	/^	bool flushed; \/\/ are any flushed?$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::getinfo	driver-bflsc.h	/^	char getinfo[(BFLSC_BUFSIZ+4)*4];$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::hashes_sent	driver-bflsc.h	/^	uint64_t hashes_sent;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::hashes_unsent	driver-bflsc.h	/^	uint64_t hashes_unsent;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::last_check_result	driver-bflsc.h	/^	struct timeval last_check_result;$/;"	m	struct:bflsc_dev	typeref:struct:bflsc_dev::timeval	access:public
bflsc_dev::last_dev_result	driver-bflsc.h	/^	struct timeval last_dev_result; \/\/ array > 0$/;"	m	struct:bflsc_dev	typeref:struct:bflsc_dev::timeval	access:public
bflsc_dev::last_nonce_result	driver-bflsc.h	/^	struct timeval last_nonce_result; \/\/ > 0 nonce$/;"	m	struct:bflsc_dev	typeref:struct:bflsc_dev::timeval	access:public
bflsc_dev::ms_work	driver-bflsc.h	/^	unsigned int ms_work;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::nonces_found	driver-bflsc.h	/^	uint64_t nonces_found;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::nonces_hw	driver-bflsc.h	/^	int nonces_hw; \/\/ TODO: this - need to add a paramter to submit_nonce()$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::overheat	driver-bflsc.h	/^	bool overheat;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::result_id	driver-bflsc.h	/^	uint64_t result_id; \/\/ counter when results were last checked$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::temp1	driver-bflsc.h	/^	float temp1;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::temp1_5min_av	driver-bflsc.h	/^	float temp1_5min_av; \/\/ TODO:$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::temp1_max	driver-bflsc.h	/^	float temp1_max;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::temp1_max_time	driver-bflsc.h	/^	time_t temp1_max_time;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::temp2	driver-bflsc.h	/^	float temp2;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::temp2_5min_av	driver-bflsc.h	/^	float temp2_5min_av; \/\/ TODO:$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::temp2_max	driver-bflsc.h	/^	float temp2_max;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::temp2_max_time	driver-bflsc.h	/^	time_t temp2_max_time;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::vcc1	driver-bflsc.h	/^	float vcc1;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::vcc2	driver-bflsc.h	/^	float vcc2;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::vmain	driver-bflsc.h	/^	float vmain;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::work_complete	driver-bflsc.h	/^	int work_complete;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::work_queued	driver-bflsc.h	/^	int work_queued;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::xlink_mode	driver-bflsc.h	/^	char *xlink_mode;$/;"	m	struct:bflsc_dev	access:public
bflsc_dev::xlink_present	driver-bflsc.h	/^	char *xlink_present;$/;"	m	struct:bflsc_dev	access:public
bflsc_drv	driver-bflsc.c	/^struct device_drv bflsc_drv = {$/;"	v	typeref:struct:device_drv
bflsc_epinfos	usbutils.c	/^static struct usb_epinfo bflsc_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bflsc_flash_led	driver-bflsc.c	/^static void bflsc_flash_led(struct cgpu_info *bflsc, int dev)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev)
bflsc_flush_work	driver-bflsc.c	/^static void bflsc_flush_work(struct cgpu_info *bflsc)$/;"	f	file:	signature:(struct cgpu_info *bflsc)
bflsc_get_results	driver-bflsc.c	/^static void *bflsc_get_results(void *userdata)$/;"	f	file:	signature:(void *userdata)
bflsc_get_stats	driver-bflsc.c	/^static bool bflsc_get_stats(struct cgpu_info *bflsc)$/;"	f	file:	signature:(struct cgpu_info *bflsc)
bflsc_get_temp	driver-bflsc.c	/^static bool bflsc_get_temp(struct cgpu_info *bflsc, int dev)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev)
bflsc_identify	driver-bflsc.c	/^static void bflsc_identify(struct cgpu_info *bflsc)$/;"	f	file:	signature:(struct cgpu_info *bflsc)
bflsc_info	driver-bflsc.h	/^struct bflsc_info {$/;"	s
bflsc_info::bworks	driver-bflsc.h	/^	struct bflsc_work *bworks;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::bflsc_work	access:public
bflsc_info::clock_next	driver-bflsc.h	/^	int clock_next;$/;"	m	struct:bflsc_info	access:public
bflsc_info::clock_next_stat	driver-bflsc.h	/^	bool clock_next_stat;$/;"	m	struct:bflsc_info	access:public
bflsc_info::core_hw	driver-bflsc.h	/^	uint64_t core_hw[17];$/;"	m	struct:bflsc_info	access:public
bflsc_info::core_nonces	driver-bflsc.h	/^	uint64_t core_nonces[17];$/;"	m	struct:bflsc_info	access:public
bflsc_info::cortex_hw	driver-bflsc.h	/^	uint64_t cortex_hw[0x80];$/;"	m	struct:bflsc_info	access:public
bflsc_info::cortex_nonces	driver-bflsc.h	/^	uint64_t cortex_nonces[0x80];$/;"	m	struct:bflsc_info	access:public
bflsc_info::default_ms_work	driver-bflsc.h	/^	unsigned int default_ms_work;$/;"	m	struct:bflsc_info	access:public
bflsc_info::driver_version	driver-bflsc.h	/^	enum driver_version driver_version;$/;"	m	struct:bflsc_info	typeref:enum:bflsc_info::driver_version	access:public
bflsc_info::fanauto	driver-bflsc.h	/^	bool fanauto;$/;"	m	struct:bflsc_info	access:public
bflsc_info::flash_led	driver-bflsc.h	/^	bool flash_led;$/;"	m	struct:bflsc_info	access:public
bflsc_info::flush_size	driver-bflsc.h	/^	int flush_size;$/;"	m	struct:bflsc_info	access:public
bflsc_info::hashes_sent	driver-bflsc.h	/^	uint64_t hashes_sent;$/;"	m	struct:bflsc_info	access:public
bflsc_info::ident	driver-bflsc.h	/^	enum sub_ident ident;$/;"	m	struct:bflsc_info	typeref:enum:bflsc_info::sub_ident	access:public
bflsc_info::last_update	driver-bflsc.h	/^	struct timeval last_update;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::timeval	access:public
bflsc_info::not_first_work	driver-bflsc.h	/^	bool not_first_work; \/\/ allow ignoring the first nonce error$/;"	m	struct:bflsc_info	access:public
bflsc_info::que_fld_max	driver-bflsc.h	/^	int que_fld_max;$/;"	m	struct:bflsc_info	access:public
bflsc_info::que_fld_min	driver-bflsc.h	/^	int que_fld_min;$/;"	m	struct:bflsc_info	access:public
bflsc_info::que_full_enough	driver-bflsc.h	/^	int que_full_enough;$/;"	m	struct:bflsc_info	access:public
bflsc_info::que_low	driver-bflsc.h	/^	int que_low;$/;"	m	struct:bflsc_info	access:public
bflsc_info::que_noncecount	driver-bflsc.h	/^	int que_noncecount;$/;"	m	struct:bflsc_info	access:public
bflsc_info::que_size	driver-bflsc.h	/^	int que_size;$/;"	m	struct:bflsc_info	access:public
bflsc_info::que_watermark	driver-bflsc.h	/^	int que_watermark;$/;"	m	struct:bflsc_info	access:public
bflsc_info::result_size	driver-bflsc.h	/^	uint64_t result_size[QUE_MAX_RESULTS+2];$/;"	m	struct:bflsc_info	access:public
bflsc_info::results_sleep_time	driver-bflsc.h	/^	unsigned int results_sleep_time;$/;"	m	struct:bflsc_info	access:public
bflsc_info::results_thr	driver-bflsc.h	/^	struct thr_info results_thr;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::thr_info	access:public
bflsc_info::sc_count	driver-bflsc.h	/^	int sc_count;$/;"	m	struct:bflsc_info	access:public
bflsc_info::sc_devs	driver-bflsc.h	/^	struct bflsc_dev *sc_devs;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::bflsc_dev	access:public
bflsc_info::scan_sleep_time	driver-bflsc.h	/^	unsigned int scan_sleep_time;$/;"	m	struct:bflsc_info	access:public
bflsc_info::shutdown	driver-bflsc.h	/^	bool shutdown;$/;"	m	struct:bflsc_info	access:public
bflsc_info::stat_lock	driver-bflsc.h	/^	pthread_rwlock_t stat_lock;$/;"	m	struct:bflsc_info	access:public
bflsc_info::update_count	driver-bflsc.h	/^	uint32_t update_count;$/;"	m	struct:bflsc_info	access:public
bflsc_info::volt_next	driver-bflsc.h	/^	int volt_next;$/;"	m	struct:bflsc_info	access:public
bflsc_info::volt_next_stat	driver-bflsc.h	/^	bool volt_next_stat;$/;"	m	struct:bflsc_info	access:public
bflsc_initialise	driver-bflsc.c	/^static void bflsc_initialise(struct cgpu_info *bflsc)$/;"	f	file:	signature:(struct cgpu_info *bflsc)
bflsc_ints	usbutils.c	/^static struct usb_intinfo bflsc_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
bflsc_manage_temp	driver-bflsc.c	/^static void bflsc_manage_temp(struct cgpu_info *bflsc, struct bflsc_dev *sc_dev,$/;"	f	file:	signature:(struct cgpu_info *bflsc, struct bflsc_dev *sc_dev, int dev, float temp)
bflsc_qres	driver-bflsc.c	/^static bool bflsc_qres(struct cgpu_info *bflsc, char *buf, size_t bufsiz, int dev, int *err, int *amount, bool ignore)$/;"	f	file:	signature:(struct cgpu_info *bflsc, char *buf, size_t bufsiz, int dev, int *err, int *amount, bool ignore)
bflsc_queue_full	driver-bflsc.c	/^static bool bflsc_queue_full(struct cgpu_info *bflsc)$/;"	f	file:	signature:(struct cgpu_info *bflsc)
bflsc_scanwork	driver-bflsc.c	/^static int64_t bflsc_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bflsc_send_flush_work	driver-bflsc.c	/^static void bflsc_send_flush_work(struct cgpu_info *bflsc, int dev)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev)
bflsc_send_work	driver-bflsc.c	/^static bool bflsc_send_work(struct cgpu_info *bflsc, int dev, bool mandatory)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev, bool mandatory)
bflsc_set	driver-bflsc.c	/^static char *bflsc_set(struct cgpu_info *bflsc, char *option, char *setting, char *replybuf)$/;"	f	file:	signature:(struct cgpu_info *bflsc, char *option, char *setting, char *replybuf)
bflsc_set_clock	driver-bflsc.c	/^static void bflsc_set_clock(struct cgpu_info *bflsc, int dev)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev)
bflsc_set_fanspeed	driver-bflsc.c	/^static void bflsc_set_fanspeed(struct cgpu_info *bflsc)$/;"	f	file:	signature:(struct cgpu_info *bflsc)
bflsc_set_volt	driver-bflsc.c	/^static void bflsc_set_volt(struct cgpu_info *bflsc, int dev)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev)
bflsc_shutdown	driver-bflsc.c	/^static void bflsc_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bflsc_thread_enable	driver-bflsc.c	/^static void bflsc_thread_enable(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bflsc_thread_init	driver-bflsc.c	/^static bool bflsc_thread_init(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bflsc_thread_prepare	driver-bflsc.c	/^static bool bflsc_thread_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bflsc_work	driver-bflsc.h	/^struct bflsc_work {$/;"	s
bflsc_work::hh	driver-bflsc.h	/^	UT_hash_handle hh;$/;"	m	struct:bflsc_work	access:public
bflsc_work::id	driver-bflsc.h	/^	int id;$/;"	m	struct:bflsc_work	access:public
bflsc_work::work	driver-bflsc.h	/^	struct work *work;$/;"	m	struct:bflsc_work	typeref:struct:bflsc_work::work	access:public
bflsc_work_by_uid	driver-bflsc.c	/^struct work *bflsc_work_by_uid(struct cgpu_info *bflsc, struct bflsc_info *sc_info, int id)$/;"	f	signature:(struct cgpu_info *bflsc, struct bflsc_info *sc_info, int id)
bfu0_epinfos	usbutils.c	/^static struct usb_epinfo bfu0_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bfu1_epinfos	usbutils.c	/^static struct usb_epinfo bfu1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bfu_ints	usbutils.c	/^static struct usb_intinfo bfu_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
biforce_thread_enable	driver-bitforce.c	/^static void biforce_thread_enable(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bin2hex	miner.h	/^extern char *bin2hex(const unsigned char *p, size_t len);$/;"	p	signature:(const unsigned char *p, size_t len)
bin2hex	util.c	/^char *bin2hex(const unsigned char *p, size_t len)$/;"	f	signature:(const unsigned char *p, size_t len)
binascii	usbtest.py	/^import binascii$/;"	i
bit_swap_table	util.c	/^unsigned char bit_swap_table[256] =$/;"	v
bitburner_get_core_voltage	driver-avalon.c	/^static int bitburner_get_core_voltage(struct cgpu_info *avalon)$/;"	f	file:	signature:(struct cgpu_info *avalon)
bitburner_get_version	driver-avalon.c	/^static void bitburner_get_version(struct cgpu_info *avalon)$/;"	f	file:	signature:(struct cgpu_info *avalon)
bitburner_rotate_array	driver-avalon.c	/^static void bitburner_rotate_array(struct cgpu_info *avalon)$/;"	f	file:	signature:(struct cgpu_info *avalon)
bitburner_send_task	driver-avalon.c	/^static int bitburner_send_task(const struct avalon_task *at, struct cgpu_info *avalon)$/;"	f	file:	signature:(const struct avalon_task *at, struct cgpu_info *avalon)
bitburner_send_tasks	driver-avalon.c	/^static void *bitburner_send_tasks(void *userdata)$/;"	f	file:	signature:(void *userdata)
bitburner_set_core_voltage	driver-avalon.c	/^static bool bitburner_set_core_voltage(struct cgpu_info *avalon, int core_voltage)$/;"	f	file:	signature:(struct cgpu_info *avalon, int core_voltage)
bitforce_api_stats	driver-bitforce.c	/^static struct api_data *bitforce_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
bitforce_detect	driver-bitforce.c	/^static void bitforce_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
bitforce_detect_one	driver-bitforce.c	/^static struct cgpu_info *bitforce_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
bitforce_drv	driver-bitforce.c	/^struct device_drv bitforce_drv = {$/;"	v	typeref:struct:device_drv
bitforce_flash_led	driver-bitforce.c	/^static void bitforce_flash_led(struct cgpu_info *bitforce)$/;"	f	file:	signature:(struct cgpu_info *bitforce)
bitforce_get_result	driver-bitforce.c	/^static int64_t bitforce_get_result(struct thr_info *thr, struct work *work)$/;"	f	file:	signature:(struct thr_info *thr, struct work *work)
bitforce_get_stats	driver-bitforce.c	/^static bool bitforce_get_stats(struct cgpu_info *bitforce)$/;"	f	file:	signature:(struct cgpu_info *bitforce)
bitforce_get_temp	driver-bitforce.c	/^static bool bitforce_get_temp(struct cgpu_info *bitforce)$/;"	f	file:	signature:(struct cgpu_info *bitforce)
bitforce_identify	driver-bitforce.c	/^static void bitforce_identify(struct cgpu_info *bitforce)$/;"	f	file:	signature:(struct cgpu_info *bitforce)
bitforce_initialise	driver-bitforce.c	/^static void bitforce_initialise(struct cgpu_info *bitforce, bool lock)$/;"	f	file:	signature:(struct cgpu_info *bitforce, bool lock)
bitforce_scanhash	driver-bitforce.c	/^static int64_t bitforce_scanhash(struct thr_info *thr, struct work *work, int64_t __maybe_unused max_nonce)$/;"	f	file:	signature:(struct thr_info *thr, struct work *work, int64_t __maybe_unused max_nonce)
bitforce_send_work	driver-bitforce.c	/^static bool bitforce_send_work(struct thr_info *thr, struct work *work)$/;"	f	file:	signature:(struct thr_info *thr, struct work *work)
bitforce_shutdown	driver-bitforce.c	/^static void bitforce_shutdown(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
bitforce_thread_init	driver-bitforce.c	/^static bool bitforce_thread_init(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bitforce_thread_prepare	driver-bitforce.c	/^static bool bitforce_thread_prepare(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
bitfury_api_stats	driver-bitfury.c	/^static struct api_data *bitfury_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
bitfury_check_work	driver-bitfury.c	/^static void bitfury_check_work(struct thr_info *thr, struct cgpu_info *bitfury,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *bitfury, struct bitfury_info *info, int chip_n)
bitfury_checkresults	libbitfury.c	/^bool bitfury_checkresults(struct thr_info *thr, struct work *work, uint32_t nonce)$/;"	f	signature:(struct thr_info *thr, struct work *work, uint32_t nonce)
bitfury_checkresults	libbitfury.h	/^bool bitfury_checkresults(struct thr_info *thr, struct work *work, uint32_t nonce);$/;"	p	signature:(struct thr_info *thr, struct work *work, uint32_t nonce)
bitfury_detect	driver-bitfury.c	/^static void bitfury_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
bitfury_detect_one	driver-bitfury.c	/^static struct cgpu_info *bitfury_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
bitfury_drv	driver-bitfury.c	/^struct device_drv bitfury_drv = {$/;"	v	typeref:struct:device_drv
bitfury_flush_work	driver-bitfury.c	/^static void bitfury_flush_work(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bitfury_get_statline_before	driver-bitfury.c	/^static void bitfury_get_statline_before(char *buf, size_t bufsiz, struct cgpu_info *cgpu)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *cgpu)
bitfury_identify	driver-bitfury.c	/^static void bitfury_identify(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bitfury_info	driver-bitfury.h	/^struct bitfury_info {$/;"	s
bitfury_info::base_cgpu	driver-bitfury.h	/^	struct cgpu_info *base_cgpu;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::cgpu_info	access:public
bitfury_info::chips	driver-bitfury.h	/^	int chips;$/;"	m	struct:bitfury_info	access:public
bitfury_info::clocks	driver-bitfury.h	/^	uint8_t clocks; \/\/ There are two but we set them equal$/;"	m	struct:bitfury_info	access:public
bitfury_info::cycles	driver-bitfury.h	/^	int cycles;$/;"	m	struct:bitfury_info	access:public
bitfury_info::failing	driver-bitfury.h	/^	bool failing; \/* Set when an attempted restart has been sent *\/$/;"	m	struct:bitfury_info	access:public
bitfury_info::filtered_hw	driver-bitfury.h	/^	int *filtered_hw; \/\/ Hardware errors we're told about but are filtered$/;"	m	struct:bitfury_info	access:public
bitfury_info::hw_rev	driver-bitfury.h	/^	int hw_rev;$/;"	m	struct:bitfury_info	access:public
bitfury_info::ident	driver-bitfury.h	/^	enum sub_ident ident;$/;"	m	struct:bitfury_info	typeref:enum:bitfury_info::sub_ident	access:public
bitfury_info::job	driver-bitfury.h	/^	int *job; \/\/ Completed jobs we're told about$/;"	m	struct:bitfury_info	access:public
bitfury_info::job_switched	driver-bitfury.h	/^	bool *job_switched;$/;"	m	struct:bitfury_info	access:public
bitfury_info::last_decitemp	driver-bitfury.h	/^	int last_decitemp;$/;"	m	struct:bitfury_info	access:public
bitfury_info::lock	driver-bitfury.h	/^	pthread_mutex_t lock;$/;"	m	struct:bitfury_info	access:public
bitfury_info::max_decitemp	driver-bitfury.h	/^	int max_decitemp;$/;"	m	struct:bitfury_info	access:public
bitfury_info::maxroll	driver-bitfury.h	/^	int maxroll; \/\/ Last maxroll sent to device$/;"	m	struct:bitfury_info	access:public
bitfury_info::mcp	driver-bitfury.h	/^	struct mcp_settings mcp;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::mcp_settings	access:public
bitfury_info::no_matching_work	driver-bitfury.h	/^	int no_matching_work;$/;"	m	struct:bitfury_info	access:public
bitfury_info::nonces	driver-bitfury.h	/^	int nonces;$/;"	m	struct:bitfury_info	access:public
bitfury_info::oldbuf	driver-bitfury.h	/^	unsigned int *oldbuf; \/\/ 17 vals per chip$/;"	m	struct:bitfury_info	access:public
bitfury_info::osc6_bits	driver-bitfury.h	/^	int osc6_bits;$/;"	m	struct:bitfury_info	access:public
bitfury_info::owork	driver-bitfury.h	/^	struct work **owork;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::work	access:public
bitfury_info::payload	driver-bitfury.h	/^	struct bitfury_payload *payload;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::bitfury_payload	access:public
bitfury_info::product	driver-bitfury.h	/^	char product[8];$/;"	m	struct:bitfury_info	access:public
bitfury_info::read_thr	driver-bitfury.h	/^	pthread_t read_thr;$/;"	m	struct:bitfury_info	access:public
bitfury_info::saved_nonces	driver-bitfury.h	/^	double saved_nonces;$/;"	m	struct:bitfury_info	access:public
bitfury_info::second_run	driver-bitfury.h	/^	bool *second_run;$/;"	m	struct:bitfury_info	access:public
bitfury_info::serial	driver-bitfury.h	/^	uint32_t serial;$/;"	m	struct:bitfury_info	access:public
bitfury_info::spi_txrx	driver-bitfury.h	/^	bool (*spi_txrx)(struct cgpu_info *, struct bitfury_info *info);$/;"	m	struct:bitfury_info	access:public
bitfury_info::spibuf	driver-bitfury.h	/^	char spibuf[SPIBUF_SIZE];$/;"	m	struct:bitfury_info	access:public
bitfury_info::spibufsz	driver-bitfury.h	/^	unsigned int spibufsz;$/;"	m	struct:bitfury_info	access:public
bitfury_info::submits	driver-bitfury.h	/^	int *submits; \/\/ Submitted responses$/;"	m	struct:bitfury_info	access:public
bitfury_info::temp_target	driver-bitfury.h	/^	int temp_target;$/;"	m	struct:bitfury_info	access:public
bitfury_info::thr	driver-bitfury.h	/^	struct thr_info *thr;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::thr_info	access:public
bitfury_info::total_nonces	driver-bitfury.h	/^	int total_nonces;$/;"	m	struct:bitfury_info	access:public
bitfury_info::tv_start	driver-bitfury.h	/^	struct timeval tv_start;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::timeval	access:public
bitfury_info::valid	driver-bitfury.h	/^	bool valid; \/* Set on first valid data being found *\/$/;"	m	struct:bitfury_info	access:public
bitfury_info::ver_major	driver-bitfury.h	/^	int ver_major;$/;"	m	struct:bitfury_info	access:public
bitfury_info::ver_minor	driver-bitfury.h	/^	int ver_minor;$/;"	m	struct:bitfury_info	access:public
bitfury_info::version	driver-bitfury.h	/^	uint8_t version;$/;"	m	struct:bitfury_info	access:public
bitfury_info::work	driver-bitfury.h	/^	struct work **work;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::work	access:public
bitfury_info::work_id	driver-bitfury.h	/^	int work_id; \/\/ Current work->subid$/;"	m	struct:bitfury_info	access:public
bitfury_init	driver-bitfury.c	/^static void bitfury_init(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bitfury_payload	driver-bitfury.h	/^struct bitfury_payload {$/;"	s
bitfury_payload::junk	driver-bitfury.h	/^	unsigned int junk[8];$/;"	m	struct:bitfury_payload	access:public
bitfury_payload::m7	driver-bitfury.h	/^	unsigned m7;$/;"	m	struct:bitfury_payload	access:public
bitfury_payload::midstate	driver-bitfury.h	/^	unsigned char midstate[32];$/;"	m	struct:bitfury_payload	access:public
bitfury_payload::nbits	driver-bitfury.h	/^	unsigned nbits;$/;"	m	struct:bitfury_payload	access:public
bitfury_payload::nnonce	driver-bitfury.h	/^	unsigned nnonce;$/;"	m	struct:bitfury_payload	access:public
bitfury_payload::ntime	driver-bitfury.h	/^	unsigned ntime;$/;"	m	struct:bitfury_payload	access:public
bitfury_prepare	driver-bitfury.c	/^static bool bitfury_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bitfury_rate	driver-bitfury.c	/^static int64_t bitfury_rate(struct bitfury_info *info)$/;"	f	file:	signature:(struct bitfury_info *info)
bitfury_scanwork	driver-bitfury.c	/^static int64_t bitfury_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bitfury_shutdown	driver-bitfury.c	/^static void bitfury_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bitfury_update_work	driver-bitfury.c	/^static void bitfury_update_work(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bitfury_work_to_payload	libbitfury.c	/^void bitfury_work_to_payload(struct bitfury_payload *p, struct work *work)$/;"	f	signature:(struct bitfury_payload *p, struct work *work)
bitfury_work_to_payload	libbitfury.h	/^void bitfury_work_to_payload(struct bitfury_payload *p, struct work *work);$/;"	p	signature:(struct bitfury_payload *p, struct work *work)
bitmain_api_stats	driver-bitmain.c	/^static struct api_data *bitmain_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
bitmain_decode_nonce	driver-bitmain.c	/^static bool bitmain_decode_nonce(struct thr_info *thr, struct cgpu_info *bitmain,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *bitmain, struct bitmain_info *info, uint32_t nonce, struct work *work)
bitmain_detect	driver-bitmain.c	/^static void bitmain_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
bitmain_detect_one	driver-bitmain.c	/^static bool bitmain_detect_one(const char * devpath)$/;"	f	file:	signature:(const char * devpath)
bitmain_drv	driver-bitmain.c	/^struct device_drv bitmain_drv = {$/;"	v	typeref:struct:device_drv
bitmain_fill	driver-bitmain.c	/^static bool bitmain_fill(struct cgpu_info *bitmain)$/;"	f	file:	signature:(struct cgpu_info *bitmain)
bitmain_flush_work	driver-bitmain.c	/^static void bitmain_flush_work(struct cgpu_info *bitmain)$/;"	f	file:	signature:(struct cgpu_info *bitmain)
bitmain_get_results	driver-bitmain.c	/^static void *bitmain_get_results(void *userdata)$/;"	f	file:	signature:(void *userdata)
bitmain_inc_nvw	driver-bitmain.c	/^static void bitmain_inc_nvw(struct bitmain_info *info, struct thr_info *thr)$/;"	f	file:	signature:(struct bitmain_info *info, struct thr_info *thr)
bitmain_info	driver-bitmain.h	/^struct bitmain_info {$/;"	s
bitmain_info::asic_num	driver-bitmain.h	/^	int asic_num;$/;"	m	struct:bitmain_info	access:public
bitmain_info::auto_hw	driver-bitmain.h	/^	int auto_hw;$/;"	m	struct:bitmain_info	access:public
bitmain_info::auto_nonces	driver-bitmain.h	/^	int auto_nonces;$/;"	m	struct:bitmain_info	access:public
bitmain_info::auto_queued	driver-bitmain.h	/^	int auto_queued;$/;"	m	struct:bitmain_info	access:public
bitmain_info::baud	driver-bitmain.h	/^	int baud;$/;"	m	struct:bitmain_info	access:public
bitmain_info::chain_asic_exist	driver-bitmain.h	/^	uint32_t chain_asic_exist[BITMAIN_MAX_CHAIN_NUM*8];$/;"	m	struct:bitmain_info	access:public
bitmain_info::chain_asic_num	driver-bitmain.h	/^	int chain_asic_num[BITMAIN_MAX_CHAIN_NUM];$/;"	m	struct:bitmain_info	access:public
bitmain_info::chain_asic_status	driver-bitmain.h	/^	uint32_t chain_asic_status[BITMAIN_MAX_CHAIN_NUM*8];$/;"	m	struct:bitmain_info	access:public
bitmain_info::chain_asic_status_t	driver-bitmain.h	/^	char chain_asic_status_t[BITMAIN_MAX_CHAIN_NUM][320];$/;"	m	struct:bitmain_info	access:public
bitmain_info::chain_num	driver-bitmain.h	/^	int chain_num;$/;"	m	struct:bitmain_info	access:public
bitmain_info::diff	driver-bitmain.h	/^	int diff;$/;"	m	struct:bitmain_info	access:public
bitmain_info::errorcount	driver-bitmain.h	/^	int errorcount;$/;"	m	struct:bitmain_info	access:public
bitmain_info::fan	driver-bitmain.h	/^	int fan[BITMAIN_MAX_FAN_NUM];$/;"	m	struct:bitmain_info	access:public
bitmain_info::fan_num	driver-bitmain.h	/^	int fan_num;$/;"	m	struct:bitmain_info	access:public
bitmain_info::fan_pwm	driver-bitmain.h	/^	int fan_pwm;$/;"	m	struct:bitmain_info	access:public
bitmain_info::fifo_space	driver-bitmain.h	/^	int fifo_space;$/;"	m	struct:bitmain_info	access:public
bitmain_info::frequency	driver-bitmain.h	/^	int frequency;$/;"	m	struct:bitmain_info	access:public
bitmain_info::frequency_t	driver-bitmain.h	/^	char frequency_t[256];$/;"	m	struct:bitmain_info	access:public
bitmain_info::hw_version	driver-bitmain.h	/^	int hw_version[4];$/;"	m	struct:bitmain_info	access:public
bitmain_info::idle	driver-bitmain.h	/^	int idle;$/;"	m	struct:bitmain_info	access:public
bitmain_info::last_nonce_error	driver-bitmain.h	/^	uint32_t last_nonce_error;$/;"	m	struct:bitmain_info	access:public
bitmain_info::last_status_time	driver-bitmain.h	/^	struct timeval last_status_time;$/;"	m	struct:bitmain_info	typeref:struct:bitmain_info::timeval	access:public
bitmain_info::last_work_block	driver-bitmain.h	/^	unsigned int last_work_block;$/;"	m	struct:bitmain_info	access:public
bitmain_info::lock	driver-bitmain.h	/^	pthread_mutex_t lock;$/;"	m	struct:bitmain_info	access:public
bitmain_info::no_matching_work	driver-bitmain.h	/^	int no_matching_work;$/;"	m	struct:bitmain_info	access:public
bitmain_info::nonce_error	driver-bitmain.h	/^	uint32_t nonce_error;$/;"	m	struct:bitmain_info	access:public
bitmain_info::nonces	driver-bitmain.h	/^	int nonces;$/;"	m	struct:bitmain_info	access:public
bitmain_info::optimal	driver-bitmain.h	/^	bool optimal;$/;"	m	struct:bitmain_info	access:public
bitmain_info::overheat	driver-bitmain.h	/^	bool overheat;$/;"	m	struct:bitmain_info	access:public
bitmain_info::qcond	driver-bitmain.h	/^	pthread_cond_t qcond;$/;"	m	struct:bitmain_info	access:public
bitmain_info::qlock	driver-bitmain.h	/^	pthread_mutex_t qlock;$/;"	m	struct:bitmain_info	access:public
bitmain_info::read_thr	driver-bitmain.h	/^	pthread_t read_thr;$/;"	m	struct:bitmain_info	access:public
bitmain_info::reg_data	driver-bitmain.h	/^	uint8_t reg_data[4];$/;"	m	struct:bitmain_info	access:public
bitmain_info::reset	driver-bitmain.h	/^	bool reset;$/;"	m	struct:bitmain_info	access:public
bitmain_info::send_full_space	driver-bitmain.h	/^	int send_full_space;$/;"	m	struct:bitmain_info	access:public
bitmain_info::temp	driver-bitmain.h	/^	int temp[BITMAIN_MAX_TEMP_NUM];$/;"	m	struct:bitmain_info	access:public
bitmain_info::temp_avg	driver-bitmain.h	/^	int temp_avg;$/;"	m	struct:bitmain_info	access:public
bitmain_info::temp_history_count	driver-bitmain.h	/^	int temp_history_count;$/;"	m	struct:bitmain_info	access:public
bitmain_info::temp_history_index	driver-bitmain.h	/^	int temp_history_index;$/;"	m	struct:bitmain_info	access:public
bitmain_info::temp_max	driver-bitmain.h	/^	int temp_max;$/;"	m	struct:bitmain_info	access:public
bitmain_info::temp_num	driver-bitmain.h	/^	int temp_num;$/;"	m	struct:bitmain_info	access:public
bitmain_info::temp_old	driver-bitmain.h	/^	int temp_old;$/;"	m	struct:bitmain_info	access:public
bitmain_info::temp_sum	driver-bitmain.h	/^	int temp_sum;$/;"	m	struct:bitmain_info	access:public
bitmain_info::thr	driver-bitmain.h	/^	struct thr_info *thr;$/;"	m	struct:bitmain_info	typeref:struct:bitmain_info::thr_info	access:public
bitmain_info::timeout	driver-bitmain.h	/^	int timeout;$/;"	m	struct:bitmain_info	access:public
bitmain_info::total_nonce_num	driver-bitmain.h	/^	uint64_t total_nonce_num;$/;"	m	struct:bitmain_info	access:public
bitmain_info::voltage	driver-bitmain.h	/^	uint8_t voltage[2];$/;"	m	struct:bitmain_info	access:public
bitmain_info::voltage_t	driver-bitmain.h	/^	char voltage_t[8];$/;"	m	struct:bitmain_info	access:public
bitmain_info::write_sem	driver-bitmain.h	/^	cgsem_t write_sem;$/;"	m	struct:bitmain_info	access:public
bitmain_info::write_thr	driver-bitmain.h	/^	pthread_t write_thr;$/;"	m	struct:bitmain_info	access:public
bitmain_init	driver-bitmain.c	/^static void bitmain_init(struct cgpu_info *bitmain)$/;"	f	file:	signature:(struct cgpu_info *bitmain)
bitmain_initialize	driver-bitmain.c	/^static int bitmain_initialize(struct cgpu_info *bitmain)$/;"	f	file:	signature:(struct cgpu_info *bitmain)
bitmain_packet_head	driver-bitmain.h	/^struct bitmain_packet_head {$/;"	s
bitmain_packet_head::length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_packet_head	access:public
bitmain_packet_head::token_type	driver-bitmain.h	/^	uint8_t token_type;$/;"	m	struct:bitmain_packet_head	access:public
bitmain_packet_head::version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_packet_head	access:public
bitmain_parse_results	driver-bitmain.c	/^static void bitmain_parse_results(struct cgpu_info *bitmain, struct bitmain_info *info,$/;"	f	file:	signature:(struct cgpu_info *bitmain, struct bitmain_info *info, struct thr_info *thr, uint8_t *buf, int *offset)
bitmain_parse_rxnonce	driver-bitmain.c	/^static int bitmain_parse_rxnonce(const uint8_t * data, int datalen, struct bitmain_rxnonce_data *bm, int * nonce_num)$/;"	f	file:	signature:(const uint8_t * data, int datalen, struct bitmain_rxnonce_data *bm, int * nonce_num)
bitmain_parse_rxstatus	driver-bitmain.c	/^static int bitmain_parse_rxstatus(const uint8_t * data, int datalen, struct bitmain_rxstatus_data *bm)$/;"	f	file:	signature:(const uint8_t * data, int datalen, struct bitmain_rxstatus_data *bm)
bitmain_prepare	driver-bitmain.c	/^static bool bitmain_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bitmain_read	driver-bitmain.c	/^static int bitmain_read(struct cgpu_info *bitmain, unsigned char *buf,$/;"	f	file:	signature:(struct cgpu_info *bitmain, unsigned char *buf, size_t bufsize, int timeout, int ep)
bitmain_running_reset	driver-bitmain.c	/^static void bitmain_running_reset(struct cgpu_info *bitmain, struct bitmain_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitmain, struct bitmain_info *info)
bitmain_rxnonce_data	driver-bitmain.h	/^struct bitmain_rxnonce_data {$/;"	s
bitmain_rxnonce_data::crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_rxnonce_data	access:public
bitmain_rxnonce_data::data_type	driver-bitmain.h	/^	uint8_t data_type;$/;"	m	struct:bitmain_rxnonce_data	access:public
bitmain_rxnonce_data::diff	driver-bitmain.h	/^	uint16_t diff;$/;"	m	struct:bitmain_rxnonce_data	access:public
bitmain_rxnonce_data::fifo_space	driver-bitmain.h	/^	uint16_t fifo_space;$/;"	m	struct:bitmain_rxnonce_data	access:public
bitmain_rxnonce_data::length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_rxnonce_data	access:public
bitmain_rxnonce_data::nonces	driver-bitmain.h	/^	struct bitmain_rxnonce_nonce nonces[BITMAIN_MAX_NONCE_NUM];$/;"	m	struct:bitmain_rxnonce_data	typeref:struct:bitmain_rxnonce_data::bitmain_rxnonce_nonce	access:public
bitmain_rxnonce_data::total_nonce_num	driver-bitmain.h	/^	uint64_t total_nonce_num;$/;"	m	struct:bitmain_rxnonce_data	access:public
bitmain_rxnonce_data::version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_rxnonce_data	access:public
bitmain_rxnonce_nonce	driver-bitmain.h	/^struct bitmain_rxnonce_nonce {$/;"	s
bitmain_rxnonce_nonce::nonce	driver-bitmain.h	/^	uint32_t nonce;$/;"	m	struct:bitmain_rxnonce_nonce	access:public
bitmain_rxnonce_nonce::work_id	driver-bitmain.h	/^	uint32_t work_id;$/;"	m	struct:bitmain_rxnonce_nonce	access:public
bitmain_rxstatus_data	driver-bitmain.h	/^struct bitmain_rxstatus_data {$/;"	s
bitmain_rxstatus_data::chain_asic_exist	driver-bitmain.h	/^	uint32_t chain_asic_exist[BITMAIN_MAX_CHAIN_NUM*8];$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::chain_asic_num	driver-bitmain.h	/^	uint8_t chain_asic_num[BITMAIN_MAX_CHAIN_NUM];$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::chain_asic_status	driver-bitmain.h	/^	uint32_t chain_asic_status[BITMAIN_MAX_CHAIN_NUM*8];$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::chain_num	driver-bitmain.h	/^	uint8_t chain_num;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::chip_value_eft	driver-bitmain.h	/^	uint8_t chip_value_eft       :1;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::data_type	driver-bitmain.h	/^	uint8_t data_type;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::fan	driver-bitmain.h	/^	uint8_t fan[BITMAIN_MAX_FAN_NUM];$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::fan_exist	driver-bitmain.h	/^	uint16_t fan_exist;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::fan_num	driver-bitmain.h	/^	uint8_t fan_num;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::fifo_space	driver-bitmain.h	/^	uint16_t fifo_space;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::get_blk_num	driver-bitmain.h	/^	uint8_t get_blk_num          :4;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::hw_version	driver-bitmain.h	/^	uint8_t hw_version[4];$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::nonce_error	driver-bitmain.h	/^	uint32_t nonce_error;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::reg_value	driver-bitmain.h	/^	uint32_t reg_value;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::reserved1	driver-bitmain.h	/^	uint8_t reserved1            :3;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::temp	driver-bitmain.h	/^	uint8_t temp[BITMAIN_MAX_TEMP_NUM];$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::temp_exist	driver-bitmain.h	/^	uint32_t temp_exist;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::temp_num	driver-bitmain.h	/^	uint8_t temp_num;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_data::version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_rxstatus_data	access:public
bitmain_rxstatus_token	driver-bitmain.h	/^struct bitmain_rxstatus_token {$/;"	s
bitmain_rxstatus_token::chip_address	driver-bitmain.h	/^	uint8_t chip_address;$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_rxstatus_token::chip_status_eft	driver-bitmain.h	/^	uint8_t chip_status_eft      :1;$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_rxstatus_token::crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_rxstatus_token::detect_get	driver-bitmain.h	/^	uint8_t detect_get           :1;$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_rxstatus_token::length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_rxstatus_token::reg_address	driver-bitmain.h	/^	uint8_t reg_address;$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_rxstatus_token::reserved1	driver-bitmain.h	/^	uint8_t reserved1            :6;$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_rxstatus_token::reserved2	driver-bitmain.h	/^	uint8_t reserved2[3];$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_rxstatus_token::token_type	driver-bitmain.h	/^	uint8_t token_type;$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_rxstatus_token::version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_rxstatus_token	access:public
bitmain_scanhash	driver-bitmain.c	/^static int64_t bitmain_scanhash(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bitmain_send_data	driver-bitmain.c	/^static int bitmain_send_data(const uint8_t * data, int datalen, struct cgpu_info *bitmain)$/;"	f	file:	signature:(const uint8_t * data, int datalen, struct cgpu_info *bitmain)
bitmain_send_tasks	driver-bitmain.c	/^static void *bitmain_send_tasks(void *userdata)$/;"	f	file:	signature:(void *userdata)
bitmain_set_rxstatus	driver-bitmain.c	/^static int bitmain_set_rxstatus(struct bitmain_rxstatus_token *bm,$/;"	f	file:	signature:(struct bitmain_rxstatus_token *bm, uint8_t chip_status_eft, uint8_t detect_get, uint8_t chip_address, uint8_t reg_address)
bitmain_set_timeout	driver-bitmain.c	/^static void bitmain_set_timeout(struct bitmain_info *info)$/;"	f	file:	signature:(struct bitmain_info *info)
bitmain_set_txconfig	driver-bitmain.c	/^static int bitmain_set_txconfig(struct bitmain_txconfig_token *bm,$/;"	f	file:	signature:(struct bitmain_txconfig_token *bm, uint8_t reset, uint8_t fan_eft, uint8_t timeout_eft, uint8_t frequency_eft, uint8_t voltage_eft, uint8_t chain_check_time_eft, uint8_t chip_config_eft, uint8_t hw_error_eft, uint8_t beeper_ctrl, uint8_t temp_over_ctrl, uint8_t chain_num, uint8_t asic_num, uint8_t fan_pwm_data, uint8_t timeout_data, uint16_t frequency, uint8_t * voltage, uint8_t chain_check_time, uint8_t chip_address, uint8_t reg_address, uint8_t * reg_data)
bitmain_set_txtask	driver-bitmain.c	/^static int bitmain_set_txtask(uint8_t * sendbuf,$/;"	f	file:	signature:(uint8_t * sendbuf, unsigned int * last_work_block, struct work **works, int work_array_size, int work_array, int sendworkcount, int * sendcount)
bitmain_shutdown	driver-bitmain.c	/^static void bitmain_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bitmain_txconfig_token	driver-bitmain.h	/^struct bitmain_txconfig_token {$/;"	s
bitmain_txconfig_token::asic_num	driver-bitmain.h	/^	uint8_t asic_num;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::beeper_ctrl	driver-bitmain.h	/^	uint8_t beeper_ctrl          :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::chain_check_time	driver-bitmain.h	/^	uint8_t chain_check_time;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::chain_check_time_eft	driver-bitmain.h	/^	uint8_t chain_check_time_eft :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::chain_num	driver-bitmain.h	/^	uint8_t chain_num;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::chip_address	driver-bitmain.h	/^	uint8_t chip_address;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::chip_config_eft	driver-bitmain.h	/^	uint8_t chip_config_eft      :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::fan_eft	driver-bitmain.h	/^	uint8_t fan_eft              :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::fan_pwm_data	driver-bitmain.h	/^	uint8_t fan_pwm_data;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::frequency	driver-bitmain.h	/^	uint16_t frequency;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::frequency_eft	driver-bitmain.h	/^	uint8_t frequency_eft        :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::hw_error_eft	driver-bitmain.h	/^	uint8_t hw_error_eft         :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::reg_address	driver-bitmain.h	/^	uint8_t reg_address;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::reg_data	driver-bitmain.h	/^	uint8_t reg_data[4];$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::reserved1	driver-bitmain.h	/^	uint8_t reserved1            :6;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::reserved2	driver-bitmain.h	/^	uint8_t reserved2;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::reset	driver-bitmain.h	/^	uint8_t reset                :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::temp_over_ctrl	driver-bitmain.h	/^	uint8_t temp_over_ctrl       :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::timeout_data	driver-bitmain.h	/^	uint8_t timeout_data;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::timeout_eft	driver-bitmain.h	/^	uint8_t timeout_eft          :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::token_type	driver-bitmain.h	/^	uint8_t token_type;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::voltage	driver-bitmain.h	/^	uint8_t voltage[2];$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txconfig_token::voltage_eft	driver-bitmain.h	/^	uint8_t voltage_eft          :1;$/;"	m	struct:bitmain_txconfig_token	access:public
bitmain_txtask_token	driver-bitmain.h	/^struct bitmain_txtask_token {$/;"	s
bitmain_txtask_token::crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_txtask_token	access:public
bitmain_txtask_token::diff	driver-bitmain.h	/^	uint8_t diff;$/;"	m	struct:bitmain_txtask_token	access:public
bitmain_txtask_token::length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_txtask_token	access:public
bitmain_txtask_token::net_diff	driver-bitmain.h	/^	uint16_t net_diff;$/;"	m	struct:bitmain_txtask_token	access:public
bitmain_txtask_token::new_block	driver-bitmain.h	/^	uint8_t new_block            :1;$/;"	m	struct:bitmain_txtask_token	access:public
bitmain_txtask_token::reserved1	driver-bitmain.h	/^	uint8_t reserved1            :7;$/;"	m	struct:bitmain_txtask_token	access:public
bitmain_txtask_token::token_type	driver-bitmain.h	/^	uint8_t token_type;$/;"	m	struct:bitmain_txtask_token	access:public
bitmain_txtask_token::version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_txtask_token	access:public
bitmain_txtask_token::works	driver-bitmain.h	/^	struct bitmain_txtask_work works[BITMAIN_MAX_WORK_NUM];$/;"	m	struct:bitmain_txtask_token	typeref:struct:bitmain_txtask_token::bitmain_txtask_work	access:public
bitmain_txtask_work	driver-bitmain.h	/^struct bitmain_txtask_work {$/;"	s
bitmain_txtask_work::data2	driver-bitmain.h	/^	uint8_t data2[12];$/;"	m	struct:bitmain_txtask_work	access:public
bitmain_txtask_work::midstate	driver-bitmain.h	/^	uint8_t midstate[32];$/;"	m	struct:bitmain_txtask_work	access:public
bitmain_txtask_work::work_id	driver-bitmain.h	/^	uint32_t work_id;$/;"	m	struct:bitmain_txtask_work	access:public
bitmain_update_temps	driver-bitmain.c	/^static void bitmain_update_temps(struct cgpu_info *bitmain, struct bitmain_info *info,$/;"	f	file:	signature:(struct cgpu_info *bitmain, struct bitmain_info *info, struct bitmain_rxstatus_data *bm)
bitmain_usb_detect_one	driver-bitmain.c	/^static struct cgpu_info * bitmain_usb_detect_one(libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(libusb_device *dev, struct usb_find_devices *found)
bitmain_usb_init	driver-bitmain.c	/^static void bitmain_usb_init(struct cgpu_info *bitmain)$/;"	f	file:	signature:(struct cgpu_info *bitmain)
bitmain_write	driver-bitmain.c	/^static int bitmain_write(struct cgpu_info *bitmain, char *buf, ssize_t len, int ep)$/;"	f	file:	signature:(struct cgpu_info *bitmain, char *buf, ssize_t len, int ep)
bitmineA1_drv	driver-SPI-bitmine-A1.c	/^struct device_drv bitmineA1_drv = {$/;"	v	typeref:struct:device_drv
bitrate	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
bits	driver-bab.c	/^	uint32_t bits;$/;"	m	struct:bab_work_send	file:	access:public
bits	driver-minion.c	/^	uint8_t bits[DATA_SIZ];$/;"	m	struct:minion_que	file:	access:public
bits	hf_protocol.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_serial	access:public
bits	hf_protocol.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_usb	access:public
bits	hf_protocol_be.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_serial	access:public
bits	hf_protocol_be.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_usb	access:public
bits	knc-transport-spi.c	/^	uint8_t bits;$/;"	m	struct:spidev_context	file:	access:public
bits	spi-context.h	/^	uint8_t bits;$/;"	m	struct:spi_config	access:public
bits128	cgminer.c	/^static const double bits128 = 340282366920938463463374607431768211456.0;$/;"	v	file:
bits192	cgminer.c	/^static const double bits192 = 6277101735386680763835789423207666416102355444464034512896.0;$/;"	v	file:
bits64	cgminer.c	/^static const double bits64 = 18446744073709551616.0;$/;"	v	file:
bits_set	driver-cointerra.c	/^static int bits_set(char v)$/;"	f	file:	signature:(char v)
bits_to_diff	driver-cointerra.c	/^static double bits_to_diff(uint8_t bits)$/;"	f	file:	signature:(uint8_t bits)
blacklist_cgpu	usbutils.c	/^void blacklist_cgpu(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
blacklist_cgpu	usbutils.h	/^void blacklist_cgpu(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
blacklist_head	usbutils.c	/^static struct usb_in_use_list *blacklist_head = NULL;$/;"	v	typeref:struct:usb_in_use_list	file:
blacklisted	miner.h	/^	bool blacklisted;$/;"	m	struct:cgpu_info	access:public
blank	driver-bflsc.c	/^static const char *blank = "";$/;"	v	file:
blank	driver-bitforce.c	/^static const char *blank = "";$/;"	v	file:
blank_get_statline_before	cgminer.c	/^void blank_get_statline_before(char *buf, size_t bufsiz, struct cgpu_info __maybe_unused *cgpu);$/;"	p	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info __maybe_unused *cgpu)
blank_get_statline_before	cgminer.c	/^void blank_get_statline_before(char __maybe_unused *buf,size_t __maybe_unused bufsiz, struct cgpu_info __maybe_unused *cgpu)$/;"	f	signature:(char __maybe_unused *buf,size_t __maybe_unused bufsiz, struct cgpu_info __maybe_unused *cgpu)
blank_get_statline_before	miner.h	/^extern void blank_get_statline_before(char *buf, size_t bufsiz, struct cgpu_info __maybe_unused *cgpu);$/;"	p	signature:(char *buf, size_t bufsiz, struct cgpu_info __maybe_unused *cgpu)
blank_merkle	util.c	/^static char *blank_merkle = "0000000000000000000000000000000000000000000000000000000000000000";$/;"	v	file:
blanks	cgminer.c	/^const char blanks[] = "                                        ";$/;"	v
blk_lock	cgminer.c	/^static pthread_rwlock_t blk_lock;$/;"	v	file:
block	cgminer.c	/^	bool block;$/;"	m	struct:stratum_share	file:	access:public
block	cgminer.c	/^struct block {$/;"	s	file:
block	miner.h	/^	bool		block;$/;"	m	struct:work	access:public
block	sha2.h	/^    unsigned char block[2 * SHA256_BLOCK_SIZE];$/;"	m	struct:__anon62	access:public
block	usbtest.py	/^	block = "0000000120c8222d0497a7ab44a1a2c7bf39de941c9970b1dc7cdc400000079700000000e88aabe1f353238c668d8a4df9318e614c10c474f8cdf8bc5f6397b946c33d7c4e7242c31a098ea500000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000"$/;"	v
block::block_no	cgminer.c	/^	int block_no;$/;"	m	struct:block	file:	access:public
block::hash	cgminer.c	/^	char hash[68];$/;"	m	struct:block	file:	access:public
block::hh	cgminer.c	/^	UT_hash_handle hh;$/;"	m	struct:block	file:	access:public
blockData	driver-bflsc.h	/^	uint8_t blockData[MERKLE_BYTES];$/;"	m	struct:QueueJobStructure	access:public
block_diff	cgminer.c	/^static char block_diff[8];$/;"	v	file:
block_exists	cgminer.c	/^static bool block_exists(char *hexstr)$/;"	f	file:	signature:(char *hexstr)
block_no	cgminer.c	/^	int block_no;$/;"	m	struct:block	file:	access:public
block_seq	driver-klondike.c	/^	int block_seq;$/;"	m	struct:klist	file:	access:public
block_seq	driver-klondike.c	/^	int block_seq;$/;"	m	struct:klondike_info	file:	access:public
block_socket	util.c	/^static void block_socket(SOCKETTYPE fd)$/;"	f	file:	signature:(SOCKETTYPE fd)
block_sort	cgminer.c	/^static int block_sort(struct block *blocka, struct block *blockb)$/;"	f	file:	signature:(struct block *blocka, struct block *blockb)
block_timeval	cgminer.c	/^struct timeval block_timeval;$/;"	v	typeref:struct:timeval
blocked_handler	lib/sigprocmask.c	/^blocked_handler (int sig)$/;"	f	file:	signature:(int sig)
blocked_set	lib/sigprocmask.c	/^static volatile sigset_t blocked_set \/* = 0 *\/;$/;"	v	file:
blockerupter_api_stats	driver-blockerupter.c	/^static struct api_data *blockerupter_api_stats(struct cgpu_info *blockerupter)$/;"	f	file:	signature:(struct cgpu_info *blockerupter)
blockerupter_checknonce	driver-blockerupter.c	/^static uint64_t blockerupter_checknonce(struct cgpu_info *blockerupter, struct blockerupter_response *resp, int board)$/;"	f	file:	signature:(struct cgpu_info *blockerupter, struct blockerupter_response *resp, int board)
blockerupter_detect	driver-blockerupter.c	/^static inline void blockerupter_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
blockerupter_detect_one	driver-blockerupter.c	/^static struct cgpu_info *blockerupter_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
blockerupter_drv	driver-blockerupter.c	/^struct device_drv blockerupter_drv = {$/;"	v	typeref:struct:device_drv
blockerupter_flush_work	driver-blockerupter.c	/^static void blockerupter_flush_work(struct cgpu_info *blockerupter)$/;"	f	file:	signature:(struct cgpu_info *blockerupter)
blockerupter_getresp	driver-blockerupter.c	/^static uint64_t blockerupter_getresp(struct cgpu_info *blockerupter, int board)$/;"	f	file:	signature:(struct cgpu_info *blockerupter, int board)
blockerupter_info	driver-blockerupter.h	/^typedef struct blockerupter_info {$/;"	s
blockerupter_info	driver-blockerupter.h	/^} blockerupter_info;$/;"	t	typeref:struct:blockerupter_info
blockerupter_info::accepted	driver-blockerupter.h	/^	int accepted;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::b_info	driver-blockerupter.h	/^	board_info b_info[BET_MAXBOARDS];$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::boards	driver-blockerupter.h	/^	uint8_t boards[BET_MAXBOARDS];$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::clock	driver-blockerupter.h	/^	int clock;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::diff	driver-blockerupter.h	/^	int diff;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::eff	driver-blockerupter.h	/^	double eff;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::expected	driver-blockerupter.h	/^	double expected;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::found	driver-blockerupter.h	/^	uint8_t found;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::hashes	driver-blockerupter.h	/^	int hashes;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::hashrate	driver-blockerupter.h	/^	double hashrate;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::last_job	driver-blockerupter.h	/^	struct timeval last_job;$/;"	m	struct:blockerupter_info	typeref:struct:blockerupter_info::timeval	access:public
blockerupter_info::nonces	driver-blockerupter.h	/^	int nonces;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::pool	driver-blockerupter.h	/^	struct pool pool;$/;"	m	struct:blockerupter_info	typeref:struct:blockerupter_info::pool	access:public
blockerupter_info::rolling	driver-blockerupter.h	/^	int rolling;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::start_time	driver-blockerupter.h	/^	struct timeval start_time;$/;"	m	struct:blockerupter_info	typeref:struct:blockerupter_info::timeval	access:public
blockerupter_info::work_idx	driver-blockerupter.h	/^	uint8_t work_idx;$/;"	m	struct:blockerupter_info	access:public
blockerupter_info::works	driver-blockerupter.h	/^	struct work works[BET_WORK_FIFO];$/;"	m	struct:blockerupter_info	typeref:struct:blockerupter_info::work	access:public
blockerupter_init	driver-blockerupter.c	/^static void blockerupter_init(struct cgpu_info *blockerupter)$/;"	f	file:	signature:(struct cgpu_info *blockerupter)
blockerupter_init_com	driver-blockerupter.c	/^static void blockerupter_init_com(struct cgpu_info *blockerupter)$/;"	f	file:	signature:(struct cgpu_info *blockerupter)
blockerupter_mark_mode	driver-blockerupter.c	/^static void blockerupter_mark_mode(struct cgpu_info *blockerupter)$/;"	f	file:	signature:(struct cgpu_info *blockerupter)
blockerupter_prepare	driver-blockerupter.c	/^static bool blockerupter_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
blockerupter_read	driver-blockerupter.c	/^static int blockerupter_read(struct cgpu_info *blockerupter, char *data, int len)$/;"	f	file:	signature:(struct cgpu_info *blockerupter, char *data, int len)
blockerupter_response	driver-blockerupter.h	/^typedef struct blockerupter_response {$/;"	s
blockerupter_response	driver-blockerupter.h	/^} blockerupter_response;$/;"	t	typeref:struct:blockerupter_response
blockerupter_response::chip	driver-blockerupter.h	/^	uint8_t chip;$/;"	m	struct:blockerupter_response	access:public
blockerupter_response::diff	driver-blockerupter.h	/^	uint8_t diff[4];$/;"	m	struct:blockerupter_response	access:public
blockerupter_response::exnonc2	driver-blockerupter.h	/^	uint8_t exnonc2[4];$/;"	m	struct:blockerupter_response	access:public
blockerupter_response::merkle	driver-blockerupter.h	/^	uint8_t merkle[4];$/;"	m	struct:blockerupter_response	access:public
blockerupter_response::midstate	driver-blockerupter.h	/^	uint8_t midstate[32];$/;"	m	struct:blockerupter_response	access:public
blockerupter_response::nonce	driver-blockerupter.h	/^	uint8_t nonce[4];$/;"	m	struct:blockerupter_response	access:public
blockerupter_response::ntime	driver-blockerupter.h	/^	uint8_t ntime[4];$/;"	m	struct:blockerupter_response	access:public
blockerupter_response::work_idx	driver-blockerupter.h	/^	uint8_t work_idx;$/;"	m	struct:blockerupter_response	access:public
blockerupter_scanhash	driver-blockerupter.c	/^static int64_t blockerupter_scanhash(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
blockerupter_send	driver-blockerupter.c	/^static int blockerupter_send(struct cgpu_info *blockerupter, char *data, int len)$/;"	f	file:	signature:(struct cgpu_info *blockerupter, char *data, int len)
blockerupter_sendjob	driver-blockerupter.c	/^static void blockerupter_sendjob(struct cgpu_info *blockerupter, int board)$/;"	f	file:	signature:(struct cgpu_info *blockerupter, int board)
blockerupter_setclock	driver-blockerupter.c	/^static void blockerupter_setclock(struct cgpu_info *blockerupter, uint8_t clock)$/;"	f	file:	signature:(struct cgpu_info *blockerupter, uint8_t clock)
blockerupter_setdiff	driver-blockerupter.c	/^static void blockerupter_setdiff(struct cgpu_info *blockerupter, int diff)$/;"	f	file:	signature:(struct cgpu_info *blockerupter, int diff)
blockerupter_setrolling	driver-blockerupter.c	/^static void blockerupter_setrolling(struct cgpu_info *blockerupter, uint8_t rolling)$/;"	f	file:	signature:(struct cgpu_info *blockerupter, uint8_t rolling)
blockerupter_space_mode	driver-blockerupter.c	/^static void blockerupter_space_mode(struct cgpu_info *blockerupter)$/;"	f	file:	signature:(struct cgpu_info *blockerupter)
blocking	miner.h	/^	bool blocking;$/;"	m	struct:pool	access:public
blocks	cgminer.c	/^static struct block *blocks = NULL;$/;"	v	typeref:struct:block	file:
blocktime	cgminer.c	/^static char blocktime[32];$/;"	v	file:
bloom_bv	uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table	access:public
bloom_nbits	uthash.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table	access:public
bloom_sig	uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint32_t  bmAttributes;$/;"	m	struct:libusb_usb_2_0_device_capability_descriptor	access:public
bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_config_descriptor	access:public
bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_endpoint_descriptor	access:public
bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
bmAttributes	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bmAttributes;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
bmAttributes	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  bmAttributes;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
bmRequest	compat/libusb-1.0/libusb/os/windows_usb.h	/^			UCHAR bmRequest;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
bmRequest	compat/libusb-1.0/libusb/os/windows_usb.h	/^		UCHAR  bmRequest;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
bmRequestType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmRequestType;$/;"	m	struct:libusb_control_setup	access:public
bmRequestType	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint8_t  bmRequestType;$/;"	m	struct:usbfs_ctrltransfer	access:public
bmsc_api_stats	driver-bmsc.c	/^static struct api_data *bmsc_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
bmsc_detect	driver-bmsc.c	/^static void bmsc_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
bmsc_detect_one	driver-antrouter.c	/^static struct cgpu_info *bmsc_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
bmsc_detect_one	driver-bmsc.c	/^static struct cgpu_info *bmsc_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
bmsc_drv	driver-bmsc.c	/^struct device_drv bmsc_drv = {$/;"	v	typeref:struct:device_drv
bmsc_get_nonce	driver-antrouter.c	/^static int bmsc_get_nonce(struct cgpu_info *antrouter, unsigned char *buf, struct timeval *tv_start,$/;"	f	file:	signature:(struct cgpu_info *antrouter, unsigned char *buf, struct timeval *tv_start, struct timeval *tv_finish, struct thr_info *thr, int read_time)
bmsc_get_nonce	driver-bmsc.c	/^static int bmsc_get_nonce(struct cgpu_info *bmsc, unsigned char *buf, struct timeval *tv_start,$/;"	f	file:	signature:(struct cgpu_info *bmsc, unsigned char *buf, struct timeval *tv_start, struct timeval *tv_finish, struct thr_info *thr, int read_time)
bmsc_identify	driver-bmsc.c	/^static void bmsc_identify(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
bmsc_initialise	driver-antrouter.c	/^static void bmsc_initialise(struct cgpu_info *antrouter, int baud)$/;"	f	file:	signature:(struct cgpu_info *antrouter, int baud)
bmsc_initialise	driver-bmsc.c	/^static void bmsc_initialise(struct cgpu_info *bmsc, int baud)$/;"	f	file:	signature:(struct cgpu_info *bmsc, int baud)
bmsc_prepare	driver-bmsc.c	/^static bool bmsc_prepare(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
bmsc_scanwork	driver-antrouter.c	/^static int64_t bmsc_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bmsc_scanwork	driver-bmsc.c	/^static int64_t bmsc_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
bmsc_set	driver-bmsc.c	/^static char *bmsc_set(struct cgpu_info *cgpu, char *option, char *setting, char *replybuf)$/;"	f	file:	signature:(struct cgpu_info *cgpu, char *option, char *setting, char *replybuf)
bmsc_set_timing_mode	driver-antrouter.c	/^static void bmsc_set_timing_mode(int this_option_offset, struct cgpu_info *antrouter, float readtimeout)$/;"	f	file:	signature:(int this_option_offset, struct cgpu_info *antrouter, float readtimeout)
bmsc_shutdown	driver-bmsc.c	/^static void bmsc_shutdown(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
bmsc_statline_before	driver-bmsc.c	/^static void bmsc_statline_before(char *buf, size_t bufsiz, struct cgpu_info *cgpu)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *cgpu)
board_ctx	A1-desk-board-selector.c	/^static struct pcf8575_ctx board_ctx = { 0x27, 0xff, 0xff, -1, .active_board = 255,};$/;"	v	typeref:struct:pcf8575_ctx	file:
board_id	A1-common.h	/^	int board_id;$/;"	m	struct:A1_board	access:public
board_info	driver-blockerupter.h	/^typedef struct board_info {$/;"	s
board_info	driver-blockerupter.h	/^} board_info;$/;"	t	typeref:struct:board_info
board_info::accepted	driver-blockerupter.h	/^	int accepted;$/;"	m	struct:board_info	access:public
board_info::asics	driver-blockerupter.h	/^	struct asic_info asics[BET_MAXASICS];$/;"	m	struct:board_info	typeref:struct:board_info::asic_info	access:public
board_info::bad	driver-blockerupter.h	/^	int bad;$/;"	m	struct:board_info	access:public
board_info::hashes	driver-blockerupter.h	/^	int hashes;$/;"	m	struct:board_info	access:public
board_info::hashrate	driver-blockerupter.h	/^	double hashrate;$/;"	m	struct:board_info	access:public
board_info::hwe	driver-blockerupter.h	/^	double hwe;$/;"	m	struct:board_info	access:public
board_info::job_count	driver-blockerupter.h	/^	int job_count;$/;"	m	struct:board_info	access:public
board_info::nonces	driver-blockerupter.h	/^	int nonces;$/;"	m	struct:board_info	access:public
board_number	driver-cointerra.h	/^	uint8_t board_number;$/;"	m	struct:cointerra_info	access:public
board_selector	A1-board-selector.h	/^struct board_selector {$/;"	s
board_selector	driver-SPI-bitmine-A1.c	/^static struct board_selector *board_selector;$/;"	v	typeref:struct:board_selector	file:
board_selector::exit	A1-board-selector.h	/^	void (*exit)(void);$/;"	m	struct:board_selector	access:public
board_selector::get_temp	A1-board-selector.h	/^	uint8_t (*get_temp)(uint8_t sensor);$/;"	m	struct:board_selector	access:public
board_selector::prepare_clock	A1-board-selector.h	/^	bool (*prepare_clock)(int clock_khz);$/;"	m	struct:board_selector	access:public
board_selector::release	A1-board-selector.h	/^	void (*release)(void);$/;"	m	struct:board_selector	access:public
board_selector::reset	A1-board-selector.h	/^	bool (*reset)(void);$/;"	m	struct:board_selector	access:public
board_selector::reset_all	A1-board-selector.h	/^	bool (*reset_all)(void);$/;"	m	struct:board_selector	access:public
board_selector::select	A1-board-selector.h	/^	bool (*select)(uint8_t chain);$/;"	m	struct:board_selector	access:public
board_temp	driver-hashfast.h	/^	double board_temp;$/;"	m	struct:hf_die_data	access:public
board_temperature	driver-hashfast.c	/^static float board_temperature(uint16_t adc)$/;"	f	file:	signature:(uint16_t adc)
boards	driver-bab.c	/^	int boards;$/;"	m	struct:bab_info	file:	access:public
boards	driver-blockerupter.h	/^	uint8_t boards[BET_MAXBOARDS];$/;"	m	struct:blockerupter_info	access:public
bool	compat/libusb-1.0/libusb/os/windows_usb.h	35;"	d
both	miner.php	/^		$both = explode('+', $section, 2);$/;"	v
both	miner.php	/^function getparam($name, $both = false)$/;"	v
bpst	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
breakdown	driver-bflsc.c	/^static bool breakdown(enum breakmode mode, char *buf, int *count, char **firstname, char ***fields, char **lf)$/;"	f	file:	signature:(enum breakmode mode, char *buf, int *count, char **firstname, char ***fields, char **lf)
breakmode	driver-bflsc.c	/^enum breakmode {$/;"	g	file:
bswap_16	miner.h	129;"	d
bswap_16	miner.h	141;"	d
bswap_16	miner.h	145;"	d
bswap_32	miner.h	131;"	d
bswap_32	miner.h	142;"	d
bswap_32	miner.h	148;"	d
bswap_64	miner.h	132;"	d
bswap_64	miner.h	143;"	d
bswap_64	miner.h	152;"	d
bswap_8	miner.h	161;"	d
btm_alloc_cgpu	usbutils.c	/^struct cgpu_info *btm_alloc_cgpu(struct device_drv *drv, int threads)$/;"	f	signature:(struct device_drv *drv, int threads)
btm_alloc_cgpu	usbutils.h	/^struct cgpu_info *btm_alloc_cgpu(struct device_drv *drv, int threads);$/;"	p	signature:(struct device_drv *drv, int threads)
btm_detect	usbutils.c	/^void btm_detect(struct device_drv *drv, bool (*device_detect)(const char*))$/;"	f	signature:(struct device_drv *drv, bool (*device_detect)(const char*))
btm_detect	usbutils.h	/^void btm_detect(struct device_drv *drv, bool (*device_detect)(const char*));$/;"	p	signature:(struct device_drv *drv, bool (*device_detect)(const char*))
btm_epinfos	usbutils.c	/^static struct usb_epinfo btm_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
btm_free_cgpu	usbutils.c	/^struct cgpu_info *btm_free_cgpu(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
btm_free_cgpu	usbutils.h	/^struct cgpu_info *btm_free_cgpu(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
btm_init	usbutils.c	/^bool btm_init(struct cgpu_info *cgpu, const char * devpath)$/;"	f	signature:(struct cgpu_info *cgpu, const char * devpath)
btm_init	usbutils.h	/^bool btm_init(struct cgpu_info *cgpu, const char * devpath);$/;"	p	signature:(struct cgpu_info *cgpu, const char * devpath)
btm_ints	usbutils.c	/^static struct usb_intinfo btm_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
btm_read	usbutils.c	/^int btm_read(struct cgpu_info *cgpu, char *buf, size_t bufsize)$/;"	f	signature:(struct cgpu_info *cgpu, char *buf, size_t bufsize)
btm_read	usbutils.h	/^int btm_read(struct cgpu_info *cgpu, char *buf, size_t bufsize);$/;"	p	signature:(struct cgpu_info *cgpu, char *buf, size_t bufsize)
btm_uninit	usbutils.c	/^void btm_uninit(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
btm_uninit	usbutils.h	/^void btm_uninit(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
btm_work_test_data	driver-bitmain.c	/^const char btm_work_test_data[BITMAIN_TEST_NUM][256] = {$/;"	v
btm_work_test_midstate	driver-bitmain.c	/^const char btm_work_test_midstate[BITMAIN_TEST_NUM][256] = {$/;"	v
btm_write	usbutils.c	/^int btm_write(struct cgpu_info *cgpu, char *buf, size_t bufsize)$/;"	f	signature:(struct cgpu_info *cgpu, char *buf, size_t bufsize)
btm_write	usbutils.h	/^int btm_write(struct cgpu_info *cgpu, char *buf, size_t bufsize);$/;"	p	signature:(struct cgpu_info *cgpu, char *buf, size_t bufsize)
bucket_is_empty	compat/jansson-2.6/src/hashtable.c	/^static JSON_INLINE int bucket_is_empty(hashtable_t *hashtable, bucket_t *bucket)$/;"	f	file:	signature:(hashtable_t *hashtable, bucket_t *bucket)
bucket_t	compat/jansson-2.6/src/hashtable.c	/^typedef struct hashtable_bucket bucket_t;$/;"	t	typeref:struct:hashtable_bucket	file:
buckets	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_bucket *buckets;$/;"	m	struct:hashtable	typeref:struct:hashtable::hashtable_bucket	access:public
buckets	uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table	access:public
buf	api.c	/^	char *buf;$/;"	m	struct:sbitem	file:	access:public
buf	cgminer.c	/^	char *buf;$/;"	m	struct:JE	file:	access:public
buf	driver-klondike.c	/^	uint8_t buf[REPLY_SIZE-2];$/;"	m	struct:klondike_header	file:	access:public
buf	miner.php	/^	$buf = "cgminer-$mcastcode-$mcastlistport";$/;"	v
buf	usbutils.c	/^	struct semid_ds *buf;$/;"	m	union:semun	typeref:struct:semun::semid_ds	file:	access:public
buf	util.c	/^	const void	*buf;$/;"	m	struct:upload_buffer	file:	access:public
buf	util.c	/^	void		*buf;$/;"	m	struct:data_buffer	file:	access:public
bufamt	usbutils.h	/^	uint32_t bufamt;$/;"	m	struct:cg_usb_device	access:public
buffer	compat/jansson-2.6/src/load.c	/^    char buffer[5];$/;"	m	struct:__anon16	file:	access:public
buffer	compat/libusb-1.0/libusb/libusb.h	/^	unsigned char *buffer;$/;"	m	struct:libusb_transfer	access:public
buffer	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *buffer;$/;"	m	struct:usbfs_urb	access:public
buffer	usbutils.h	/^	char buffer[USB_MAX_READ];$/;"	m	struct:cg_usb_device	access:public
buffer_data_t	compat/jansson-2.6/src/load.c	/^} buffer_data_t;$/;"	t	typeref:struct:__anon20	file:
buffer_get	compat/jansson-2.6/src/load.c	/^static int buffer_get(void *data)$/;"	f	file:	signature:(void *data)
buffer_length	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int buffer_length;$/;"	m	struct:usbfs_urb	access:public
buffer_pos	compat/jansson-2.6/src/load.c	/^    size_t buffer_pos;$/;"	m	struct:__anon16	file:	access:public
bufsiz	usbutils.h	/^	uint32_t bufsiz;$/;"	m	struct:cg_usb_device	access:public
build_cmd	driver-minion.c	/^static int build_cmd(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip, uint8_t reg, uint8_t *rbuf, uint32_t rsiz, uint8_t *data)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip, uint8_t reg, uint8_t *rbuf, uint32_t rsiz, uint8_t *data)
bulk_transfer_cb	compat/libusb-1.0/libusb/sync.c	/^static void LIBUSB_CALL bulk_transfer_cb(struct libusb_transfer *transfer)$/;"	f	file:	signature:(struct libusb_transfer *transfer)
bus	spi-context.h	/^	int bus;$/;"	m	struct:spi_config	access:public
bus_number	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t bus_number;$/;"	m	struct:libusb_device	access:public
bus_number	usbutils.c	/^	int bus_number;$/;"	m	struct:usb_busdev	file:	access:public
bus_number	usbutils.c	/^	uint8_t bus_number;$/;"	m	struct:resource_reply	file:	access:public
bus_number	usbutils.c	/^	uint8_t bus_number;$/;"	m	struct:resource_work	file:	access:public
bus_number	usbutils.h	/^	uint8_t bus_number;$/;"	m	struct:cg_usb_info	access:public
busdev	usbutils.c	/^} *busdev;$/;"	v	typeref:struct:usb_busdev	file:
busdev_count	usbutils.c	/^static int busdev_count = 0;$/;"	v	file:
bworks	driver-bflsc.h	/^	struct bflsc_work *bworks;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::bflsc_work	access:public
bxf0_epinfos	usbutils.c	/^static struct usb_epinfo bxf0_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bxf1_epinfos	usbutils.c	/^static struct usb_epinfo bxf1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bxf_api_stats	driver-bitfury.c	/^static struct api_data *bxf_api_stats(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bxf_clear_buffer	driver-bitfury.c	/^static void bxf_clear_buffer(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bxf_close	driver-bitfury.c	/^static void bxf_close(struct bitfury_info *info)$/;"	f	file:	signature:(struct bitfury_info *info)
bxf_detect_one	driver-bitfury.c	/^static bool bxf_detect_one(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bxf_get_results	driver-bitfury.c	/^static void *bxf_get_results(void *userdata)$/;"	f	file:	signature:(void *userdata)
bxf_ints	usbutils.c	/^static struct usb_intinfo bxf_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
bxf_prepare	driver-bitfury.c	/^static bool bxf_prepare(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bxf_recv_msg	driver-bitfury.c	/^static int bxf_recv_msg(struct cgpu_info *bitfury, char *buf)$/;"	f	file:	signature:(struct cgpu_info *bitfury, char *buf)
bxf_scan	driver-bitfury.c	/^static int64_t bxf_scan(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bxf_send_clock	driver-bitfury.c	/^static bool bxf_send_clock(struct cgpu_info *bitfury, struct bitfury_info *info,$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info, uint8_t clockspeed)
bxf_send_debugmode	driver-bitfury.c	/^static bool bxf_send_debugmode(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bxf_send_flush	driver-bitfury.c	/^static bool bxf_send_flush(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bxf_send_ledmode	driver-bitfury.c	/^static bool bxf_send_ledmode(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bxf_send_maxroll	driver-bitfury.c	/^static void bxf_send_maxroll(struct cgpu_info *bitfury, int maxroll)$/;"	f	file:	signature:(struct cgpu_info *bitfury, int maxroll)
bxf_send_msg	driver-bitfury.c	/^static bool bxf_send_msg(struct cgpu_info *bitfury, char *buf, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *bitfury, char *buf, enum usb_cmds cmd)
bxf_send_work	driver-bitfury.c	/^static bool bxf_send_work(struct cgpu_info *bitfury, struct work *work)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct work *work)
bxf_update_work	driver-bitfury.c	/^static void bxf_update_work(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bxf_update_work	driver-bitfury.c	/^static void bxf_update_work(struct cgpu_info *bitfury, struct bitfury_info *info);$/;"	p	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bxm_close	driver-bitfury.c	/^static void bxm_close(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bxm_detect_one	driver-bitfury.c	/^static bool bxm_detect_one(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bxm_epinfos	usbutils.c	/^static struct usb_epinfo bxm_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
bxm_ints	usbutils.c	/^static struct usb_intinfo bxm_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
bxm_open	driver-bitfury.c	/^static bool bxm_open(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bxm_purge_buffers	driver-bitfury.c	/^static bool bxm_purge_buffers(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bxm_reinit	driver-bitfury.c	/^static bool bxm_reinit(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bxm_reset_bitfury	driver-bitfury.c	/^static bool bxm_reset_bitfury(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bxm_set_CS_high	driver-bitfury.c	/^static bool bxm_set_CS_high(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bxm_set_CS_low	driver-bitfury.c	/^static bool bxm_set_CS_low(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
bxm_shutdown	driver-bitfury.c	/^static void bxm_shutdown(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
bye	api.c	/^static bool bye;$/;"	v	file:
byte	api-example.php	/^	$byte = socket_read($socket, 1);$/;"	v
byte	api-example.php	/^	if ($byte === false || $byte === '')$/;"	v
byte	miner.php	/^	$byte = socket_read($socket, 1);$/;"	v
byte	miner.php	/^	if ($byte === false || $byte === '')$/;"	v
bytes_received	miner.h	/^	uint64_t bytes_received;$/;"	m	struct:cgminer_pool_stats	access:public
bytes_sent	miner.h	/^	uint64_t bytes_sent;$/;"	m	struct:cgminer_pool_stats	access:public
c2class	miner.php	/^ $c2class = 'two';$/;"	v
cache_active_config	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int cache_active_config(struct libusb_device *dev, int fd,$/;"	f	file:	signature:(struct libusb_device *dev, int fd, int active_config)
cache_config_descriptors	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int cache_config_descriptors(struct libusb_device *dev, HANDLE hub_handle, char* device_id)$/;"	f	file:	signature:(struct libusb_device *dev, HANDLE hub_handle, char* device_id)
calc	miner.php	/^		$calc = str_replace($name, $value, $calc);$/;"	v
calc	miner.php	/^	$calc = $ext[$section]['calc'];$/;"	v
calc_diff	cgminer.c	/^static void calc_diff(struct work *work, double known)$/;"	f	file:	signature:(struct work *work, double known)
calc_diff	cgminer.c	/^static void calc_diff(struct work *work, double known);$/;"	p	file:	signature:(struct work *work, double known)
calc_divisor	driver-bitfury.c	/^static uint16_t calc_divisor(uint32_t system_clock, uint32_t freq)$/;"	f	file:	signature:(uint32_t system_clock, uint32_t freq)
calc_hashes	driver-hashfast.h	/^	uint64_t calc_hashes;$/;"	m	struct:hashfast_info	access:public
calc_midstate	cgminer.c	/^static void calc_midstate(struct work *work)$/;"	f	file:	signature:(struct work *work)
calculate_timeout	compat/libusb-1.0/libusb/io.c	/^static int calculate_timeout(struct usbi_transfer *transfer)$/;"	f	file:	signature:(struct usbi_transfer *transfer)
callapi	api-example.c	/^int callapi(char *command, char *host, short int port)$/;"	f	signature:(char *command, char *host, short int port)
callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb-int.c	12;"	d	file:
callback	compat/jansson-2.6/src/load.c	/^    json_load_callback_t callback;$/;"	m	struct:__anon21	file:	access:public
callback	compat/libusb-1.0/libusb/libusb.h	/^	libusb_transfer_cb_fn callback;$/;"	m	struct:libusb_transfer	access:public
callback_data_t	compat/jansson-2.6/src/load.c	/^} callback_data_t;$/;"	t	typeref:struct:__anon21	file:
callback_get	compat/jansson-2.6/src/load.c	/^static int callback_get(void *data)$/;"	f	file:	signature:(void *data)
callback_onearg	ccan/typesafe_cb/test/run.c	/^struct callback_onearg$/;"	s	file:
callback_onearg	ccan/typesafe_cb/test/run.c	32;"	d	file:
callback_onearg::arg	ccan/typesafe_cb/test/run.c	/^	const void *arg;$/;"	m	struct:callback_onearg	file:	access:public
callback_onearg::fn	ccan/typesafe_cb/test/run.c	/^	void (*fn)(void *arg);$/;"	m	struct:callback_onearg	file:	access:public
callback_postargs	ccan/typesafe_cb/test/run.c	/^struct callback_postargs$/;"	s	file:
callback_postargs	ccan/typesafe_cb/test/run.c	38;"	d	file:
callback_postargs::arg	ccan/typesafe_cb/test/run.c	/^	const void *arg;$/;"	m	struct:callback_postargs	file:	access:public
callback_postargs::fn	ccan/typesafe_cb/test/run.c	/^	void (*fn)(void *arg, int a, int b);$/;"	m	struct:callback_postargs	file:	access:public
callback_preargs	ccan/typesafe_cb/test/run.c	/^struct callback_preargs$/;"	s	file:
callback_preargs	ccan/typesafe_cb/test/run.c	35;"	d	file:
callback_preargs::arg	ccan/typesafe_cb/test/run.c	/^	const void *arg;$/;"	m	struct:callback_preargs	file:	access:public
callback_preargs::fn	ccan/typesafe_cb/test/run.c	/^	void (*fn)(int a, int b, void *arg);$/;"	m	struct:callback_preargs	file:	access:public
callback_wait	usbutils.c	/^static int callback_wait(struct usb_transfer *ut, int *transferred, unsigned int timeout)$/;"	f	file:	signature:(struct usb_transfer *ut, int *transferred, unsigned int timeout)
can_limit_work	miner.h	/^	uint64_t (*can_limit_work)(struct thr_info *);$/;"	m	struct:device_drv	access:public
can_roll	cgminer.c	/^static inline bool can_roll(struct work *work)$/;"	f	file:	signature:(struct work *work)
cancel_control_transfer	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int cancel_control_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
cancel_io	compat/libusb-1.0/libusb/os/poll_windows.c	/^static __inline BOOL cancel_io(int _index)$/;"	f	file:	signature:(int _index)
cancel_transfer	compat/libusb-1.0/libusb/libusbi.h	/^	int (*cancel_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:usbi_os_backend	access:public
cancel_usb_transfers	usbutils.c	/^void cancel_usb_transfers(void)$/;"	f	signature:(void)
cancel_usb_transfers	usbutils.h	/^void cancel_usb_transfers(void);$/;"	p	signature:(void)
cancellable	usbutils.c	/^	bool cancellable;$/;"	m	struct:usb_transfer	file:	access:public
canroll	miner.h	/^	bool canroll;$/;"	m	struct:cgminer_pool_stats	access:public
canroll	util.c	/^	bool		canroll;$/;"	m	struct:header_info	file:	access:public
capabilities	driver-drillbit.c	/^	uint16_t capabilities;$/;"	m	struct:__anon6	file:	access:public
capabilities	driver-drillbit.h	/^  uint16_t capabilities;$/;"	m	struct:drillbit_info	access:public
capacity	compat/libusb-1.0/libusb/libusbi.h	/^	size_t capacity;$/;"	m	struct:discovered_devs	access:public
caps	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	uint32_t caps;$/;"	m	struct:linux_device_handle_priv	file:	access:public
carg	ccan/opt/opt.h	/^		const void *carg;$/;"	m	union:opt_table::__anon48	access:public
cb	ccan/opt/opt.h	/^	char *(*cb)(void *arg); \/* OPT_NOARG *\/$/;"	m	struct:opt_table	access:public
cb	compat/libusb-1.0/libusb/hotplug.h	/^	libusb_hotplug_callback_fn cb;$/;"	m	struct:libusb_hotplug_callback	access:public
cb_arg	ccan/opt/opt.h	/^	char *(*cb_arg)(const char *optarg, void *arg); \/* OPT_HASARG *\/$/;"	m	struct:opt_table	access:public
cb_onearg	ccan/typesafe_cb/test/run.c	/^struct callback_onearg cb_onearg$/;"	v	typeref:struct:callback_onearg
cb_postargs	ccan/typesafe_cb/test/run.c	/^struct callback_postargs cb_postargs$/;"	v	typeref:struct:callback_postargs
cb_preargs	ccan/typesafe_cb/test/run.c	/^struct callback_preargs cb_preargs$/;"	v	typeref:struct:callback_preargs
ccd_board_selector_init	A1-board-selector-CCD.c	/^extern struct board_selector *ccd_board_selector_init(void)$/;"	f	signature:(void)
ccd_board_selector_init	A1-board-selector.h	/^extern struct board_selector *ccd_board_selector_init(void);$/;"	p	signature:(void)
ccd_exit	A1-board-selector-CCD.c	/^static void ccd_exit(void)$/;"	f	file:	signature:(void)
ccd_reset	A1-board-selector-CCD.c	/^static bool ccd_reset(void)$/;"	f	file:	signature:(void)
ccd_reset_all	A1-board-selector-CCD.c	/^static bool ccd_reset_all(void)$/;"	f	file:	signature:(void)
ccd_select	A1-board-selector-CCD.c	/^static bool ccd_select(uint8_t chain)$/;"	f	file:	signature:(uint8_t chain)
ccd_selector	A1-board-selector-CCD.c	/^static struct board_selector ccd_selector = {$/;"	v	typeref:struct:board_selector	file:
ccd_selector	A1-board-selector-CCD.c	/^static struct board_selector ccd_selector;$/;"	v	typeref:struct:board_selector	file:
ccd_unlock	A1-board-selector-CCD.c	/^static void ccd_unlock(void)$/;"	f	file:	signature:(void)
ccr_board_selector_init	A1-board-selector-CCR.c	/^extern struct board_selector *ccr_board_selector_init(void)$/;"	f	signature:(void)
ccr_board_selector_init	A1-board-selector.h	/^extern struct board_selector *ccr_board_selector_init(void);$/;"	p	signature:(void)
ccr_exit	A1-board-selector-CCR.c	/^static void ccr_exit(void)$/;"	f	file:	signature:(void)
ccr_get_temp	A1-board-selector-CCR.c	/^static uint8_t ccr_get_temp(uint8_t sensor_id)$/;"	f	file:	signature:(uint8_t sensor_id)
ccr_reset	A1-board-selector-CCR.c	/^static bool ccr_reset(void)$/;"	f	file:	signature:(void)
ccr_reset_all	A1-board-selector-CCR.c	/^static bool ccr_reset_all(void)$/;"	f	file:	signature:(void)
ccr_select	A1-board-selector-CCR.c	/^static bool ccr_select(uint8_t chain)$/;"	f	file:	signature:(uint8_t chain)
ccr_selector	A1-board-selector-CCR.c	/^static struct board_selector ccr_selector = {$/;"	v	typeref:struct:board_selector	file:
ccr_selector	A1-board-selector-CCR.c	/^static struct board_selector ccr_selector;$/;"	v	typeref:struct:board_selector	file:
ccr_unlock	A1-board-selector-CCR.c	/^static void ccr_unlock(void)$/;"	f	file:	signature:(void)
cdesc	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	unsigned char *cdesc;			\/* active config descriptor *\/$/;"	m	struct:device_priv	file:	access:public
cf	miner.php	/^				$cf = $ext[$section]['fmt'];$/;"	v
cf	miner.php	/^				$cf = NULL;$/;"	v
cf	miner.php	/^function customset($showfields, $sum, $section, $rig, $isbutton, $result, $total, $cf = NULL)$/;"	v
cf	miner.php	/^function fmt($section, $name, $value, $when, $alldata, $cf = NULL)$/;"	v
cfSource	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    CFRunLoopSourceRef   cfSource;$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
cfSource	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  CFRunLoopSourceRef   cfSource;$/;"	m	struct:darwin_device_handle_priv	access:public
cfg	driver-klondike.c	/^		WORKCFG cfg;$/;"	m	union:kline::__anon12	file:	access:public
cfg	driver-klondike.c	/^	KLIST *cfg;$/;"	m	struct:klondike_info	file:	access:public
cg_completion	util.c	/^struct cg_completion {$/;"	s	file:
cg_completion::cgsem	util.c	/^	cgsem_t cgsem;$/;"	m	struct:cg_completion	file:	access:public
cg_completion::fn	util.c	/^	void (*fn)(void *fnarg);$/;"	m	struct:cg_completion	file:	access:public
cg_completion::fnarg	util.c	/^	void *fnarg;$/;"	m	struct:cg_completion	file:	access:public
cg_completion_timeout	util.c	/^bool cg_completion_timeout(void *fn, void *fnarg, int timeout)$/;"	f	signature:(void *fn, void *fnarg, int timeout)
cg_completion_timeout	util.h	/^bool cg_completion_timeout(void *fn, void *fnarg, int timeout);$/;"	p	signature:(void *fn, void *fnarg, int timeout)
cg_dlock	miner.h	793;"	d
cg_dwilock	miner.h	792;"	d
cg_dwlock	miner.h	791;"	d
cg_ilock	miner.h	787;"	d
cg_logwork	util.c	/^void cg_logwork(struct work *work, unsigned char *nonce_bin, bool ok)$/;"	f	signature:(struct work *work, unsigned char *nonce_bin, bool ok)
cg_logwork_uint32	driver-bitmain.c	/^extern void cg_logwork_uint32(struct work *work, uint32_t nonce, bool ok);$/;"	p	file:	signature:(struct work *work, uint32_t nonce, bool ok)
cg_logwork_uint32	util.c	/^void cg_logwork_uint32(struct work *work, uint32_t nonce, bool ok)$/;"	f	signature:(struct work *work, uint32_t nonce, bool ok)
cg_memcpy	util.h	172;"	d
cg_mvwprintw	cgminer.c	2903;"	d	file:
cg_rlock	miner.h	786;"	d
cg_runlock	miner.h	794;"	d
cg_ruwlock	miner.h	795;"	d
cg_timeval_subtract	util.c	/^int cg_timeval_subtract(struct timeval* result, struct timeval* x, struct timeval* y)$/;"	f	signature:(struct timeval* result, struct timeval* x, struct timeval* y)
cg_uilock	miner.h	788;"	d
cg_ulock	miner.h	789;"	d
cg_usb_device	usbutils.h	/^struct cg_usb_device {$/;"	s
cg_usb_device::bufamt	usbutils.h	/^	uint32_t bufamt;$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::buffer	usbutils.h	/^	char buffer[USB_MAX_READ];$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::bufsiz	usbutils.h	/^	uint32_t bufsiz;$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::descriptor	usbutils.h	/^	struct libusb_device_descriptor *descriptor;$/;"	m	struct:cg_usb_device	typeref:struct:cg_usb_device::libusb_device_descriptor	access:public
cg_usb_device::found	usbutils.h	/^	struct usb_find_devices *found;$/;"	m	struct:cg_usb_device	typeref:struct:cg_usb_device::usb_find_devices	access:public
cg_usb_device::fwVersion	usbutils.h	/^	unsigned char fwVersion;	\/\/ ??$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::handle	usbutils.h	/^	libusb_device_handle *handle;$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::ident	usbutils.h	/^	enum sub_ident ident;$/;"	m	struct:cg_usb_device	typeref:enum:cg_usb_device::sub_ident	access:public
cg_usb_device::interfaceVersion	usbutils.h	/^	unsigned char interfaceVersion;	\/\/ ??$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::manuf_string	usbutils.h	/^	char *manuf_string;$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::mutex	usbutils.h	/^	pthread_mutex_t *mutex;$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::prod_string	usbutils.h	/^	char *prod_string;$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::serial_string	usbutils.h	/^	char *serial_string;$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::tt	usbutils.h	/^	bool tt; \/\/ Enable the transaction translator$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::usb11	usbutils.h	/^	bool usb11; \/\/ USB 1.1 flag for convenience$/;"	m	struct:cg_usb_device	access:public
cg_usb_device::usb_type	usbutils.h	/^	enum usb_types usb_type;$/;"	m	struct:cg_usb_device	typeref:enum:cg_usb_device::usb_types	access:public
cg_usb_device::usbver	usbutils.h	/^	uint16_t usbver;$/;"	m	struct:cg_usb_device	access:public
cg_usb_info	usbutils.h	/^struct cg_usb_info {$/;"	s
cg_usb_info::bus_number	usbutils.h	/^	uint8_t bus_number;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::clear_err_count	usbutils.h	/^	uint64_t clear_err_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::clear_fail_count	usbutils.h	/^	uint64_t clear_fail_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::continuous_ioerr_count	usbutils.h	/^	uint32_t continuous_ioerr_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::device_address	usbutils.h	/^	uint8_t device_address;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::devlock	usbutils.h	/^	cglock_t devlock;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::initialised	usbutils.h	/^	bool initialised;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::ioerr_count	usbutils.h	/^	uint32_t ioerr_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::last_nodev	usbutils.h	/^	struct timeval last_nodev;$/;"	m	struct:cg_usb_info	typeref:struct:cg_usb_info::timeval	access:public
cg_usb_info::last_pipe	usbutils.h	/^	time_t last_pipe;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::nodev	usbutils.h	/^	bool nodev;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::nodev_count	usbutils.h	/^	int nodev_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::pipe_count	usbutils.h	/^	uint64_t pipe_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::read_delay_count	usbutils.h	/^	uint64_t read_delay_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::retry_err_count	usbutils.h	/^	uint64_t retry_err_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::tmo_count	usbutils.h	/^	uint64_t tmo_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::total_read_delay	usbutils.h	/^	double total_read_delay;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::total_write_delay	usbutils.h	/^	double total_write_delay;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::usb_tmo	usbutils.h	/^	struct cg_usb_tmo usb_tmo[USB_TMOS];$/;"	m	struct:cg_usb_info	typeref:struct:cg_usb_info::cg_usb_tmo	access:public
cg_usb_info::usbstat	usbutils.h	/^	int usbstat;$/;"	m	struct:cg_usb_info	access:public
cg_usb_info::write_delay_count	usbutils.h	/^	uint64_t write_delay_count;$/;"	m	struct:cg_usb_info	access:public
cg_usb_stats	usbutils.c	/^struct cg_usb_stats {$/;"	s	file:
cg_usb_stats::details	usbutils.c	/^	struct cg_usb_stats_details *details;$/;"	m	struct:cg_usb_stats	typeref:struct:cg_usb_stats::cg_usb_stats_details	file:	access:public
cg_usb_stats::device_id	usbutils.c	/^	int device_id;$/;"	m	struct:cg_usb_stats	file:	access:public
cg_usb_stats::name	usbutils.c	/^	char *name;$/;"	m	struct:cg_usb_stats	file:	access:public
cg_usb_stats_details	usbutils.c	/^struct cg_usb_stats_details {$/;"	s	file:
cg_usb_stats_details::item	usbutils.c	/^	struct cg_usb_stats_item item[CMD_ERROR+1];$/;"	m	struct:cg_usb_stats_details	typeref:struct:cg_usb_stats_details::cg_usb_stats_item	file:	access:public
cg_usb_stats_details::modes	usbutils.c	/^	uint32_t modes;$/;"	m	struct:cg_usb_stats_details	file:	access:public
cg_usb_stats_details::seq	usbutils.c	/^	int seq;$/;"	m	struct:cg_usb_stats_details	file:	access:public
cg_usb_stats_item	usbutils.c	/^struct cg_usb_stats_item {$/;"	s	file:
cg_usb_stats_item::count	usbutils.c	/^	uint64_t count;$/;"	m	struct:cg_usb_stats_item	file:	access:public
cg_usb_stats_item::first	usbutils.c	/^	struct timeval first;$/;"	m	struct:cg_usb_stats_item	typeref:struct:cg_usb_stats_item::timeval	file:	access:public
cg_usb_stats_item::last	usbutils.c	/^	struct timeval last;$/;"	m	struct:cg_usb_stats_item	typeref:struct:cg_usb_stats_item::timeval	file:	access:public
cg_usb_stats_item::max_delay	usbutils.c	/^	double max_delay;$/;"	m	struct:cg_usb_stats_item	file:	access:public
cg_usb_stats_item::min_delay	usbutils.c	/^	double min_delay;$/;"	m	struct:cg_usb_stats_item	file:	access:public
cg_usb_stats_item::total_delay	usbutils.c	/^	double total_delay;$/;"	m	struct:cg_usb_stats_item	file:	access:public
cg_usb_tmo	usbutils.h	/^struct cg_usb_tmo {$/;"	s
cg_usb_tmo::count	usbutils.h	/^	uint32_t count;$/;"	m	struct:cg_usb_tmo	access:public
cg_usb_tmo::max_tmo	usbutils.h	/^	uint32_t max_tmo;$/;"	m	struct:cg_usb_tmo	access:public
cg_usb_tmo::min_tmo	usbutils.h	/^	uint32_t min_tmo;$/;"	m	struct:cg_usb_tmo	access:public
cg_usb_tmo::total_over	usbutils.h	/^	uint64_t total_over;$/;"	m	struct:cg_usb_tmo	access:public
cg_usb_tmo::total_tmo	usbutils.h	/^	uint64_t total_tmo;$/;"	m	struct:cg_usb_tmo	access:public
cg_wlock	miner.h	790;"	d
cg_wprintw	cgminer.c	2908;"	d	file:
cg_wunlock	miner.h	796;"	d
cglock	util.h	/^struct cglock {$/;"	s
cglock::mutex	util.h	/^	pthread_mutex_t mutex;$/;"	m	struct:cglock	access:public
cglock::rwlock	util.h	/^	pthread_rwlock_t rwlock;$/;"	m	struct:cglock	access:public
cglock_destroy	miner.h	/^static inline void cglock_destroy(cglock_t *lock)$/;"	f	signature:(cglock_t *lock)
cglock_init	miner.h	785;"	d
cglock_t	util.h	/^typedef struct cglock cglock_t;$/;"	t	typeref:struct:cglock
cglock_typ	miner.h	/^enum cglock_typ {$/;"	g
cgminer_id	miner.h	/^	int cgminer_id;$/;"	m	struct:cgpu_info	access:public
cgminer_id_count	cgminer.c	/^static int cgminer_id_count = 0;$/;"	v	file:
cgminer_path	cgminer.c	/^char *cgminer_path;$/;"	v
cgminer_pool_stats	miner.h	/^	struct cgminer_pool_stats cgminer_pool_stats;$/;"	m	struct:pool	typeref:struct:pool::cgminer_pool_stats	access:public
cgminer_pool_stats	miner.h	/^struct cgminer_pool_stats {$/;"	s
cgminer_pool_stats::bytes_received	miner.h	/^	uint64_t bytes_received;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::bytes_sent	miner.h	/^	uint64_t bytes_sent;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::canroll	miner.h	/^	bool canroll;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::getwork_attempts	miner.h	/^	uint32_t getwork_attempts;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::getwork_calls	miner.h	/^	uint32_t getwork_calls;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::getwork_wait	miner.h	/^	struct timeval getwork_wait;$/;"	m	struct:cgminer_pool_stats	typeref:struct:cgminer_pool_stats::timeval	access:public
cgminer_pool_stats::getwork_wait_max	miner.h	/^	struct timeval getwork_wait_max;$/;"	m	struct:cgminer_pool_stats	typeref:struct:cgminer_pool_stats::timeval	access:public
cgminer_pool_stats::getwork_wait_min	miner.h	/^	struct timeval getwork_wait_min;$/;"	m	struct:cgminer_pool_stats	typeref:struct:cgminer_pool_stats::timeval	access:public
cgminer_pool_stats::getwork_wait_rolling	miner.h	/^	double getwork_wait_rolling;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::hadexpire	miner.h	/^	bool hadexpire;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::hadrolltime	miner.h	/^	bool hadrolltime;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::last_diff	miner.h	/^	double last_diff;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::max_diff	miner.h	/^	double max_diff;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::max_diff_count	miner.h	/^	uint32_t max_diff_count;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::min_diff	miner.h	/^	double min_diff;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::min_diff_count	miner.h	/^	uint32_t min_diff_count;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::net_bytes_received	miner.h	/^	uint64_t net_bytes_received;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::net_bytes_sent	miner.h	/^	uint64_t net_bytes_sent;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::rolltime	miner.h	/^	uint32_t rolltime;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::times_received	miner.h	/^	uint64_t times_received;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_pool_stats::times_sent	miner.h	/^	uint64_t times_sent;$/;"	m	struct:cgminer_pool_stats	access:public
cgminer_stats	miner.h	/^	struct cgminer_stats cgminer_stats;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::cgminer_stats	access:public
cgminer_stats	miner.h	/^	struct cgminer_stats cgminer_stats;$/;"	m	struct:pool	typeref:struct:pool::cgminer_stats	access:public
cgminer_stats	miner.h	/^struct cgminer_stats {$/;"	s
cgminer_stats::getwork_calls	miner.h	/^	uint32_t getwork_calls;$/;"	m	struct:cgminer_stats	access:public
cgminer_stats::getwork_wait	miner.h	/^	struct timeval getwork_wait;$/;"	m	struct:cgminer_stats	typeref:struct:cgminer_stats::timeval	access:public
cgminer_stats::getwork_wait_max	miner.h	/^	struct timeval getwork_wait_max;$/;"	m	struct:cgminer_stats	typeref:struct:cgminer_stats::timeval	access:public
cgminer_stats::getwork_wait_min	miner.h	/^	struct timeval getwork_wait_min;$/;"	m	struct:cgminer_stats	typeref:struct:cgminer_stats::timeval	access:public
cgminer_usb_lock	usbutils.c	/^static bool cgminer_usb_lock(struct device_drv *drv, libusb_device *dev)$/;"	f	file:	signature:(struct device_drv *drv, libusb_device *dev)
cgminer_usb_lock_bd	usbutils.c	/^static bool cgminer_usb_lock_bd(struct device_drv *drv, uint8_t bus_number, uint8_t device_address)$/;"	f	file:	signature:(struct device_drv *drv, uint8_t bus_number, uint8_t device_address)
cgminer_usb_unlock	usbutils.c	/^static void cgminer_usb_unlock(struct device_drv *drv, libusb_device *dev)$/;"	f	file:	signature:(struct device_drv *drv, libusb_device *dev)
cgminer_usb_unlock_bd	usbutils.c	/^static void cgminer_usb_unlock_bd(struct device_drv *drv, uint8_t bus_number, uint8_t device_address)$/;"	f	file:	signature:(struct device_drv *drv, uint8_t bus_number, uint8_t device_address)
cgminer_work	driver-spondoolies-sp10.h	/^	struct work      *cgminer_work;$/;"	m	struct:__anon51	typeref:struct:__anon51::work	access:public
cgminer_work	driver-spondoolies-sp30.h	/^	struct work      *cgminer_work;$/;"	m	struct:__anon13	typeref:struct:__anon13::work	access:public
cgpu	A1-common.h	/^	struct cgpu_info *cgpu;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::cgpu_info	access:public
cgpu	driver-hashfast.h	/^	struct cgpu_info *cgpu;                     \/\/ Points back to parent structure$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::cgpu_info	access:public
cgpu	driver-knc.c	/^	struct cgpu_info *cgpu;$/;"	m	struct:knc_state	typeref:struct:knc_state::cgpu_info	file:	access:public
cgpu	driver-spondoolies-sp10.h	/^	void *cgpu;$/;"	m	struct:spond_adapter	access:public
cgpu	driver-spondoolies-sp30.h	/^	void *cgpu;$/;"	m	struct:spond_adapter	access:public
cgpu	miner.h	/^	struct cgpu_info *cgpu;$/;"	m	struct:thr_info	typeref:struct:thr_info::cgpu_info	access:public
cgpu_data	miner.h	/^	void *cgpu_data;$/;"	m	struct:thr_info	access:public
cgpu_info	miner.h	/^struct cgpu_info {$/;"	s
cgpu_info::accepted	miner.h	/^	int accepted;$/;"	m	struct:cgpu_info	access:public
cgpu_info::avg_wait_d	miner.h	/^	unsigned int avg_wait_d;$/;"	m	struct:cgpu_info	access:public
cgpu_info::avg_wait_f	miner.h	/^	double avg_wait_f;$/;"	m	struct:cgpu_info	access:public
cgpu_info::blacklisted	miner.h	/^	bool blacklisted;$/;"	m	struct:cgpu_info	access:public
cgpu_info::cgminer_id	miner.h	/^	int cgminer_id;$/;"	m	struct:cgpu_info	access:public
cgpu_info::cgminer_stats	miner.h	/^	struct cgminer_stats cgminer_stats;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::cgminer_stats	access:public
cgpu_info::clock	miner.h	/^	unsigned char clock;$/;"	m	struct:cgpu_info	access:public
cgpu_info::cutofftemp	miner.h	/^	int cutofftemp;$/;"	m	struct:cgpu_info	access:public
cgpu_info::dev_comms_error_count	miner.h	/^	int dev_comms_error_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::dev_dead_idle_600_count	miner.h	/^	int dev_dead_idle_600_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::dev_nostart_count	miner.h	/^	int dev_nostart_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::dev_over_heat_count	miner.h	/^	int dev_over_heat_count;	\/\/ It's a warning but worth knowing$/;"	m	struct:cgpu_info	access:public
cgpu_info::dev_sick_idle_60_count	miner.h	/^	int dev_sick_idle_60_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::dev_start_tv	miner.h	/^	struct timeval dev_start_tv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::timeval	access:public
cgpu_info::dev_thermal_cutoff_count	miner.h	/^	int dev_thermal_cutoff_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::dev_throttle_count	miner.h	/^	int dev_throttle_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::deven	miner.h	/^	enum dev_enable deven;$/;"	m	struct:cgpu_info	typeref:enum:cgpu_info::dev_enable	access:public
cgpu_info::device_data	miner.h	/^	void *device_data;$/;"	m	struct:cgpu_info	access:public
cgpu_info::device_fd	miner.h	/^	int device_fd;$/;"	m	struct:cgpu_info	access:public
cgpu_info::device_id	miner.h	/^	int device_id;$/;"	m	struct:cgpu_info	access:public
cgpu_info::device_last_not_well	miner.h	/^	time_t device_last_not_well;$/;"	m	struct:cgpu_info	access:public
cgpu_info::device_last_well	miner.h	/^	time_t device_last_well;$/;"	m	struct:cgpu_info	access:public
cgpu_info::device_mutex	miner.h	/^	pthread_mutex_t device_mutex;$/;"	m	struct:cgpu_info	access:public
cgpu_info::device_not_well_reason	miner.h	/^	enum dev_reason device_not_well_reason;$/;"	m	struct:cgpu_info	typeref:enum:cgpu_info::dev_reason	access:public
cgpu_info::device_path	miner.h	/^	char *device_path;$/;"	m	struct:cgpu_info	access:public
cgpu_info::diff1	miner.h	/^	int64_t diff1;$/;"	m	struct:cgpu_info	access:public
cgpu_info::diff_accepted	miner.h	/^	double diff_accepted;$/;"	m	struct:cgpu_info	access:public
cgpu_info::diff_rejected	miner.h	/^	double diff_rejected;$/;"	m	struct:cgpu_info	access:public
cgpu_info::direction	miner.h	/^	int direction;$/;"	m	struct:cgpu_info	access:public
cgpu_info::drv	miner.h	/^	struct device_drv *drv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::device_drv	access:public
cgpu_info::dup_data	miner.h	/^	void *dup_data;$/;"	m	struct:cgpu_info	access:public
cgpu_info::flash_led	miner.h	/^	bool flash_led;$/;"	m	struct:cgpu_info	access:public
cgpu_info::fpgaid	miner.h	/^	char fpgaid;$/;"	m	struct:cgpu_info	access:public
cgpu_info::hidiff	miner.h	/^	int hidiff;$/;"	m	struct:cgpu_info	access:public
cgpu_info::hw_errors	miner.h	/^	int hw_errors;$/;"	m	struct:cgpu_info	access:public
cgpu_info::init	miner.h	/^	char init[40];$/;"	m	struct:cgpu_info	access:public
cgpu_info::kname	miner.h	/^	const char *kname;$/;"	m	struct:cgpu_info	access:public
cgpu_info::last_device_valid_work	miner.h	/^	time_t last_device_valid_work;$/;"	m	struct:cgpu_info	access:public
cgpu_info::last_message_tv	miner.h	/^	struct timeval last_message_tv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::timeval	access:public
cgpu_info::last_nonce	miner.h	/^	uint32_t last_nonce;$/;"	m	struct:cgpu_info	access:public
cgpu_info::last_share_diff	miner.h	/^	double last_share_diff;$/;"	m	struct:cgpu_info	access:public
cgpu_info::last_share_pool	miner.h	/^	int last_share_pool;$/;"	m	struct:cgpu_info	access:public
cgpu_info::last_share_pool_time	miner.h	/^	time_t last_share_pool_time;$/;"	m	struct:cgpu_info	access:public
cgpu_info::lodiff	miner.h	/^	int lodiff;$/;"	m	struct:cgpu_info	access:public
cgpu_info::max_hashes	miner.h	/^	int64_t max_hashes;$/;"	m	struct:cgpu_info	access:public
cgpu_info::modminer_mutex	miner.h	/^	pthread_mutex_t *modminer_mutex;$/;"	m	struct:cgpu_info	access:public
cgpu_info::name	miner.h	/^	char *name;$/;"	m	struct:cgpu_info	access:public
cgpu_info::new_work	miner.h	/^	bool new_work;$/;"	m	struct:cgpu_info	access:public
cgpu_info::nonce_range	miner.h	/^	bool nonce_range;$/;"	m	struct:cgpu_info	access:public
cgpu_info::nonces	miner.h	/^	uint32_t nonces;$/;"	m	struct:cgpu_info	access:public
cgpu_info::polling	miner.h	/^	bool polling;$/;"	m	struct:cgpu_info	access:public
cgpu_info::qlock	miner.h	/^	pthread_rwlock_t qlock;$/;"	m	struct:cgpu_info	access:public
cgpu_info::queued	miner.h	/^	int queued;$/;"	m	struct:cgpu_info	access:public
cgpu_info::queued_count	miner.h	/^	unsigned int queued_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::queued_work	miner.h	/^	struct work *queued_work;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::work	access:public
cgpu_info::rejected	miner.h	/^	int rejected;$/;"	m	struct:cgpu_info	access:public
cgpu_info::results	miner.h	/^	int results;$/;"	m	struct:cgpu_info	access:public
cgpu_info::rolling	miner.h	/^	double rolling;$/;"	m	struct:cgpu_info	access:public
cgpu_info::rolling1	miner.h	/^	double rolling1;$/;"	m	struct:cgpu_info	access:public
cgpu_info::rolling15	miner.h	/^	double rolling15;$/;"	m	struct:cgpu_info	access:public
cgpu_info::rolling5	miner.h	/^	double rolling5;$/;"	m	struct:cgpu_info	access:public
cgpu_info::shutdown	miner.h	/^	bool shutdown;$/;"	m	struct:cgpu_info	access:public
cgpu_info::sleep_ms	miner.h	/^	unsigned int sleep_ms;$/;"	m	struct:cgpu_info	access:public
cgpu_info::status	miner.h	/^	enum alive status;$/;"	m	struct:cgpu_info	typeref:enum:cgpu_info::alive	access:public
cgpu_info::temp	miner.h	/^	double temp;$/;"	m	struct:cgpu_info	access:public
cgpu_info::thr	miner.h	/^	struct thr_info **thr;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::thr_info	access:public
cgpu_info::thread_fail_init_count	miner.h	/^	int thread_fail_init_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::thread_fail_queue_count	miner.h	/^	int thread_fail_queue_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::thread_zero_hash_count	miner.h	/^	int thread_zero_hash_count;$/;"	m	struct:cgpu_info	access:public
cgpu_info::threads	miner.h	/^	int threads;$/;"	m	struct:cgpu_info	access:public
cgpu_info::total_mhashes	miner.h	/^	double total_mhashes;$/;"	m	struct:cgpu_info	access:public
cgpu_info::unique_id	miner.h	/^	char *unique_id;$/;"	m	struct:cgpu_info	access:public
cgpu_info::unqueued_work	miner.h	/^	struct work *unqueued_work;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::work	access:public
cgpu_info::usbdev	miner.h	/^	struct cg_usb_device *usbdev;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::cg_usb_device	access:public
cgpu_info::usbinfo	miner.h	/^	struct cg_usb_info usbinfo;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::cg_usb_info	access:public
cgpu_info::utility	miner.h	/^	double utility;$/;"	m	struct:cgpu_info	access:public
cgpu_info::wait_ms	miner.h	/^	unsigned int wait_ms;$/;"	m	struct:cgpu_info	access:public
cgpu_info::work_array	miner.h	/^	int work_array;$/;"	m	struct:cgpu_info	access:public
cgpu_info::work_start_tv	miner.h	/^	struct timeval work_start_tv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::timeval	access:public
cgpu_info::works	miner.h	/^	struct work **works;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::work	access:public
cgpu_runtime	cgminer.c	/^double cgpu_runtime(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
cgpu_runtime	miner.h	/^extern double cgpu_runtime(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
cgsem	usbutils.c	/^	cgsem_t cgsem;$/;"	m	struct:usb_transfer	file:	access:public
cgsem	util.c	/^	cgsem_t cgsem;$/;"	m	struct:cg_completion	file:	access:public
cgsem	util.h	/^struct cgsem {$/;"	s
cgsem::pipefd	util.h	/^	int pipefd[2];$/;"	m	struct:cgsem	access:public
cgsem_destroy	util.c	/^void cgsem_destroy(cgsem_t *cgsem)$/;"	f	signature:(cgsem_t *cgsem)
cgsem_destroy	util.h	/^void cgsem_destroy(cgsem_t *cgsem);$/;"	p	signature:(cgsem_t *cgsem)
cgsem_init	util.h	168;"	d
cgsem_mswait	util.h	171;"	d
cgsem_post	util.h	169;"	d
cgsem_reset	util.c	/^void cgsem_reset(cgsem_t *cgsem)$/;"	f	signature:(cgsem_t *cgsem)
cgsem_reset	util.h	/^void cgsem_reset(cgsem_t *cgsem);$/;"	p	signature:(cgsem_t *cgsem)
cgsem_t	util.h	/^typedef sem_t cgsem_t;$/;"	t
cgsem_t	util.h	/^typedef struct cgsem cgsem_t;$/;"	t	typeref:struct:cgsem
cgsem_wait	util.h	170;"	d
cgsent	driver-avalon.h	/^	cgtimer_t cgsent;$/;"	m	struct:avalon_info	access:public
cgsleep_ms	util.c	/^void cgsleep_ms(int ms)$/;"	f	signature:(int ms)
cgsleep_ms	util.h	/^void cgsleep_ms(int ms);$/;"	p	signature:(int ms)
cgsleep_ms_r	util.c	/^void cgsleep_ms_r(cgtimer_t *ts_start, int ms)$/;"	f	signature:(cgtimer_t *ts_start, int ms)
cgsleep_ms_r	util.h	/^void cgsleep_ms_r(cgtimer_t *ts_start, int ms);$/;"	p	signature:(cgtimer_t *ts_start, int ms)
cgsleep_prepare_r	util.h	134;"	d
cgsleep_spec	util.c	/^static void cgsleep_spec(struct timespec *ts_diff, const struct timespec *ts_start)$/;"	f	file:	signature:(struct timespec *ts_diff, const struct timespec *ts_start)
cgsleep_us	util.c	/^void cgsleep_us(int64_t us)$/;"	f	signature:(int64_t us)
cgsleep_us	util.h	/^void cgsleep_us(int64_t us);$/;"	p	signature:(int64_t us)
cgsleep_us_r	util.c	/^void cgsleep_us_r(cgtimer_t *ts_start, int64_t us)$/;"	f	signature:(cgtimer_t *ts_start, int64_t us)
cgsleep_us_r	util.h	/^void cgsleep_us_r(cgtimer_t *ts_start, int64_t us);$/;"	p	signature:(cgtimer_t *ts_start, int64_t us)
cgtime	driver-antrouter.h	19;"	d
cgtime	util.c	/^void cgtime(struct timeval *tv)$/;"	f	signature:(struct timeval *tv)
cgtime	util.h	/^void cgtime(struct timeval *tv);$/;"	p	signature:(struct timeval *tv)
cgtimer_sub	util.c	/^void cgtimer_sub(cgtimer_t *a, cgtimer_t *b, cgtimer_t *res)$/;"	f	signature:(cgtimer_t *a, cgtimer_t *b, cgtimer_t *res)
cgtimer_sub	util.h	/^void cgtimer_sub(cgtimer_t *a, cgtimer_t *b, cgtimer_t *res);$/;"	p	signature:(cgtimer_t *a, cgtimer_t *b, cgtimer_t *res)
cgtimer_t	util.h	/^typedef LARGE_INTEGER cgtimer_t;$/;"	t
cgtimer_t	util.h	/^typedef struct timespec cgtimer_t;$/;"	t	typeref:struct:timespec
cgtimer_time	util.c	/^void cgtimer_time(cgtimer_t *ts_start)$/;"	f	signature:(cgtimer_t *ts_start)
cgtimer_time	util.h	/^void cgtimer_time(cgtimer_t *ts_start);$/;"	p	signature:(cgtimer_t *ts_start)
cgtimer_to_ms	util.c	/^int cgtimer_to_ms(cgtimer_t *cgt)$/;"	f	signature:(cgtimer_t *cgt)
cgtimer_to_ms	util.h	/^int cgtimer_to_ms(cgtimer_t *cgt);$/;"	p	signature:(cgtimer_t *cgt)
cgusb_check_init	usbutils.c	/^static void cgusb_check_init()$/;"	f	file:
cgusb_fd_lock	usbutils.c	/^static cglock_t cgusb_fd_lock;$/;"	v	file:
cgusb_lock	usbutils.c	/^static pthread_mutex_t cgusb_lock;$/;"	v	file:
cgusbres_lock	usbutils.c	/^static pthread_mutex_t cgusbres_lock;$/;"	v	file:
ch	miner.php	/^		$ch = substr($str, $i, 1);$/;"	v
ch	miner.php	/^	$ch = substr($str, $i, 1);$/;"	v
chCRCHTalbe	driver-bitmain.c	/^const uint8_t chCRCHTalbe[] =                                 \/\/ CRC high byte table$/;"	v
chCRCLTalbe	driver-bitmain.c	/^const uint8_t chCRCLTalbe[] =                                 \/\/ CRC low byte table$/;"	v
ch_lock	cgminer.c	/^cglock_t ch_lock;$/;"	v
chain	A1-common.h	/^	struct A1_chain *chain[MAX_CHAINS_PER_BOARD];$/;"	m	struct:A1_board	typeref:struct:A1_board::A1_chain	access:public
chain_asic_exist	driver-bitmain.h	/^	uint32_t chain_asic_exist[BITMAIN_MAX_CHAIN_NUM*8];$/;"	m	struct:bitmain_info	access:public
chain_asic_exist	driver-bitmain.h	/^	uint32_t chain_asic_exist[BITMAIN_MAX_CHAIN_NUM*8];$/;"	m	struct:bitmain_rxstatus_data	access:public
chain_asic_num	driver-bitmain.h	/^	int chain_asic_num[BITMAIN_MAX_CHAIN_NUM];$/;"	m	struct:bitmain_info	access:public
chain_asic_num	driver-bitmain.h	/^	uint8_t chain_asic_num[BITMAIN_MAX_CHAIN_NUM];$/;"	m	struct:bitmain_rxstatus_data	access:public
chain_asic_status	driver-bitmain.h	/^	uint32_t chain_asic_status[BITMAIN_MAX_CHAIN_NUM*8];$/;"	m	struct:bitmain_info	access:public
chain_asic_status	driver-bitmain.h	/^	uint32_t chain_asic_status[BITMAIN_MAX_CHAIN_NUM*8];$/;"	m	struct:bitmain_rxstatus_data	access:public
chain_asic_status_t	driver-bitmain.h	/^	char chain_asic_status_t[BITMAIN_MAX_CHAIN_NUM][320];$/;"	m	struct:bitmain_info	access:public
chain_check_time	driver-bitmain.h	/^	uint8_t chain_check_time;$/;"	m	struct:bitmain_txconfig_token	access:public
chain_check_time_eft	driver-bitmain.h	/^	uint8_t chain_check_time_eft :1;$/;"	m	struct:bitmain_txconfig_token	access:public
chain_detect	driver-SPI-bitmine-A1.c	/^static int chain_detect(struct A1_chain *a1)$/;"	f	file:	signature:(struct A1_chain *a1)
chain_id	A1-board-selector-CCR.c	/^	uint8_t chain_id;$/;"	m	struct:chain_mapping	file:	access:public
chain_id	A1-common.h	/^	int chain_id;$/;"	m	struct:A1_chain	access:public
chain_mapping	A1-board-selector-CCR.c	/^static const struct chain_mapping chain_mapping[CCR_MAX_CHAINS] = {$/;"	v	typeref:struct:chain_mapping	file:
chain_mapping	A1-board-selector-CCR.c	/^struct chain_mapping {$/;"	s	file:
chain_mapping::U1	A1-board-selector-CCR.c	/^	uint8_t U1;$/;"	m	struct:chain_mapping	file:	access:public
chain_mapping::U3p0	A1-board-selector-CCR.c	/^	uint8_t U3p0;$/;"	m	struct:chain_mapping	file:	access:public
chain_mapping::U3p1	A1-board-selector-CCR.c	/^	uint8_t U3p1;$/;"	m	struct:chain_mapping	file:	access:public
chain_mapping::chain_id	A1-board-selector-CCR.c	/^	uint8_t chain_id;$/;"	m	struct:chain_mapping	file:	access:public
chain_mask	A1-board-selector-CCD.c	/^uint8_t chain_mask = 0xff;$/;"	v
chain_num	driver-bitmain.h	/^	int chain_num;$/;"	m	struct:bitmain_info	access:public
chain_num	driver-bitmain.h	/^	uint8_t chain_num;$/;"	m	struct:bitmain_rxstatus_data	access:public
chain_num	driver-bitmain.h	/^	uint8_t chain_num;$/;"	m	struct:bitmain_txconfig_token	access:public
chain_skew	A1-common.h	/^	int chain_skew;$/;"	m	struct:A1_chain	access:public
change_logwinsize	cgminer.c	/^static inline void change_logwinsize(void)$/;"	f	file:	signature:(void)
changerefresh	miner.php	/^ if ($ignorerefresh == false && $changerefresh == true)$/;"	v
changerefresh	miner.php	/^# $changerefresh = true\/false show buttons to change the value$/;"	v
changerefresh	miner.php	/^$changerefresh = true;$/;"	v
changing	driver-minion.c	/^	bool changing[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
channel	driver-knc.c	/^	int channel;$/;"	m	struct:knc_die	file:	access:public
check	driver-antrouter.c	/^	uint8_t check;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
check	driver-bmsc.c	/^	uint8_t check;$/;"	m	struct:BMSC_WORK	file:	access:public
check	driver-icarus.c	/^	uint8_t check;$/;"	m	struct:ICARUS_WORK	file:	access:public
check_asicnum	miner.h	/^extern int check_asicnum(int asic_num, unsigned char nonce);$/;"	p	signature:(int asic_num, unsigned char nonce)
check_asicnum	util.c	/^int check_asicnum(int asic_num, unsigned char nonce)$/;"	f	signature:(int asic_num, unsigned char nonce)
check_chip	driver-SPI-bitmine-A1.c	/^static bool check_chip(struct A1_chain *a1, int i)$/;"	f	file:	signature:(struct A1_chain *a1, int i)
check_chip_pll_lock	driver-SPI-bitmine-A1.c	/^static bool check_chip_pll_lock(struct A1_chain *a1, int chip_id, uint8_t *wr)$/;"	f	file:	signature:(struct A1_chain *a1, int chip_id, uint8_t *wr)
check_connect	api.c	/^static bool check_connect(struct sockaddr_storage *cli, char **connectaddr, char *group)$/;"	f	file:	signature:(struct sockaddr_storage *cli, char **connectaddr, char *group)
check_disabled_chips	driver-SPI-bitmine-A1.c	/^void check_disabled_chips(struct A1_chain *a1)$/;"	f	signature:(struct A1_chain *a1)
check_extranonce_option	util.c	/^void check_extranonce_option(struct pool *pool, char * url)$/;"	f	signature:(struct pool *pool, char * url)
check_extranonce_option	util.h	/^void check_extranonce_option(struct pool *pool, char * url);$/;"	p	signature:(struct pool *pool, char * url)
check_for_results	driver-drillbit.c	/^static int check_for_results(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
check_last_nonce	driver-minion.c	/^static void check_last_nonce(struct cgpu_info *minioncgpu)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu)
check_opt	ccan/opt/opt.c	/^static void check_opt(const struct opt_table *entry)$/;"	f	file:	signature:(const struct opt_table *entry)
check_temperature	driver-modminer.c	/^static void check_temperature(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
check_usb_vfs	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int check_usb_vfs(const char *dirname)$/;"	f	file:	signature:(const char *dirname)
check_winsizes	cgminer.c	/^static void check_winsizes(void)$/;"	f	file:	signature:(void)
checkapi	miner.php	/^ if ($readonly === false && $checkapi === true)$/;"	v
checkcommand	api.c	/^static void checkcommand(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, char group)
checkcommand	api.c	/^static void checkcommand(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, char group);$/;"	p	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, char group)
checked	noncedup.c	/^	uint64_t checked;$/;"	m	struct:dupdata	file:	access:public
checklastshare	miner.php	/^$checklastshare = true;$/;"	v
checklogin	miner.php	/^function checklogin()$/;"	f
chip	driver-bab.c	/^	int chip;$/;"	m	struct:ritem	file:	access:public
chip	driver-blockerupter.h	/^	uint8_t chip;$/;"	m	struct:blockerupter_response	access:public
chip	driver-icarus.c	/^	ROCKMINER_CHIP_INFO chip[MAX_CHIP_NUM];$/;"	m	struct:rockminer_device_info	file:	access:public
chip	driver-minion.c	/^	int chip;$/;"	m	struct:res_item	file:	access:public
chip	driver-minion.c	/^	uint8_t chip;$/;"	m	struct:task_item	file:	access:public
chip_address	driver-bitmain.h	/^	uint8_t chip_address;$/;"	m	struct:bitmain_rxstatus_token	access:public
chip_address	driver-bitmain.h	/^	uint8_t chip_address;$/;"	m	struct:bitmain_txconfig_token	access:public
chip_address	hf_protocol.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_header	access:public
chip_address	hf_protocol.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_pll_config	access:public
chip_address	hf_protocol_be.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_header	access:public
chip_address	hf_protocol_be.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_pll_config	access:public
chip_bad	driver-bab.c	/^	uint64_t chip_bad[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
chip_bad	driver-minion.c	/^	uint64_t chip_bad[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
chip_bank	driver-bab.c	/^	uint8_t chip_bank[BAB_MAXCHIPS+1];$/;"	m	struct:bab_info	file:	access:public
chip_chk	driver-minion.c	/^	struct timeval chip_chk;$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
chip_conf	driver-bab.c	/^	uint8_t chip_conf[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
chip_config_eft	driver-bitmain.h	/^	uint8_t chip_config_eft      :1;$/;"	m	struct:bitmain_txconfig_token	access:public
chip_cont_bad	driver-bab.c	/^	uint64_t chip_cont_bad[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
chip_core_act	driver-minion.c	/^	uint32_t chip_core_act[MINION_CORE_REPS][MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
chip_core_ena	driver-minion.c	/^	uint32_t chip_core_ena[MINION_CORE_REPS][MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
chip_dup	driver-minion.c	/^	uint64_t chip_dup[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
chip_err	driver-minion.c	/^	uint64_t chip_err[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
chip_fast	driver-bab.c	/^	uint8_t chip_fast[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
chip_good	driver-bab.c	/^	uint64_t chip_good[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
chip_good	driver-minion.c	/^	uint64_t chip_good[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
chip_id	driver-drillbit.c	/^	uint16_t chip_id;$/;"	m	struct:__anon1	file:	access:public
chip_id	driver-drillbit.c	/^	uint16_t chip_id;$/;"	m	struct:__anon2	file:	access:public
chip_id	driver-drillbit.c	/^	uint16_t chip_id;$/;"	m	struct:__anon4	file:	access:public
chip_id	driver-drillbit.h	/^  uint16_t chip_id;$/;"	m	struct:drillbit_chip_info	access:public
chip_input	driver-bab.c	/^	struct bab_work_send chip_input;$/;"	m	struct:witem	typeref:struct:witem::bab_work_send	file:	access:public
chip_max	driver-icarus.c	/^	unsigned char chip_max;$/;"	m	struct:rockminer_device_info	file:	access:public
chip_max_bad	driver-bab.c	/^	uint64_t chip_max_bad[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
chip_miso	driver-bab.c	/^	uint64_t chip_miso[BAB_MAXCHIPS]; \/\/ msio errors$/;"	m	struct:bab_info	file:	access:public
chip_ncore	driver-bab.c	/^	uint64_t chip_ncore[BAB_MAXCHIPS][BAB_X_COORD][BAB_Y_COORD];$/;"	m	struct:bab_info	file:	access:public
chip_no	driver-icarus.c	/^	int chip_no;$/;"	m	struct:nonce_data	file:	access:public
chip_nonces	driver-bab.c	/^	uint64_t chip_nonces[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
chip_nonces	driver-minion.c	/^	uint64_t chip_nonces[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
chip_nononces	driver-minion.c	/^	uint64_t chip_nononces[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
chip_num	driver-avalon.h	/^	uint8_t chip_num;$/;"	m	struct:avalon_result	access:public
chip_off	driver-bab.c	/^	uint32_t chip_off[BAB_MAXCHIPS+1];$/;"	m	struct:sitem	file:	access:public
chip_pin	driver-minion.c	/^	int chip_pin[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
chip_prev	driver-bab.c	/^	struct bab_work_reply chip_prev[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::bab_work_reply	file:	access:public
chip_report	driver-minion.c	/^static void chip_report(struct cgpu_info *minioncgpu)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu)
chip_results	driver-bab.c	/^	struct bab_work_reply chip_results[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::bab_work_reply	file:	access:public
chip_rpt	driver-minion.c	/^	struct timeval chip_rpt;$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
chip_speed_names	driver-bab.c	/^static char *chip_speed_names[BAB_CHIP_SPEEDS] =$/;"	v	file:
chip_speed_ranges	driver-bab.c	/^static double chip_speed_ranges[BAB_CHIP_SPEEDS - 1] =$/;"	v	file:
chip_spie	driver-bab.c	/^	uint64_t chip_spie[BAB_MAXCHIPS]; \/\/ spi errors$/;"	m	struct:bab_info	file:	access:public
chip_spis	driver-bab.c	/^	uint32_t chip_spis[BAB_MAXCHIPS+1];$/;"	m	struct:bab_info	file:	access:public
chip_status	driver-minion.c	/^	struct minion_status chip_status[MINION_CHIPS];$/;"	m	struct:minion_info	typeref:struct:minion_info::minion_status	file:	access:public
chip_status_eft	driver-bitmain.h	/^	uint8_t chip_status_eft      :1;$/;"	m	struct:bitmain_rxstatus_token	access:public
chip_value_eft	driver-bitmain.h	/^	uint8_t chip_value_eft       :1;$/;"	m	struct:bitmain_rxstatus_data	access:public
chip_work	driver-bab.c	/^	K_STORE *chip_work[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
chipcount	driver-klondike.c	/^	uint8_t chipcount;$/;"	m	struct:klondike_status	file:	access:public
chipid	driver-minion.c	/^	uint8_t chipid;$/;"	m	struct:minion_header	file:	access:public
chipid	driver-minion.c	/^	uint8_t chipid[MINION_CHIPS]; \/\/ Chip Number$/;"	m	struct:minion_info	file:	access:public
chips	A1-common.h	/^	struct A1_chip *chips;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::A1_chip	access:public
chips	driver-bab.c	/^	int chips;$/;"	m	struct:bab_info	file:	access:public
chips	driver-bflsc.h	/^	char *chips;$/;"	m	struct:bflsc_dev	access:public
chips	driver-bitfury.h	/^	int chips;$/;"	m	struct:bitfury_info	access:public
chips	driver-drillbit.h	/^  struct drillbit_chip_info *chips;$/;"	m	struct:drillbit_info	typeref:struct:drillbit_info::drillbit_chip_info	access:public
chips	driver-minion.c	/^	int chips;$/;"	m	struct:minion_info	file:	access:public
chips_per_bank	driver-bab.c	/^	int chips_per_bank[BAB_MAXBANKS+1];$/;"	m	struct:bab_info	file:	access:public
chipstats	driver-klondike.c	/^	uint32_t *chipstats;$/;"	m	struct:device_info	file:	access:public
chipwork	driver-minion.c	/^	uint32_t chipwork;$/;"	m	struct:minion_status	file:	access:public
ci_setup	driver-bab.c	/^	bool ci_setup;$/;"	m	struct:witem	file:	access:public
claim_interface	compat/libusb-1.0/libusb/libusbi.h	/^	int (*claim_interface)(struct libusb_device_handle *handle, int interface_number);$/;"	m	struct:usbi_os_backend	access:public
claim_interface	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*claim_interface)(struct libusb_device_handle *dev_handle, int iface);$/;"	m	struct:windows_usb_api_backend	access:public
claimed_interfaces	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned long claimed_interfaces;$/;"	m	struct:libusb_device_handle	access:public
class	miner.php	/^						$class = $hiclass;$/;"	v
class	miner.php	/^						$class = $loclass;$/;"	v
class	miner.php	/^						$class = $warnclass;$/;"	v
class	miner.php	/^					$class = $errorclass;$/;"	v
class	miner.php	/^					$class = $hiclass;$/;"	v
class	miner.php	/^					$class = $loclass;$/;"	v
class	miner.php	/^					$class = $warnclass;$/;"	v
class	miner.php	/^				$class = $errorclass;$/;"	v
class	miner.php	/^				$class = $warnclass;$/;"	v
class	miner.php	/^				$class = classlastshare($when, $alldata, $warnclass, $errorclass);$/;"	v
class	miner.php	/^			$class = $errorclass;$/;"	v
class	miner.php	/^			$class = $warnclass;$/;"	v
class	miner.php	/^	$class = " class=$class";$/;"	v
class	miner.php	/^	$class = $c2class;$/;"	v
class	miner.php	/^	$class = $errorclass;$/;"	v
class	miner.php	/^	$class = $totclass;$/;"	v
class	miner.php	/^	$class = classlastshare($when, $alldata, $lstclass, $lstclass);$/;"	v
class	miner.php	/^ $class = '';$/;"	v
class_guid	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const GUID *class_guid;  \/\/ The Class GUID (for fallback in case the driver name cannot be read)$/;"	m	struct:windows_usb_api_backend	access:public
classlastshare	miner.php	/^function classlastshare($when, $alldata, $warnclass, $errorclass)$/;"	f
clean	miner.h	/^	bool clean;$/;"	m	struct:stratum_work	access:public
clean_up	cgminer.c	/^static void clean_up(bool restarting)$/;"	f	file:	signature:(bool restarting)
clean_up	cgminer.c	/^static void clean_up(bool restarting);$/;"	p	file:	signature:(bool restarting)
clean_work	cgminer.c	/^void clean_work(struct work *work)$/;"	f	signature:(struct work *work)
clean_work	miner.h	/^extern void clean_work(struct work *work);$/;"	p	signature:(struct work *work)
cleanup_older	driver-bab.c	/^static void cleanup_older(struct cgpu_info *babcgpu, int chip, K_ITEM *witem)$/;"	f	file:	signature:(struct cgpu_info *babcgpu, int chip, K_ITEM *witem)
cleanup_older	driver-minion.c	/^static void cleanup_older(struct cgpu_info *minioncgpu, int chip, K_ITEM *item, bool no_nonce)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, int chip, K_ITEM *item, bool no_nonce)
clear_configuration	compat/libusb-1.0/libusb/descriptor.c	/^static void clear_configuration(struct libusb_config_descriptor *config)$/;"	f	file:	signature:(struct libusb_config_descriptor *config)
clear_endpoint	compat/libusb-1.0/libusb/descriptor.c	/^static void clear_endpoint(struct libusb_endpoint_descriptor *endpoint)$/;"	f	file:	signature:(struct libusb_endpoint_descriptor *endpoint)
clear_err_count	usbutils.h	/^	uint64_t clear_err_count;$/;"	m	struct:cg_usb_info	access:public
clear_fail_count	usbutils.h	/^	uint64_t clear_fail_count;$/;"	m	struct:cg_usb_info	access:public
clear_halt	compat/libusb-1.0/libusb/libusbi.h	/^	int (*clear_halt)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
clear_halt	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*clear_halt)(struct libusb_device_handle *dev_handle, unsigned char endpoint);$/;"	m	struct:windows_usb_api_backend	access:public
clear_interface	compat/libusb-1.0/libusb/descriptor.c	/^static void clear_interface(struct libusb_interface *usb_interface)$/;"	f	file:	signature:(struct libusb_interface *usb_interface)
clear_logwin	cgminer.c	/^void clear_logwin(void)$/;"	f	signature:(void)
clear_logwin	miner.h	/^extern void clear_logwin(void);$/;"	p	signature:(void)
clear_pool_work	cgminer.c	/^void clear_pool_work(struct pool *pool)$/;"	f	signature:(struct pool *pool)
clear_pool_work	miner.h	/^extern void clear_pool_work(struct pool *pool);$/;"	p	signature:(struct pool *pool)
clear_sock	util.c	/^static void clear_sock(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
clear_sockbuf	util.c	/^static void clear_sockbuf(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
clear_stratum_shares	cgminer.c	/^void clear_stratum_shares(struct pool *pool)$/;"	f	signature:(struct pool *pool)
clear_stratum_shares	miner.h	/^extern void clear_stratum_shares(struct pool *pool);$/;"	p	signature:(struct pool *pool)
clear_transfer_priv	compat/libusb-1.0/libusb/libusbi.h	/^	void (*clear_transfer_priv)(struct usbi_transfer *itransfer);$/;"	m	struct:usbi_os_backend	access:public
clock	driver-blockerupter.h	/^	int clock;$/;"	m	struct:blockerupter_info	access:public
clock	miner.h	/^	unsigned char clock;$/;"	m	struct:cgpu_info	access:public
clock_diagnostic	hf_protocol.h	/^	uint32_t clock_diagnostic:1;                \/\/ Never set this$/;"	m	struct:hf_config_data	access:public
clock_diagnostic	hf_protocol_be.h	/^	uint32_t clock_diagnostic:1;                \/\/ Never set this$/;"	m	struct:hf_config_data	access:public
clock_div2	driver-drillbit.c	/^	uint8_t clock_div2;	 \/\/ Apply the \/2 clock divider (both internal and external), where available$/;"	m	struct:__anon3	file:	access:public
clock_div2	driver-drillbit.c	/^	uint8_t clock_div2;	\/\/ Apply the \/2 clock divider (both internal and external)$/;"	m	struct:__anon5	file:	access:public
clock_freq	driver-drillbit.c	/^	uint16_t clock_freq; \/\/ Clock frequency in MHz (or clock level 30-48 for Bitfury internal clock level)$/;"	m	struct:__anon3	file:	access:public
clock_gettime	compat/libusb-1.0/libusb/libusbi.h	/^	int (*clock_gettime)(int clkid, struct timespec *tp);$/;"	m	struct:usbi_os_backend	access:public
clock_monotonic	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static clock_serv_t clock_monotonic;$/;"	v	file:
clock_next	driver-bflsc.h	/^	int clock_next;$/;"	m	struct:bflsc_info	access:public
clock_next_stat	driver-bflsc.h	/^	bool clock_next_stat;$/;"	m	struct:bflsc_info	access:public
clock_offset	driver-hashfast.h	/^	int clock_offset;$/;"	m	struct:hashfast_info	access:public
clock_realtime	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static clock_serv_t clock_realtime;$/;"	v	file:
clocknodev	driver-modminer.c	/^static const char *clocknodev = "clock failed - no device";$/;"	v	file:
clockoldwork	driver-modminer.c	/^static const char *clockoldwork = "clock already changed for this work";$/;"	v	file:
clockreplyfail	driver-modminer.c	/^static const char *clockreplyfail = "clock reply failed";$/;"	v	file:
clocks	driver-bitfury.h	/^	uint8_t clocks; \/\/ There are two but we set them equal$/;"	m	struct:bitfury_info	access:public
clocksetfail	driver-modminer.c	/^static const char *clocksetfail = "clock set command failed";$/;"	v	file:
clocktoohi	driver-modminer.c	/^static const char *clocktoohi = "clock too high";$/;"	v	file:
clocktoolow	driver-modminer.c	/^static const char *clocktoolow = "clock too low";$/;"	v	file:
clone	miner.h	/^	bool		clone;$/;"	m	struct:work	access:public
clone_available	cgminer.c	/^static bool clone_available(void)$/;"	f	file:	signature:(void)
clone_queued_work_byid	cgminer.c	/^struct work *clone_queued_work_byid(struct cgpu_info *cgpu, uint32_t id)$/;"	f	signature:(struct cgpu_info *cgpu, uint32_t id)
clone_queued_work_byid	miner.h	/^extern struct work *clone_queued_work_byid(struct cgpu_info *cgpu, uint32_t id);$/;"	p	signature:(struct cgpu_info *cgpu, uint32_t id)
clone_queued_work_bymidstate	cgminer.c	/^struct work *clone_queued_work_bymidstate(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)$/;"	f	signature:(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)
clone_queued_work_bymidstate	miner.h	/^extern struct work *clone_queued_work_bymidstate(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen);$/;"	p	signature:(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)
clone_work	cgminer.c	/^static struct work *clone_work(struct work *work)$/;"	f	file:	signature:(struct work *work)
clone_work_by_id	driver-cointerra.c	/^static struct work *clone_work_by_id(struct cgpu_info *cgpu, uint16_t id)$/;"	f	file:	signature:(struct cgpu_info *cgpu, uint16_t id)
cloned	miner.h	/^	bool		cloned;$/;"	m	struct:work	access:public
close	api.c	/^	bool close;$/;"	m	struct:io_data	file:	access:public
close	compat/libusb-1.0/libusb/libusbi.h	/^	void (*close)(struct libusb_device_handle *handle);$/;"	m	struct:usbi_os_backend	access:public
close	compat/libusb-1.0/libusb/os/windows_usb.h	/^	void (*close)(struct libusb_device_handle *dev_handle);$/;"	m	struct:windows_usb_api_backend	access:public
closeAll	API.java	/^	private void closeAll() throws Exception$/;"	m	class:API	file:	access:private	signature:()
cmd	driver-antrouter.c	/^	uint8_t cmd;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
cmd	driver-bmsc.c	/^	uint8_t cmd;$/;"	m	struct:BMSC_WORK	file:	access:public
cmd	driver-hashfast.c	/^	uint8_t cmd;$/;"	m	struct:hfa_cmd	file:	access:public
cmd	driver-icarus.c	/^	uint8_t cmd;$/;"	m	struct:ICARUS_WORK	file:	access:public
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:_workresult	file:	access:public
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:_worktask	file:	access:public
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_cfg	file:	access:public
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_header	file:	access:public
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_id	file:	access:public
cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_status	file:	access:public
cmd	miner.php	/^			$cmd = $sectionmap[$section];$/;"	v
cmd	miner.php	/^		foreach ($cmds as $cmd => $one)$/;"	v
cmd	miner.php	/^ foreach ($cmds as $cmd => $des)$/;"	v
cmd	miner.php	/^ if ($justnames === false && $cmd == 'pools' && $readonly === false)$/;"	v
cmd_BIST_FIX_BCAST	driver-SPI-bitmine-A1.c	/^static uint8_t *cmd_BIST_FIX_BCAST(struct A1_chain *a1)$/;"	f	file:	signature:(struct A1_chain *a1)
cmd_READ_REG	driver-SPI-bitmine-A1.c	/^static uint8_t *cmd_READ_REG(struct A1_chain *a1, uint8_t chip)$/;"	f	file:	signature:(struct A1_chain *a1, uint8_t chip)
cmd_READ_RESULT_BCAST	driver-SPI-bitmine-A1.c	/^static uint8_t *cmd_READ_RESULT_BCAST(struct A1_chain *a1)$/;"	f	file:	signature:(struct A1_chain *a1)
cmd_RESET_BCAST	driver-SPI-bitmine-A1.c	/^static uint8_t *cmd_RESET_BCAST(struct A1_chain *a1, uint8_t strategy)$/;"	f	file:	signature:(struct A1_chain *a1, uint8_t strategy)
cmd_WRITE_JOB	driver-SPI-bitmine-A1.c	/^static uint8_t *cmd_WRITE_JOB(struct A1_chain *a1, uint8_t chip_id,$/;"	f	file:	signature:(struct A1_chain *a1, uint8_t chip_id, uint8_t *job)
cmd_WRITE_REG	driver-SPI-bitmine-A1.c	/^static uint8_t *cmd_WRITE_REG(struct A1_chain *a1, uint8_t chip, uint8_t *reg)$/;"	f	file:	signature:(struct A1_chain *a1, uint8_t chip, uint8_t *reg)
cmd_name	driver-hashfast.c	/^	char *cmd_name;$/;"	m	struct:hfa_cmd	file:	access:public
cmd_value	driver-icarus.c	/^	int cmd_value;$/;"	m	struct:nonce_data	file:	access:public
cmds	api.c	/^} cmds[] = {$/;"	v	typeref:struct:CMDS
cmds	miner.php	/^ $cmds = array(	'devs'    => 'device list',$/;"	v
cmds	miner.php	/^ $cmds = array();$/;"	v
cmr1_epinfos	usbutils.c	/^static struct usb_epinfo cmr1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr1_ints	usbutils.c	/^static struct usb_intinfo cmr1_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
cmr2_command	driver-antrouter.c	/^static void cmr2_command(struct cgpu_info *bmsc, uint8_t cmd, uint8_t data)$/;"	f	file:	signature:(struct cgpu_info *bmsc, uint8_t cmd, uint8_t data)
cmr2_command	driver-bmsc.c	/^static void cmr2_command(struct cgpu_info *bmsc, uint8_t cmd, uint8_t data)$/;"	f	file:	signature:(struct cgpu_info *bmsc, uint8_t cmd, uint8_t data)
cmr2_command	driver-icarus.c	/^static void cmr2_command(struct cgpu_info *icarus, uint8_t cmd, uint8_t data)$/;"	f	file:	signature:(struct cgpu_info *icarus, uint8_t cmd, uint8_t data)
cmr2_commands	driver-antrouter.c	/^static void cmr2_commands(struct cgpu_info *bmsc)$/;"	f	file:	signature:(struct cgpu_info *bmsc)
cmr2_commands	driver-bmsc.c	/^static void cmr2_commands(struct cgpu_info *bmsc)$/;"	f	file:	signature:(struct cgpu_info *bmsc)
cmr2_commands	driver-icarus.c	/^static void cmr2_commands(struct cgpu_info *icarus)$/;"	f	file:	signature:(struct cgpu_info *icarus)
cmr2_epinfos0	usbutils.c	/^static struct usb_epinfo cmr2_epinfos0[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr2_epinfos1	usbutils.c	/^static struct usb_epinfo cmr2_epinfos1[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr2_epinfos2	usbutils.c	/^static struct usb_epinfo cmr2_epinfos2[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr2_epinfos3	usbutils.c	/^static struct usb_epinfo cmr2_epinfos3[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cmr2_ints	usbutils.c	/^static struct usb_intinfo cmr2_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
cmr2_speed	driver-antrouter.c	/^	uint8_t cmr2_speed;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
cmr2_speed	driver-bmsc.c	/^	uint8_t cmr2_speed;$/;"	m	struct:BMSC_INFO	file:	access:public
cmr2_speed	driver-icarus.c	/^	uint8_t cmr2_speed;$/;"	m	struct:ICARUS_INFO	file:	access:public
cnfbuf	cgminer.c	/^char *cnfbuf = NULL;$/;"	v
cnt	driver-avalon2.h	/^	uint8_t cnt;$/;"	m	struct:avalon2_pkg	access:public
cnt	driver-hashratio.h	/^	uint8_t cnt;$/;"	m	struct:hashratio_pkg	access:public
cnx_needed	cgminer.c	/^static bool cnx_needed(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
cnx_needed	cgminer.c	/^static bool cnx_needed(struct pool *pool);$/;"	p	file:	signature:(struct pool *pool)
code	MCast.java	/^	static private String code = MCAST_CODE;$/;"	f	class:MCast	file:	access:private
code	api-example.c	/^		char *code;$/;"	m	struct:WSAERRORS	file:	access:public
code	api.c	/^	char *code;$/;"	m	struct:WSAERRORS	file:	access:public
code	api.c	/^	const int code;$/;"	m	struct:CODES	file:	access:public
code_parameters	api.c	/^enum code_parameters {$/;"	g	file:
code_severity	api.c	/^enum code_severity {$/;"	g	file:
codes	api.c	/^} codes[] = {$/;"	v	typeref:struct:CODES
coinbase	miner.h	/^	char		*coinbase;$/;"	m	struct:work	access:public
coinbase	miner.h	/^	unsigned char *coinbase;$/;"	m	struct:pool	access:public
coinbase_len	miner.h	/^	int coinbase_len;$/;"	m	struct:pool	access:public
coinbasetxn	miner.h	/^	char *coinbasetxn;$/;"	m	struct:pool	access:public
cointerra_drv	driver-cointerra.c	/^struct device_drv cointerra_drv = {$/;"	v	typeref:struct:device_drv
cointerra_epinfos	usbutils.c	/^static struct usb_epinfo cointerra_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
cointerra_hdr	driver-cointerra.c	/^static const char *cointerra_hdr = "ZZ";$/;"	v	file:
cointerra_info	driver-cointerra.h	/^struct cointerra_info {$/;"	s
cointerra_info::active	driver-cointerra.h	/^	uint16_t active;$/;"	m	struct:cointerra_info	access:public
cointerra_info::ambtemp_avg	driver-cointerra.h	/^	uint16_t ambtemp_avg;$/;"	m	struct:cointerra_info	access:public
cointerra_info::ambtemp_high	driver-cointerra.h	/^	uint16_t ambtemp_high;$/;"	m	struct:cointerra_info	access:public
cointerra_info::ambtemp_low	driver-cointerra.h	/^	uint16_t ambtemp_low;$/;"	m	struct:cointerra_info	access:public
cointerra_info::asics	driver-cointerra.h	/^	uint8_t asics;$/;"	m	struct:cointerra_info	access:public
cointerra_info::autovoltage	driver-cointerra.h	/^	uint8_t  autovoltage;$/;"	m	struct:cointerra_info	access:public
cointerra_info::autovoltage_complete	driver-cointerra.h	/^	bool autovoltage_complete;$/;"	m	struct:cointerra_info	access:public
cointerra_info::board_number	driver-cointerra.h	/^	uint8_t board_number;$/;"	m	struct:cointerra_info	access:public
cointerra_info::core_hash_start	driver-cointerra.h	/^	struct timeval core_hash_start;$/;"	m	struct:cointerra_info	typeref:struct:cointerra_info::timeval	access:public
cointerra_info::corefreqs	driver-cointerra.h	/^	uint16_t corefreqs[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::coreperf	driver-cointerra.h	/^	uint8_t coreperf[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::cores	driver-cointerra.h	/^	uint16_t cores;$/;"	m	struct:cointerra_info	access:public
cointerra_info::coretemp	driver-cointerra.h	/^	uint16_t coretemp[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::corevolts	driver-cointerra.h	/^	uint16_t corevolts[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::current_ps_percent	driver-cointerra.h	/^	uint8_t  current_ps_percent;$/;"	m	struct:cointerra_info	access:public
cointerra_info::dies	driver-cointerra.h	/^	uint8_t dies;$/;"	m	struct:cointerra_info	access:public
cointerra_info::dies_active	driver-cointerra.h	/^	uint8_t dies_active;$/;"	m	struct:cointerra_info	access:public
cointerra_info::fan_tachs	driver-cointerra.h	/^	uint16_t fan_tachs[CTA_FANS];$/;"	m	struct:cointerra_info	access:public
cointerra_info::fanspeed	driver-cointerra.h	/^	uint8_t fanspeed[CTA_FANS];$/;"	m	struct:cointerra_info	access:public
cointerra_info::fmatch_errors	driver-cointerra.h	/^	uint16_t fmatch_errors[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::fw_day	driver-cointerra.h	/^	uint8_t fw_day;$/;"	m	struct:cointerra_info	access:public
cointerra_info::fw_month	driver-cointerra.h	/^	uint8_t fw_month;$/;"	m	struct:cointerra_info	access:public
cointerra_info::fw_year	driver-cointerra.h	/^	uint16_t fw_year;$/;"	m	struct:cointerra_info	access:public
cointerra_info::fwrev	driver-cointerra.h	/^	uint8_t fwrev[3];$/;"	m	struct:cointerra_info	access:public
cointerra_info::hashes	driver-cointerra.h	/^	uint64_t hashes;$/;"	m	struct:cointerra_info	access:public
cointerra_info::hw_errors	driver-cointerra.h	/^	uint16_t hw_errors[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::hwrev	driver-cointerra.h	/^	uint16_t hwrev;$/;"	m	struct:cointerra_info	access:public
cointerra_info::inactive	driver-cointerra.h	/^	uint16_t inactive;$/;"	m	struct:cointerra_info	access:public
cointerra_info::init_diffbits	driver-cointerra.h	/^	uint8_t init_diffbits;$/;"	m	struct:cointerra_info	access:public
cointerra_info::ipower_used	driver-cointerra.h	/^	uint16_t ipower_used;$/;"	m	struct:cointerra_info	access:public
cointerra_info::ipower_voltage	driver-cointerra.h	/^	uint16_t ipower_voltage;$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_efficiency	driver-cointerra.h	/^	uint16_t irstat_efficiency[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_iin	driver-cointerra.h	/^	uint16_t irstat_iin[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_iout	driver-cointerra.h	/^	uint16_t irstat_iout[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_pin	driver-cointerra.h	/^	uint16_t irstat_pin[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_pout	driver-cointerra.h	/^	uint16_t irstat_pout[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_status	driver-cointerra.h	/^	uint16_t irstat_status[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_temp1	driver-cointerra.h	/^	uint16_t irstat_temp1[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_temp2	driver-cointerra.h	/^	uint16_t irstat_temp2[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_vin	driver-cointerra.h	/^	uint16_t irstat_vin[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::irstat_vout	driver-cointerra.h	/^	uint16_t irstat_vout[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::last_pipe_nonce	driver-cointerra.h	/^	time_t last_pipe_nonce[1024];$/;"	m	struct:cointerra_info	access:public
cointerra_info::lock	driver-cointerra.h	/^	pthread_mutex_t lock;$/;"	m	struct:cointerra_info	access:public
cointerra_info::max_diffbits	driver-cointerra.h	/^	uint8_t max_diffbits;$/;"	m	struct:cointerra_info	access:public
cointerra_info::min_diffbits	driver-cointerra.h	/^	uint8_t min_diffbits;$/;"	m	struct:cointerra_info	access:public
cointerra_info::no_matching_work	driver-cointerra.h	/^	int no_matching_work;$/;"	m	struct:cointerra_info	access:public
cointerra_info::old_hashes	driver-cointerra.h	/^	uint64_t old_hashes[16 * 2];$/;"	m	struct:cointerra_info	access:public
cointerra_info::pipe_bitmap	driver-cointerra.h	/^	unsigned char pipe_bitmap[128];$/;"	m	struct:cointerra_info	access:public
cointerra_info::pipes_enabled	driver-cointerra.h	/^	uint8_t pipes_enabled[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::power_temps	driver-cointerra.h	/^	uint16_t power_temps[2];$/;"	m	struct:cointerra_info	access:public
cointerra_info::power_used	driver-cointerra.h	/^	uint16_t power_used;$/;"	m	struct:cointerra_info	access:public
cointerra_info::power_voltage	driver-cointerra.h	/^	uint16_t power_voltage;$/;"	m	struct:cointerra_info	access:public
cointerra_info::pump_tachs	driver-cointerra.h	/^	uint16_t pump_tachs[CTA_PUMPS];$/;"	m	struct:cointerra_info	access:public
cointerra_info::read_thr	driver-cointerra.h	/^	pthread_t read_thr;$/;"	m	struct:cointerra_info	access:public
cointerra_info::requested	driver-cointerra.h	/^	int requested;$/;"	m	struct:cointerra_info	access:public
cointerra_info::reset_sem	driver-cointerra.h	/^	cgsem_t reset_sem;$/;"	m	struct:cointerra_info	access:public
cointerra_info::sendlock	driver-cointerra.h	/^	pthread_mutex_t sendlock;$/;"	m	struct:cointerra_info	access:public
cointerra_info::serial	driver-cointerra.h	/^	uint32_t serial;$/;"	m	struct:cointerra_info	access:public
cointerra_info::share_hashes	driver-cointerra.h	/^	uint64_t share_hashes;$/;"	m	struct:cointerra_info	access:public
cointerra_info::thr	driver-cointerra.h	/^	struct thr_info *thr;$/;"	m	struct:cointerra_info	typeref:struct:cointerra_info::thr_info	access:public
cointerra_info::tot_calc_hashes	driver-cointerra.h	/^	uint64_t tot_calc_hashes;$/;"	m	struct:cointerra_info	access:public
cointerra_info::tot_core_hashes	driver-cointerra.h	/^	uint64_t tot_core_hashes[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::tot_flushed_hashes	driver-cointerra.h	/^	uint64_t tot_flushed_hashes;$/;"	m	struct:cointerra_info	access:public
cointerra_info::tot_hashes	driver-cointerra.h	/^	uint64_t tot_hashes;$/;"	m	struct:cointerra_info	access:public
cointerra_info::tot_hw_errors	driver-cointerra.h	/^	uint16_t tot_hw_errors[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cointerra_info::tot_reset_hashes	driver-cointerra.h	/^	uint64_t tot_reset_hashes;$/;"	m	struct:cointerra_info	access:public
cointerra_info::tot_share_hashes	driver-cointerra.h	/^	uint64_t tot_share_hashes;$/;"	m	struct:cointerra_info	access:public
cointerra_info::tot_underruns	driver-cointerra.h	/^	int tot_underruns;$/;"	m	struct:cointerra_info	access:public
cointerra_info::underruns	driver-cointerra.h	/^	uint16_t underruns;$/;"	m	struct:cointerra_info	access:public
cointerra_info::uptime	driver-cointerra.h	/^	uint32_t uptime;$/;"	m	struct:cointerra_info	access:public
cointerra_info::volts12	driver-cointerra.h	/^	uint16_t volts12;$/;"	m	struct:cointerra_info	access:public
cointerra_info::volts33	driver-cointerra.h	/^	uint16_t volts33;$/;"	m	struct:cointerra_info	access:public
cointerra_info::wake_cond	driver-cointerra.h	/^	pthread_cond_t wake_cond;$/;"	m	struct:cointerra_info	access:public
cointerra_info::work_id	driver-cointerra.h	/^	uint16_t work_id;$/;"	m	struct:cointerra_info	access:public
cointerra_ints	usbutils.c	/^static struct usb_intinfo cointerra_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
colouroverride	miner.php	/^$colouroverride = array();$/;"	v
colourtable	miner.php	/^$colourtable = array($/;"	v
column	compat/jansson-2.6/src/jansson.h	/^    int column;$/;"	m	struct:__anon28	access:public
column	compat/jansson-2.6/src/load.c	/^    int column, last_column;$/;"	m	struct:__anon16	file:	access:public
column	compat/jansson-2.6/src/pack_unpack.c	/^    int column;$/;"	m	struct:__anon14	file:	access:public
column	compat/jansson-2.6/src/pack_unpack.c	/^    int column;$/;"	m	struct:__anon15	file:	access:public
com_alloc_cgpu	driver-antrouter.c	/^static struct cgpu_info *com_alloc_cgpu(struct device_drv *drv, int threads)$/;"	f	file:	signature:(struct device_drv *drv, int threads)
com_free_cgpu	driver-antrouter.c	/^static struct cgpu_info *com_free_cgpu(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
command_interrupts	driver-minion.c	/^	uint64_t command_interrupts;$/;"	m	struct:minion_info	file:	access:public
commands	api.c	/^	char *commands;$/;"	m	struct:APIGROUPS	file:	access:public
compat_spinlock	compat/libusb-1.0/libusb/os/poll_windows.c	/^static volatile LONG compat_spinlock = 0;$/;"	v	file:
complete_usb_transfer	usbutils.c	/^static void complete_usb_transfer(struct usb_transfer *ut)$/;"	f	file:	signature:(struct usb_transfer *ut)
completed	driver-knc.c	/^	uint32_t completed;$/;"	m	struct:knc_core_state	file:	access:public
completed	driver-knc.c	/^	uint64_t completed;		\/* Work units completed *\/$/;"	m	struct:knc_state	file:	access:public
completion_thread	util.c	/^void *completion_thread(void *arg)$/;"	f	signature:(void *arg)
composite_abort_control	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_abort_control(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
composite_abort_control	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_abort_control(struct usbi_transfer *itransfer);$/;"	p	file:	signature:(struct usbi_transfer *itransfer)
composite_abort_transfers	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_abort_transfers(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
composite_abort_transfers	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_abort_transfers(struct usbi_transfer *itransfer);$/;"	p	file:	signature:(struct usbi_transfer *itransfer)
composite_api_flags	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t composite_api_flags;		\/\/ composite devices require additional data$/;"	m	struct:windows_device_priv	access:public
composite_claim_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_claim_interface(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
composite_claim_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_claim_interface(struct libusb_device_handle *dev_handle, int iface);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
composite_clear_halt	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_clear_halt(struct libusb_device_handle *dev_handle, unsigned char endpoint)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, unsigned char endpoint)
composite_clear_halt	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_clear_halt(struct libusb_device_handle *dev_handle, unsigned char endpoint);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, unsigned char endpoint)
composite_close	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void composite_close(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
composite_close	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void composite_close(struct libusb_device_handle *dev_handle);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle)
composite_copy_transfer_data	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_copy_transfer_data(struct usbi_transfer *itransfer, uint32_t io_size)$/;"	f	file:	signature:(struct usbi_transfer *itransfer, uint32_t io_size)
composite_copy_transfer_data	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_copy_transfer_data(struct usbi_transfer *itransfer, uint32_t io_size);$/;"	p	file:	signature:(struct usbi_transfer *itransfer, uint32_t io_size)
composite_driver_names	compat/libusb-1.0/libusb/os/windows_usb.c	/^const char* composite_driver_names[] = {"USBCCGP"};$/;"	v
composite_exit	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_exit(void)$/;"	f	file:	signature:(void)
composite_exit	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_exit(void);$/;"	p	file:	signature:(void)
composite_init	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_init(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
composite_init	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_init(struct libusb_context *ctx);$/;"	p	file:	signature:(struct libusb_context *ctx)
composite_open	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_open(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
composite_open	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_open(struct libusb_device_handle *dev_handle);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle)
composite_release_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_release_interface(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
composite_release_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_release_interface(struct libusb_device_handle *dev_handle, int iface);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
composite_reset_device	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_reset_device(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
composite_reset_device	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_reset_device(struct libusb_device_handle *dev_handle);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle)
composite_set_interface_altsetting	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_set_interface_altsetting(struct libusb_device_handle *dev_handle, int iface, int altsetting)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface, int altsetting)
composite_set_interface_altsetting	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_set_interface_altsetting(struct libusb_device_handle *dev_handle, int iface, int altsetting);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, int iface, int altsetting)
composite_submit_bulk_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_submit_bulk_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
composite_submit_bulk_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_submit_bulk_transfer(struct usbi_transfer *itransfer);$/;"	p	file:	signature:(struct usbi_transfer *itransfer)
composite_submit_control_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_submit_control_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
composite_submit_control_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_submit_control_transfer(struct usbi_transfer *itransfer);$/;"	p	file:	signature:(struct usbi_transfer *itransfer)
composite_submit_iso_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_submit_iso_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
composite_submit_iso_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int composite_submit_iso_transfer(struct usbi_transfer *itransfer);$/;"	p	file:	signature:(struct usbi_transfer *itransfer)
concurrent_usage	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int concurrent_usage = -1;$/;"	v	file:
cond	miner.h	/^	pthread_cond_t		cond;$/;"	m	struct:thread_q	access:public
conf_web1	cgminer.c	/^char conf_web1[] = "http:\/\/";$/;"	v
conf_web2	cgminer.c	/^char conf_web2[] = "https:\/\/";$/;"	v
config	driver-drillbit.c	/^	BoardConfig config;$/;"	m	struct:__anon7	file:	access:public
config	spi-context.h	/^	struct spi_config config;$/;"	m	struct:spi_ctx	typeref:struct:spi_ctx::spi_config	access:public
config	usbutils.h	/^	int config;$/;"	m	struct:usb_find_devices	access:public
config_data	driver-hashfast.h	/^	struct hf_config_data config_data;          \/\/ Configuration data used from USB_INIT$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_config_data	access:public
config_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	unsigned char *config_descriptor;$/;"	m	struct:linux_device_priv	file:	access:public
config_descriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	unsigned char **config_descriptor;	\/\/ list of pointers to the cached config descriptors$/;"	m	struct:windows_device_priv	access:public
config_loaded	cgminer.c	/^static bool config_loaded;$/;"	v	file:
config_setting	driver-drillbit.c	/^} config_setting;$/;"	t	typeref:struct:__anon7	file:
console_lock	cgminer.c	/^pthread_mutex_t console_lock;$/;"	v
consume_option	ccan/opt/parse.c	/^static void consume_option(int *argc, char *argv[], unsigned optnum)$/;"	f	file:	signature:(int *argc, char *argv[], unsigned optnum)
container_of	compat/jansson-2.6/src/jansson_private.h	16;"	d
container_of	compat/libusb-1.0/libusb/libusbi.h	113;"	d
continuous_ioerr_count	usbutils.h	/^	uint32_t continuous_ioerr_count;$/;"	m	struct:cg_usb_info	access:public
control_init	driver-klondike.c	/^static void control_init(struct cgpu_info *klncgpu)$/;"	f	file:	signature:(struct cgpu_info *klncgpu)
control_lock	cgminer.c	/^cglock_t control_lock;$/;"	v
control_thr	cgminer.c	/^struct thr_info *control_thr;$/;"	v	typeref:struct:thr_info
convert_to_work	cgminer.c	/^static void convert_to_work(json_t *val, int rolltime, struct pool *pool, struct timeval *tv_lp, struct timeval *tv_lp_reply)$/;"	f	file:	signature:(json_t *val, int rolltime, struct pool *pool, struct timeval *tv_lp, struct timeval *tv_lp_reply)
cooldown_begin	A1-common.h	/^	int cooldown_begin;$/;"	m	struct:A1_chip	access:public
copy	miner.h	/^	bool copy;$/;"	m	struct:device_drv	access:public
copy_drv	cgminer.c	/^struct device_drv *copy_drv(struct device_drv *drv)$/;"	f	signature:(struct device_drv *drv)
copy_drv	miner.h	/^extern struct device_drv *copy_drv(struct device_drv*);$/;"	p	signature:(struct device_drv*)
copy_pool_stratum	driver-avalon2.c	/^static void copy_pool_stratum(struct avalon2_info *info, struct pool *pool)$/;"	f	file:	signature:(struct avalon2_info *info, struct pool *pool)
copy_pool_stratum	driver-hashratio.c	/^static void copy_pool_stratum(struct hashratio_info *info, struct pool *pool)$/;"	f	file:	signature:(struct hashratio_info *info, struct pool *pool)
copy_time	util.c	/^void copy_time(struct timeval *dest, const struct timeval *src)$/;"	f	signature:(struct timeval *dest, const struct timeval *src)
copy_time	util.h	/^void copy_time(struct timeval *dest, const struct timeval *src);$/;"	p	signature:(struct timeval *dest, const struct timeval *src)
copy_transfer_data	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*copy_transfer_data)(struct usbi_transfer *itransfer, uint32_t io_size);$/;"	m	struct:windows_usb_api_backend	access:public
copy_work	miner.h	1583;"	d
copy_work_noffset	cgminer.c	/^struct work *copy_work_noffset(struct work *base_work, int noffset)$/;"	f	signature:(struct work *base_work, int noffset)
copy_work_noffset	miner.h	/^extern struct work *copy_work_noffset(struct work *base_work, int noffset);$/;"	p	signature:(struct work *base_work, int noffset)
copyadvanceafter	api.c	/^static void copyadvanceafter(char ch, char **param, char **buf)$/;"	f	file:	signature:(char ch, char **param, char **buf)
core	driver-knc.c	/^			struct knc_core_state *core;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	typeref:struct:knc_state::knc_spi_buffer::knc_spi_response::knc_core_state	file:	access:public
core	driver-knc.c	/^	int core;$/;"	m	struct:knc_core_state	file:	access:public
core	driver-knc.c	/^	struct knc_core_state *core;$/;"	m	struct:knc_die	typeref:struct:knc_die::knc_core_state	file:	access:public
core	driver-knc.c	/^	struct knc_core_state core[];$/;"	m	struct:knc_state	typeref:struct:knc_state::knc_core_state	file:	access:public
core	driver-minion.c	/^	int core;$/;"	m	struct:res_item	file:	access:public
core_address	hf_protocol.h	/^	uint8_t  core_address;$/;"	m	struct:hf_header	access:public
core_address	hf_protocol_be.h	/^	uint8_t  core_address;$/;"	m	struct:hf_header	access:public
core_bad	driver-bab.c	/^	uint64_t core_bad[BAB_MAXCHIPS][BAB_CORES];$/;"	m	struct:bab_info	file:	access:public
core_bad	driver-minion.c	/^	uint64_t core_bad[MINION_CHIPS][MINION_CORES+1];$/;"	m	struct:minion_info	file:	access:public
core_bitmap	driver-hashfast.h	/^	uint32_t *core_bitmap;                      \/\/ Core OK bitmap test results, run with PLL Bypassed$/;"	m	struct:hashfast_info	access:public
core_bitmap_size	driver-hashfast.h	/^	int core_bitmap_size;                       \/\/ in bytes$/;"	m	struct:hashfast_info	access:public
core_check_interval	driver-knc.c	/^static const struct timeval core_check_interval = {$/;"	v	typeref:struct:timeval	file:
core_count	driver-hashfast.h	/^	int core_count;                             \/\/ # of cores per chip$/;"	m	struct:hashfast_info	access:public
core_disable_interval	driver-knc.c	/^static const struct timeval core_disable_interval = {$/;"	v	typeref:struct:timeval	file:
core_good	driver-bab.c	/^	uint64_t core_good[BAB_MAXCHIPS][BAB_CORES];$/;"	m	struct:bab_info	file:	access:public
core_good	driver-minion.c	/^	uint64_t core_good[MINION_CHIPS][MINION_CORES+1];$/;"	m	struct:minion_info	file:	access:public
core_hash_start	driver-cointerra.h	/^	struct timeval core_hash_start;$/;"	m	struct:cointerra_info	typeref:struct:cointerra_info::timeval	access:public
core_hw	driver-bflsc.h	/^	uint64_t core_hw[17];$/;"	m	struct:bflsc_info	access:public
core_nonce_fifo_full	driver-hashfast.h	/^	uint64_t core_nonce_fifo_full;              \/\/ Core nonce Q overrun events$/;"	m	struct:hf_long_statistics	access:public
core_nonce_fifo_full	hf_protocol.h	/^	uint8_t core_nonce_fifo_full;               \/\/ Core nonce Q overrun events$/;"	m	struct:hf_statistics	access:public
core_nonce_fifo_full	hf_protocol_be.h	/^	uint8_t core_nonce_fifo_full;               \/\/ Core nonce Q overrun events$/;"	m	struct:hf_statistics	access:public
core_nonces	driver-bflsc.h	/^	uint64_t core_nonces[17];$/;"	m	struct:bflsc_info	access:public
core_ntime_roll	driver-hashfast.h	/^	int core_ntime_roll;                        \/\/ Total core ntime roll amount$/;"	m	struct:hashfast_info	access:public
core_ntime_roll	hf_protocol.h	/^	uint16_t core_ntime_roll;                   \/\/ Total core ntime roll amount$/;"	m	struct:hf_usb_init_options	access:public
core_ntime_roll	hf_protocol_be.h	/^	uint16_t core_ntime_roll;                   \/\/ Total core ntime roll amount$/;"	m	struct:hf_usb_init_options	access:public
core_submit_interval	driver-knc.c	/^static const struct timeval core_submit_interval = {$/;"	v	typeref:struct:timeval	file:
core_timeout_interval	driver-knc.c	/^static const struct timeval core_timeout_interval = {$/;"	v	typeref:struct:timeval	file:
core_voltage	driver-avalon.h	/^	int core_voltage;$/;"	m	struct:avalon_info	access:public
core_voltage	driver-drillbit.c	/^	uint16_t core_voltage; \/\/ Millivolts$/;"	m	struct:__anon3	file:	access:public
core_voltage	driver-drillbit.c	/^	uint8_t core_voltage; \/\/ Set to flags defined above$/;"	m	struct:__anon5	file:	access:public
core_voltage	hf_protocol.h	/^	uint8_t  core_voltage[6];                   \/\/ Core voltage$/;"	m	struct:hf_g1_monitor	access:public
core_voltage	hf_protocol_be.h	/^	uint8_t  core_voltage[6];                   \/\/ Core voltage$/;"	m	struct:hf_g1_monitor	access:public
corefreqs	driver-cointerra.h	/^	uint16_t corefreqs[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
coreid	driver-knc.c	/^	int coreid;$/;"	m	struct:knc_core_state	file:	access:public
coreperf	driver-cointerra.h	/^	uint8_t coreperf[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cores	driver-cointerra.h	/^	uint16_t cores;$/;"	m	struct:cointerra_info	access:public
cores	driver-knc.c	/^	int cores;$/;"	m	struct:knc_die	file:	access:public
cores	driver-knc.c	/^	int cores;$/;"	m	struct:knc_state	file:	access:public
cores	driver-minion.c	/^	uint16_t cores;$/;"	m	struct:minion_status	file:	access:public
cores	knc-asic.h	/^	int cores;$/;"	m	struct:knc_die_info	access:public
coretemp	driver-cointerra.h	/^	uint16_t coretemp[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
corevolts	driver-cointerra.h	/^	uint16_t corevolts[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
cortex_hw	driver-bflsc.h	/^	uint64_t cortex_hw[0x80];$/;"	m	struct:bflsc_info	access:public
cortex_nonces	driver-bflsc.h	/^	uint64_t cortex_nonces[0x80];$/;"	m	struct:bflsc_info	access:public
cou	miner.php	/^		$cou = 0;$/;"	v
count	driver-antrouter.c	/^	int count;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
count	driver-bmsc.c	/^	int count;$/;"	m	struct:BMSC_INFO	file:	access:public
count	driver-icarus.c	/^	int count;$/;"	m	struct:ICARUS_INFO	file:	access:public
count	driver-minion.c	/^	uint64_t count; \/\/ total ioctl()$/;"	m	struct:iostat	file:	access:public
count	klist.h	/^	int count;		\/\/ in this list$/;"	m	struct:k_list	access:public
count	miner.php	/^		$count = $gpus['GPUS']['Count'];$/;"	v
count	miner.php	/^ $count = count($cmds);$/;"	v
count	usbutils.c	/^	int count;$/;"	m	struct:driver_count	file:	access:public
count	usbutils.c	/^	uint64_t count;$/;"	m	struct:cg_usb_stats_item	file:	access:public
count	usbutils.h	/^	uint32_t count;$/;"	m	struct:cg_usb_tmo	access:public
count	uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket	access:public
count_up	klist.h	/^	int count_up;		\/\/ incremented every time one is added$/;"	m	struct:k_list	access:public
counter	api-example.php	/^			$counter = 0;$/;"	v
counter	miner.php	/^			$counter = 0;$/;"	v
cp_prio	cgminer.c	/^static int cp_prio(void)$/;"	f	file:	signature:(void)
cr_cond	miner.h	/^	pthread_cond_t cr_cond;$/;"	m	struct:pool	access:public
crc	driver-avalon2.h	/^	uint8_t crc[2];$/;"	m	struct:avalon2_pkg	access:public
crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_rxnonce_data	access:public
crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_rxstatus_data	access:public
crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_rxstatus_token	access:public
crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_txconfig_token	access:public
crc	driver-bitmain.h	/^	uint16_t crc;$/;"	m	struct:bitmain_txtask_token	access:public
crc	driver-hashratio.h	/^	uint8_t crc[2];$/;"	m	struct:hashratio_pkg	access:public
crc16	crc.h	/^unsigned short crc16(const unsigned char *buffer, int len);$/;"	p	signature:(const unsigned char *buffer, int len)
crc16	crc16.c	/^unsigned short crc16(const unsigned char *buffer, int len)$/;"	f	signature:(const unsigned char *buffer, int len)
crc16_table	crc16.c	/^unsigned int crc16_table[256] = {$/;"	v
crc5	driver-icarus.c	/^unsigned char crc5(unsigned char *ptr, unsigned char len)$/;"	f	signature:(unsigned char *ptr, unsigned char len)
crc8	hf_protocol.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_header	access:public
crc8	hf_protocol.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_pll_config	access:public
crc8	hf_protocol.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_usb_init_header	access:public
crc8	hf_protocol_be.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_header	access:public
crc8	hf_protocol_be.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_pll_config	access:public
crc8	hf_protocol_be.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_usb_init_header	access:public
crc8_table	driver-hashfast.c	/^static unsigned char crc8_table[256];	\/* CRC-8 table *\/$/;"	v	file:
create_job	driver-SPI-bitmine-A1.c	/^static uint8_t *create_job(uint8_t chip_id, uint8_t job_id, struct work *work)$/;"	f	file:	signature:(uint8_t chip_id, uint8_t job_id, struct work *work)
create_overlapped	compat/libusb-1.0/libusb/os/poll_windows.c	/^OVERLAPPED *create_overlapped(void)$/;"	f	signature:(void)
created	driver-minion.c	/^	struct timeval created; \/\/ when work was generated$/;"	m	struct:work_item	typeref:struct:work_item::timeval	file:	access:public
critical_factorization	lib/str-two-way.h	/^critical_factorization (const unsigned char *needle, size_t needle_len,$/;"	f	signature:(const unsigned char *needle, size_t needle_len, size_t *period)
cs_line	spi-context.h	/^	int cs_line;$/;"	m	struct:spi_config	access:public
csp	miner.php	/^	$csp = $customsummarypages[$name];$/;"	v
csp	miner.php	/^	$csp = $sys_pages[$name];$/;"	v
csp	miner.php	/^	$csp = $user_pages[$name];$/;"	v
csp	miner.php	/^ $csp = getcsp($pagename, $systempage);$/;"	v
css	miner.php	/^ $css = '';$/;"	v
css_name	miner.php	/^	foreach ($add_css_names as $css_name => $no_miner_font)$/;"	v
cssdata	miner.php	/^ foreach ($colourtable as $cssdata => $value)$/;"	v
cssobj	miner.php	/^	$cssobj = explode(' ', $cssdata, 2);$/;"	v
cstdd	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
cta_api_stats	driver-cointerra.c	/^static struct api_data *cta_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
cta_clear_work	driver-cointerra.c	/^static void cta_clear_work(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
cta_close	driver-cointerra.c	/^static void cta_close(struct cgpu_info *cointerra)$/;"	f	file:	signature:(struct cgpu_info *cointerra)
cta_detect	driver-cointerra.c	/^static void cta_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
cta_detect_one	driver-cointerra.c	/^static struct cgpu_info *cta_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
cta_fill	driver-cointerra.c	/^static bool cta_fill(struct cgpu_info *cointerra)$/;"	f	file:	signature:(struct cgpu_info *cointerra)
cta_flush_work	driver-cointerra.c	/^static void cta_flush_work(struct cgpu_info *cointerra)$/;"	f	file:	signature:(struct cgpu_info *cointerra)
cta_flush_work	driver-cointerra.c	/^static void cta_flush_work(struct cgpu_info *cointerra);$/;"	p	file:	signature:(struct cgpu_info *cointerra)
cta_gen_message	driver-cointerra.c	/^static void cta_gen_message(char *msg, char type)$/;"	f	file:	signature:(char *msg, char type)
cta_open	driver-cointerra.c	/^static bool cta_open(struct cgpu_info *cointerra)$/;"	f	file:	signature:(struct cgpu_info *cointerra)
cta_parse_debug	driver-cointerra.c	/^static void cta_parse_debug(struct cointerra_info *info, char *buf)$/;"	f	file:	signature:(struct cointerra_info *info, char *buf)
cta_parse_info	driver-cointerra.c	/^static void cta_parse_info(struct cgpu_info *cointerra, struct cointerra_info *info,$/;"	f	file:	signature:(struct cgpu_info *cointerra, struct cointerra_info *info, char *buf)
cta_parse_irstat	driver-cointerra.c	/^static void cta_parse_irstat(struct cointerra_info *info, char *buf)$/;"	f	file:	signature:(struct cointerra_info *info, char *buf)
cta_parse_msg	driver-cointerra.c	/^static void cta_parse_msg(struct thr_info *thr, struct cgpu_info *cointerra,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *cointerra, struct cointerra_info *info, char *buf)
cta_parse_rdone	driver-cointerra.c	/^static void cta_parse_rdone(struct cgpu_info *cointerra, struct cointerra_info *info,$/;"	f	file:	signature:(struct cgpu_info *cointerra, struct cointerra_info *info, char *buf)
cta_parse_recvmatch	driver-cointerra.c	/^static void cta_parse_recvmatch(struct thr_info *thr, struct cgpu_info *cointerra,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *cointerra, struct cointerra_info *info, char *buf)
cta_parse_reqwork	driver-cointerra.c	/^static void cta_parse_reqwork(struct cgpu_info *cointerra, struct cointerra_info *info,$/;"	f	file:	signature:(struct cgpu_info *cointerra, struct cointerra_info *info, char *buf)
cta_parse_statread	driver-cointerra.c	/^static void cta_parse_statread(struct cgpu_info *cointerra, struct cointerra_info *info,$/;"	f	file:	signature:(struct cgpu_info *cointerra, struct cointerra_info *info, char *buf)
cta_parse_statset	driver-cointerra.c	/^static void cta_parse_statset(struct cointerra_info *info, char *buf)$/;"	f	file:	signature:(struct cointerra_info *info, char *buf)
cta_parse_wdone	driver-cointerra.c	/^static void cta_parse_wdone(struct thr_info *thr, struct cgpu_info *cointerra,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *cointerra, struct cointerra_info *info, char *buf)
cta_prepare	driver-cointerra.c	/^static bool cta_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
cta_recv_thread	driver-cointerra.c	/^static void *cta_recv_thread(void *arg)$/;"	f	file:	signature:(void *arg)
cta_reset_init	driver-cointerra.c	/^static bool cta_reset_init(char *buf)$/;"	f	file:	signature:(char *buf)
cta_scanwork	driver-cointerra.c	/^static int64_t cta_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
cta_send_corehashes	driver-cointerra.c	/^static void cta_send_corehashes(struct cgpu_info *cointerra, struct cointerra_info *info,$/;"	f	file:	signature:(struct cgpu_info *cointerra, struct cointerra_info *info, double corehash_time)
cta_send_msg	driver-cointerra.c	/^static bool cta_send_msg(struct cgpu_info *cointerra, char *buf)$/;"	f	file:	signature:(struct cgpu_info *cointerra, char *buf)
cta_send_msg	driver-cointerra.c	/^static bool cta_send_msg(struct cgpu_info *cointerra, char *buf);$/;"	p	file:	signature:(struct cgpu_info *cointerra, char *buf)
cta_send_reset	driver-cointerra.c	/^static void cta_send_reset(struct cgpu_info *cointerra, struct cointerra_info *info,$/;"	f	file:	signature:(struct cgpu_info *cointerra, struct cointerra_info *info, uint8_t reset_type, uint8_t diffbits)
cta_send_reset	driver-cointerra.c	/^static void cta_send_reset(struct cgpu_info *cointerra, struct cointerra_info *info,$/;"	p	file:	signature:(struct cgpu_info *cointerra, struct cointerra_info *info, uint8_t reset_type, uint8_t diffbits)
cta_shutdown	driver-cointerra.c	/^static void cta_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
cta_statline_before	driver-cointerra.c	/^static void cta_statline_before(char *buf, size_t bufsiz, struct cgpu_info *cointerra)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *cointerra)
cta_update_work	driver-cointerra.c	/^static void cta_update_work(struct cgpu_info *cointerra)$/;"	f	file:	signature:(struct cgpu_info *cointerra)
cta_wake	driver-cointerra.c	/^static void cta_wake(struct cgpu_info *cointerra)$/;"	f	file:	signature:(struct cgpu_info *cointerra)
cta_zero_corehashes	driver-cointerra.c	/^static void cta_zero_corehashes(struct cointerra_info *info)$/;"	f	file:	signature:(struct cointerra_info *info)
cta_zero_stats	driver-cointerra.c	/^static void cta_zero_stats(struct cgpu_info *cointerra)$/;"	f	file:	signature:(struct cgpu_info *cointerra)
cta_zero_stats	driver-cointerra.c	/^static void cta_zero_stats(struct cgpu_info *cointerra);$/;"	p	file:	signature:(struct cgpu_info *cointerra)
ctlr_ver	driver-avalon.h	/^	uint32_t ctlr_ver;$/;"	m	struct:avalon_info	access:public
ctrl_pipe	compat/libusb-1.0/libusb/libusbi.h	/^	int ctrl_pipe[2];$/;"	m	struct:libusb_context	access:public
ctrl_transfer	usbutils.h	/^	int ctrl_transfer;$/;"	m	struct:usb_intinfo	access:public
ctrl_transfer_cb	compat/libusb-1.0/libusb/sync.c	/^static void LIBUSB_CALL ctrl_transfer_cb(struct libusb_transfer *transfer)$/;"	f	file:	signature:(struct libusb_transfer *transfer)
ctx	compat/libusb-1.0/libusb/hotplug.h	/^	struct libusb_context *ctx;$/;"	m	struct:libusb_hotplug_callback	typeref:struct:libusb_hotplug_callback::libusb_context	access:public
ctx	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_context *ctx;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::libusb_context	access:public
ctx	driver-knc.c	/^	void *ctx;$/;"	m	struct:knc_state	file:	access:public
cur	api.c	/^	char *cur;$/;"	m	struct:io_data	file:	access:public
curl	miner.h	/^	CURL *curl;$/;"	m	struct:curl_ent	access:public
curl_debug_cb	util.c	/^static int curl_debug_cb(__maybe_unused CURL *handle, curl_infotype type,$/;"	f	file:	signature:(__maybe_unused CURL *handle, curl_infotype type, __maybe_unused char *data, size_t size, void *userdata)
curl_easy_cleanup	miner.h	17;"	d
curl_easy_init	miner.h	16;"	d
curl_ent	miner.h	/^struct curl_ent {$/;"	s
curl_ent::curl	miner.h	/^	CURL *curl;$/;"	m	struct:curl_ent	access:public
curl_ent::node	miner.h	/^	struct list_head node;$/;"	m	struct:curl_ent	typeref:struct:curl_ent::list_head	access:public
curl_ent::tv	miner.h	/^	struct timeval tv;$/;"	m	struct:curl_ent	typeref:struct:curl_ent::timeval	access:public
curl_global_cleanup	miner.h	18;"	d
curl_global_init	miner.h	20;"	d
curlring	miner.h	/^	struct list_head curlring;$/;"	m	struct:pool	typeref:struct:pool::list_head	access:public
curls	miner.h	/^	int curls;$/;"	m	struct:pool	access:public
curly	cgminer.c	/^char *curly = ":D";$/;"	v
current_block	cgminer.c	/^static char current_block[32];$/;"	v	file:
current_diff	cgminer.c	/^double current_diff = 0xFFFFFFFFFFFFFFFFULL;$/;"	v
current_hash	cgminer.c	/^char current_hash[68];$/;"	v
current_job_id	driver-spondoolies-sp10.h	/^	int current_job_id;$/;"	m	struct:spond_adapter	access:public
current_job_id	driver-spondoolies-sp30.h	/^	int current_job_id;$/;"	m	struct:spond_adapter	access:public
current_pool	cgminer.c	/^struct pool *current_pool(void)$/;"	f	signature:(void)
current_pool	miner.h	/^extern struct pool *current_pool(void);$/;"	p	signature:(void)
current_ps_percent	driver-cointerra.h	/^	uint8_t  current_ps_percent;$/;"	m	struct:cointerra_info	access:public
current_work	driver-drillbit.h	/^  struct work *current_work[WORK_HISTORY_LEN];$/;"	m	struct:drillbit_chip_info	typeref:struct:drillbit_chip_info::work	access:public
currentpool	cgminer.c	/^static struct pool *currentpool = NULL;$/;"	v	typeref:struct:pool	file:
curses_active	cgminer.c	/^bool curses_active;$/;"	v	file:
curses_active_forcelocked	cgminer.c	/^static bool curses_active_forcelocked(void)$/;"	f	file:	signature:(void)
curses_active_locked	cgminer.c	/^static bool curses_active_locked(void)$/;"	f	file:	signature:(void)
curses_input	cgminer.c	/^char *curses_input(const char *query)$/;"	f	signature:(const char *query)
curses_input	miner.h	/^extern char *curses_input(const char *query);$/;"	p	signature:(const char *query)
curses_int	cgminer.c	/^int curses_int(const char *query)$/;"	f	signature:(const char *query)
curses_int	miner.h	/^extern int curses_int(const char *query);$/;"	p	signature:(const char *query)
curses_print_devstatus	cgminer.c	/^static void curses_print_devstatus(struct cgpu_info *cgpu, int devno, int count)$/;"	f	file:	signature:(struct cgpu_info *cgpu, int devno, int count)
curses_print_status	cgminer.c	/^static void curses_print_status(void)$/;"	f	file:	signature:(void)
curtime	miner.h	/^	uint32_t curtime;$/;"	m	struct:pool	access:public
customset	miner.php	/^function customset($showfields, $sum, $section, $rig, $isbutton, $result, $total, $cf = NULL)$/;"	f
customsummarypages	miner.php	/^$customsummarypages = array($/;"	v
cutofftemp	miner.h	/^	int cutofftemp;$/;"	m	struct:cgpu_info	access:public
cvtCToKln	driver-klondike.c	/^static int cvtCToKln(double deg)$/;"	f	file:	signature:(double deg)
cvtKlnToC	driver-klondike.c	/^static double cvtKlnToC(uint8_t temp)$/;"	f	file:	signature:(uint8_t temp)
cycles	driver-bitfury.h	/^	int cycles;$/;"	m	struct:bitfury_info	access:public
da	miner.php	/^				$da = $alldata['Difficulty Accepted'];$/;"	v
darwin_abort_transfers	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_abort_transfers (struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
darwin_async_io_callback	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_async_io_callback (void *refcon, IOReturn result, void *arg0) {$/;"	f	file:	signature:(void *refcon, IOReturn result, void *arg0)
darwin_async_io_callback	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_async_io_callback (void *refcon, IOReturn result, void *arg0);$/;"	p	file:	signature:(void *refcon, IOReturn result, void *arg0)
darwin_attach_kernel_driver	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_attach_kernel_driver (struct libusb_device_handle *dev_handle, int interface) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int interface)
darwin_backend	compat/libusb-1.0/libusb/os/darwin_usb.c	/^const struct usbi_os_backend darwin_backend = {$/;"	v	typeref:struct:usbi_os_backend
darwin_cache_device_descriptor	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_cache_device_descriptor (struct libusb_context *ctx, struct libusb_device *dev, usb_device_t **device) {$/;"	f	file:	signature:(struct libusb_context *ctx, struct libusb_device *dev, usb_device_t **device)
darwin_cancel_transfer	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_cancel_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
darwin_check_configuration	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_check_configuration (struct libusb_context *ctx, struct libusb_device *dev, usb_device_t **darwin_device) {$/;"	f	file:	signature:(struct libusb_context *ctx, struct libusb_device *dev, usb_device_t **darwin_device)
darwin_claim_interface	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_claim_interface(struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
darwin_claim_interface	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_claim_interface(struct libusb_device_handle *dev_handle, int iface);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
darwin_clear_halt	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_clear_halt(struct libusb_device_handle *dev_handle, unsigned char endpoint) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, unsigned char endpoint)
darwin_clear_iterator	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_clear_iterator (io_iterator_t iter) {$/;"	f	file:	signature:(io_iterator_t iter)
darwin_clear_transfer_priv	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_clear_transfer_priv (struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
darwin_clock_gettime	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_clock_gettime(int clk_id, struct timespec *tp) {$/;"	f	file:	signature:(int clk_id, struct timespec *tp)
darwin_close	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_close (struct libusb_device_handle *dev_handle) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
darwin_destroy_device	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_destroy_device(struct libusb_device *dev) {$/;"	f	file:	signature:(struct libusb_device *dev)
darwin_detach_kernel_driver	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_detach_kernel_driver (struct libusb_device_handle *dev_handle, int interface) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int interface)
darwin_device_handle_priv	compat/libusb-1.0/libusb/os/darwin_usb.h	/^struct darwin_device_handle_priv {$/;"	s
darwin_device_handle_priv::cfSource	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  CFRunLoopSourceRef   cfSource;$/;"	m	struct:darwin_device_handle_priv	access:public
darwin_device_handle_priv::darwin_interface	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  struct darwin_interface {$/;"	s	struct:darwin_device_handle_priv	access:public
darwin_device_handle_priv::darwin_interface::cfSource	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    CFRunLoopSourceRef   cfSource;$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
darwin_device_handle_priv::darwin_interface::endpoint_addrs	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    uint8_t            endpoint_addrs[USB_MAXENDPOINTS];$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
darwin_device_handle_priv::darwin_interface::frames	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    uint64_t             frames[256];$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
darwin_device_handle_priv::darwin_interface::interface	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    usb_interface_t    **interface;$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
darwin_device_handle_priv::darwin_interface::num_endpoints	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    uint8_t              num_endpoints;$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
darwin_device_handle_priv::fds	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  int                  fds[2];$/;"	m	struct:darwin_device_handle_priv	access:public
darwin_device_handle_priv::interfaces	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  } interfaces[USB_MAXINTERFACES];$/;"	m	struct:darwin_device_handle_priv	typeref:struct:darwin_device_handle_priv::darwin_interface	access:public
darwin_device_handle_priv::is_open	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  int                  is_open;$/;"	m	struct:darwin_device_handle_priv	access:public
darwin_device_priv	compat/libusb-1.0/libusb/os/darwin_usb.h	/^struct darwin_device_priv {$/;"	s
darwin_device_priv::active_config	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  UInt8                 first_config, active_config;$/;"	m	struct:darwin_device_priv	access:public
darwin_device_priv::dev_descriptor	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOUSBDeviceDescriptor dev_descriptor;$/;"	m	struct:darwin_device_priv	access:public
darwin_device_priv::device	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  usb_device_t        **device;$/;"	m	struct:darwin_device_priv	access:public
darwin_device_priv::first_config	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  UInt8                 first_config, active_config;$/;"	m	struct:darwin_device_priv	access:public
darwin_device_priv::location	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  UInt32                location;$/;"	m	struct:darwin_device_priv	access:public
darwin_device_priv::open_count	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  int                   open_count;$/;"	m	struct:darwin_device_priv	access:public
darwin_device_priv::sys_path	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  char                  sys_path[21];$/;"	m	struct:darwin_device_priv	access:public
darwin_devices_attached	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_devices_attached (void *ptr, io_iterator_t add_devices) {$/;"	f	file:	signature:(void *ptr, io_iterator_t add_devices)
darwin_devices_detached	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_devices_detached (void *ptr, io_iterator_t rem_devices) {$/;"	f	file:	signature:(void *ptr, io_iterator_t rem_devices)
darwin_error_str	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static const char *darwin_error_str (int result) {$/;"	f	file:	signature:(int result)
darwin_event_thread_main	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void *darwin_event_thread_main (void *arg0) {$/;"	f	file:	signature:(void *arg0)
darwin_exit	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_exit (void) {$/;"	f	file:	signature:(void)
darwin_get_active_config_descriptor	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_get_active_config_descriptor(struct libusb_device *dev, unsigned char *buffer, size_t len, int *host_endian) {$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer, size_t len, int *host_endian)
darwin_get_config_descriptor	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_get_config_descriptor(struct libusb_device *dev, uint8_t config_index, unsigned char *buffer, size_t len, int *host_endian) {$/;"	f	file:	signature:(struct libusb_device *dev, uint8_t config_index, unsigned char *buffer, size_t len, int *host_endian)
darwin_get_config_descriptor	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_get_config_descriptor(struct libusb_device *dev, uint8_t config_index, unsigned char *buffer, size_t len, int *host_endian);$/;"	p	file:	signature:(struct libusb_device *dev, uint8_t config_index, unsigned char *buffer, size_t len, int *host_endian)
darwin_get_configuration	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_get_configuration(struct libusb_device_handle *dev_handle, int *config) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int *config)
darwin_get_device_descriptor	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_get_device_descriptor(struct libusb_device *dev, unsigned char *buffer, int *host_endian) {$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer, int *host_endian)
darwin_get_interface	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_get_interface (usb_device_t **darwin_device, uint8_t ifc, io_service_t *usbInterfacep) {$/;"	f	file:	signature:(usb_device_t **darwin_device, uint8_t ifc, io_service_t *usbInterfacep)
darwin_handle_callback	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static void darwin_handle_callback (struct usbi_transfer *itransfer, kern_return_t result, UInt32 io_size) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer, kern_return_t result, UInt32 io_size)
darwin_init	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_init(struct libusb_context *ctx) {$/;"	f	file:	signature:(struct libusb_context *ctx)
darwin_interface	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  struct darwin_interface {$/;"	s	struct:darwin_device_handle_priv	access:public
darwin_kernel_driver_active	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_kernel_driver_active(struct libusb_device_handle *dev_handle, int interface) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int interface)
darwin_msg_async_io_complete	compat/libusb-1.0/libusb/os/darwin_usb.h	/^struct darwin_msg_async_io_complete {$/;"	s
darwin_msg_async_io_complete::itransfer	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  struct usbi_transfer *itransfer;$/;"	m	struct:darwin_msg_async_io_complete	typeref:struct:darwin_msg_async_io_complete::usbi_transfer	access:public
darwin_msg_async_io_complete::result	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOReturn result;$/;"	m	struct:darwin_msg_async_io_complete	access:public
darwin_msg_async_io_complete::size	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  UInt32 size;$/;"	m	struct:darwin_msg_async_io_complete	access:public
darwin_open	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_open (struct libusb_device_handle *dev_handle) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
darwin_release_interface	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_release_interface(struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
darwin_release_interface	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_release_interface(struct libusb_device_handle *dev_handle, int iface);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
darwin_request_descriptor	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_request_descriptor (usb_device_t **device, UInt8 desc, UInt8 desc_index, void *buffer, size_t buffer_size) {$/;"	f	file:	signature:(usb_device_t **device, UInt8 desc, UInt8 desc_index, void *buffer, size_t buffer_size)
darwin_reset_device	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_reset_device(struct libusb_device_handle *dev_handle) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
darwin_reset_device	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_reset_device(struct libusb_device_handle *dev_handle);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle)
darwin_scan_devices	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_scan_devices(struct libusb_context *ctx) {$/;"	f	file:	signature:(struct libusb_context *ctx)
darwin_scan_devices	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_scan_devices(struct libusb_context *ctx);$/;"	p	file:	signature:(struct libusb_context *ctx)
darwin_set_configuration	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_set_configuration(struct libusb_device_handle *dev_handle, int config) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int config)
darwin_set_interface_altsetting	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_set_interface_altsetting(struct libusb_device_handle *dev_handle, int iface, int altsetting) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface, int altsetting)
darwin_submit_transfer	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_submit_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
darwin_to_libusb	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_to_libusb (int result) {$/;"	f	file:	signature:(int result)
darwin_transfer_priv	compat/libusb-1.0/libusb/os/darwin_usb.h	/^struct darwin_transfer_priv {$/;"	s
darwin_transfer_priv::isoc_framelist	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOUSBIsocFrame *isoc_framelist;$/;"	m	struct:darwin_transfer_priv	access:public
darwin_transfer_priv::num_iso_packets	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  int num_iso_packets;$/;"	m	struct:darwin_transfer_priv	access:public
darwin_transfer_priv::req	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOUSBDevRequest req;$/;"	m	struct:darwin_transfer_priv	access:public
darwin_transfer_priv::req	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOUSBDevRequestTO req;$/;"	m	struct:darwin_transfer_priv	access:public
darwin_transfer_status	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int darwin_transfer_status (struct usbi_transfer *itransfer, kern_return_t result) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer, kern_return_t result)
data	api-example.php	/^	$data = array();$/;"	v
data	compat/jansson-2.6/src/load.c	/^    char data[MAX_BUF_LEN];$/;"	m	struct:__anon21	file:	access:public
data	compat/jansson-2.6/src/load.c	/^    const char *data;$/;"	m	struct:__anon19	file:	access:public
data	compat/jansson-2.6/src/load.c	/^    const char *data;$/;"	m	struct:__anon20	file:	access:public
data	compat/jansson-2.6/src/load.c	/^    void *data;$/;"	m	struct:__anon16	file:	access:public
data	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *data;	\/* param buffer (in, or out) *\/$/;"	m	struct:usbfs_ioctl	access:public
data	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *data;$/;"	m	struct:usbfs_bulktransfer	access:public
data	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *data;$/;"	m	struct:usbfs_ctrltransfer	access:public
data	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_CONFIGURATION_DESCRIPTOR data;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT	access:public
data	driver-antrouter.c	/^	uint8_t data;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
data	driver-avalon.h	/^	uint8_t data[12];$/;"	m	struct:avalon_result	access:public
data	driver-avalon.h	/^	uint8_t data[12];$/;"	m	struct:avalon_task	access:public
data	driver-avalon2.h	/^	uint8_t data[32];$/;"	m	struct:avalon2_pkg	access:public
data	driver-bmsc.c	/^	uint8_t data;$/;"	m	struct:BMSC_WORK	file:	access:public
data	driver-drillbit.c	/^	uint8_t data[12];$/;"	m	struct:__anon1	file:	access:public
data	driver-hashratio.h	/^	uint8_t data[32];$/;"	m	struct:hashratio_pkg	access:public
data	driver-icarus.c	/^	uint8_t data;$/;"	m	struct:ICARUS_WORK	file:	access:public
data	driver-knc.c	/^			uint32_t data;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
data	driver-minion.c	/^	uint8_t data[4]; \/\/ placeholder$/;"	m	struct:minion_header	file:	access:public
data	klist.h	/^	void *data;$/;"	m	struct:k_item	access:public
data	miner.h	/^	unsigned char	data[128];$/;"	m	struct:work	access:public
data	miner.h	/^	void *data;$/;"	m	struct:api_data	access:public
data	miner.php	/^	$data = array();$/;"	v
data	usbtest.py	/^	data = ""$/;"	v
data	util.c	/^	void			*data;$/;"	m	struct:tq_ent	file:	access:public
data2	driver-bitmain.h	/^	uint8_t data2[12];$/;"	m	struct:bitmain_txtask_work	access:public
data_buffer	util.c	/^struct data_buffer {$/;"	s	file:
data_buffer::buf	util.c	/^	void		*buf;$/;"	m	struct:data_buffer	file:	access:public
data_buffer::len	util.c	/^	size_t		len;$/;"	m	struct:data_buffer	file:	access:public
data_length	hf_protocol.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks$/;"	m	struct:hf_usb_init_header	access:public
data_length	hf_protocol.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks, 0=no data$/;"	m	struct:hf_header	access:public
data_length	hf_protocol.h	/^	uint8_t  data_length;                   \/\/ Always 0$/;"	m	struct:hf_pll_config	access:public
data_length	hf_protocol_be.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks$/;"	m	struct:hf_usb_init_header	access:public
data_length	hf_protocol_be.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks, 0=no data$/;"	m	struct:hf_header	access:public
data_length	hf_protocol_be.h	/^	uint8_t  data_length;                   \/\/ Always 0$/;"	m	struct:hf_pll_config	access:public
data_lock	miner.h	/^	cglock_t data_lock;$/;"	m	struct:pool	access:public
data_mem_count	klist.h	/^	int data_mem_count;	\/\/ how many item data memory buffers have been allocated$/;"	m	struct:k_list	access:public
data_memory	klist.h	/^	void **data_memory;	\/\/ allocated item data memory buffers$/;"	m	struct:k_list	access:public
data_type	driver-bitmain.h	/^	uint8_t data_type;$/;"	m	struct:bitmain_rxnonce_data	access:public
data_type	driver-bitmain.h	/^	uint8_t data_type;$/;"	m	struct:bitmain_rxstatus_data	access:public
data_was_malloc	miner.h	/^	bool data_was_malloc;$/;"	m	struct:api_data	access:public
databuf_free	util.c	/^static void databuf_free(struct data_buffer *db)$/;"	f	file:	signature:(struct data_buffer *db)
datestamp	cgminer.c	/^static char datestamp[40];$/;"	v	file:
days	miner.php	/^						$days = '';$/;"	v
days	miner.php	/^						$days = 's';$/;"	v
ddesc	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	usb_device_descriptor_t ddesc;		\/* usb device descriptor *\/$/;"	m	struct:device_priv	file:	access:public
dead	driver-bflsc.h	/^	bool dead; \/\/ TODO: handle seperate x-link devices failing?$/;"	m	struct:bflsc_dev	access:public
death_stage_one	miner.h	/^	bool death_stage_one;$/;"	m	struct:modminer_fpga_state	access:public
debug	compat/libusb-1.0/libusb/libusbi.h	/^	int debug;$/;"	m	struct:libusb_context	access:public
debug_fixed	compat/libusb-1.0/libusb/libusbi.h	/^	int debug_fixed;$/;"	m	struct:libusb_context	access:public
debugstate	api.c	/^static void debugstate(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
dec	miner.php	/^			$dec = '';$/;"	v
dec	miner.php	/^			$dec = '.'.$parts[1];$/;"	v
dec	miner.php	/^			$dec = '.'.endzero($parts[1]);$/;"	v
decay_time	cgminer.c	/^void decay_time(double *f, double fadd, double fsecs, double interval)$/;"	f	signature:(double *f, double fadd, double fsecs, double interval)
decius_time	util.c	/^static void decius_time(lldiv_t *lidiv)$/;"	f	file:	signature:(lldiv_t *lidiv)
decnonce	driver-drillbit.c	/^static uint32_t decnonce(uint32_t in)$/;"	f	file:	signature:(uint32_t in)
decnonce	libbitfury.c	/^uint32_t decnonce(uint32_t in)$/;"	f	signature:(uint32_t in)
decnonce	libbitfury.h	/^uint32_t decnonce(uint32_t in);$/;"	p	signature:(uint32_t in)
decode_pkg	driver-avalon2.c	/^static int decode_pkg(struct thr_info *thr, struct avalon2_ret *ar, uint8_t *pkg)$/;"	f	file:	signature:(struct thr_info *thr, struct avalon2_ret *ar, uint8_t *pkg)
decode_pkg	driver-hashratio.c	/^static int decode_pkg(struct thr_info *thr, struct hashratio_ret *ar, uint8_t *pkg)$/;"	f	file:	signature:(struct thr_info *thr, struct hashratio_ret *ar, uint8_t *pkg)
decode_unicode_escape	compat/jansson-2.6/src/load.c	/^static int32_t decode_unicode_escape(const char *str)$/;"	f	file:	signature:(const char *str)
decode_voltage	driver-avalon2.c	/^static inline uint32_t decode_voltage(uint32_t v)$/;"	f	file:	signature:(uint32_t v)
decrement	driver-avalon.h	/^	int decrement;$/;"	m	struct:avalon_info	access:public
def_conf	cgminer.c	/^static const char def_conf[] = "cgminer.conf";$/;"	v	file:
def_frq	driver-icarus.c	/^	float def_frq;$/;"	m	struct:rockminer_device_info	file:	access:public
def_speed	driver-bab.c	/^	uint8_t def_speed;$/;"	m	struct:bab_info	file:	access:public
default_all_cores	driver-minion.c	/^static void default_all_cores(uint8_t *cores)$/;"	f	file:	signature:(uint8_t *cores)
default_config	cgminer.c	/^static char *default_config;$/;"	v	file:
default_context_lock	compat/libusb-1.0/libusb/core.c	/^static usbi_mutex_static_t default_context_lock = USBI_MUTEX_INITIALIZER;$/;"	v	file:
default_context_refcnt	compat/libusb-1.0/libusb/core.c	/^static int default_context_refcnt = 0;$/;"	v	file:
default_freq	driver-hashratio.h	/^	int default_freq;$/;"	m	struct:hashratio_info	access:public
default_ms_work	driver-bflsc.h	/^	unsigned int default_ms_work;$/;"	m	struct:bflsc_info	access:public
default_save_file	cgminer.c	/^void default_save_file(char *filename)$/;"	f	signature:(char *filename)
default_save_file	cgminer.c	/^void default_save_file(char *filename);$/;"	p	file:	signature:(char *filename)
default_save_file	miner.h	/^extern void default_save_file(char *filename);$/;"	p	signature:(char *filename)
default_spi_config	spi-context.h	/^static const struct spi_config default_spi_config = {$/;"	v	typeref:struct:spi_config
define_test	driver-minion.c	/^static void define_test()$/;"	f	file:
degen	miner.php	/^function degen(&$csp)$/;"	f
degenfields	miner.php	/^function degenfields(&$sec, $name, $fields)$/;"	f
delay	knc-transport-spi.c	/^	uint16_t delay;$/;"	m	struct:spidev_context	file:	access:public
delay	spi-context.h	/^	uint16_t delay;$/;"	m	struct:spi_config	access:public
delay_bands	driver-bab.c	/^	uint64_t delay_bands[BAB_DELAY_BANDS+2];$/;"	m	struct:bab_info	file:	access:public
delay_count	driver-bab.c	/^	uint64_t delay_count;$/;"	m	struct:bab_info	file:	access:public
delay_count	driver-klondike.c	/^	double delay_count;$/;"	m	struct:klondike_info	file:	access:public
delay_max	driver-bab.c	/^	double delay_max;$/;"	m	struct:bab_info	file:	access:public
delay_max	driver-klondike.c	/^	double delay_max;$/;"	m	struct:klondike_info	file:	access:public
delay_min	driver-bab.c	/^	double delay_min;$/;"	m	struct:bab_info	file:	access:public
delay_min	driver-klondike.c	/^	double delay_min;$/;"	m	struct:klondike_info	file:	access:public
delay_total	driver-klondike.c	/^	double delay_total;$/;"	m	struct:klondike_info	file:	access:public
delay_usecs	driver-bab.c	/^	uint16_t delay_usecs;$/;"	m	struct:bab_info	file:	access:public
depth	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t depth;						\/\/ distance to HCD$/;"	m	struct:windows_device_priv	access:public
desc	ccan/opt/opt.h	/^	const char *desc;$/;"	m	struct:opt_table	access:public
describe	compat/libusb-1.0/libusb/libusb.h	/^	const char *describe;$/;"	m	struct:libusb_version	access:public
description	api.c	/^	const char *description;$/;"	m	struct:CODES	file:	access:public
descriptor	usbutils.h	/^	struct libusb_device_descriptor *descriptor;$/;"	m	struct:cg_usb_device	typeref:struct:cg_usb_device::libusb_device_descriptor	access:public
deserialise_identity	driver-drillbit.c	/^static void deserialise_identity(Identity *id, const char *buf)$/;"	f	file:	signature:(Identity *id, const char *buf)
deserialise_identity	driver-drillbit.c	/^static void deserialise_identity(Identity *identity, const char *buf);$/;"	p	file:	signature:(Identity *identity, const char *buf)
deserialise_work_result	driver-drillbit.c	/^static void deserialise_work_result(WorkResult *work_result, const char *buf);$/;"	p	file:	signature:(WorkResult *work_result, const char *buf)
deserialise_work_result	driver-drillbit.c	/^static void deserialise_work_result(WorkResult *wr, const char *buf)$/;"	f	file:	signature:(WorkResult *wr, const char *buf)
designation	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const char* designation;	\/\/ internal designation (for debug output)$/;"	m	struct:driver_lookup	access:public
designation	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const char* designation;$/;"	m	struct:windows_usb_api_backend	access:public
designation	mcp2210.h	/^	struct gpio_pin designation;$/;"	m	struct:mcp_settings	typeref:struct:mcp_settings::gpio_pin	access:public
destroy_device	compat/libusb-1.0/libusb/libusbi.h	/^	void (*destroy_device)(struct libusb_device *dev);$/;"	m	struct:usbi_os_backend	access:public
destype	usbutils.c	/^static const char *destype(uint8_t bDescriptorType)$/;"	f	file:	signature:(uint8_t bDescriptorType)
detach_kernel_driver	compat/libusb-1.0/libusb/libusbi.h	/^	int (*detach_kernel_driver)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
details	miner.php	/^function details($cmd, $list, $rig)$/;"	f
details	usbutils.c	/^	struct cg_usb_stats_details *details;$/;"	m	struct:cg_usb_stats	typeref:struct:cg_usb_stats::cg_usb_stats_details	file:	access:public
detect_chip_no	driver-icarus.c	/^	unsigned char detect_chip_no;$/;"	m	struct:rockminer_device_info	file:	access:public
detect_coincraft_desk	driver-SPI-bitmine-A1.c	/^bool detect_coincraft_desk(void)$/;"	f	signature:(void)
detect_coincraft_rig_v3	driver-SPI-bitmine-A1.c	/^bool detect_coincraft_rig_v3(void)$/;"	f	signature:(void)
detect_get	driver-bitmain.h	/^	uint8_t detect_get           :1;$/;"	m	struct:bitmain_rxstatus_token	access:public
detect_single_chain	driver-SPI-bitmine-A1.c	/^static bool detect_single_chain(void)$/;"	f	file:	signature:(void)
detect_stratum	cgminer.c	/^bool detect_stratum(struct pool *pool, char *url)$/;"	f	signature:(struct pool *pool, char *url)
detect_stratum	miner.h	/^extern bool detect_stratum(struct pool *pool, char *url);$/;"	p	signature:(struct pool *pool, char *url)
detectone_func_t	fpgautils.h	/^typedef bool(*detectone_func_t)(const char*);$/;"	t
dev	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_device *dev;$/;"	m	struct:libusb_device_handle	typeref:struct:libusb_device_handle::libusb_device	access:public
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:_workresult	file:	access:public
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:_worktask	file:	access:public
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_cfg	file:	access:public
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_header	file:	access:public
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_id	file:	access:public
dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_status	file:	access:public
dev_class	compat/libusb-1.0/libusb/hotplug.h	/^	int dev_class;$/;"	m	struct:libusb_hotplug_callback	access:public
dev_comms_error_count	miner.h	/^	int dev_comms_error_count;$/;"	m	struct:cgpu_info	access:public
dev_dead_idle_600_count	miner.h	/^	int dev_dead_idle_600_count;$/;"	m	struct:cgpu_info	access:public
dev_descriptor	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOUSBDeviceDescriptor dev_descriptor;$/;"	m	struct:darwin_device_priv	access:public
dev_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	unsigned char *dev_descriptor;$/;"	m	struct:linux_device_priv	file:	access:public
dev_descriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_DEVICE_DESCRIPTOR dev_descriptor;$/;"	m	struct:windows_device_priv	access:public
dev_detect_time	driver-icarus.c	/^	time_t dev_detect_time;$/;"	m	struct:rockminer_device_info	file:	access:public
dev_enable	miner.h	/^enum dev_enable {$/;"	g
dev_error	util.c	/^void dev_error(struct cgpu_info *dev, enum dev_reason reason)$/;"	f	signature:(struct cgpu_info *dev, enum dev_reason reason)
dev_error	util.h	/^void dev_error(struct cgpu_info *dev, enum dev_reason reason);$/;"	p	signature:(struct cgpu_info *dev, enum dev_reason reason)
dev_from_id	cgminer.c	/^int dev_from_id(int thr_id)$/;"	f	signature:(int thr_id)
dev_handle	compat/libusb-1.0/libusb/libusb.h	/^	libusb_device_handle *dev_handle;$/;"	m	struct:libusb_transfer	access:public
dev_handle	compat/libusb-1.0/libusb/os/windows_usb.h	/^	HANDLE dev_handle; \/\/ WinUSB needs an extra handle for the file$/;"	m	struct:interface_handle_t	access:public
dev_nostart_count	miner.h	/^	int dev_nostart_count;$/;"	m	struct:cgpu_info	access:public
dev_over_heat_count	miner.h	/^	int dev_over_heat_count;	\/\/ It's a warning but worth knowing$/;"	m	struct:cgpu_info	access:public
dev_reason	miner.h	/^enum dev_reason {$/;"	g
dev_sick_idle_60_count	miner.h	/^	int dev_sick_idle_60_count;$/;"	m	struct:cgpu_info	access:public
dev_start_tv	miner.h	/^	struct timeval dev_start_tv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::timeval	access:public
dev_thermal_cutoff_count	miner.h	/^	int dev_thermal_cutoff_count;$/;"	m	struct:cgpu_info	access:public
dev_throttle_count	miner.h	/^	int dev_throttle_count;$/;"	m	struct:cgpu_info	access:public
dev_type	driver-avalon2.h	/^	int dev_type[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
devcursor	cgminer.c	/^static int devcursor, logstart, logcursor;$/;"	v	file:
devdetails	api.c	/^static void devdetails(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
devdetpage	miner.php	/^$devdetpage = array($/;"	v
devdetsum	miner.php	/^$devdetsum = array($/;"	v
deven	miner.h	/^	enum dev_enable deven;$/;"	m	struct:cgpu_info	typeref:enum:cgpu_info::dev_enable	access:public
devflag	miner.h	/^	bool		devflag;$/;"	m	struct:work	access:public
device	compat/libusb-1.0/libusb/hotplug.h	/^        struct libusb_device *device;$/;"	m	struct:libusb_hotplug_message	typeref:struct:libusb_hotplug_message::libusb_device	access:public
device	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  usb_device_t        **device;$/;"	m	struct:darwin_device_priv	access:public
deviceAddress	driver-bflsc.h	/^	uint8_t deviceAddress;$/;"	m	struct:DataForwardToChain	access:public
device_address	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t device_address;$/;"	m	struct:libusb_device	access:public
device_address	usbutils.c	/^	int device_address;$/;"	m	struct:usb_busdev	file:	access:public
device_address	usbutils.c	/^	uint8_t device_address;$/;"	m	struct:resource_reply	file:	access:public
device_address	usbutils.c	/^	uint8_t device_address;$/;"	m	struct:resource_work	file:	access:public
device_address	usbutils.h	/^	uint8_t device_address;$/;"	m	struct:cg_usb_info	access:public
device_data	miner.h	/^	void *device_data;$/;"	m	struct:cgpu_info	access:public
device_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_device_descriptor device_descriptor;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::libusb_device_descriptor	access:public
device_diff	miner.h	/^	double		device_diff;$/;"	m	struct:work	access:public
device_drv	miner.h	/^struct device_drv {$/;"	s
device_drv::can_limit_work	miner.h	/^	uint64_t (*can_limit_work)(struct thr_info *);$/;"	m	struct:device_drv	access:public
device_drv::copy	miner.h	/^	bool copy;$/;"	m	struct:device_drv	access:public
device_drv::dname	miner.h	/^	char *dname;$/;"	m	struct:device_drv	access:public
device_drv::drv_detect	miner.h	/^	void (*drv_detect)(bool);$/;"	m	struct:device_drv	access:public
device_drv::drv_id	miner.h	/^	enum drv_driver drv_id;$/;"	m	struct:device_drv	typeref:enum:device_drv::drv_driver	access:public
device_drv::flush_work	miner.h	/^	void (*flush_work)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
device_drv::get_api_stats	miner.h	/^	struct api_data *(*get_api_stats)(struct cgpu_info *);$/;"	m	struct:device_drv	typeref:struct:device_drv::get_api_stats	access:public
device_drv::get_statline	miner.h	/^	void (*get_statline)(char *, size_t, struct cgpu_info *);$/;"	m	struct:device_drv	access:public
device_drv::get_statline_before	miner.h	/^	void (*get_statline_before)(char *, size_t, struct cgpu_info *);$/;"	m	struct:device_drv	access:public
device_drv::get_stats	miner.h	/^	bool (*get_stats)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
device_drv::hash_work	miner.h	/^	void (*hash_work)(struct thr_info *);$/;"	m	struct:device_drv	access:public
device_drv::hw_error	miner.h	/^	void (*hw_error)(struct thr_info *);$/;"	m	struct:device_drv	access:public
device_drv::identify_device	miner.h	/^	void (*identify_device)(struct cgpu_info *); \/\/ e.g. to flash a led$/;"	m	struct:device_drv	access:public
device_drv::max_diff	miner.h	/^	double max_diff;$/;"	m	struct:device_drv	access:public
device_drv::min_diff	miner.h	/^	double min_diff;$/;"	m	struct:device_drv	access:public
device_drv::name	miner.h	/^	char *name;$/;"	m	struct:device_drv	access:public
device_drv::prepare_work	miner.h	/^	bool (*prepare_work)(struct thr_info *, struct work *);$/;"	m	struct:device_drv	access:public
device_drv::queue_full	miner.h	/^	bool (*queue_full)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
device_drv::reinit_device	miner.h	/^	void (*reinit_device)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
device_drv::scanhash	miner.h	/^	int64_t (*scanhash)(struct thr_info *, struct work *, int64_t);$/;"	m	struct:device_drv	access:public
device_drv::scanwork	miner.h	/^	int64_t (*scanwork)(struct thr_info *);$/;"	m	struct:device_drv	access:public
device_drv::set_device	miner.h	/^	char *(*set_device)(struct cgpu_info *, char *option, char *setting, char *replybuf);$/;"	m	struct:device_drv	access:public
device_drv::thread_enable	miner.h	/^	void (*thread_enable)(struct thr_info *);$/;"	m	struct:device_drv	access:public
device_drv::thread_init	miner.h	/^	bool (*thread_init)(struct thr_info *);$/;"	m	struct:device_drv	access:public
device_drv::thread_prepare	miner.h	/^	bool (*thread_prepare)(struct thr_info *);$/;"	m	struct:device_drv	access:public
device_drv::thread_shutdown	miner.h	/^	void (*thread_shutdown)(struct thr_info *);$/;"	m	struct:device_drv	access:public
device_drv::update_work	miner.h	/^	void (*update_work)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
device_drv::zero_stats	miner.h	/^	void (*zero_stats)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
device_fd	miner.h	/^	int device_fd;$/;"	m	struct:cgpu_info	access:public
device_handle_priv_size	compat/libusb-1.0/libusb/libusbi.h	/^	size_t device_handle_priv_size;$/;"	m	struct:usbi_os_backend	access:public
device_id	miner.h	/^	int device_id;$/;"	m	struct:cgpu_info	access:public
device_id	usbutils.c	/^	int device_id;$/;"	m	struct:cg_usb_stats	file:	access:public
device_info	driver-klondike.c	/^typedef struct device_info {$/;"	s	file:
device_info::chipstats	driver-klondike.c	/^	uint32_t *chipstats;$/;"	m	struct:device_info	file:	access:public
device_info::lasthashcount	driver-klondike.c	/^	uint16_t lasthashcount;$/;"	m	struct:device_info	file:	access:public
device_info::nextworkid	driver-klondike.c	/^	uint32_t nextworkid;$/;"	m	struct:device_info	file:	access:public
device_info::noncecount	driver-klondike.c	/^	uint32_t noncecount;$/;"	m	struct:device_info	file:	access:public
device_info::rangesize	driver-klondike.c	/^	uint32_t rangesize;$/;"	m	struct:device_info	file:	access:public
device_info::totalhashcount	driver-klondike.c	/^	uint64_t totalhashcount;$/;"	m	struct:device_info	file:	access:public
device_last_not_well	miner.h	/^	time_t device_last_not_well;$/;"	m	struct:cgpu_info	access:public
device_last_well	miner.h	/^	time_t device_last_well;$/;"	m	struct:cgpu_info	access:public
device_mutex	miner.h	/^	pthread_mutex_t device_mutex;$/;"	m	struct:cgpu_info	access:public
device_not_well_reason	miner.h	/^	enum dev_reason device_not_well_reason;$/;"	m	struct:cgpu_info	typeref:enum:cgpu_info::dev_reason	access:public
device_path	miner.h	/^	char *device_path;$/;"	m	struct:cgpu_info	access:public
device_priv	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^struct device_priv {$/;"	s	file:
device_priv::cdesc	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	unsigned char *cdesc;			\/* active config descriptor *\/$/;"	m	struct:device_priv	file:	access:public
device_priv::ddesc	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	usb_device_descriptor_t ddesc;		\/* usb device descriptor *\/$/;"	m	struct:device_priv	file:	access:public
device_priv::devnode	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	char devnode[16];$/;"	m	struct:device_priv	file:	access:public
device_priv::fd	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	int fd;$/;"	m	struct:device_priv	file:	access:public
device_priv_size	compat/libusb-1.0/libusb/libusbi.h	/^	size_t device_priv_size;$/;"	m	struct:usbi_os_backend	access:public
device_sequence_head	driver-hashfast.h	/^	uint16_t device_sequence_head;              \/\/ DEVICE: The most recent sequence number the device dispatched$/;"	m	struct:hashfast_info	access:public
device_sequence_tail	driver-hashfast.h	/^	uint16_t device_sequence_tail;              \/\/ DEVICE: The most recently completed job in the device$/;"	m	struct:hashfast_info	access:public
device_thread	miner.h	/^	int		device_thread;$/;"	m	struct:thr_info	access:public
device_type	driver-hashfast.h	/^	int device_type;                            \/\/ What sort of device this is$/;"	m	struct:hashfast_info	access:public
devices	cgminer.c	/^struct cgpu_info **devices;$/;"	v	typeref:struct:cgpu_info
devices	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_device *devices$/;"	m	struct:discovered_devs	typeref:struct:discovered_devs::libusb_device	access:public
devices_lock	cgminer.c	/^pthread_rwlock_t devices_lock;$/;"	v
devinfo	driver-klondike.c	/^	DEVINFO *devinfo;$/;"	m	struct:klondike_info	file:	access:public
devlock	usbutils.h	/^	cglock_t devlock;$/;"	m	struct:cg_usb_info	access:public
devnode	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	char devnode[16];$/;"	m	struct:device_priv	file:	access:public
devnotpage	miner.php	/^$devnotpage = array($/;"	v
devnotsum	miner.php	/^$devnotsum = array($/;"	v
devnum	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int devnum;$/;"	m	struct:usbfs_connectinfo	access:public
devs	miner.php	/^			$devs = $process;$/;"	v
devs	miner.php	/^$devs = null;$/;"	v
devstatus	api.c	/^static void devstatus(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
dfmt	miner.php	/^$dfmt = 'H:i:s j-M-Y \\U\\T\\CP';$/;"	v
did_lock	driver-bab.c	/^	pthread_mutex_t did_lock;$/;"	m	struct:bab_info	file:	access:public
didnts	api.c	/^	uint64_t didnts; \/\/ should be tries - dids$/;"	m	struct:lockinfo	file:	access:public
dids	api.c	/^	uint64_t dids;$/;"	m	struct:lockinfo	file:	access:public
die	driver-knc.c	/^	int die;$/;"	m	struct:knc_die	file:	access:public
die	driver-knc.c	/^	struct knc_die *die;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::knc_die	file:	access:public
die	driver-knc.c	/^	struct knc_die die[MAX_ASICS*DIES_PER_ASIC];$/;"	m	struct:knc_state	typeref:struct:knc_state::knc_die	file:	access:public
die	hf_protocol.h	/^	struct hf_g1_monitor die;                   \/\/ Die sensors - 8 bytes$/;"	m	struct:hf_g1_die_data	typeref:struct:hf_g1_die_data::hf_g1_monitor	access:public
die	hf_protocol_be.h	/^	struct hf_g1_monitor die;                   \/\/ Die sensors - 8 bytes$/;"	m	struct:hf_g1_die_data	typeref:struct:hf_g1_die_data::hf_g1_monitor	access:public
die_data	driver-hashfast.h	/^	struct hf_die_data *die_data;$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_die_data	access:public
die_statistics	driver-hashfast.h	/^	struct hf_long_statistics *die_statistics;  \/\/ Array of per-die error counters$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_long_statistics	access:public
die_status	driver-hashfast.h	/^	struct hf_g1_die_data *die_status;          \/\/ Array of per-die voltage, current, temperature sensor data$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_g1_die_data	access:public
die_temperature	hf_protocol.h	/^	uint16_t die_temperature;                   \/\/ Die temperature ADC count$/;"	m	struct:hf_g1_monitor	access:public
die_temperature	hf_protocol_be.h	/^	uint16_t die_temperature;                   \/\/ Die temperature ADC count$/;"	m	struct:hf_g1_monitor	access:public
dies	driver-cointerra.h	/^	uint8_t dies;$/;"	m	struct:cointerra_info	access:public
dies	driver-knc.c	/^	int dies;$/;"	m	struct:knc_state	file:	access:public
dies_active	driver-cointerra.h	/^	uint8_t dies_active;$/;"	m	struct:cointerra_info	access:public
diff	driver-bitmain.h	/^	int diff;$/;"	m	struct:bitmain_info	access:public
diff	driver-bitmain.h	/^	uint16_t diff;$/;"	m	struct:bitmain_rxnonce_data	access:public
diff	driver-bitmain.h	/^	uint8_t diff;$/;"	m	struct:bitmain_txtask_token	access:public
diff	driver-blockerupter.h	/^	int diff;$/;"	m	struct:blockerupter_info	access:public
diff	driver-blockerupter.h	/^	uint8_t diff[4];$/;"	m	struct:blockerupter_response	access:public
diff	miner.h	/^	char diff[8];$/;"	m	struct:pool	access:public
diff	miner.h	/^	double diff;$/;"	m	struct:stratum_work	access:public
diff1	miner.h	/^	int64_t diff1;$/;"	m	struct:cgpu_info	access:public
diff1	miner.h	/^	int64_t diff1;$/;"	m	struct:pool	access:public
diff_accepted	miner.h	/^	double diff_accepted;$/;"	m	struct:cgpu_info	access:public
diff_accepted	miner.h	/^	double diff_accepted;$/;"	m	struct:pool	access:public
diff_from_target	cgminer.c	/^static double diff_from_target(void *target)$/;"	f	file:	signature:(void *target)
diff_from_target	cgminer.c	/^static double diff_from_target(void *target);$/;"	p	file:	signature:(void *target)
diff_rejected	miner.h	/^	double diff_rejected;$/;"	m	struct:cgpu_info	access:public
diff_rejected	miner.h	/^	double diff_rejected;$/;"	m	struct:pool	access:public
diff_stale	miner.h	/^	double diff_stale;$/;"	m	struct:pool	access:public
diff_to_bits	driver-cointerra.c	/^static uint8_t diff_to_bits(double diff)$/;"	f	file:	signature:(double diff)
difficulty	driver-spondoolies-sp10-p.h	/^	uint32_t difficulty;$/;"	m	struct:__anon44	access:public
difficulty	driver-spondoolies-sp30-p.h	/^  uint32_t difficulty;$/;"	m	struct:__anon64	access:public
direction	mcp2210.h	/^	struct gpio_pin direction;$/;"	m	struct:mcp_settings	typeref:struct:mcp_settings::gpio_pin	access:public
direction	miner.h	/^	int direction;$/;"	m	struct:cgpu_info	access:public
disable_chip	driver-SPI-bitmine-A1.c	/^static void disable_chip(struct A1_chain *a1, uint8_t chip_id)$/;"	f	file:	signature:(struct A1_chain *a1, uint8_t chip_id)
disable_curses	cgminer.c	/^static void disable_curses(void)$/;"	f	file:	signature:(void)
disable_curses_windows	cgminer.c	/^static void disable_curses_windows(void)$/;"	f	file:	signature:(void)
disable_curses_windows	cgminer.c	/^static void disable_curses_windows(void);$/;"	p	file:	signature:(void)
disable_pool	cgminer.c	/^static void disable_pool(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
disable_sensors	hf_protocol.h	/^	uint8_t  disable_sensors:1;                 \/\/ Diagnostic$/;"	m	struct:hf_config_data	access:public
disable_sensors	hf_protocol_be.h	/^	uint8_t  disable_sensors:1;                 \/\/ Diagnostic$/;"	m	struct:hf_config_data	access:public
disabled	A1-common.h	/^	bool disabled;$/;"	m	struct:A1_chain	access:public
disabled	A1-common.h	/^	bool disabled;$/;"	m	struct:A1_chip	access:public
disabled	driver-bab.c	/^	bool disabled[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
disabled_until	driver-knc.c	/^	struct timeval disabled_until;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::timeval	file:	access:public
disablepool	api.c	/^static void disablepool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
disarm_timerfd	compat/libusb-1.0/libusb/io.c	/^static int disarm_timerfd(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
discard_stale	cgminer.c	/^static void discard_stale(void)$/;"	f	file:	signature:(void)
discard_urbs	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int discard_urbs(struct usbi_transfer *itransfer, int first, int last_plus_one)$/;"	f	file:	signature:(struct usbi_transfer *itransfer, int first, int last_plus_one)
discard_work	miner.h	1549;"	d
discarded_e0s	driver-bab.c	/^	uint64_t discarded_e0s;$/;"	m	struct:bab_info	file:	access:public
discarded_work	miner.h	/^	unsigned int discarded_work;$/;"	m	struct:pool	access:public
discovered_devs	compat/libusb-1.0/libusb/libusbi.h	/^struct discovered_devs {$/;"	s
discovered_devs::capacity	compat/libusb-1.0/libusb/libusbi.h	/^	size_t capacity;$/;"	m	struct:discovered_devs	access:public
discovered_devs::devices	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_device *devices$/;"	m	struct:discovered_devs	typeref:struct:discovered_devs::libusb_device	access:public
discovered_devs::len	compat/libusb-1.0/libusb/libusbi.h	/^	size_t len;$/;"	m	struct:discovered_devs	access:public
discovered_devs_alloc	compat/libusb-1.0/libusb/core.c	/^static struct discovered_devs *discovered_devs_alloc(void)$/;"	f	file:	signature:(void)
discovered_devs_append	compat/libusb-1.0/libusb/core.c	/^struct discovered_devs *discovered_devs_append($/;"	f	signature:( struct discovered_devs *discdevs, struct libusb_device *dev)
discovered_devs_append	compat/libusb-1.0/libusb/libusbi.h	/^struct discovered_devs *discovered_devs_append($/;"	p	signature:( struct discovered_devs *discdevs, struct libusb_device *dev)
discovered_devs_free	compat/libusb-1.0/libusb/core.c	/^static void discovered_devs_free(struct discovered_devs *discdevs)$/;"	f	file:	signature:(struct discovered_devs *discdevs)
display	API.java	/^	public void display(String result) throws Exception$/;"	m	class:API	access:public	signature:(String result)
display	api-example.c	/^void display(char *buf)$/;"	f	signature:(char *buf)
display	miner.php	/^function display()$/;"	f
display_devs	cgminer.c	/^char *display_devs(int *ndevs)$/;"	f	signature:(int *ndevs)
display_ioctl	driver-minion.c	/^static void display_ioctl(int reply, uint32_t osiz, uint8_t *obuf, uint32_t rsiz, uint8_t *rbuf)$/;"	f	file:	signature:(int reply, uint32_t osiz, uint8_t *obuf, uint32_t rsiz, uint8_t *rbuf)
display_kline	driver-klondike.c	/^static void display_kline(struct cgpu_info *klncgpu, KLINE *kline, const char *msg)$/;"	f	file:	signature:(struct cgpu_info *klncgpu, KLINE *kline, const char *msg)
display_options	cgminer.c	/^static void display_options(void)$/;"	f	file:	signature:(void)
display_pool_summary	cgminer.c	/^static void display_pool_summary(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
display_pools	cgminer.c	/^static void display_pools(void)$/;"	f	file:	signature:(void)
display_send_kline	driver-klondike.c	/^static void display_send_kline(struct cgpu_info *klncgpu, KLINE *kline, const char *msg)$/;"	f	file:	signature:(struct cgpu_info *klncgpu, KLINE *kline, const char *msg)
dname	miner.h	/^	char *dname;$/;"	m	struct:device_drv	access:public
dname	usbutils.c	/^	const char *dname;$/;"	m	struct:resource_work	file:	access:public
doOne	miner.php	/^function doOne($rig, $preprocess)$/;"	f
do_a_quit	api.c	/^static bool do_a_quit;$/;"	v	file:
do_a_restart	api.c	/^static bool do_a_restart;$/;"	v	file:
do_antrouter_close	driver-antrouter.c	/^void do_antrouter_close(struct thr_info *thr)$/;"	f	signature:(struct thr_info *thr)
do_antrouter_timing	driver-antrouter.c	/^	bool do_antrouter_timing;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
do_atspeed_core_tests	hf_protocol.h	/^	uint8_t  do_atspeed_core_tests:1;       \/\/ Do core tests at speed, return second bitmap$/;"	m	struct:hf_usb_init_header	access:public
do_atspeed_core_tests	hf_protocol_be.h	/^	uint8_t  do_atspeed_core_tests:1;       \/\/ Do core tests at speed, return second bitmap$/;"	m	struct:hf_usb_init_header	access:public
do_bitmain_close	driver-bitmain.c	/^static void do_bitmain_close(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
do_bmsc_timing	driver-bmsc.c	/^	bool do_bmsc_timing;$/;"	m	struct:BMSC_INFO	file:	access:public
do_close	compat/libusb-1.0/libusb/core.c	/^static void do_close(struct libusb_context *ctx,$/;"	f	file:	signature:(struct libusb_context *ctx, struct libusb_device_handle *dev_handle)
do_dump	compat/jansson-2.6/src/dump.c	/^static int do_dump(const json_t *json, size_t flags, int depth,$/;"	f	file:	signature:(const json_t *json, size_t flags, int depth, json_dump_callback_t dump, void *data)
do_free	compat/jansson-2.6/src/memory.c	/^static json_free_t do_free = free;$/;"	v	file:
do_icarus_timing	driver-icarus.c	/^	bool do_icarus_timing;$/;"	m	struct:ICARUS_INFO	file:	access:public
do_ioctl	driver-minion.c	1616;"	d	file:
do_ioctl	driver-minion.c	1620;"	d	file:
do_malloc	compat/jansson-2.6/src/memory.c	/^static json_malloc_t do_malloc = malloc;$/;"	v	file:
do_ping	driver-modminer.c	/^static void do_ping(struct cgpu_info *modminer)$/;"	f	file:	signature:(struct cgpu_info *modminer)
do_reset	driver-minion.c	/^	double do_reset[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
do_sync_bulk_transfer	compat/libusb-1.0/libusb/sync.c	/^static int do_sync_bulk_transfer(struct libusb_device_handle *dev_handle,$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, unsigned char endpoint, unsigned char *buffer, int length, int *transferred, unsigned int timeout, unsigned char type)
do_tail	klist.h	/^	bool do_tail;		\/\/ track the tail?$/;"	m	struct:k_list	access:public
docalc	miner.php	/^function docalc($func, $data)$/;"	f
docompare	miner.php	/^function docompare($row, $test)$/;"	f
doctype	miner.php	/^$doctype = "<!DOCTYPE html>\\n";$/;"	v
dogen	miner.php	/^function dogen($ext, $wg, $gname, $section, &$res, &$fields)$/;"	f
dohotplug	api.c	/^static void dohotplug(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
dom	miner.php	/^function getcss($cssname, $dom = false)$/;"	v
done	miner.php	/^			$done = true;$/;"	v
done	miner.php	/^	$done = true;$/;"	v
done	miner.php	/^ $done = false;$/;"	v
doquit	api.c	/^void doquit(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
dorestart	api.c	/^void dorestart(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
doretry	miner.php	/^		$doretry = false;$/;"	v
doretry	miner.php	/^ $doretry = ($retries > 0);$/;"	v
dosave	api.c	/^void dosave(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
dototal	miner.php	/^	$dototal = $singlerigsum[$cmd];$/;"	v
dototal	miner.php	/^	$dototal = array();$/;"	v
dozero	api.c	/^static void dozero(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
drillbit_api_stats	driver-drillbit.c	/^static struct api_data *drillbit_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
drillbit_bulk_epinfos	usbutils.c	/^static struct usb_epinfo drillbit_bulk_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
drillbit_check_auto	driver-drillbit.c	/^static void drillbit_check_auto(struct thr_info *thr, struct drillbit_chip_info *chip)$/;"	f	file:	signature:(struct thr_info *thr, struct drillbit_chip_info *chip)
drillbit_checkresults	driver-drillbit.c	/^static bool drillbit_checkresults(struct thr_info *thr, struct work *work, uint32_t nonce)$/;"	f	file:	signature:(struct thr_info *thr, struct work *work, uint32_t nonce)
drillbit_chip_info	driver-drillbit.h	/^struct drillbit_chip_info {$/;"	s
drillbit_chip_info::auto_delta	driver-drillbit.h	/^  int auto_delta;$/;"	m	struct:drillbit_chip_info	access:public
drillbit_chip_info::auto_max	driver-drillbit.h	/^  int auto_max;$/;"	m	struct:drillbit_chip_info	access:public
drillbit_chip_info::chip_id	driver-drillbit.h	/^  uint16_t chip_id;$/;"	m	struct:drillbit_chip_info	access:public
drillbit_chip_info::current_work	driver-drillbit.h	/^  struct work *current_work[WORK_HISTORY_LEN];$/;"	m	struct:drillbit_chip_info	typeref:struct:drillbit_chip_info::work	access:public
drillbit_chip_info::error_auto	driver-drillbit.h	/^  uint32_t error_auto;$/;"	m	struct:drillbit_chip_info	access:public
drillbit_chip_info::error_count	driver-drillbit.h	/^  uint32_t error_count;$/;"	m	struct:drillbit_chip_info	access:public
drillbit_chip_info::state	driver-drillbit.h	/^  enum drillbit_chip_state state;$/;"	m	struct:drillbit_chip_info	typeref:enum:drillbit_chip_info::drillbit_chip_state	access:public
drillbit_chip_info::success_auto	driver-drillbit.h	/^  uint32_t success_auto;$/;"	m	struct:drillbit_chip_info	access:public
drillbit_chip_info::success_count	driver-drillbit.h	/^  uint32_t success_count;$/;"	m	struct:drillbit_chip_info	access:public
drillbit_chip_info::timeout_count	driver-drillbit.h	/^  uint32_t timeout_count;$/;"	m	struct:drillbit_chip_info	access:public
drillbit_chip_info::tv_start	driver-drillbit.h	/^  struct timeval tv_start;$/;"	m	struct:drillbit_chip_info	typeref:struct:drillbit_chip_info::timeval	access:public
drillbit_chip_info::work_sent_count	driver-drillbit.h	/^  uint32_t work_sent_count;$/;"	m	struct:drillbit_chip_info	access:public
drillbit_chip_state	driver-drillbit.h	/^enum drillbit_chip_state {$/;"	g
drillbit_close	driver-drillbit.c	/^static void drillbit_close(struct cgpu_info *drillbit)$/;"	f	file:	signature:(struct cgpu_info *drillbit)
drillbit_detect	driver-drillbit.c	/^static void drillbit_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
drillbit_detect_one	driver-drillbit.c	/^static struct cgpu_info *drillbit_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
drillbit_drv	driver-drillbit.c	/^struct device_drv drillbit_drv = {$/;"	v	typeref:struct:device_drv
drillbit_empty_buffer	driver-drillbit.c	/^static void drillbit_empty_buffer(struct cgpu_info *drillbit)$/;"	f	file:	signature:(struct cgpu_info *drillbit)
drillbit_empty_buffer	driver-drillbit.c	/^static void drillbit_empty_buffer(struct cgpu_info *drillbit);$/;"	p	file:	signature:(struct cgpu_info *drillbit)
drillbit_get_statline_before	driver-drillbit.c	/^static void drillbit_get_statline_before(char *buf, size_t bufsiz, struct cgpu_info *drillbit)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *drillbit)
drillbit_getinfo	driver-drillbit.c	/^static bool drillbit_getinfo(struct cgpu_info *drillbit, struct drillbit_info *info)$/;"	f	file:	signature:(struct cgpu_info *drillbit, struct drillbit_info *info)
drillbit_identify	driver-drillbit.c	/^static void drillbit_identify(struct cgpu_info *drillbit)$/;"	f	file:	signature:(struct cgpu_info *drillbit)
drillbit_info	driver-drillbit.h	/^struct drillbit_info {$/;"	s
drillbit_info::base_cgpu	driver-drillbit.h	/^  struct cgpu_info *base_cgpu;$/;"	m	struct:drillbit_info	typeref:struct:drillbit_info::cgpu_info	access:public
drillbit_info::capabilities	driver-drillbit.h	/^  uint16_t capabilities;$/;"	m	struct:drillbit_info	access:public
drillbit_info::chips	driver-drillbit.h	/^  struct drillbit_chip_info *chips;$/;"	m	struct:drillbit_info	typeref:struct:drillbit_info::drillbit_chip_info	access:public
drillbit_info::max_temp	driver-drillbit.h	/^  uint16_t max_temp;$/;"	m	struct:drillbit_info	access:public
drillbit_info::num_chips	driver-drillbit.h	/^  uint8_t num_chips;$/;"	m	struct:drillbit_info	access:public
drillbit_info::product	driver-drillbit.h	/^  char product[8];$/;"	m	struct:drillbit_info	access:public
drillbit_info::protocol_version	driver-drillbit.h	/^  uint8_t protocol_version;$/;"	m	struct:drillbit_info	access:public
drillbit_info::serial	driver-drillbit.h	/^  uint32_t serial;$/;"	m	struct:drillbit_info	access:public
drillbit_info::temp	driver-drillbit.h	/^  uint16_t temp;$/;"	m	struct:drillbit_info	access:public
drillbit_info::tv_lastchipinfo	driver-drillbit.h	/^  struct timeval tv_lastchipinfo;$/;"	m	struct:drillbit_info	typeref:struct:drillbit_info::timeval	access:public
drillbit_info::tv_lasttemp	driver-drillbit.h	/^  struct timeval tv_lasttemp;$/;"	m	struct:drillbit_info	typeref:struct:drillbit_info::timeval	access:public
drillbit_int_epinfos	usbutils.c	/^static struct usb_epinfo drillbit_int_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
drillbit_ints	usbutils.c	/^static struct usb_intinfo drillbit_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
drillbit_open	driver-drillbit.c	/^static void drillbit_open(struct cgpu_info *drillbit)$/;"	f	file:	signature:(struct cgpu_info *drillbit)
drillbit_parse_options	driver-drillbit.c	/^static bool drillbit_parse_options(__maybe_unused struct cgpu_info *drillbit)$/;"	f	file:	signature:(__maybe_unused struct cgpu_info *drillbit)
drillbit_reinit	driver-drillbit.c	/^static void drillbit_reinit(struct cgpu_info  *drillbit)$/;"	f	file:	signature:(struct cgpu_info *drillbit)
drillbit_reset	driver-drillbit.c	/^static bool drillbit_reset(struct cgpu_info *drillbit)$/;"	f	file:	signature:(struct cgpu_info *drillbit)
drillbit_scanwork	driver-drillbit.c	/^static int64_t drillbit_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
drillbit_send_config	driver-drillbit.c	/^static void drillbit_send_config(struct cgpu_info *drillbit)$/;"	f	file:	signature:(struct cgpu_info *drillbit)
drillbit_send_work_to_chip	driver-drillbit.c	/^static void drillbit_send_work_to_chip(struct thr_info *thr, struct drillbit_chip_info *chip)$/;"	f	file:	signature:(struct thr_info *thr, struct drillbit_chip_info *chip)
drillbit_shutdown	driver-drillbit.c	/^static void drillbit_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
drillbit_updatetemps	driver-drillbit.c	/^static void drillbit_updatetemps(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
driver	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	char driver[USBFS_MAXDRIVERNAME + 1];$/;"	m	struct:usbfs_getdriver	access:public
driver_count	usbutils.c	/^static struct driver_count {$/;"	s	file:
driver_count::count	usbutils.c	/^	int count;$/;"	m	struct:driver_count	file:	access:public
driver_count::limit	usbutils.c	/^	int limit;$/;"	m	struct:driver_count	file:	access:public
driver_lookup	compat/libusb-1.0/libusb/os/windows_usb.h	/^struct driver_lookup {$/;"	s
driver_lookup::designation	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const char* designation;	\/\/ internal designation (for debug output)$/;"	m	struct:driver_lookup	access:public
driver_lookup::list	compat/libusb-1.0/libusb/os/windows_usb.h	/^	char list[MAX_KEY_LENGTH+1];\/\/ REG_MULTI_SZ list of services (driver) names$/;"	m	struct:driver_lookup	access:public
driver_lookup::reg_prop	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const DWORD reg_prop;		\/\/ SPDRP registry key to use to retreive list$/;"	m	struct:driver_lookup	access:public
driver_name_list	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const char **driver_name_list; \/\/ Driver name, without .sys, e.g. "usbccgp"$/;"	m	struct:windows_usb_api_backend	access:public
driver_version	driver-bflsc.h	/^	enum driver_version driver_version;$/;"	m	struct:bflsc_info	typeref:enum:bflsc_info::driver_version	access:public
driver_version	driver-bflsc.h	/^enum driver_version {$/;"	g
drv	miner.h	/^	struct device_drv *drv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::device_drv	access:public
drv	usbutils.h	/^	int drv;$/;"	m	struct:usb_find_devices	access:public
drv_count	usbutils.c	/^} drv_count[DRIVER_MAX];$/;"	v	typeref:struct:driver_count	file:
drv_detect	miner.h	/^	void (*drv_detect)(bool);$/;"	m	struct:device_drv	access:public
drv_driver	miner.h	/^enum drv_driver {$/;"	g
drv_id	miner.h	/^	enum drv_driver drv_id;$/;"	m	struct:device_drv	typeref:enum:device_drv::drv_driver	access:public
drv_rolllimit	miner.h	/^	int		drv_rolllimit; \/* How much the driver can roll ntime *\/$/;"	m	struct:work	access:public
drv_ver	driver-bflsc.c	/^static enum driver_version drv_ver(struct cgpu_info *bflsc, const char *ver)$/;"	f	file:	signature:(struct cgpu_info *bflsc, const char *ver)
drvlog	driver-drillbit.c	22;"	d	file:
dsp_det	api.c	/^void dsp_det(char *msg, LOCKSTAT *stat)$/;"	f	signature:(char *msg, LOCKSTAT *stat)
dsp_lock	api.c	/^void dsp_lock(LOCKINFO *info)$/;"	f	signature:(LOCKINFO *info)
dst_b	api.c	2772;"	d	file:
dthead	miner.php	/^ $dthead = array($headname => 1, 'STATUS' => 1, 'Description' => 1, 'When' => 1, 'API' => 1, 'CGMiner' => 1);$/;"	v
dummy	ccan/typesafe_cb/test/run.c	/^static char dummy = 0;$/;"	v	file:
dummy	lib/dummy.c	/^typedef int dummy;$/;"	t	file:
dummy_board_selector	A1-board-selector.h	/^static const struct board_selector dummy_board_selector = {$/;"	v	typeref:struct:board_selector
dummy_bool	A1-board-selector.h	/^static bool dummy_bool(void) { return true; }$/;"	f	signature:(void)
dummy_get_temp	A1-board-selector.h	/^static uint8_t dummy_get_temp(uint8_t s) { (void)s; return 0; }$/;"	f	signature:(uint8_t s)
dummy_prepare_clock	A1-board-selector.h	/^static bool dummy_prepare_clock(int c) { (void)c; return true; }$/;"	f	signature:(int c)
dummy_select	A1-board-selector.h	/^static bool dummy_select(uint8_t b) { (void)b; return true; }$/;"	f	signature:(uint8_t b)
dummy_void	A1-board-selector.h	/^static void dummy_void(void) { };$/;"	f	signature:(void)
dump_indent	compat/jansson-2.6/src/dump.c	/^static int dump_indent(size_t flags, int depth, int space, json_dump_callback_t dump, void *data)$/;"	f	file:	signature:(size_t flags, int depth, int space, json_dump_callback_t dump, void *data)
dump_string	compat/jansson-2.6/src/dump.c	/^static int dump_string(const char *str, json_dump_callback_t dump, void *data, size_t flags)$/;"	f	file:	signature:(const char *str, json_dump_callback_t dump, void *data, size_t flags)
dump_to_file	compat/jansson-2.6/src/dump.c	/^static int dump_to_file(const char *buffer, size_t size, void *data)$/;"	f	file:	signature:(const char *buffer, size_t size, void *data)
dump_to_strbuffer	compat/jansson-2.6/src/dump.c	/^static int dump_to_strbuffer(const char *buffer, size_t size, void *data)$/;"	f	file:	signature:(const char *buffer, size_t size, void *data)
dup_data	miner.h	/^	void *dup_data;$/;"	m	struct:cgpu_info	access:public
dupalloc	miner.h	/^extern void dupalloc(struct cgpu_info *cgpu, int timelimit);$/;"	p	signature:(struct cgpu_info *cgpu, int timelimit)
dupalloc	noncedup.c	/^void dupalloc(struct cgpu_info *cgpu, int timelimit)$/;"	f	signature:(struct cgpu_info *cgpu, int timelimit)
dupcounters	miner.h	/^extern void dupcounters(struct cgpu_info *cgpu, uint64_t *checked, uint64_t *dups);$/;"	p	signature:(struct cgpu_info *cgpu, uint64_t *checked, uint64_t *dups)
dupcounters	noncedup.c	/^void dupcounters(struct cgpu_info *cgpu, uint64_t *checked, uint64_t *dups)$/;"	f	signature:(struct cgpu_info *cgpu, uint64_t *checked, uint64_t *dups)
dupdata	noncedup.c	/^struct dupdata {$/;"	s	file:
dupdata::checked	noncedup.c	/^	uint64_t checked;$/;"	m	struct:dupdata	file:	access:public
dupdata::dups	noncedup.c	/^	uint64_t dups;$/;"	m	struct:dupdata	file:	access:public
dupdata::nfree_list	noncedup.c	/^	K_LIST *nfree_list;$/;"	m	struct:dupdata	file:	access:public
dupdata::nonce_list	noncedup.c	/^	K_STORE *nonce_list;$/;"	m	struct:dupdata	file:	access:public
dupdata::timelimit	noncedup.c	/^	int timelimit;$/;"	m	struct:dupdata	file:	access:public
dups	noncedup.c	/^	uint64_t dups;$/;"	m	struct:dupdata	file:	access:public
early_quit	logging.h	85;"	d
edevstatus	api.c	/^static void edevstatus(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
eff	driver-blockerupter.h	/^	double eff;$/;"	m	struct:blockerupter_info	access:public
elapsed	driver-minion.c	/^	double elapsed;$/;"	m	struct:perf_item	file:	access:public
empty	driver-spondoolies-sp10.h	/^	int empty;$/;"	m	struct:spond_adapter	access:public
empty	driver-spondoolies-sp30.h	/^	int empty;$/;"	m	struct:spond_adapter	access:public
enable	cgminer.c	/^	bool enable;$/;"	m	struct:schedtime	file:	access:public
enable	driver-avalon2.h	/^	bool enable[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
enable_chip_cores	driver-minion.c	/^static void enable_chip_cores(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip)
enable_curses	cgminer.c	/^void enable_curses(void) {$/;"	f	signature:(void)
enable_curses_windows	cgminer.c	/^static void enable_curses_windows(void)$/;"	f	file:	signature:(void)
enable_curses_windows	cgminer.c	/^static void enable_curses_windows(void);$/;"	p	file:	signature:(void)
enable_debug	cgminer.c	/^static char *enable_debug(bool *flag)$/;"	f	file:	signature:(bool *flag)
enable_device	cgminer.c	/^void enable_device(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
enable_interrupt	driver-minion.c	/^static void enable_interrupt(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip)
enable_periodic_status	hf_protocol.h	/^	uint16_t enable_periodic_status:1;          \/\/ Send periodic status$/;"	m	struct:hf_config_data	access:public
enable_periodic_status	hf_protocol_be.h	/^	uint16_t enable_periodic_status:1;          \/\/ Send periodic status$/;"	m	struct:hf_config_data	access:public
enable_pool	cgminer.c	/^static void enable_pool(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
enabled	miner.h	/^	enum pool_enable enabled;$/;"	m	struct:pool	typeref:enum:pool::pool_enable	access:public
enabled_pools	cgminer.c	/^int total_pools, enabled_pools;$/;"	v
enablepool	api.c	/^static void enablepool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
encode_voltage	driver-avalon2.c	/^static inline uint32_t encode_voltage(uint32_t v)$/;"	f	file:	signature:(uint32_t v)
endOfBlock	driver-bflsc.h	/^	uint8_t endOfBlock;$/;"	m	struct:QueueJobStructure	access:public
endOfWrapper	driver-bflsc.h	/^	uint8_t endOfWrapper;$/;"	m	struct:QueueJobPackStructure	access:public
endian_flip128	miner.h	/^endian_flip128(void __maybe_unused *dest_p, const void __maybe_unused *src_p)$/;"	f	signature:(void __maybe_unused *dest_p, const void __maybe_unused *src_p)
endian_flip128	miner.h	/^static inline void endian_flip128(void *dest_p, const void *src_p)$/;"	f	signature:(void *dest_p, const void *src_p)
endian_flip32	miner.h	/^endian_flip32(void __maybe_unused *dest_p, const void __maybe_unused *src_p)$/;"	f	signature:(void __maybe_unused *dest_p, const void __maybe_unused *src_p)
endian_flip32	miner.h	/^static inline void endian_flip32(void *dest_p, const void *src_p)$/;"	f	signature:(void *dest_p, const void *src_p)
endpoint	compat/libusb-1.0/libusb/libusb.h	/^	const struct libusb_endpoint_descriptor *endpoint;$/;"	m	struct:libusb_interface_descriptor	typeref:struct:libusb_interface_descriptor::libusb_endpoint_descriptor	access:public
endpoint	compat/libusb-1.0/libusb/libusb.h	/^	unsigned char endpoint;$/;"	m	struct:libusb_transfer	access:public
endpoint	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char endpoint;$/;"	m	struct:usbfs_urb	access:public
endpoint	compat/libusb-1.0/libusb/os/windows_usb.h	/^		uint8_t *endpoint;$/;"	m	struct:windows_device_priv::__anon30	access:public
endpoint_addrs	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    uint8_t            endpoint_addrs[USB_MAXENDPOINTS];$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
endpoints	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	int endpoints[USB_MAX_ENDPOINTS];$/;"	m	struct:handle_priv	file:	access:public
endrow	miner.php	/^function endrow()$/;"	f
endtable	miner.php	/^function endtable()$/;"	f
endzero	miner.php	/^function endzero($num)$/;"	f
engines	driver-bflsc.h	/^	int engines; \/\/ each engine represents a 'thread' in a chip$/;"	m	struct:bflsc_dev	access:public
entries	compat/jansson-2.6/src/jansson_private.h	/^    size_t entries;$/;"	m	struct:__anon23	access:public
ep	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int ep;$/;"	m	struct:usbfs_bulktransfer	access:public
ep	usbutils.h	/^	unsigned char ep;$/;"	m	struct:usb_epinfo	access:public
ep_to_pipeRef	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int ep_to_pipeRef(struct libusb_device_handle *dev_handle, uint8_t ep, uint8_t *pipep, uint8_t *ifcp) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, uint8_t ep, uint8_t *pipep, uint8_t *ifcp)
epatt	usbutils.c	/^static const char *epatt(uint8_t bmAttributes)$/;"	f	file:	signature:(uint8_t bmAttributes)
epdir	usbutils.c	/^static const char *epdir(uint8_t bEndpointAddress)$/;"	f	file:	signature:(uint8_t bEndpointAddress)
epinfo_count	usbutils.h	/^	int epinfo_count;$/;"	m	struct:usb_intinfo	access:public
epinfos	usbutils.h	/^	struct usb_epinfo *epinfos;$/;"	m	struct:usb_intinfo	typeref:struct:usb_intinfo::usb_epinfo	access:public
epoch_time	compat/libusb-1.0/libusb/os/windows_usb.c	/^const uint64_t epoch_time = UINT64_C(116444736000000000);	\/\/ 1970.01.01 00:00:000 in MS Filetime$/;"	v
err_output	ccan/opt/test/utils.c	/^char *err_output = NULL;$/;"	v
error	api-example.php	/^	$error = socket_strerror(socket_last_error());$/;"	v
error	compat/jansson-2.6/src/pack_unpack.c	/^    json_error_t *error;$/;"	m	struct:__anon15	file:	access:public
error	miner.php	/^			$error = "$msg '$error'\\n";$/;"	v
error	miner.php	/^			$error = "$msg\\n";$/;"	v
error	miner.php	/^			$error = socket_strerror(socket_last_error());$/;"	v
error	miner.php	/^		$error = "$msg '$error'\\n";$/;"	v
error	miner.php	/^		$error = "$msg1$listname,$mcastlistport$msg2 '$error'\\n";$/;"	v
error	miner.php	/^		$error = "$msg1$msg2\\n";$/;"	v
error	miner.php	/^		$error = "$msg\\n";$/;"	v
error	miner.php	/^		$error = "ERR: $msg '$error'\\n";$/;"	v
error	miner.php	/^		$error = "ERR: socket connect($rig) failed\\n";$/;"	v
error	miner.php	/^		$error = "ERR: socket create(TCP) failed\\n";$/;"	v
error	miner.php	/^		$error = "WARN: '$cmd' returned nothing\\n";$/;"	v
error	miner.php	/^		$error = socket_strerror(socket_last_error());$/;"	v
error	miner.php	/^	$error = null;$/;"	v
error	miner.php	/^ $error = null;$/;"	v
error	miner.php	/^$error = null;$/;"	v
error_auto	driver-drillbit.h	/^  uint32_t error_auto;$/;"	m	struct:drillbit_chip_info	access:public
error_cnt	driver-icarus.c	/^	int error_cnt;$/;"	m	struct:rockminer_chip_info	file:	access:public
error_count	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int error_count;$/;"	m	struct:usbfs_urb	access:public
error_count	driver-drillbit.h	/^  uint32_t error_count;$/;"	m	struct:drillbit_chip_info	access:public
error_set	compat/jansson-2.6/src/load.c	/^static void error_set(json_error_t *error, const lex_t *lex,$/;"	f	file:	signature:(json_error_t *error, const lex_t *lex, const char *msg, ...)
errorclass	miner.php	/^ $errorclass = 'err';$/;"	v
errorcount	driver-bitmain.h	/^	int errorcount;$/;"	m	struct:bitmain_info	access:public
errorcount	driver-klondike.c	/^	uint64_t errorcount;$/;"	m	struct:klondike_info	file:	access:public
errorcount	driver-klondike.c	/^	uint8_t errorcount;$/;"	m	struct:klondike_status	file:	access:public
errors	driver-knc.c	/^	uint32_t errors;$/;"	m	struct:knc_core_state	file:	access:public
errors	driver-knc.c	/^	uint64_t errors;		\/* Hardware & communication errors *\/$/;"	m	struct:knc_state	file:	access:public
errors	driver-minion.c	/^	int errors; \/\/ uncertain since the error could mean task_id is wrong$/;"	m	struct:work_item	file:	access:public
errors	miner.php	/^	$errors = array();$/;"	v
errors	miner.php	/^ $errors = array();$/;"	v
errors_now	driver-knc.c	/^	uint32_t errors_now;$/;"	m	struct:knc_core_state	file:	access:public
errx	ccan/opt/opt.c	11;"	d	file:
errx	ccan/opt/test/run-checkopt.c	12;"	d	file:
escape_string	api.c	/^static char *escape_string(char *str, bool isjson)$/;"	f	file:	signature:(char *str, bool isjson)
event	compat/libusb-1.0/libusb/hotplug.h	/^        libusb_hotplug_event event;$/;"	m	struct:libusb_hotplug_message	access:public
event	compat/libusb-1.0/libusb/os/threads_windows.h	/^	HANDLE           event;$/;"	m	struct:usbi_cond_perthread	access:public
event_handler_active	compat/libusb-1.0/libusb/libusbi.h	/^	int event_handler_active;$/;"	m	struct:libusb_context	access:public
event_waiters_cond	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_cond_t event_waiters_cond;$/;"	m	struct:libusb_context	access:public
event_waiters_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t event_waiters_lock;$/;"	m	struct:libusb_context	access:public
events	compat/libusb-1.0/libusb/hotplug.h	/^	libusb_hotplug_event events;$/;"	m	struct:libusb_hotplug_callback	access:public
events	compat/libusb-1.0/libusb/libusb.h	/^	short events;$/;"	m	struct:libusb_pollfd	access:public
events	compat/libusb-1.0/libusb/os/poll_windows.h	/^    short events;     \/* requested events *\/$/;"	m	struct:pollfd	access:public
events_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t events_lock;$/;"	m	struct:libusb_context	access:public
exec_cmd	driver-SPI-bitmine-A1.c	/^static uint8_t *exec_cmd(struct A1_chain *a1,$/;"	f	file:	signature:(struct A1_chain *a1, uint8_t cmd, uint8_t chip_id, uint8_t *data, uint8_t len, uint8_t resp_len)
exit	A1-board-selector.h	/^	void (*exit)(void);$/;"	m	struct:board_selector	access:public
exit	A1-trimpot-mcp4x.h	/^	void (*exit)(struct mcp4x *me);$/;"	m	struct:mcp4x	access:public
exit	ccan/opt/test/run-helpers.c	11;"	d	file:
exit	compat/libusb-1.0/libusb/libusbi.h	/^	void (*exit)(void);$/;"	m	struct:usbi_os_backend	access:public
exit	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*exit)(void);$/;"	m	struct:windows_usb_api_backend	access:public
exit	i2c-context.h	/^	void (*exit)(struct i2c_ctx *ctx);$/;"	m	struct:i2c_ctx	access:public
exit_A1_chain	driver-SPI-bitmine-A1.c	/^void exit_A1_chain(struct A1_chain *a1)$/;"	f	signature:(struct A1_chain *a1)
exit_buf	cgminer.c	/^static char exit_buf[512];$/;"	v	file:
exit_polling	compat/libusb-1.0/libusb/os/poll_windows.c	/^void exit_polling(void)$/;"	f	signature:(void)
exit_polling	compat/libusb-1.0/libusb/os/poll_windows.h	/^void exit_polling(void);$/;"	p	signature:(void)
exited	ccan/opt/test/run-checkopt.c	/^static jmp_buf exited;$/;"	v	file:
exited	ccan/opt/test/run-helpers.c	/^static jmp_buf exited;$/;"	v	file:
exnonc2	driver-blockerupter.h	/^	uint8_t exnonc2[4];$/;"	m	struct:blockerupter_response	access:public
expand_mult	uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket	access:public
expected	driver-blockerupter.h	/^	double expected;$/;"	m	struct:blockerupter_info	access:public
expected	miner.php	/^					$expected = 0.000001; \/\/ 1 H\/s$/;"	v
expected	miner.php	/^				$expected = 60 * $alldata['MHS av'] * (pow(10, 6) \/ pow(2, 32));$/;"	v
expected	miner.php	/^				$expected = 60 * $value * (pow(10, 6) \/ pow(2, 32));$/;"	v
expected	miner.php	/^ $expected = pow(2, 32) \/ ($alldata['MHS av'] * pow(10, 6));$/;"	v
ext	miner.php	/^	$ext = $csp[2];$/;"	v
ext	miner.php	/^ $ext = 2;$/;"	v
ext	miner.php	/^ $ext = null;$/;"	v
ext_clock_freq	driver-drillbit.c	/^	uint16_t ext_clock_freq;$/;"	m	struct:__anon5	file:	access:public
ext_signal	lib/sigprocmask.c	/^ext_signal (int sig, handler_t handler)$/;"	f	file:	signature:(int sig, handler_t handler)
extra	compat/libusb-1.0/libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_config_descriptor	access:public
extra	compat/libusb-1.0/libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_endpoint_descriptor	access:public
extra	compat/libusb-1.0/libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_interface_descriptor	access:public
extra_data	hf_protocol.h	/^	uint32_t extra_data;                        \/\/ Depends on notification code$/;"	m	struct:hf_usb_notice_data	access:public
extra_data	hf_protocol_be.h	/^	uint32_t extra_data;                        \/\/ Depends on notification code$/;"	m	struct:hf_usb_notice_data	access:public
extra_length	compat/libusb-1.0/libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_config_descriptor	access:public
extra_length	compat/libusb-1.0/libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_endpoint_descriptor	access:public
extra_length	compat/libusb-1.0/libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_interface_descriptor	access:public
extra_status_1	hf_protocol.h	/^	uint8_t  extra_status_1;                    \/\/ Extra reply status information, code specific$/;"	m	struct:hf_usb_init_base	access:public
extra_status_1	hf_protocol_be.h	/^	uint8_t  extra_status_1;                    \/\/ Extra reply status information, code specific$/;"	m	struct:hf_usb_init_base	access:public
extract_sockaddr	util.c	/^bool extract_sockaddr(char *url, char **sockaddr_url, char **sockaddr_port)$/;"	f	signature:(char *url, char **sockaddr_url, char **sockaddr_port)
extract_sockaddr	util.h	/^bool extract_sockaddr(char *url, char **sockaddr_url, char **sockaddr_port);$/;"	p	signature:(char *url, char **sockaddr_url, char **sockaddr_port)
extranonce_subscribe	miner.h	/^	bool extranonce_subscribe;$/;"	m	struct:pool	access:public
extranonce_subscribe_stratum	util.c	/^void extranonce_subscribe_stratum(struct pool *pool)$/;"	f	signature:(struct pool *pool)
extranonce_subscribe_stratum	util.h	/^void extranonce_subscribe_stratum(struct pool *pool);$/;"	p	signature:(struct pool *pool)
extraparams	miner.php	/^		$extraparams = "&pg=$pg";$/;"	v
extraparams	miner.php	/^	$extraparams = "&rig=$rig";$/;"	v
extraparams	miner.php	/^ $extraparams = '';$/;"	v
f	miner.php	/^								foreach ($row as $f => $v)$/;"	v
fail	driver-bab.c	/^	uint64_t fail;$/;"	m	struct:bab_info	file:	access:public
fail_count	A1-common.h	/^	int fail_count;$/;"	m	struct:A1_chip	access:public
fail_time	driver-icarus.c	/^	int fail_time;$/;"	m	struct:ICARUS_INFO	file:	access:public
fail_total_links	driver-bab.c	/^	uint64_t fail_total_links;$/;"	m	struct:bab_info	file:	access:public
fail_total_tests	driver-bab.c	/^	uint64_t fail_total_tests;$/;"	m	struct:bab_info	file:	access:public
fail_total_work_links	driver-bab.c	/^	uint64_t fail_total_work_links;$/;"	m	struct:bab_info	file:	access:public
failing	driver-avalon2.h	/^	bool failing;$/;"	m	struct:avalon2_info	access:public
failing	driver-bitfury.h	/^	bool failing; \/* Set when an attempted restart has been sent *\/$/;"	m	struct:bitfury_info	access:public
failing	driver-icarus.c	/^	bool failing;$/;"	m	struct:ICARUS_INFO	file:	access:public
failoveronly	api.c	/^static void failoveronly(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
false	compat/libusb-1.0/libusb/os/windows_usb.h	41;"	d
fan	driver-avalon2.h	/^	int fan[2 * AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
fan	driver-bitmain.h	/^	int fan[BITMAIN_MAX_FAN_NUM];$/;"	m	struct:bitmain_info	access:public
fan	driver-bitmain.h	/^	uint8_t fan[BITMAIN_MAX_FAN_NUM];$/;"	m	struct:bitmain_rxstatus_data	access:public
fan	driver-hashratio.h	/^	int     fan[HRTO_FAN_COUNT];$/;"	m	struct:hashratio_info	access:public
fan0	driver-avalon.h	/^	int fan0;$/;"	m	struct:avalon_info	access:public
fan0	driver-avalon.h	/^	uint8_t fan0;$/;"	m	struct:avalon_result	access:public
fan1	driver-avalon.h	/^	int fan1;$/;"	m	struct:avalon_info	access:public
fan1	driver-avalon.h	/^	uint8_t fan1;$/;"	m	struct:avalon_result	access:public
fan2	driver-avalon.h	/^	int fan2;$/;"	m	struct:avalon_info	access:public
fan2	driver-avalon.h	/^	uint8_t fan2;$/;"	m	struct:avalon_result	access:public
fan_eft	driver-avalon.h	/^	uint8_t fan_eft		:1;$/;"	m	struct:avalon_task	access:public
fan_eft	driver-bitmain.h	/^	uint8_t fan_eft              :1;$/;"	m	struct:bitmain_txconfig_token	access:public
fan_exist	driver-bitmain.h	/^	uint16_t fan_exist;$/;"	m	struct:bitmain_rxstatus_data	access:public
fan_num	driver-bitmain.h	/^	int fan_num;$/;"	m	struct:bitmain_info	access:public
fan_num	driver-bitmain.h	/^	uint8_t fan_num;$/;"	m	struct:bitmain_rxstatus_data	access:public
fan_pct	driver-avalon2.h	/^	int fan_pct;$/;"	m	struct:avalon2_info	access:public
fan_pwm	driver-avalon.h	/^	int fan_pwm;$/;"	m	struct:avalon_info	access:public
fan_pwm	driver-avalon2.h	/^	int fan_pwm;$/;"	m	struct:avalon2_info	access:public
fan_pwm	driver-bitmain.h	/^	int fan_pwm;$/;"	m	struct:bitmain_info	access:public
fan_pwm	driver-hashratio.h	/^	int fan_pwm;$/;"	m	struct:hashratio_info	access:public
fan_pwm_data	driver-avalon.h	/^	uint8_t fan_pwm_data;$/;"	m	struct:avalon_task	access:public
fan_pwm_data	driver-bitmain.h	/^	uint8_t fan_pwm_data;$/;"	m	struct:bitmain_txconfig_token	access:public
fan_tachs	driver-cointerra.h	/^	uint16_t fan_tachs[CTA_FANS];$/;"	m	struct:cointerra_info	access:public
fanauto	driver-bflsc.h	/^	bool fanauto;$/;"	m	struct:bflsc_info	access:public
fanspeed	driver-cointerra.h	/^	uint8_t fanspeed[CTA_FANS];$/;"	m	struct:cointerra_info	access:public
fanspeed	driver-hashfast.h	/^	int fanspeed;                               \/\/ Fanspeed in percent$/;"	m	struct:hashfast_info	access:public
fanspeed	driver-klondike.c	/^	uint8_t fanspeed;$/;"	m	struct:klondike_status	file:	access:public
fantarget	driver-klondike.c	/^	uint8_t fantarget;$/;"	m	struct:klondike_cfg	file:	access:public
fd	compat/libusb-1.0/libusb/libusb.h	/^	int fd;$/;"	m	struct:libusb_pollfd	access:public
fd	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	int fd;$/;"	m	struct:linux_device_handle_priv	file:	access:public
fd	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	int fd;$/;"	m	struct:device_priv	file:	access:public
fd	compat/libusb-1.0/libusb/os/poll_windows.h	/^	int fd;							\/\/ what's exposed to libusb core$/;"	m	struct:winfd	access:public
fd	compat/libusb-1.0/libusb/os/poll_windows.h	/^    int fd;           \/* file descriptor *\/$/;"	m	struct:pollfd	access:public
fd	knc-transport-spi.c	/^	int fd;$/;"	m	struct:spidev_context	file:	access:public
fd	spi-context.h	/^	int fd;$/;"	m	struct:spi_ctx	access:public
fd	usbutils.c	/^	int fd;$/;"	m	struct:usb_busdev	file:	access:public
fd_added_cb	compat/libusb-1.0/libusb/libusbi.h	/^	libusb_pollfd_added_cb fd_added_cb;$/;"	m	struct:libusb_context	access:public
fd_cb_user_data	compat/libusb-1.0/libusb/libusbi.h	/^	void *fd_cb_user_data;$/;"	m	struct:libusb_context	access:public
fd_removed_cb	compat/libusb-1.0/libusb/libusbi.h	/^	libusb_pollfd_removed_cb fd_removed_cb;$/;"	m	struct:libusb_context	access:public
fd_to_winfd	compat/libusb-1.0/libusb/os/poll_windows.c	/^struct winfd fd_to_winfd(int fd)$/;"	f	signature:(int fd)
fd_to_winfd	compat/libusb-1.0/libusb/os/poll_windows.h	/^struct winfd fd_to_winfd(int fd);$/;"	p	signature:(int fd)
fds	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  int                  fds[2];$/;"	m	struct:darwin_device_handle_priv	access:public
field	miner.php	/^						foreach ($calc as $field => $func)$/;"	v
field	miner.php	/^			foreach ($row['cal'] as $field => $data)$/;"	v
field	miner.php	/^			foreach ($row['grp'] as $field => $value)$/;"	v
field	miner.php	/^ &&  ($field == 'GPU' || $field == 'PGA' || $field == 'ASC'))$/;"	v
fifo_rp	driver-avalon.h	/^	uint16_t fifo_rp;$/;"	m	struct:avalon_result	access:public
fifo_space	driver-bitmain.h	/^	int fifo_space;$/;"	m	struct:bitmain_info	access:public
fifo_space	driver-bitmain.h	/^	uint16_t fifo_space;$/;"	m	struct:bitmain_rxnonce_data	access:public
fifo_space	driver-bitmain.h	/^	uint16_t fifo_space;$/;"	m	struct:bitmain_rxstatus_data	access:public
fifo_spi_errors	driver-minion.c	/^	uint64_t fifo_spi_errors[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
fifo_wp	driver-avalon.h	/^	uint16_t fifo_wp;$/;"	m	struct:avalon_result	access:public
file	A1-desk-board-selector.c	/^	int file;$/;"	m	struct:pcf8575_ctx	file:	access:public
file	A1-trimpot-mcp4x.h	/^	int file;$/;"	m	struct:mcp4x	access:public
file	api.c	/^	const char *file;$/;"	m	struct:lockinfo	file:	access:public
file	api.c	/^	const char *file;$/;"	m	struct:lockstat	file:	access:public
file	i2c-context.h	/^	int file;$/;"	m	struct:i2c_ctx	access:public
fileconf_load	cgminer.c	/^static int fileconf_load;$/;"	v	file:
fill_device_drv	cgminer.c	/^void fill_device_drv(struct device_drv *drv)$/;"	f	signature:(struct device_drv *drv)
fill_minergate_request	driver-spondoolies-sp10.c	/^static void fill_minergate_request(minergate_do_job_req* work, struct work *cg_work,$/;"	f	file:	signature:(minergate_do_job_req* work, struct work *cg_work, int ntime_offset)
fill_minergate_request	driver-spondoolies-sp30.c	/^static void fill_minergate_request(minergate_do_job_req_sp30* work, struct work *cg_work, int max_offset)$/;"	f	file:	signature:(minergate_do_job_req_sp30* work, struct work *cg_work, int max_offset)
fill_queue	cgminer.c	/^static void fill_queue(struct thr_info *mythr, struct cgpu_info *cgpu, struct device_drv *drv, const int thr_id)$/;"	f	file:	signature:(struct thr_info *mythr, struct cgpu_info *cgpu, struct device_drv *drv, const int thr_id)
filtered_hw	driver-bitfury.h	/^	int *filtered_hw; \/\/ Hardware errors we're told about but are filtered$/;"	m	struct:bitfury_info	access:public
find_chip	driver-drillbit.c	/^static struct drillbit_chip_info *find_chip(struct drillbit_info *info, uint16_t chip_id) {$/;"	f	file:	signature:(struct drillbit_info *info, uint16_t chip_id)
find_dev	usbutils.c	/^static struct usb_find_devices find_dev[] = {$/;"	v	typeref:struct:usb_find_devices	file:
find_endpoint	compat/libusb-1.0/libusb/core.c	/^static const struct libusb_endpoint_descriptor *find_endpoint($/;"	f	file:	signature:( struct libusb_config_descriptor *config, unsigned char endpoint)
find_monotonic_clock	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static clockid_t find_monotonic_clock(void)$/;"	f	file:	signature:(void)
find_queued_work_byid	cgminer.c	/^struct work *find_queued_work_byid(struct cgpu_info *cgpu, uint32_t id)$/;"	f	signature:(struct cgpu_info *cgpu, uint32_t id)
find_queued_work_byid	miner.h	/^extern struct work *find_queued_work_byid(struct cgpu_info *cgpu, uint32_t id);$/;"	p	signature:(struct cgpu_info *cgpu, uint32_t id)
find_queued_work_bymidstate	cgminer.c	/^struct work *find_queued_work_bymidstate(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)$/;"	f	signature:(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)
find_queued_work_bymidstate	miner.h	/^extern struct work *find_queued_work_bymidstate(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen);$/;"	p	signature:(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)
find_settings	driver-drillbit.c	/^static config_setting *find_settings(struct cgpu_info *drillbit)$/;"	f	file:	signature:(struct cgpu_info *drillbit)
find_stack_direction	configure	/^find_stack_direction ()$/;"	f
find_usbfs_path	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static const char *find_usbfs_path(void)$/;"	f	file:	signature:(void)
findlock	api.c	/^static LOCKINFO *findlock(void *lock, enum cglock_typ typ, const char *file, const char *func, const int linenum)$/;"	f	file:	signature:(void *lock, enum cglock_typ typ, const char *file, const char *func, const int linenum)
finish	driver-antrouter.c	/^	struct timeval finish;$/;"	m	struct:ANTROUTER_HISTORY	typeref:struct:ANTROUTER_HISTORY::timeval	file:	access:public
finish	driver-bmsc.c	/^	struct timeval finish;$/;"	m	struct:BMSC_HISTORY	typeref:struct:BMSC_HISTORY::timeval	file:	access:public
finish	driver-icarus.c	/^	struct timeval finish;$/;"	m	struct:ICARUS_HISTORY	typeref:struct:ICARUS_HISTORY::timeval	file:	access:public
firmware	driver-bflsc.h	/^	char *firmware;$/;"	m	struct:bflsc_dev	access:public
firmware_rev	hf_protocol.h	/^	uint16_t firmware_rev;                      \/\/ Firmware revision #$/;"	m	struct:hf_usb_init_base	access:public
firmware_rev	hf_protocol_be.h	/^	uint16_t firmware_rev;                      \/\/ Firmware revision #$/;"	m	struct:hf_usb_init_base	access:public
firmware_version	driver-hashfast.h	/^	double firmware_version;$/;"	m	struct:hashfast_info	access:public
first	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list *first;$/;"	m	struct:hashtable_bucket	typeref:struct:hashtable_bucket::hashtable_list	access:public
first	miner.php	/^				$first = false;$/;"	v
first	miner.php	/^	$first = true;$/;"	v
first	usbutils.c	/^	struct timeval first;$/;"	m	struct:cg_usb_stats_item	typeref:struct:cg_usb_stats_item::timeval	file:	access:public
first_config	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  UInt8                 first_config, active_config;$/;"	m	struct:darwin_device_priv	access:public
first_lopt	ccan/opt/opt.c	/^const char *first_lopt(unsigned *i, unsigned *len)$/;"	f	signature:(unsigned *i, unsigned *len)
first_lopt	ccan/opt/private.h	/^const char *first_lopt(unsigned *i, unsigned *len);$/;"	p	signature:(unsigned *i, unsigned *len)
first_name	ccan/opt/opt.c	/^static const char *first_name(const char *names, unsigned *len)$/;"	f	file:	signature:(const char *names, unsigned *len)
first_nonce	driver-minion.c	/^	struct timeval first_nonce;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
first_opt	ccan/opt/opt.c	/^static const char *first_opt(unsigned *i, unsigned *len)$/;"	f	file:	signature:(unsigned *i, unsigned *len)
first_sopt	ccan/opt/opt.c	/^const char *first_sopt(unsigned *i)$/;"	f	signature:(unsigned *i)
first_sopt	ccan/opt/private.h	/^const char *first_sopt(unsigned *i);$/;"	p	signature:(unsigned *i)
first_work	driver-bab.c	/^	struct timeval first_work[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:	access:public
first_work	miner.h	/^	struct timeval first_work;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval	access:public
flag_reset	driver-minion.c	/^	bool flag_reset[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
flags	compat/jansson-2.6/src/pack_unpack.c	/^    size_t flags;$/;"	m	struct:__anon15	file:	access:public
flags	compat/libusb-1.0/libusb/hotplug.h	/^        libusb_hotplug_flag flags;$/;"	m	struct:libusb_hotplug_callback	access:public
flags	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t flags;$/;"	m	struct:libusb_transfer	access:public
flags	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t flags;$/;"	m	struct:usbi_transfer	access:public
flags	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int flags;$/;"	m	struct:usbfs_urb	access:public
flash_led	driver-bflsc.h	/^	bool flash_led;$/;"	m	struct:bflsc_info	access:public
flash_led	miner.h	/^	bool flash_led;$/;"	m	struct:cgpu_info	access:public
flash_next_work	driver-antrouter.c	/^	bool flash_next_work;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
flash_next_work	driver-bmsc.c	/^	bool flash_next_work;$/;"	m	struct:BMSC_INFO	file:	access:public
flash_next_work	driver-icarus.c	/^	bool flash_next_work;$/;"	m	struct:ICARUS_INFO	file:	access:public
fld	miner.php	/^			foreach ($gen as $fld => $calc)$/;"	v
fld	miner.php	/^ foreach ($gen as $fld => $calc)$/;"	v
flip12	miner.h	/^static inline void flip12(void *dest_p, const void *src_p)$/;"	f	signature:(void *dest_p, const void *src_p)
flip128	miner.h	/^static inline void flip128(void *dest_p, const void *src_p)$/;"	f	signature:(void *dest_p, const void *src_p)
flip32	miner.h	/^static inline void flip32(void *dest_p, const void *src_p)$/;"	f	signature:(void *dest_p, const void *src_p)
flip64	miner.h	/^static inline void flip64(void *dest_p, const void *src_p)$/;"	f	signature:(void *dest_p, const void *src_p)
flip80	miner.h	/^static inline void flip80(void *dest_p, const void *src_p)$/;"	f	signature:(void *dest_p, const void *src_p)
flush_fifo	driver-avalon.h	/^	uint8_t flush_fifo	:1;$/;"	m	struct:avalon_task	access:public
flush_id	driver-bflsc.h	/^	uint64_t flush_id; \/\/ counter when results were last flushed$/;"	m	struct:bflsc_dev	access:public
flush_one_dev	driver-bflsc.c	/^static void flush_one_dev(struct cgpu_info *bflsc, int dev)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev)
flush_queue	cgminer.c	/^void flush_queue(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
flush_queue	miner.h	/^extern void flush_queue(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
flush_size	driver-bflsc.h	/^	int flush_size;$/;"	m	struct:bflsc_info	access:public
flush_spi	driver-SPI-bitmine-A1.c	/^static void flush_spi(struct A1_chain *a1)$/;"	f	file:	signature:(struct A1_chain *a1)
flush_work	miner.h	/^	void (*flush_work)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
flushed	driver-bflsc.h	/^	bool flushed; \/\/ are any flushed?$/;"	m	struct:bflsc_dev	access:public
flushed	driver-klondike.c	/^	bool flushed;$/;"	m	struct:jobque	file:	access:public
flying_transfers	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head flying_transfers;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
flying_transfers_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t flying_transfers_lock;$/;"	m	struct:libusb_context	access:public
fmatch_errors	driver-cointerra.h	/^	uint16_t fmatch_errors[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
fmt	compat/jansson-2.6/src/pack_unpack.c	/^    const char *fmt;$/;"	m	struct:__anon15	file:	access:public
fmt	miner.php	/^function fmt($section, $name, $value, $when, $alldata, $cf = NULL)$/;"	f
fn	ccan/typesafe_cb/test/run.c	/^	void (*fn)(int a, int b, void *arg);$/;"	m	struct:callback_preargs	file:	access:public
fn	ccan/typesafe_cb/test/run.c	/^	void (*fn)(void *arg);$/;"	m	struct:callback_onearg	file:	access:public
fn	ccan/typesafe_cb/test/run.c	/^	void (*fn)(void *arg, int a, int b);$/;"	m	struct:callback_postargs	file:	access:public
fn	util.c	/^	void (*fn)(void *fnarg);$/;"	m	struct:cg_completion	file:	access:public
fnarg	util.c	/^	void *fnarg;$/;"	m	struct:cg_completion	file:	access:public
foo	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^struct foo {$/;"	s	file:
foo	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^struct foo {$/;"	s	file:
foo::x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:foo	file:	access:public
foo::x	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^	int x;$/;"	m	struct:foo	file:	access:public
force_hcd_device_descriptor	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int force_hcd_device_descriptor(struct libusb_device *dev)$/;"	f	file:	signature:(struct libusb_device *dev)
forcelog	logging.h	66;"	d
forcerigtotals	miner.php	/^		&&  ($rownum > 2 || $forcerigtotals === true))$/;"	v
forcerigtotals	miner.php	/^ &&  ($rownum > 2 || $forcerigtotals === true))$/;"	v
forcerigtotals	miner.php	/^# one line by setting $forcerigtotals = true;$/;"	v
forcerigtotals	miner.php	/^$forcerigtotals = false;$/;"	v
fork_monitor	cgminer.c	/^static void fork_monitor()$/;"	f	file:
forkpid	cgminer.c	/^	static int forkpid;$/;"	v	file:
forward_all_packets	hf_protocol.h	/^	uint32_t forward_all_packets:1;             \/\/ Forward everything - diagnostic.$/;"	m	struct:hf_config_data	access:public
forward_all_packets	hf_protocol_be.h	/^	uint32_t forward_all_packets:1;             \/\/ Forward everything - diagnostic.$/;"	m	struct:hf_config_data	access:public
forward_all_privileged_packets	hf_protocol.h	/^	uint16_t forward_all_privileged_packets:1;  \/\/ Forward priv pkts -- diagnostic$/;"	m	struct:hf_config_data	access:public
forward_all_privileged_packets	hf_protocol_be.h	/^	uint16_t forward_all_privileged_packets:1;  \/\/ Forward priv pkts -- diagnostic$/;"	m	struct:hf_config_data	access:public
found	driver-bab.c	/^	struct timeval found;$/;"	m	struct:nitem	typeref:struct:nitem::timeval	file:	access:public
found	driver-blockerupter.h	/^	uint8_t found;$/;"	m	struct:blockerupter_info	access:public
found	usbutils.h	/^	bool found;$/;"	m	struct:usb_epinfo	access:public
found	usbutils.h	/^	struct usb_find_devices *found;$/;"	m	struct:cg_usb_device	typeref:struct:cg_usb_device::usb_find_devices	access:public
found_blocks	cgminer.c	/^unsigned int found_blocks;$/;"	v
fpga_count	driver-antrouter.c	/^	int fpga_count;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
fpga_count	driver-bmsc.c	/^	int fpga_count;$/;"	m	struct:BMSC_INFO	file:	access:public
fpga_count	driver-icarus.c	/^	int fpga_count;$/;"	m	struct:ICARUS_INFO	file:	access:public
fpgaid	miner.h	/^	char fpgaid;$/;"	m	struct:cgpu_info	access:public
fpgaid	miner.h	/^	char fpgaid;$/;"	m	struct:modminer_fpga_state	access:public
fprintf	ccan/opt/test/run-helpers.c	16;"	d	file:
frames	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    uint64_t             frames[256];$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
free	driver-klondike.c	/^	KLIST *free;$/;"	m	struct:klondike_info	file:	access:public
free_cgusb	usbutils.c	/^static struct cg_usb_device *free_cgusb(struct cg_usb_device *cgusb)$/;"	f	file:	signature:(struct cg_usb_device *cgusb)
free_iso_urbs	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static void free_iso_urbs(struct linux_transfer_priv *tpriv)$/;"	f	file:	signature:(struct linux_transfer_priv *tpriv)
free_me	miner.h	/^	bool free_me;$/;"	m	struct:string_elist	access:public
free_overlapped	compat/libusb-1.0/libusb/os/poll_windows.c	/^void free_overlapped(OVERLAPPED *overlapped)$/;"	f	signature:(OVERLAPPED *overlapped)
free_work	miner.h	1577;"	d
freebreakdown	driver-bflsc.c	/^static void freebreakdown(int *count, char **firstname, char ***fields)$/;"	f	file:	signature:(int *count, char **firstname, char ***fields)
freetolines	driver-bflsc.c	/^static void freetolines(int *lines, char ***items)$/;"	f	file:	signature:(int *lines, char ***items)
freq	driver-icarus.c	/^	float freq;$/;"	m	struct:__anon11	file:	access:public
freq	driver-icarus.c	/^	unsigned char freq;$/;"	m	struct:rockminer_chip_info	file:	access:public
freq	driver-minion.c	/^	uint32_t freq;$/;"	m	struct:minion_status	file:	access:public
freq	driver-minion.c	/^	uint32_t freq;$/;"	m	struct:perf_item	file:	access:public
freqms	driver-minion.c	/^	int freqms[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
freqsent	driver-minion.c	/^	uint32_t freqsent[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
frequency	driver-antrouter.c	/^	int frequency;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
frequency	driver-avalon.h	/^	int frequency;$/;"	m	struct:avalon_info	access:public
frequency	driver-bitmain.h	/^	int frequency;$/;"	m	struct:bitmain_info	access:public
frequency	driver-bitmain.h	/^	uint16_t frequency;$/;"	m	struct:bitmain_txconfig_token	access:public
frequency0	driver-hashfast.c	/^	uint16_t frequency0;$/;"	m	struct:hf_settings_data	file:	access:public
frequency1	driver-hashfast.c	/^	uint16_t frequency1;$/;"	m	struct:hf_settings_data	file:	access:public
frequency2	driver-hashfast.c	/^	uint16_t frequency2;$/;"	m	struct:hf_settings_data	file:	access:public
frequency3	driver-hashfast.c	/^	uint16_t frequency3;$/;"	m	struct:hf_settings_data	file:	access:public
frequency_eft	driver-bitmain.h	/^	uint8_t frequency_eft        :1;$/;"	m	struct:bitmain_txconfig_token	access:public
frequency_t	driver-antrouter.c	/^	char frequency_t[64];$/;"	m	struct:ANTROUTER_INFO	file:	access:public
frequency_t	driver-bitmain.h	/^	char frequency_t[256];$/;"	m	struct:bitmain_info	access:public
from_existing_block	cgminer.c	/^static inline bool from_existing_block(struct work *work)$/;"	f	file:	signature:(struct work *work)
from_first_good	driver-minion.c	/^	uint64_t from_first_good;$/;"	m	struct:minion_status	file:	access:public
from_locale	compat/jansson-2.6/src/strconv.c	/^static void from_locale(char *buffer)$/;"	f	file:	signature:(char *buffer)
front_temp	driver-spondoolies-sp10.h	/^	int front_temp;$/;"	m	struct:spond_adapter	access:public
front_temp	driver-spondoolies-sp30.h	/^	int front_temp;$/;"	m	struct:spond_adapter	access:public
frozen	miner.h	/^	bool frozen;$/;"	m	struct:thread_q	access:public
fsync	miner.h	/^static inline int fsync (int fd)$/;"	f	signature:(int fd)
ftdi_spi_txrx	libbitfury.c	/^bool ftdi_spi_txrx(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
ftdi_spi_txrx	libbitfury.h	/^bool ftdi_spi_txrx(struct cgpu_info *bitfury, struct bitfury_info *info);$/;"	p	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
fullnonce	driver-antrouter.c	/^	double fullnonce;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
fullnonce	driver-bmsc.c	/^	double fullnonce;$/;"	m	struct:BMSC_INFO	file:	access:public
fullnonce	driver-icarus.c	/^	double fullnonce;$/;"	m	struct:ICARUS_INFO	file:	access:public
fulltest	miner.h	/^extern bool fulltest(const unsigned char *hash, const unsigned char *target);$/;"	p	signature:(const unsigned char *hash, const unsigned char *target)
fulltest	util.c	/^bool fulltest(const unsigned char *hash, const unsigned char *target)$/;"	f	signature:(const unsigned char *hash, const unsigned char *target)
func	api.c	/^	const char *func;$/;"	m	struct:lockinfo	file:	access:public
func	api.c	/^	const char *func;$/;"	m	struct:lockstat	file:	access:public
func	api.c	/^	void (*func)(struct io_data *, SOCKETTYPE, char *, bool, char);$/;"	m	struct:CMDS	file:	access:public
func_append	compat/jansson-2.6/configure	/^func_append ()\\$/;"	f
func_append	compat/jansson-2.6/ltmain.sh	/^func_append ()$/;"	f
func_append	compat/libusb-1.0/configure	/^func_append ()\\$/;"	f
func_append	compat/libusb-1.0/ltmain.sh	/^func_append ()$/;"	f
func_append	configure	/^func_append ()\\$/;"	f
func_append_quoted	compat/jansson-2.6/configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	compat/jansson-2.6/ltmain.sh	/^func_append_quoted ()$/;"	f
func_append_quoted	compat/libusb-1.0/configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	compat/libusb-1.0/ltmain.sh	/^func_append_quoted ()$/;"	f
func_append_quoted	configure	/^func_append_quoted ()\\$/;"	f
func_arith	compat/jansson-2.6/configure	/^func_arith ()\\$/;"	f
func_arith	compat/jansson-2.6/ltmain.sh	/^func_arith ()$/;"	f
func_arith	compat/libusb-1.0/configure	/^func_arith ()\\$/;"	f
func_arith	compat/libusb-1.0/ltmain.sh	/^func_arith ()$/;"	f
func_arith	configure	/^func_arith ()\\$/;"	f
func_basename	compat/jansson-2.6/configure	/^func_basename ()\\$/;"	f
func_basename	compat/jansson-2.6/ltmain.sh	/^func_basename ()$/;"	f
func_basename	compat/libusb-1.0/configure	/^func_basename ()\\$/;"	f
func_basename	compat/libusb-1.0/ltmain.sh	/^func_basename ()$/;"	f
func_basename	configure	/^func_basename ()\\$/;"	f
func_check_version_match	compat/jansson-2.6/ltmain.sh	/^func_check_version_match ()$/;"	f
func_check_version_match	compat/libusb-1.0/ltmain.sh	/^func_check_version_match ()$/;"	f
func_cl_wrapper	compat/libusb-1.0/compile	/^func_cl_wrapper ()$/;"	f
func_config	compat/jansson-2.6/ltmain.sh	/^func_config ()$/;"	f
func_config	compat/libusb-1.0/ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	compat/jansson-2.6/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	compat/libusb-1.0/ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	compat/jansson-2.6/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	compat/libusb-1.0/ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	compat/jansson-2.6/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	compat/libusb-1.0/ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	compat/jansson-2.6/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_check	compat/libusb-1.0/ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	compat/jansson-2.6/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	compat/libusb-1.0/ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	compat/jansson-2.6/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	compat/libusb-1.0/ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	compat/jansson-2.6/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	compat/libusb-1.0/ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	compat/jansson-2.6/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	compat/libusb-1.0/ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	compat/jansson-2.6/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	compat/libusb-1.0/ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	compat/jansson-2.6/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	compat/libusb-1.0/ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	compat/jansson-2.6/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_check	compat/libusb-1.0/ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	compat/jansson-2.6/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	compat/libusb-1.0/ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	compat/jansson-2.6/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	compat/libusb-1.0/ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	compat/jansson-2.6/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	compat/libusb-1.0/ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	compat/jansson-2.6/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	compat/libusb-1.0/ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	compat/jansson-2.6/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	compat/libusb-1.0/ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	compat/jansson-2.6/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	compat/libusb-1.0/ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	compat/jansson-2.6/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	compat/libusb-1.0/ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	compat/jansson-2.6/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	compat/libusb-1.0/ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	compat/jansson-2.6/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	compat/libusb-1.0/ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	compat/jansson-2.6/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	compat/libusb-1.0/ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	compat/jansson-2.6/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	compat/libusb-1.0/ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	compat/jansson-2.6/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	compat/libusb-1.0/ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	compat/jansson-2.6/ltmain.sh	/^func_cygpath ()$/;"	f
func_cygpath	compat/libusb-1.0/ltmain.sh	/^func_cygpath ()$/;"	f
func_dirname	compat/jansson-2.6/configure	/^func_dirname ()\\$/;"	f
func_dirname	compat/jansson-2.6/ltmain.sh	/^func_dirname ()$/;"	f
func_dirname	compat/libusb-1.0/configure	/^func_dirname ()\\$/;"	f
func_dirname	compat/libusb-1.0/ltmain.sh	/^func_dirname ()$/;"	f
func_dirname	configure	/^func_dirname ()\\$/;"	f
func_dirname_and_basename	compat/jansson-2.6/configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	compat/jansson-2.6/ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	compat/libusb-1.0/configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	compat/libusb-1.0/ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	configure	/^func_dirname_and_basename ()\\$/;"	f
func_echo	compat/jansson-2.6/ltmain.sh	/^func_echo ()$/;"	f
func_echo	compat/libusb-1.0/ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	compat/jansson-2.6/configure	/^func_echo_all ()$/;"	f
func_echo_all	compat/jansson-2.6/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	compat/libusb-1.0/configure	/^func_echo_all ()$/;"	f
func_echo_all	compat/libusb-1.0/ltmain.sh	/^func_echo_all ()$/;"	f
func_echo_all	configure	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	compat/jansson-2.6/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	compat/libusb-1.0/ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	compat/jansson-2.6/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	compat/libusb-1.0/ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	compat/jansson-2.6/ltmain.sh	/^func_enable_tag ()$/;"	f
func_enable_tag	compat/libusb-1.0/ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	compat/jansson-2.6/ltmain.sh	/^func_error ()$/;"	f
func_error	compat/libusb-1.0/ltmain.sh	/^func_error ()$/;"	f
func_exec_program	compat/jansson-2.6/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	compat/libusb-1.0/ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program_core	compat/jansson-2.6/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	compat/libusb-1.0/ltmain.sh	/^func_exec_program_core ()$/;"	f
func_execute_cmds	compat/jansson-2.6/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_execute_cmds	compat/libusb-1.0/ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	compat/jansson-2.6/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	compat/libusb-1.0/ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	compat/jansson-2.6/ltmain.sh	/^func_extract_archives ()$/;"	f
func_extract_archives	compat/libusb-1.0/ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	compat/jansson-2.6/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	compat/jansson-2.6/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	compat/jansson-2.6/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	compat/libusb-1.0/configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	compat/libusb-1.0/configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	compat/libusb-1.0/ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	compat/jansson-2.6/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	compat/libusb-1.0/ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	compat/jansson-2.6/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_error	compat/libusb-1.0/ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	compat/jansson-2.6/ltmain.sh	/^func_fatal_help ()$/;"	f
func_fatal_help	compat/libusb-1.0/ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	compat/jansson-2.6/ltmain.sh	/^func_features ()$/;"	f
func_features	compat/libusb-1.0/ltmain.sh	/^func_features ()$/;"	f
func_file_conv	compat/libusb-1.0/compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	compat/jansson-2.6/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	compat/libusb-1.0/ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_grep	compat/jansson-2.6/ltmain.sh	/^func_grep ()$/;"	f
func_grep	compat/libusb-1.0/ltmain.sh	/^func_grep ()$/;"	f
func_help	compat/jansson-2.6/ltmain.sh	/^func_help ()$/;"	f
func_help	compat/libusb-1.0/ltmain.sh	/^func_help ()$/;"	f
func_infer_tag	compat/jansson-2.6/ltmain.sh	/^func_infer_tag ()$/;"	f
func_infer_tag	compat/libusb-1.0/ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	compat/jansson-2.6/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	compat/libusb-1.0/ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	compat/jansson-2.6/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_p	compat/libusb-1.0/ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	compat/jansson-2.6/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	compat/libusb-1.0/ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	compat/jansson-2.6/configure	/^func_len ()\\$/;"	f
func_len	compat/jansson-2.6/ltmain.sh	/^func_len ()$/;"	f
func_len	compat/libusb-1.0/configure	/^func_len ()\\$/;"	f
func_len	compat/libusb-1.0/ltmain.sh	/^func_len ()$/;"	f
func_len	configure	/^func_len ()\\$/;"	f
func_lo2o	compat/jansson-2.6/configure	/^func_lo2o ()\\$/;"	f
func_lo2o	compat/jansson-2.6/ltmain.sh	/^func_lo2o ()$/;"	f
func_lo2o	compat/libusb-1.0/configure	/^func_lo2o ()\\$/;"	f
func_lo2o	compat/libusb-1.0/ltmain.sh	/^func_lo2o ()$/;"	f
func_lo2o	configure	/^func_lo2o ()\\$/;"	f
func_lt_dump_args	compat/jansson-2.6/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	compat/libusb-1.0/ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	compat/jansson-2.6/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	compat/libusb-1.0/ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	compat/jansson-2.6/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	compat/libusb-1.0/ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	compat/jansson-2.6/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	compat/libusb-1.0/ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	compat/jansson-2.6/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	compat/libusb-1.0/ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	compat/jansson-2.6/ltmain.sh	/^func_missing_arg ()$/;"	f
func_missing_arg	compat/libusb-1.0/ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	compat/jansson-2.6/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mkdir_p	compat/libusb-1.0/ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	compat/jansson-2.6/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mktempdir	compat/libusb-1.0/ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	compat/jansson-2.6/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_compile	compat/libusb-1.0/ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	compat/jansson-2.6/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_execute	compat/libusb-1.0/ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	compat/jansson-2.6/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_finish	compat/libusb-1.0/ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	compat/jansson-2.6/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_help	compat/libusb-1.0/ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	compat/jansson-2.6/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_install	compat/libusb-1.0/ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	compat/jansson-2.6/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_link	compat/libusb-1.0/ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	compat/jansson-2.6/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	compat/libusb-1.0/ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	compat/jansson-2.6/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_normal_abspath	compat/libusb-1.0/ltmain.sh	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	compat/jansson-2.6/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	compat/libusb-1.0/ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	compat/jansson-2.6/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	compat/libusb-1.0/ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	compat/jansson-2.6/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	compat/libusb-1.0/ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	compat/jansson-2.6/ltmain.sh	/^func_relative_path ()$/;"	f
func_relative_path	compat/libusb-1.0/ltmain.sh	/^func_relative_path ()$/;"	f
func_replace_sysroot	compat/jansson-2.6/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	compat/libusb-1.0/ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	compat/jansson-2.6/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	compat/libusb-1.0/ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_show_eval	compat/jansson-2.6/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval	compat/libusb-1.0/ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	compat/jansson-2.6/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	compat/libusb-1.0/ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_source	compat/jansson-2.6/ltmain.sh	/^func_source ()$/;"	f
func_source	compat/libusb-1.0/ltmain.sh	/^func_source ()$/;"	f
func_split_long_opt	compat/jansson-2.6/configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	compat/jansson-2.6/ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_long_opt	compat/libusb-1.0/configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	compat/libusb-1.0/ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_long_opt	configure	/^func_split_long_opt ()\\$/;"	f
func_split_short_opt	compat/jansson-2.6/configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	compat/jansson-2.6/ltmain.sh	/^func_split_short_opt ()$/;"	f
func_split_short_opt	compat/libusb-1.0/configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	compat/libusb-1.0/ltmain.sh	/^func_split_short_opt ()$/;"	f
func_split_short_opt	configure	/^func_split_short_opt ()\\$/;"	f
func_stripname	compat/jansson-2.6/configure	/^func_stripname ()\\$/;"	f
func_stripname	compat/jansson-2.6/ltmain.sh	/^func_stripname ()$/;"	f
func_stripname	compat/libusb-1.0/configure	/^func_stripname ()\\$/;"	f
func_stripname	compat/libusb-1.0/ltmain.sh	/^func_stripname ()$/;"	f
func_stripname	configure	/^func_stripname ()\\$/;"	f
func_to_host_file	compat/jansson-2.6/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_file	compat/libusb-1.0/ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	compat/jansson-2.6/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_host_path	compat/libusb-1.0/ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	compat/jansson-2.6/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_to_tool_file	compat/libusb-1.0/ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	compat/jansson-2.6/ltmain.sh	/^func_tr_sh ()$/;"	f
func_tr_sh	compat/libusb-1.0/ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	compat/jansson-2.6/ltmain.sh	/^func_usage ()$/;"	f
func_usage	compat/libusb-1.0/ltmain.sh	/^func_usage ()$/;"	f
func_verbose	compat/jansson-2.6/ltmain.sh	/^func_verbose ()$/;"	f
func_verbose	compat/libusb-1.0/ltmain.sh	/^func_verbose ()$/;"	f
func_version	compat/jansson-2.6/ltmain.sh	/^func_version ()$/;"	f
func_version	compat/libusb-1.0/ltmain.sh	/^func_version ()$/;"	f
func_warning	compat/jansson-2.6/ltmain.sh	/^func_warning ()$/;"	f
func_warning	compat/libusb-1.0/ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	compat/jansson-2.6/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	compat/libusb-1.0/ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	compat/jansson-2.6/ltmain.sh	/^func_win32_libid ()$/;"	f
func_win32_libid	compat/libusb-1.0/ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	compat/jansson-2.6/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	compat/libusb-1.0/ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	compat/jansson-2.6/configure	/^func_xform ()\\$/;"	f
func_xform	compat/jansson-2.6/ltmain.sh	/^func_xform ()$/;"	f
func_xform	compat/libusb-1.0/configure	/^func_xform ()\\$/;"	f
func_xform	compat/libusb-1.0/ltmain.sh	/^func_xform ()$/;"	f
func_xform	configure	/^func_xform ()\\$/;"	f
fwVersion	usbutils.h	/^	unsigned char fwVersion;	\/\/ ??$/;"	m	struct:cg_usb_device	access:public
fw_day	driver-cointerra.h	/^	uint8_t fw_day;$/;"	m	struct:cointerra_info	access:public
fw_month	driver-cointerra.h	/^	uint8_t fw_month;$/;"	m	struct:cointerra_info	access:public
fw_year	driver-cointerra.h	/^	uint16_t fw_year;$/;"	m	struct:cointerra_info	access:public
fwrev	driver-cointerra.h	/^	uint8_t fwrev[3];$/;"	m	struct:cointerra_info	access:public
g_displayed_rolling	cgminer.c	/^double g_displayed_rolling = 0;$/;"	v
g_local_mhashes_dones	cgminer.c	/^double g_local_mhashes_dones[CG_LOCAL_MHASHES_MAX_NUM] = {0};$/;"	v
g_local_mhashes_index	cgminer.c	/^int g_local_mhashes_index = 0;$/;"	v
g_log_file	logging.c	/^FILE * g_log_file = NULL;$/;"	v
g_logfile_enable	logging.c	/^bool g_logfile_enable = false;$/;"	v
g_logfile_openflag	logging.c	/^char g_logfile_openflag[32] = {0};$/;"	v
g_logfile_path	logging.c	/^char g_logfile_path[256] = {0};$/;"	v
g_logwork_asicnum	cgminer.c	/^int g_logwork_asicnum = 0;$/;"	v
g_logwork_diffs	cgminer.c	/^FILE * g_logwork_diffs[65] = {0};$/;"	v
g_logwork_file	cgminer.c	/^FILE * g_logwork_file = NULL;$/;"	v
g_logwork_files	cgminer.c	/^FILE * g_logwork_files[65] = {0};$/;"	v
g_max_fan	cgminer.c	/^int g_max_fan, g_max_temp;$/;"	v
g_max_temp	cgminer.c	/^int g_max_fan, g_max_temp;$/;"	v
g_miner_compiletime	cgminer.c	/^char g_miner_compiletime[256] = {0};$/;"	v
g_miner_type	cgminer.c	/^char g_miner_type[256] = {0};$/;"	v
g_miner_version	cgminer.c	/^char g_miner_version[256] = {0};$/;"	v
g_test_index	driver-bitmain.c	/^int g_test_index = 0;$/;"	v
g_work	driver-icarus.c	/^	struct work *g_work[MAX_CHIP_NUM][MAX_WORK_BUFFER_SIZE];$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::work	file:	access:public
gate_miner	driver-avalon.h	/^	uint8_t gate_miner		:1;$/;"	m	struct:avalon_task	access:public
gate_miner_elf	driver-avalon.h	/^	uint8_t gate_miner_elf		:1;$/;"	m	struct:avalon_task	access:public
gbt	miner.h	/^	bool		gbt;$/;"	m	struct:work	access:public
gbt_bits	miner.h	/^	uint32_t gbt_bits;$/;"	m	struct:pool	access:public
gbt_curl	miner.h	/^	CURL *gbt_curl;$/;"	m	struct:pool	access:public
gbt_curl_inuse	miner.h	/^	bool gbt_curl_inuse;$/;"	m	struct:pool	access:public
gbt_decode	cgminer.c	/^static bool gbt_decode(struct pool *pool, json_t *res_val)$/;"	f	file:	signature:(struct pool *pool, json_t *res_val)
gbt_expires	miner.h	/^	int gbt_expires;$/;"	m	struct:pool	access:public
gbt_lock	miner.h	/^	cglock_t gbt_lock;$/;"	m	struct:pool	access:public
gbt_merkle_bins	cgminer.c	/^static void gbt_merkle_bins(struct pool *pool, json_t *transaction_arr)$/;"	f	file:	signature:(struct pool *pool, json_t *transaction_arr)
gbt_merkle_bins	cgminer.c	/^static void gbt_merkle_bins(struct pool *pool, json_t *transaction_arr);$/;"	p	file:	signature:(struct pool *pool, json_t *transaction_arr)
gbt_req	cgminer.c	/^static char *gbt_req = "{\\"id\\": 0, \\"method\\": \\"getblocktemplate\\", \\"params\\": [{\\"capabilities\\": [\\"coinbasetxn\\", \\"workid\\", \\"coinbase\/append\\"]}]}\\n";$/;"	v	file:
gbt_solo	miner.h	/^	bool gbt_solo;$/;"	m	struct:pool	access:public
gbt_solo_decode	cgminer.c	/^static bool gbt_solo_decode(struct pool *pool, json_t *res_val)$/;"	f	file:	signature:(struct pool *pool, json_t *res_val)
gbt_solo_req	cgminer.c	/^static char *gbt_solo_req = "{\\"id\\": 0, \\"method\\": \\"getblocktemplate\\"}\\n";$/;"	v	file:
gbt_target	miner.h	/^	unsigned char gbt_target[32];$/;"	m	struct:pool	access:public
gbt_txns	miner.h	/^	int		gbt_txns;$/;"	m	struct:work	access:public
gbt_txns	miner.h	/^	int gbt_txns;$/;"	m	struct:pool	access:public
gbt_version	miner.h	/^	uint32_t gbt_version;$/;"	m	struct:pool	access:public
gbt_workid	miner.h	/^	char *gbt_workid;$/;"	m	struct:pool	access:public
gen	miner.php	/^ $gen = $ext[$section][$wg];$/;"	v
gen_gbt_work	cgminer.c	/^static void gen_gbt_work(struct pool *pool, struct work *work)$/;"	f	file:	signature:(struct pool *pool, struct work *work)
gen_gbt_work	cgminer.c	2703;"	d	file:
gen_hash	cgminer.c	/^static void gen_hash(unsigned char *data, unsigned char *hash, int len)$/;"	f	file:	signature:(unsigned char *data, unsigned char *hash, int len)
gen_hash	cgminer.c	/^static void gen_hash(unsigned char *data, unsigned char *hash, int len);$/;"	p	file:	signature:(unsigned char *data, unsigned char *hash, int len)
gen_solo_work	cgminer.c	/^static void gen_solo_work(struct pool *pool, struct work *work)$/;"	f	file:	signature:(struct pool *pool, struct work *work)
gen_solo_work	cgminer.c	/^static void gen_solo_work(struct pool *pool, struct work *work);$/;"	p	file:	signature:(struct pool *pool, struct work *work)
gen_stratum_work	cgminer.c	/^static void gen_stratum_work(struct pool *pool, struct work *work)$/;"	f	file:	signature:(struct pool *pool, struct work *work)
gen_stratum_work	cgminer.c	/^static void gen_stratum_work(struct pool *pool, struct work *work);$/;"	p	file:	signature:(struct pool *pool, struct work *work)
generation	driver-knc.c	/^	int generation;    \/* work\/block generation, incremented on each flush invalidating older works *\/$/;"	m	struct:knc_state	file:	access:public
generation	driver-knc.c	/^	int generation;$/;"	m	struct:knc_core_state	file:	access:public
genfld	miner.php	/^function genfld($row, $calc)$/;"	f
get	compat/jansson-2.6/src/load.c	/^    get_func get;$/;"	m	struct:__anon16	file:	access:public
get16bits	uthash.h	458;"	d
get16bits	uthash.h	461;"	d
get16bits	uthash.h	465;"	d
get_active_config_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_active_config_descriptor)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend	access:public
get_ancestor_session_id	compat/libusb-1.0/libusb/os/windows_usb.c	/^static unsigned long get_ancestor_session_id(DWORD devinst, unsigned level)$/;"	f	file:	signature:(DWORD devinst, unsigned level)
get_anu_addr	driver-antrouter.c	/^static void get_anu_addr(struct cgpu_info *antrouter,struct ANTROUTER_INFO *info)$/;"	f	file:	signature:(struct cgpu_info *antrouter,struct ANTROUTER_INFO *info)
get_api_stats	miner.h	/^	struct api_data *(*get_api_stats)(struct cgpu_info *);$/;"	m	struct:device_drv	typeref:struct:device_drv::get_api_stats	access:public
get_api_type	compat/libusb-1.0/libusb/os/windows_usb.c	/^static uint8_t get_api_type(struct libusb_context *ctx,$/;"	f	file:	signature:(struct libusb_context *ctx, HDEVINFO *dev_info, SP_DEVINFO_DATA *dev_info_data)
get_avalon_statline_before	driver-avalon.c	/^static void get_avalon_statline_before(char *buf, size_t bufsiz, struct cgpu_info *avalon)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *avalon)
get_bandops	driver-bmsc.c	/^static void get_bandops(unsigned char * core_buf, int *corenum, char *coreenable, int *coresleep)$/;"	f	file:	signature:(unsigned char * core_buf, int *corenum, char *coreenable, int *coresleep)
get_benchfile_work	cgminer.c	/^static void get_benchfile_work(struct work *work)$/;"	f	file:	signature:(struct work *work)
get_benchmark_work	cgminer.c	/^static void get_benchmark_work(struct work *work)$/;"	f	file:	signature:(struct work *work)
get_bflsc_statline_before	driver-bflsc.c	/^static void get_bflsc_statline_before(char *buf, size_t bufsiz, struct cgpu_info *bflsc)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *bflsc)
get_bitforce_statline_before	driver-bitforce.c	/^static void get_bitforce_statline_before(char *buf, size_t bufsiz, struct cgpu_info *bitforce)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *bitforce)
get_bitmain_statline_before	driver-bitmain.c	/^static void get_bitmain_statline_before(char *buf, size_t bufsiz, struct cgpu_info *bitmain)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *bitmain)
get_blk_num	driver-bitmain.h	/^	uint8_t get_blk_num          :4;$/;"	m	struct:bitmain_rxstatus_data	access:public
get_config_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_config_descriptor)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend	access:public
get_config_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int get_config_descriptor(struct libusb_context *ctx, int fd,$/;"	f	file:	signature:(struct libusb_context *ctx, int fd, uint8_t config_index, unsigned char *buffer, size_t len)
get_configuration	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_configuration)(struct libusb_device_handle *handle, int *config);$/;"	m	struct:usbi_os_backend	access:public
get_configuration_index	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int get_configuration_index (struct libusb_device *dev, int config_value) {$/;"	f	file:	signature:(struct libusb_device *dev, int config_value)
get_current_ms	driver-SPI-bitmine-A1.c	/^static int get_current_ms(void)$/;"	f	file:	signature:(void)
get_current_temp_max	driver-avalon2.c	/^static inline int get_current_temp_max(struct avalon2_info *info)$/;"	f	file:	signature:(struct avalon2_info *info)
get_datestamp	cgminer.c	/^void get_datestamp(char *f, size_t fsiz, struct timeval *tv)$/;"	f	signature:(char *f, size_t fsiz, struct timeval *tv)
get_datestamp	miner.h	/^extern void get_datestamp(char *, size_t, struct timeval *);$/;"	p	signature:(char *, size_t, struct timeval *)
get_device_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_device_descriptor)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend	access:public
get_device_list	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_device_list)(struct libusb_context *ctx,$/;"	m	struct:usbi_os_backend	access:public
get_devices	cgminer.c	/^struct cgpu_info *get_devices(int id)$/;"	f	signature:(int id)
get_devices	miner.h	/^extern struct cgpu_info *get_devices(int id);$/;"	p	signature:(int id)
get_devinfo_data	compat/libusb-1.0/libusb/os/windows_usb.c	/^static bool get_devinfo_data(struct libusb_context *ctx,$/;"	f	file:	signature:(struct libusb_context *ctx, HDEVINFO *dev_info, SP_DEVINFO_DATA *dev_info_data, char* usb_class, unsigned _index)
get_diff	driver-SPI-bitmine-A1.c	/^uint32_t get_diff(double diff)$/;"	f	signature:(double diff)
get_endpoints	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int get_endpoints (struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
get_expect	driver-modminer.c	/^static bool get_expect(struct cgpu_info *modminer, FILE *f, char c)$/;"	f	file:	signature:(struct cgpu_info *modminer, FILE *f, char c)
get_fan_pwm	driver-avalon2.c	44;"	d	file:
get_frequency	driver-avalon2.h	/^	int get_frequency[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
get_func	compat/jansson-2.6/src/load.c	/^typedef int (*get_func)(void *data);$/;"	t	file:
get_gbt_curl	cgminer.c	/^static void get_gbt_curl(struct pool *pool, int poll)$/;"	f	file:	signature:(struct pool *pool, int poll)
get_handler	lib/sig-handler.h	/^get_handler (struct sigaction const *a)$/;"	f	signature:(struct sigaction const *a)
get_info	driver-modminer.c	/^static bool get_info(struct cgpu_info *modminer, FILE *f, char *buf, int bufsiz, const char *name)$/;"	f	file:	signature:(struct cgpu_info *modminer, FILE *f, char *buf, int bufsiz, const char *name)
get_interface_details	compat/libusb-1.0/libusb/os/windows_usb.c	/^static SP_DEVICE_INTERFACE_DETAIL_DATA_A *get_interface_details(struct libusb_context *ctx,$/;"	f	file:	signature:(struct libusb_context *ctx, HDEVINFO *dev_info, SP_DEVINFO_DATA *dev_info_data, const GUID* guid, unsigned _index)
get_intrange	cgminer.c	/^void get_intrange(char *arg, int *val1, int *val2)$/;"	f	signature:(char *arg, int *val1, int *val2)
get_intrange	miner.h	/^extern void get_intrange(char *arg, int *val1, int *val2);$/;"	p	signature:(char *arg, int *val1, int *val2)
get_klondike_statline_before	driver-klondike.c	/^static void get_klondike_statline_before(char *buf, size_t siz, struct cgpu_info *klncgpu)$/;"	f	file:	signature:(char *buf, size_t siz, struct cgpu_info *klncgpu)
get_modminer_statline_before	driver-modminer.c	/^static void get_modminer_statline_before(char *buf, size_t bufsiz, struct cgpu_info *modminer)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *modminer)
get_next_timeout	compat/libusb-1.0/libusb/io.c	/^static int get_next_timeout(libusb_context *ctx, struct timeval *tv,$/;"	f	file:	signature:(libusb_context *ctx, struct timeval *tv, struct timeval *out)
get_nonce	driver-SPI-bitmine-A1.c	/^static bool get_nonce(struct A1_chain *a1, uint8_t *nonce,$/;"	f	file:	signature:(struct A1_chain *a1, uint8_t *nonce, uint8_t *chip, uint8_t *job_id)
get_option_freq	driver-bitmain.c	/^static bool get_option_freq(int *timeout, int *frequency, char * frequency_t, uint8_t * reg_data)$/;"	f	file:	signature:(int *timeout, int *frequency, char * frequency_t, uint8_t * reg_data)
get_option_voltage	driver-bitmain.c	/^static bool get_option_voltage(uint8_t * voltage, char * voltage_t)$/;"	f	file:	signature:(uint8_t * voltage, char * voltage_t)
get_options	driver-antrouter.c	/^static void get_options(int this_option_offset, struct cgpu_info *antrouter, int *baud, float *readtimeout,int *frequency, char *frequency_t, uint8_t * reg_data)$/;"	f	file:	signature:(int this_option_offset, struct cgpu_info *antrouter, int *baud, float *readtimeout,int *frequency, char *frequency_t, uint8_t * reg_data)
get_options	driver-avalon.c	/^static bool get_options(int this_option_offset, int *baud, int *miner_count,$/;"	f	file:	signature:(int this_option_offset, int *baud, int *miner_count, int *asic_count, int *timeout, int *frequency, int *asic, char *options)
get_options	driver-bitmain.c	/^static bool get_options(int this_option_offset, int *baud, int *chain_num,$/;"	f	file:	signature:(int this_option_offset, int *baud, int *chain_num, int *asic_num, int *timeout, int *frequency, char * frequency_t, uint8_t * reg_data, uint8_t * voltage, char * voltage_t)
get_options	driver-bmsc.c	/^static void get_options(int this_option_offset, struct cgpu_info *bmsc, int *baud, float *readtimeout)$/;"	f	file:	signature:(int this_option_offset, struct cgpu_info *bmsc, int *baud, float *readtimeout)
get_options	driver-icarus.c	/^static void get_options(int this_option_offset, struct cgpu_info *icarus, int *baud, int *work_division, int *fpga_count)$/;"	f	file:	signature:(int this_option_offset, struct cgpu_info *icarus, int *baud, int *work_division, int *fpga_count)
get_pll_reg	driver-SPI-bitmine-A1.c	/^static uint8_t *get_pll_reg(struct A1_chain *a1, int ref_clock_khz,$/;"	f	file:	signature:(struct A1_chain *a1, int ref_clock_khz, int sys_clock_khz)
get_proxy	miner.h	/^extern char *get_proxy(char *url, struct pool *pool);$/;"	p	signature:(char *url, struct pool *pool)
get_proxy	util.c	/^char *get_proxy(char *url, struct pool *pool)$/;"	f	signature:(char *url, struct pool *pool)
get_queue_work	cgminer.c	/^struct work *get_queue_work(struct thr_info *thr, struct cgpu_info *cgpu, int thr_id)$/;"	f	signature:(struct thr_info *thr, struct cgpu_info *cgpu, int thr_id)
get_queue_work	miner.h	/^extern struct work *get_queue_work(struct thr_info *thr, struct cgpu_info *cgpu, int thr_id);$/;"	p	signature:(struct thr_info *thr, struct cgpu_info *cgpu, int thr_id)
get_queued	cgminer.c	/^struct work *get_queued(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
get_queued	miner.h	/^extern struct work *get_queued(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
get_serial_cts	fpgautils.c	/^int get_serial_cts(const int fd)$/;"	f	signature:(const int fd)
get_serial_cts	fpgautils.c	/^int get_serial_cts(int fd)$/;"	f	signature:(int fd)
get_serial_cts	fpgautils.h	/^extern int get_serial_cts(int fd);$/;"	p	signature:(int fd)
get_sessionid	util.c	/^static char *get_sessionid(json_t *val)$/;"	f	file:	signature:(json_t *val)
get_statline	cgminer.c	/^static void get_statline(char *buf, size_t bufsiz, struct cgpu_info *cgpu)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *cgpu)
get_statline	miner.h	/^	void (*get_statline)(char *, size_t, struct cgpu_info *);$/;"	m	struct:device_drv	access:public
get_statline_before	miner.h	/^	void (*get_statline_before)(char *, size_t, struct cgpu_info *);$/;"	m	struct:device_drv	access:public
get_stats	miner.h	/^	bool (*get_stats)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
get_status	driver-modminer.c	/^static bool get_status(struct cgpu_info *modminer, char *msg, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *modminer, char *msg, enum usb_cmds cmd)
get_status_timeout	driver-modminer.c	/^static bool get_status_timeout(struct cgpu_info *modminer, char *msg, unsigned int timeout, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *modminer, char *msg, unsigned int timeout, enum usb_cmds cmd)
get_temp	A1-board-selector.h	/^	uint8_t (*get_temp)(uint8_t sensor);$/;"	m	struct:board_selector	access:public
get_temp_max	driver-avalon2.c	/^static inline int get_temp_max(struct avalon2_info *info)$/;"	f	file:	signature:(struct avalon2_info *info)
get_thr_cgpu	cgminer.c	/^static struct cgpu_info *get_thr_cgpu(int thr_id)$/;"	f	file:	signature:(int thr_id)
get_thread	cgminer.c	/^struct thr_info *get_thread(int thr_id)$/;"	f	signature:(int thr_id)
get_thread	miner.h	/^extern struct thr_info *get_thread(int thr_id);$/;"	p	signature:(int thr_id)
get_timerfd_clockid	compat/libusb-1.0/libusb/libusbi.h	/^	clockid_t (*get_timerfd_clockid)(void);$/;"	m	struct:usbi_os_backend	access:public
get_timestamp	cgminer.c	/^static void get_timestamp(char *f, size_t fsiz, struct timeval *tv)$/;"	f	file:	signature:(char *f, size_t fsiz, struct timeval *tv)
get_upstream_work	cgminer.c	/^static bool get_upstream_work(struct work *work, CURL *curl)$/;"	f	file:	signature:(struct work *work, CURL *curl)
get_voltage	driver-avalon2.h	/^	int get_voltage[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
get_wiper	A1-trimpot-mcp4x.h	/^	uint16_t (*get_wiper)(struct mcp4x *me, uint8_t id);$/;"	m	struct:mcp4x	access:public
get_work	cgminer.c	/^struct work *get_work(struct thr_info *thr, const int thr_id)$/;"	f	signature:(struct thr_info *thr, const int thr_id)
get_work	miner.h	/^extern struct work *get_work(struct thr_info *thr, const int thr_id);$/;"	p	signature:(struct thr_info *thr, const int thr_id)
getcsp	miner.php	/^function getcsp($name, $systempage = false)$/;"	f
getcss	miner.php	/^function getcss($cssname, $dom = false)$/;"	f
getdom	miner.php	/^function getdom($domname)$/;"	f
getfail_occasions	miner.h	/^	unsigned int getfail_occasions;$/;"	m	struct:pool	access:public
getinfo	driver-bflsc.c	/^static bool getinfo(struct cgpu_info *bflsc, int dev)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev)
getinfo	driver-bflsc.h	/^	char getinfo[(BFLSC_BUFSIZ+4)*4];$/;"	m	struct:bflsc_dev	access:public
getparam	miner.php	/^function getparam($name, $both = false)$/;"	f
getq	cgminer.c	/^struct thread_q *getq;$/;"	v	typeref:struct:thread_q
getrigs	miner.php	/^function getrigs()$/;"	f
gets	api.c	/^	uint64_t gets;$/;"	m	struct:lockinfo	file:	access:public
getsock	api-example.php	/^function getsock($addr, $port)$/;"	f
getsock	miner.php	/^function getsock($rig, $addr, $port)$/;"	f
getwork	miner.h	/^	bool	getwork;$/;"	m	struct:thr_info	access:public
getwork_attempts	miner.h	/^	uint32_t getwork_attempts;$/;"	m	struct:cgminer_pool_stats	access:public
getwork_calls	miner.h	/^	uint32_t getwork_calls;$/;"	m	struct:cgminer_pool_stats	access:public
getwork_calls	miner.h	/^	uint32_t getwork_calls;$/;"	m	struct:cgminer_stats	access:public
getwork_decode	cgminer.c	/^static bool getwork_decode(json_t *res_val, struct work *work)$/;"	f	file:	signature:(json_t *res_val, struct work *work)
getwork_mode	miner.h	/^	char		getwork_mode;$/;"	m	struct:work	access:public
getwork_q	miner.h	/^	struct thread_q *getwork_q;$/;"	m	struct:pool	typeref:struct:pool::thread_q	access:public
getwork_req	cgminer.c	/^static char *getwork_req = "{\\"method\\": \\"getwork\\", \\"params\\": [], \\"id\\":0}\\n";$/;"	v	file:
getwork_requested	miner.h	/^	unsigned int getwork_requested;$/;"	m	struct:pool	access:public
getwork_wait	miner.h	/^	struct timeval getwork_wait;$/;"	m	struct:cgminer_pool_stats	typeref:struct:cgminer_pool_stats::timeval	access:public
getwork_wait	miner.h	/^	struct timeval getwork_wait;$/;"	m	struct:cgminer_stats	typeref:struct:cgminer_stats::timeval	access:public
getwork_wait_max	miner.h	/^	struct timeval getwork_wait_max;$/;"	m	struct:cgminer_pool_stats	typeref:struct:cgminer_pool_stats::timeval	access:public
getwork_wait_max	miner.h	/^	struct timeval getwork_wait_max;$/;"	m	struct:cgminer_stats	typeref:struct:cgminer_stats::timeval	access:public
getwork_wait_min	miner.h	/^	struct timeval getwork_wait_min;$/;"	m	struct:cgminer_pool_stats	typeref:struct:cgminer_pool_stats::timeval	access:public
getwork_wait_min	miner.h	/^	struct timeval getwork_wait_min;$/;"	m	struct:cgminer_stats	typeref:struct:cgminer_stats::timeval	access:public
getwork_wait_rolling	miner.h	/^	double getwork_wait_rolling;$/;"	m	struct:cgminer_pool_stats	access:public
gh_div_10_rate	driver-spondoolies-sp10-p.h	/^	uint8_t gh_div_10_rate; \/\/ == $/;"	m	struct:__anon47	access:public
gh_div_50_rate	driver-spondoolies-sp30-p.h	/^  uint8_t gh_div_50_rate;$/;"	m	struct:__anon67	access:public
ghs	driver-minion.c	/^	double ghs;$/;"	m	struct:perf_item	file:	access:public
gl_dummy_symbol	lib/dummy.c	/^int gl_dummy_symbol;$/;"	v
gl_int16_t	lib/stdint.in.h	/^typedef short int gl_int16_t;$/;"	t
gl_int32_t	lib/stdint.in.h	/^typedef int gl_int32_t;$/;"	t
gl_int64_t	lib/stdint.in.h	/^typedef __int64 gl_int64_t;$/;"	t
gl_int64_t	lib/stdint.in.h	/^typedef long int gl_int64_t;$/;"	t
gl_int64_t	lib/stdint.in.h	/^typedef long long int gl_int64_t;$/;"	t
gl_int8_t	lib/stdint.in.h	/^typedef signed char gl_int8_t;$/;"	t
gl_int_fast16_t	lib/stdint.in.h	/^typedef long int gl_int_fast16_t;$/;"	t
gl_int_fast32_t	lib/stdint.in.h	/^typedef long int gl_int_fast32_t;$/;"	t
gl_int_fast8_t	lib/stdint.in.h	/^typedef long int gl_int_fast8_t;$/;"	t
gl_intmax_t	lib/stdint.in.h	/^typedef long int gl_intmax_t;$/;"	t
gl_intmax_t	lib/stdint.in.h	/^typedef long long int gl_intmax_t;$/;"	t
gl_intptr_t	lib/stdint.in.h	/^typedef long int gl_intptr_t;$/;"	t
gl_uint16_t	lib/stdint.in.h	/^typedef unsigned short int gl_uint16_t;$/;"	t
gl_uint32_t	lib/stdint.in.h	/^typedef unsigned int gl_uint32_t;$/;"	t
gl_uint64_t	lib/stdint.in.h	/^typedef unsigned __int64 gl_uint64_t;$/;"	t
gl_uint64_t	lib/stdint.in.h	/^typedef unsigned long int gl_uint64_t;$/;"	t
gl_uint64_t	lib/stdint.in.h	/^typedef unsigned long long int gl_uint64_t;$/;"	t
gl_uint8_t	lib/stdint.in.h	/^typedef unsigned char gl_uint8_t;$/;"	t
gl_uint_fast16_t	lib/stdint.in.h	/^typedef unsigned long int gl_uint_fast16_t;$/;"	t
gl_uint_fast32_t	lib/stdint.in.h	/^typedef unsigned long int gl_uint_fast32_t;$/;"	t
gl_uint_fast8_t	lib/stdint.in.h	/^typedef unsigned long int gl_uint_fast8_t;$/;"	t
gl_uintmax_t	lib/stdint.in.h	/^typedef unsigned long int gl_uintmax_t;$/;"	t
gl_uintmax_t	lib/stdint.in.h	/^typedef unsigned long long int gl_uintmax_t;$/;"	t
gl_uintptr_t	lib/stdint.in.h	/^typedef unsigned long int gl_uintptr_t;$/;"	t
global_hashrate	cgminer.c	/^unsigned long long global_hashrate;$/;"	v
global_quota_gcd	cgminer.c	/^unsigned long global_quota_gcd = 1;$/;"	v
golden_hashes	driver-antrouter.c	/^	uint64_t golden_hashes;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
golden_hashes	driver-bmsc.c	/^	uint64_t golden_hashes;$/;"	m	struct:BMSC_INFO	file:	access:public
golden_hashes	driver-icarus.c	/^	uint64_t golden_hashes;$/;"	m	struct:ICARUS_INFO	file:	access:public
golden_tv	driver-antrouter.c	/^	struct timeval golden_tv;$/;"	m	struct:ANTROUTER_INFO	typeref:struct:ANTROUTER_INFO::timeval	file:	access:public
golden_tv	driver-bmsc.c	/^	struct timeval golden_tv;$/;"	m	struct:BMSC_INFO	typeref:struct:BMSC_INFO::timeval	file:	access:public
golden_tv	driver-icarus.c	/^	struct timeval golden_tv;$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::timeval	file:	access:public
good	driver-spondoolies-sp10.h	/^	int good;$/;"	m	struct:spond_adapter	access:public
good	driver-spondoolies-sp30.h	/^	int good;$/;"	m	struct:spond_adapter	access:public
good_nonces	driver-bab.c	/^	K_STORE *good_nonces[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
got	miner.php	/^		$got = @socket_recvfrom($rep_soc, $buf, 32, MSG_DONTWAIT, $ip, $p);$/;"	v
got	usbutils.c	/^	bool got;$/;"	m	struct:resource_reply	file:	access:public
got_last	MCast.java	/^	static boolean got_last = false;$/;"	f	class:MCast	access:default
gots	api.c	/^	uint64_t gots;$/;"	m	struct:lockinfo	file:	access:public
gpio	driver-bab.c	/^	volatile unsigned *gpio;$/;"	m	struct:bab_info	file:	access:public
gpio	driver-minion.c	/^	volatile unsigned *gpio;$/;"	m	struct:minion_info	file:	access:public
gpio_pin	mcp2210.h	/^struct gpio_pin {$/;"	s
gpio_pin::pin	mcp2210.h	/^	uint8_t pin[9];$/;"	m	struct:gpio_pin	access:public
gpiointfd	driver-minion.c	/^	int gpiointfd;$/;"	m	struct:minion_info	file:	access:public
gpiointvalue	driver-minion.c	/^	char gpiointvalue[64];$/;"	m	struct:minion_info	file:	access:public
gpubuttons	miner.php	/^function gpubuttons($count, $rig)$/;"	f
gpur_thr_id	cgminer.c	/^int gpur_thr_id;$/;"	v
gpus	miner.php	/^ $gpus = api($rig, 'gpucount');$/;"	v
group	api.c	/^	char group;$/;"	m	struct:IPACCESS	file:	access:public
group	hf_protocol.h	/^	uint8_t  group;                         \/\/ Non-zero for valid group$/;"	m	struct:hf_hash_usb	access:public
group	hf_protocol.h	/^	uint8_t  group;$/;"	m	struct:hf_hash_serial	access:public
group	hf_protocol_be.h	/^	uint8_t  group;                         \/\/ Non-zero for valid group$/;"	m	struct:hf_hash_usb	access:public
group	hf_protocol_be.h	/^	uint8_t  group;$/;"	m	struct:hf_hash_serial	access:public
group_ntime_roll	driver-hashfast.h	/^	int group_ntime_roll;                       \/\/ Total ntime roll amount per group$/;"	m	struct:hashfast_info	access:public
group_ntime_roll	hf_protocol.h	/^	uint16_t group_ntime_roll;                  \/\/ Total ntime roll amount per group$/;"	m	struct:hf_usb_init_options	access:public
group_ntime_roll	hf_protocol_be.h	/^	uint16_t group_ntime_roll;                  \/\/ Total ntime roll amount per group$/;"	m	struct:hf_usb_init_options	access:public
grp	miner.php	/^	$grp = $ext[$section]['group'];$/;"	v
grpkey	miner.php	/^					$grpkey = '';$/;"	v
guid_eq	compat/libusb-1.0/libusb/os/windows_usb.c	/^static inline BOOLEAN guid_eq(const GUID *guid1, const GUID *guid2) {$/;"	f	file:	signature:(const GUID *guid1, const GUID *guid2)
guid_to_string	compat/libusb-1.0/libusb/os/windows_usb.c	/^static char* guid_to_string(const GUID* guid)$/;"	f	file:	signature:(const GUID* guid)
gws_cond	cgminer.c	/^pthread_cond_t gws_cond;$/;"	v
gwsched_thr_id	cgminer.c	/^static int gwsched_thr_id;$/;"	v	file:
h	driver-hashfast.c	/^	struct hf_header h;$/;"	m	struct:op_nameframe	typeref:struct:op_nameframe::hf_header	file:	access:public
h	miner.php	/^				$h = $value % 24;$/;"	v
h	sha2.h	/^    uint32_t h[8];$/;"	m	struct:__anon62	access:public
haderror	miner.php	/^		$haderror = true;$/;"	v
haderror	miner.php	/^	$haderror = true;$/;"	v
haderror	miner.php	/^$haderror = false;$/;"	v
hadexpire	miner.h	/^	bool hadexpire;$/;"	m	struct:cgminer_pool_stats	access:public
hadexpire	util.c	/^	bool		hadexpire;$/;"	m	struct:header_info	file:	access:public
hadrolltime	miner.h	/^	bool hadrolltime;$/;"	m	struct:cgminer_pool_stats	access:public
hadrolltime	util.c	/^	bool		hadrolltime;$/;"	m	struct:header_info	file:	access:public
handle	compat/libusb-1.0/libusb/hotplug.h	/^        libusb_hotplug_callback_handle handle;$/;"	m	struct:libusb_hotplug_callback	access:public
handle	compat/libusb-1.0/libusb/os/poll_windows.h	/^	HANDLE handle;					\/\/ what we need to attach overlapped to the I\/O op, so we can poll it$/;"	m	struct:winfd	access:public
handle	usbutils.h	/^	libusb_device_handle *handle;$/;"	m	struct:cg_usb_device	access:public
handle_bulk_completion	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int handle_bulk_completion(struct usbi_transfer *itransfer,$/;"	f	file:	signature:(struct usbi_transfer *itransfer, struct usbfs_urb *urb)
handle_control_completion	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int handle_control_completion(struct usbi_transfer *itransfer,$/;"	f	file:	signature:(struct usbi_transfer *itransfer, struct usbfs_urb *urb)
handle_events	compat/libusb-1.0/libusb/io.c	/^static int handle_events(struct libusb_context *ctx, struct timeval *tv)$/;"	f	file:	signature:(struct libusb_context *ctx, struct timeval *tv)
handle_events	compat/libusb-1.0/libusb/libusbi.h	/^	int (*handle_events)(struct libusb_context *ctx,$/;"	m	struct:usbi_os_backend	access:public
handle_iso_completion	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int handle_iso_completion(struct usbi_transfer *itransfer,$/;"	f	file:	signature:(struct usbi_transfer *itransfer, struct usbfs_urb *urb)
handle_priv	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^struct handle_priv {$/;"	s	file:
handle_priv::endpoints	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	int endpoints[USB_MAX_ENDPOINTS];$/;"	m	struct:handle_priv	file:	access:public
handle_priv::pipe	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	int pipe[2];				\/* for event notification *\/$/;"	m	struct:handle_priv	file:	access:public
handle_timeout	compat/libusb-1.0/libusb/io.c	/^static void handle_timeout(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
handle_timeouts	compat/libusb-1.0/libusb/io.c	/^static int handle_timeouts(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
handle_timeouts_locked	compat/libusb-1.0/libusb/io.c	/^static int handle_timeouts_locked(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
handle_timerfd_trigger	compat/libusb-1.0/libusb/io.c	/^static int handle_timerfd_trigger(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
handle_to_winfd	compat/libusb-1.0/libusb/os/poll_windows.c	/^struct winfd handle_to_winfd(HANDLE handle)$/;"	f	signature:(HANDLE handle)
handle_to_winfd	compat/libusb-1.0/libusb/os/poll_windows.h	/^struct winfd handle_to_winfd(HANDLE handle);$/;"	p	signature:(HANDLE handle)
handler_t	lib/sigaction.c	/^typedef void (*handler_t) (int signal);$/;"	t	file:
handler_t	lib/sigprocmask.c	/^typedef void (*handler_t) (int);$/;"	t	file:
hardware_rev	hf_protocol.h	/^	uint16_t hardware_rev;                      \/\/ Hardware revision #$/;"	m	struct:hf_usb_init_base	access:public
hardware_rev	hf_protocol_be.h	/^	uint16_t hardware_rev;                      \/\/ Hardware revision #$/;"	m	struct:hf_usb_init_base	access:public
hardware_version	driver-hashfast.h	/^	double hardware_version;$/;"	m	struct:hashfast_info	access:public
has_chip	driver-minion.c	/^	bool has_chip[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
has_gbt	miner.h	/^	bool has_gbt;$/;"	m	struct:pool	access:public
has_opname	driver-hashfast.h	/^	bool has_opname;$/;"	m	struct:hashfast_info	access:public
has_stratum	miner.h	/^	bool has_stratum;$/;"	m	struct:pool	access:public
hash	cgminer.c	/^	char hash[68];$/;"	m	struct:block	file:	access:public
hash	compat/jansson-2.6/src/hashtable.h	/^    size_t hash;$/;"	m	struct:hashtable_pair	access:public
hash	miner.h	/^	unsigned char	hash[32];$/;"	m	struct:work	access:public
hash_clock	driver-hashfast.h	/^	int hash_clock;$/;"	m	struct:hf_die_data	access:public
hash_clock	hf_protocol.h	/^	uint16_t hash_clock;                    \/\/ Requested hash clock frequency$/;"	m	struct:hf_usb_init_header	access:public
hash_clock	hf_protocol_be.h	/^	uint16_t hash_clock;                    \/\/ Requested hash clock frequency$/;"	m	struct:hf_usb_init_header	access:public
hash_clock_rate	driver-hashfast.h	/^	int hash_clock_rate;                        \/\/ Hash clock rate to use, in Mhz$/;"	m	struct:hashfast_info	access:public
hash_clockrate	hf_protocol.h	/^	uint16_t hash_clockrate;                    \/\/ Actual hash clock rate used (nearest Mhz)$/;"	m	struct:hf_usb_init_base	access:public
hash_clockrate	hf_protocol_be.h	/^	uint16_t hash_clockrate;                    \/\/ Actual hash clock rate used (nearest Mhz)$/;"	m	struct:hf_usb_init_base	access:public
hash_count	driver-hashfast.h	/^	int64_t hash_count;$/;"	m	struct:hashfast_info	access:public
hash_count	hf_protocol.h	/^	uint64_t hash_count;                        \/\/ Add this to host's cumulative hash count$/;"	m	struct:hf_gwq_data	access:public
hash_count	hf_protocol_be.h	/^	uint64_t hash_count;                        \/\/ Add this to host's cumulative hash count$/;"	m	struct:hf_gwq_data	access:public
hash_count_max	driver-antrouter.c	/^	uint32_t hash_count_max;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
hash_count_max	driver-bmsc.c	/^	uint32_t hash_count_max;$/;"	m	struct:BMSC_HISTORY	file:	access:public
hash_count_max	driver-icarus.c	/^	uint32_t hash_count_max;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
hash_count_min	driver-antrouter.c	/^	uint32_t hash_count_min;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
hash_count_min	driver-bmsc.c	/^	uint32_t hash_count_min;$/;"	m	struct:BMSC_HISTORY	file:	access:public
hash_count_min	driver-icarus.c	/^	uint32_t hash_count_min;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
hash_count_range	driver-antrouter.c	/^	uint64_t hash_count_range;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
hash_count_range	driver-bmsc.c	/^	uint64_t hash_count_range;$/;"	m	struct:BMSC_INFO	file:	access:public
hash_count_range	driver-icarus.c	/^	uint64_t hash_count_range;$/;"	m	struct:ICARUS_INFO	file:	access:public
hash_driver_work	cgminer.c	/^void hash_driver_work(struct thr_info *mythr)$/;"	f	signature:(struct thr_info *mythr)
hash_driver_work	miner.h	/^extern void hash_driver_work(struct thr_info *mythr);$/;"	p	signature:(struct thr_info *mythr)
hash_lock	cgminer.c	/^pthread_mutex_t hash_lock;$/;"	v
hash_pop	cgminer.c	/^static struct work *hash_pop(bool blocking)$/;"	f	file:	signature:(bool blocking)
hash_push	cgminer.c	/^static bool hash_push(struct work *work)$/;"	f	file:	signature:(struct work *work)
hash_queued_work	cgminer.c	/^void hash_queued_work(struct thr_info *mythr)$/;"	f	signature:(struct thr_info *mythr)
hash_queued_work	miner.h	/^extern void hash_queued_work(struct thr_info *mythr);$/;"	p	signature:(struct thr_info *mythr)
hash_reset_n	knc-asic.h	/^	int hash_reset_n;$/;"	m	struct:knc_die_info	access:public
hash_sequence_head	driver-hashfast.h	/^	uint16_t hash_sequence_head;                \/\/ HOST:   The next hash sequence # to be sent$/;"	m	struct:hashfast_info	access:public
hash_sequence_tail	driver-hashfast.h	/^	uint16_t hash_sequence_tail;                \/\/ HOST:   Follows device_sequence_tail around to free work$/;"	m	struct:hashfast_info	access:public
hash_sole_work	cgminer.c	/^static void hash_sole_work(struct thr_info *mythr)$/;"	f	file:	signature:(struct thr_info *mythr)
hash_str	compat/jansson-2.6/src/hashtable.c	/^static size_t hash_str(const void *ptr)$/;"	f	file:	signature:(const void *ptr)
hash_voltage	driver-hashfast.h	/^	int hash_voltage;                           \/\/ Hash voltage to use, in mV$/;"	m	struct:hashfast_info	access:public
hash_work	miner.h	/^	void (*hash_work)(struct thr_info *);$/;"	m	struct:device_drv	access:public
hashclock	driver-klondike.c	/^	uint8_t hashclock[2];$/;"	m	struct:klondike_cfg	file:	access:public
hashcount	driver-klondike.c	/^	uint64_t hashcount;$/;"	m	struct:klondike_info	file:	access:public
hashcount	driver-klondike.c	/^	uint8_t hashcount[2];$/;"	m	struct:klondike_status	file:	access:public
hashdisplay_t	cgminer.c	/^static time_t hashdisplay_t;$/;"	v	file:
hashes	driver-blockerupter.h	/^	int hashes;$/;"	m	struct:asic_info	access:public
hashes	driver-blockerupter.h	/^	int hashes;$/;"	m	struct:blockerupter_info	access:public
hashes	driver-blockerupter.h	/^	int hashes;$/;"	m	struct:board_info	access:public
hashes	driver-cointerra.h	/^	uint64_t hashes;$/;"	m	struct:cointerra_info	access:public
hashes	miner.h	/^	uint32_t hashes;$/;"	m	struct:modminer_fpga_state	access:public
hashes_sent	driver-bflsc.h	/^	uint64_t hashes_sent;$/;"	m	struct:bflsc_dev	access:public
hashes_sent	driver-bflsc.h	/^	uint64_t hashes_sent;$/;"	m	struct:bflsc_info	access:public
hashes_unsent	driver-bflsc.h	/^	uint64_t hashes_unsent;$/;"	m	struct:bflsc_dev	access:public
hashfast_drv	driver-hashfast.c	/^struct device_drv hashfast_drv = {$/;"	v	typeref:struct:device_drv
hashfast_info	driver-hashfast.h	/^struct hashfast_info {$/;"	s
hashfast_info::asic_count	driver-hashfast.h	/^	int asic_count;                             \/\/ # of chips in the chain$/;"	m	struct:hashfast_info	access:public
hashfast_info::base_clock	driver-hashfast.h	/^	int base_clock;                             \/\/ Clock rate we actually got$/;"	m	struct:hashfast_info	access:public
hashfast_info::calc_hashes	driver-hashfast.h	/^	uint64_t calc_hashes;$/;"	m	struct:hashfast_info	access:public
hashfast_info::cgpu	driver-hashfast.h	/^	struct cgpu_info *cgpu;                     \/\/ Points back to parent structure$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::cgpu_info	access:public
hashfast_info::clock_offset	driver-hashfast.h	/^	int clock_offset;$/;"	m	struct:hashfast_info	access:public
hashfast_info::config_data	driver-hashfast.h	/^	struct hf_config_data config_data;          \/\/ Configuration data used from USB_INIT$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_config_data	access:public
hashfast_info::core_bitmap	driver-hashfast.h	/^	uint32_t *core_bitmap;                      \/\/ Core OK bitmap test results, run with PLL Bypassed$/;"	m	struct:hashfast_info	access:public
hashfast_info::core_bitmap_size	driver-hashfast.h	/^	int core_bitmap_size;                       \/\/ in bytes$/;"	m	struct:hashfast_info	access:public
hashfast_info::core_count	driver-hashfast.h	/^	int core_count;                             \/\/ # of cores per chip$/;"	m	struct:hashfast_info	access:public
hashfast_info::core_ntime_roll	driver-hashfast.h	/^	int core_ntime_roll;                        \/\/ Total core ntime roll amount$/;"	m	struct:hashfast_info	access:public
hashfast_info::device_sequence_head	driver-hashfast.h	/^	uint16_t device_sequence_head;              \/\/ DEVICE: The most recent sequence number the device dispatched$/;"	m	struct:hashfast_info	access:public
hashfast_info::device_sequence_tail	driver-hashfast.h	/^	uint16_t device_sequence_tail;              \/\/ DEVICE: The most recently completed job in the device$/;"	m	struct:hashfast_info	access:public
hashfast_info::device_type	driver-hashfast.h	/^	int device_type;                            \/\/ What sort of device this is$/;"	m	struct:hashfast_info	access:public
hashfast_info::die_data	driver-hashfast.h	/^	struct hf_die_data *die_data;$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_die_data	access:public
hashfast_info::die_statistics	driver-hashfast.h	/^	struct hf_long_statistics *die_statistics;  \/\/ Array of per-die error counters$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_long_statistics	access:public
hashfast_info::die_status	driver-hashfast.h	/^	struct hf_g1_die_data *die_status;          \/\/ Array of per-die voltage, current, temperature sensor data$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_g1_die_data	access:public
hashfast_info::fanspeed	driver-hashfast.h	/^	int fanspeed;                               \/\/ Fanspeed in percent$/;"	m	struct:hashfast_info	access:public
hashfast_info::firmware_version	driver-hashfast.h	/^	double firmware_version;$/;"	m	struct:hashfast_info	access:public
hashfast_info::group_ntime_roll	driver-hashfast.h	/^	int group_ntime_roll;                       \/\/ Total ntime roll amount per group$/;"	m	struct:hashfast_info	access:public
hashfast_info::hardware_version	driver-hashfast.h	/^	double hardware_version;$/;"	m	struct:hashfast_info	access:public
hashfast_info::has_opname	driver-hashfast.h	/^	bool has_opname;$/;"	m	struct:hashfast_info	access:public
hashfast_info::hash_clock_rate	driver-hashfast.h	/^	int hash_clock_rate;                        \/\/ Hash clock rate to use, in Mhz$/;"	m	struct:hashfast_info	access:public
hashfast_info::hash_count	driver-hashfast.h	/^	int64_t hash_count;$/;"	m	struct:hashfast_info	access:public
hashfast_info::hash_sequence_head	driver-hashfast.h	/^	uint16_t hash_sequence_head;                \/\/ HOST:   The next hash sequence # to be sent$/;"	m	struct:hashfast_info	access:public
hashfast_info::hash_sequence_tail	driver-hashfast.h	/^	uint16_t hash_sequence_tail;                \/\/ HOST:   Follows device_sequence_tail around to free work$/;"	m	struct:hashfast_info	access:public
hashfast_info::hash_voltage	driver-hashfast.h	/^	int hash_voltage;                           \/\/ Hash voltage to use, in mV$/;"	m	struct:hashfast_info	access:public
hashfast_info::last_die_adjusted	driver-hashfast.h	/^	int last_die_adjusted;$/;"	m	struct:hashfast_info	access:public
hashfast_info::last_max_temp	driver-hashfast.h	/^	int last_max_temp;$/;"	m	struct:hashfast_info	access:public
hashfast_info::last_restart	driver-hashfast.h	/^	time_t last_restart;$/;"	m	struct:hashfast_info	access:public
hashfast_info::last_send	driver-hashfast.h	/^	time_t last_send;$/;"	m	struct:hashfast_info	access:public
hashfast_info::lock	driver-hashfast.h	/^	pthread_mutex_t lock;$/;"	m	struct:hashfast_info	access:public
hashfast_info::no_matching_work	driver-hashfast.h	/^	int no_matching_work;$/;"	m	struct:hashfast_info	access:public
hashfast_info::num_sequence	driver-hashfast.h	/^	int num_sequence;                           \/\/ A power of 2. What the sequence number range is.$/;"	m	struct:hashfast_info	access:public
hashfast_info::old_cgpu	driver-hashfast.h	/^	struct cgpu_info *old_cgpu  ;               \/\/ Points to old structure if hotplugged same device$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::cgpu_info	access:public
hashfast_info::op_name	driver-hashfast.h	/^	char op_name[36];$/;"	m	struct:hashfast_info	access:public
hashfast_info::opname_valid	driver-hashfast.h	/^	bool opname_valid;$/;"	m	struct:hashfast_info	access:public
hashfast_info::overheat	driver-hashfast.h	/^	int overheat;$/;"	m	struct:hashfast_info	access:public
hashfast_info::raw_hashes	driver-hashfast.h	/^	uint64_t raw_hashes;$/;"	m	struct:hashfast_info	access:public
hashfast_info::read_thr	driver-hashfast.h	/^	pthread_t read_thr;$/;"	m	struct:hashfast_info	access:public
hashfast_info::ref_frequency	driver-hashfast.h	/^	int ref_frequency;                          \/\/ Reference clock rate$/;"	m	struct:hashfast_info	access:public
hashfast_info::resets	driver-hashfast.h	/^	int resets;$/;"	m	struct:hashfast_info	access:public
hashfast_info::rlock	driver-hashfast.h	/^	pthread_mutex_t rlock;$/;"	m	struct:hashfast_info	access:public
hashfast_info::serial_number	driver-hashfast.h	/^	uint32_t serial_number;                     \/\/ db->serial_number if it exists$/;"	m	struct:hashfast_info	access:public
hashfast_info::shed_count	driver-hashfast.h	/^	uint16_t shed_count;                        \/\/ Dynamic copy of #cores device has shed for thermal control$/;"	m	struct:hashfast_info	access:public
hashfast_info::stats1	driver-hashfast.h	/^	struct hf_long_usb_stats1 stats1;$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_long_usb_stats1	access:public
hashfast_info::temp_updates	driver-hashfast.h	/^	int temp_updates;$/;"	m	struct:hashfast_info	access:public
hashfast_info::usb_init_base	driver-hashfast.h	/^	struct hf_usb_init_base usb_init_base;      \/\/ USB Base information from USB_INIT$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_usb_init_base	access:public
hashfast_info::works	driver-hashfast.h	/^	struct work **works;$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::work	access:public
hashmeter	cgminer.c	/^static void hashmeter(int thr_id, uint64_t hashes_done)$/;"	f	file:	signature:(int thr_id, uint64_t hashes_done)
hashrate	driver-blockerupter.h	/^	double hashrate;$/;"	m	struct:blockerupter_info	access:public
hashrate	driver-blockerupter.h	/^	double hashrate;$/;"	m	struct:board_info	access:public
hashratio_api_stats	driver-hashratio.c	/^static struct api_data *hashratio_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
hashratio_close	driver-hashratio.h	125;"	d
hashratio_detect	driver-hashratio.c	/^static inline void hashratio_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
hashratio_detect_one	driver-hashratio.c	/^static struct cgpu_info *hashratio_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
hashratio_drv	driver-hashratio.c	/^struct device_drv hashratio_drv = {$/;"	v	typeref:struct:device_drv
hashratio_freq	driver-hashratio.c	/^static int hashratio_freq = HRTO_DEFAULT_FREQUENCY;$/;"	v	file:
hashratio_get_result	driver-hashratio.c	/^static int hashratio_get_result(struct thr_info *thr, struct hashratio_ret *ar)$/;"	f	file:	signature:(struct thr_info *thr, struct hashratio_ret *ar)
hashratio_gets	driver-hashratio.c	/^static inline int hashratio_gets(struct cgpu_info *hashratio, uint8_t *buf)$/;"	f	file:	signature:(struct cgpu_info *hashratio, uint8_t *buf)
hashratio_info	driver-hashratio.h	/^struct hashratio_info {$/;"	s
hashratio_info::default_freq	driver-hashratio.h	/^	int default_freq;$/;"	m	struct:hashratio_info	access:public
hashratio_info::fan	driver-hashratio.h	/^	int     fan[HRTO_FAN_COUNT];$/;"	m	struct:hashratio_info	access:public
hashratio_info::fan_pwm	driver-hashratio.h	/^	int fan_pwm;$/;"	m	struct:hashratio_info	access:public
hashratio_info::hw_work	driver-hashratio.h	/^	int hw_work;$/;"	m	struct:hashratio_info	access:public
hashratio_info::hw_works	driver-hashratio.h	/^	int hw_works;$/;"	m	struct:hashratio_info	access:public
hashratio_info::last_stratum	driver-hashratio.h	/^	struct timeval last_stratum;$/;"	m	struct:hashratio_info	typeref:struct:hashratio_info::timeval	access:public
hashratio_info::local_work	driver-hashratio.h	/^	int local_work;$/;"	m	struct:hashratio_info	access:public
hashratio_info::local_works	driver-hashratio.h	/^	int local_works;$/;"	m	struct:hashratio_info	access:public
hashratio_info::matching_work	driver-hashratio.h	/^	int matching_work[HRTO_DEFAULT_MINERS];$/;"	m	struct:hashratio_info	access:public
hashratio_info::mm_version	driver-hashratio.h	/^	char mm_version[16];$/;"	m	struct:hashratio_info	access:public
hashratio_info::pool	driver-hashratio.h	/^	struct pool pool;$/;"	m	struct:hashratio_info	typeref:struct:hashratio_info::pool	access:public
hashratio_info::pool_no	driver-hashratio.h	/^	int pool_no;$/;"	m	struct:hashratio_info	access:public
hashratio_info::target_freq	driver-hashratio.h	/^	uint8_t target_freq[HRTO_DEFAULT_MINERS];$/;"	m	struct:hashratio_info	access:public
hashratio_info::temp	driver-hashratio.h	/^	int     temp;$/;"	m	struct:hashratio_info	access:public
hashratio_info::temp_history_count	driver-hashratio.h	/^	int temp_history_count;$/;"	m	struct:hashratio_info	access:public
hashratio_info::temp_history_index	driver-hashratio.h	/^	int temp_history_index;$/;"	m	struct:hashratio_info	access:public
hashratio_info::temp_max	driver-hashratio.h	/^	int temp_max;$/;"	m	struct:hashratio_info	access:public
hashratio_info::temp_old	driver-hashratio.h	/^	int temp_old;$/;"	m	struct:hashratio_info	access:public
hashratio_info::temp_sum	driver-hashratio.h	/^	int temp_sum;$/;"	m	struct:hashratio_info	access:public
hashratio_init_pkg	driver-hashratio.c	/^static int hashratio_init_pkg(struct hashratio_pkg *pkg, uint8_t type,$/;"	f	file:	signature:(struct hashratio_pkg *pkg, uint8_t type, uint8_t idx, uint8_t cnt)
hashratio_initialise	driver-hashratio.c	/^static void hashratio_initialise(struct cgpu_info *hashratio)$/;"	f	file:	signature:(struct cgpu_info *hashratio)
hashratio_open	driver-hashratio.h	124;"	d
hashratio_pkg	driver-hashratio.h	/^struct hashratio_pkg {$/;"	s
hashratio_pkg::cnt	driver-hashratio.h	/^	uint8_t cnt;$/;"	m	struct:hashratio_pkg	access:public
hashratio_pkg::crc	driver-hashratio.h	/^	uint8_t crc[2];$/;"	m	struct:hashratio_pkg	access:public
hashratio_pkg::data	driver-hashratio.h	/^	uint8_t data[32];$/;"	m	struct:hashratio_pkg	access:public
hashratio_pkg::head	driver-hashratio.h	/^	uint8_t head[2];$/;"	m	struct:hashratio_pkg	access:public
hashratio_pkg::idx	driver-hashratio.h	/^	uint8_t idx;$/;"	m	struct:hashratio_pkg	access:public
hashratio_pkg::type	driver-hashratio.h	/^	uint8_t type;$/;"	m	struct:hashratio_pkg	access:public
hashratio_prepare	driver-hashratio.c	/^static bool hashratio_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
hashratio_ret	driver-hashratio.h	80;"	d
hashratio_scanhash	driver-hashratio.c	/^static int64_t hashratio_scanhash(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
hashratio_send_pkg	driver-hashratio.c	/^static int hashratio_send_pkg(struct cgpu_info *hashratio, const struct hashratio_pkg *pkg)$/;"	f	file:	signature:(struct cgpu_info *hashratio, const struct hashratio_pkg *pkg)
hashratio_send_pkgs	driver-hashratio.c	/^static int hashratio_send_pkgs(struct cgpu_info *hashratio, const struct hashratio_pkg *pkg)$/;"	f	file:	signature:(struct cgpu_info *hashratio, const struct hashratio_pkg *pkg)
hashratio_shutdown	driver-hashratio.c	/^static void hashratio_shutdown(struct thr_info __maybe_unused *thr)$/;"	f	file:	signature:(struct thr_info __maybe_unused *thr)
hashratio_stratum_pkgs	driver-hashratio.c	/^static void hashratio_stratum_pkgs(struct cgpu_info *hashratio, struct pool *pool)$/;"	f	file:	signature:(struct cgpu_info *hashratio, struct pool *pool)
hashratio_update_work	driver-hashratio.c	/^static void hashratio_update_work(struct cgpu_info *hashratio)$/;"	f	file:	signature:(struct cgpu_info *hashratio)
hashtable	compat/jansson-2.6/src/hashtable.h	/^typedef struct hashtable {$/;"	s
hashtable	compat/jansson-2.6/src/jansson_private.h	/^    hashtable_t hashtable;$/;"	m	struct:__anon22	access:public
hashtable::buckets	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_bucket *buckets;$/;"	m	struct:hashtable	typeref:struct:hashtable::hashtable_bucket	access:public
hashtable::list	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list list;$/;"	m	struct:hashtable	typeref:struct:hashtable::hashtable_list	access:public
hashtable::num_buckets	compat/jansson-2.6/src/hashtable.h	/^    size_t num_buckets;  \/* index to primes[] *\/$/;"	m	struct:hashtable	access:public
hashtable::size	compat/jansson-2.6/src/hashtable.h	/^    size_t size;$/;"	m	struct:hashtable	access:public
hashtable_bucket	compat/jansson-2.6/src/hashtable.h	/^struct hashtable_bucket {$/;"	s
hashtable_bucket::first	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list *first;$/;"	m	struct:hashtable_bucket	typeref:struct:hashtable_bucket::hashtable_list	access:public
hashtable_bucket::last	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list *last;$/;"	m	struct:hashtable_bucket	typeref:struct:hashtable_bucket::hashtable_list	access:public
hashtable_clear	compat/jansson-2.6/src/hashtable.c	/^void hashtable_clear(hashtable_t *hashtable)$/;"	f	signature:(hashtable_t *hashtable)
hashtable_clear	compat/jansson-2.6/src/hashtable.h	/^void hashtable_clear(hashtable_t *hashtable);$/;"	p	signature:(hashtable_t *hashtable)
hashtable_close	compat/jansson-2.6/src/hashtable.c	/^void hashtable_close(hashtable_t *hashtable)$/;"	f	signature:(hashtable_t *hashtable)
hashtable_close	compat/jansson-2.6/src/hashtable.h	/^void hashtable_close(hashtable_t *hashtable);$/;"	p	signature:(hashtable_t *hashtable)
hashtable_del	compat/jansson-2.6/src/hashtable.c	/^int hashtable_del(hashtable_t *hashtable, const char *key)$/;"	f	signature:(hashtable_t *hashtable, const char *key)
hashtable_del	compat/jansson-2.6/src/hashtable.h	/^int hashtable_del(hashtable_t *hashtable, const char *key);$/;"	p	signature:(hashtable_t *hashtable, const char *key)
hashtable_do_clear	compat/jansson-2.6/src/hashtable.c	/^static void hashtable_do_clear(hashtable_t *hashtable)$/;"	f	file:	signature:(hashtable_t *hashtable)
hashtable_do_del	compat/jansson-2.6/src/hashtable.c	/^static int hashtable_do_del(hashtable_t *hashtable,$/;"	f	file:	signature:(hashtable_t *hashtable, const char *key, size_t hash)
hashtable_do_rehash	compat/jansson-2.6/src/hashtable.c	/^static int hashtable_do_rehash(hashtable_t *hashtable)$/;"	f	file:	signature:(hashtable_t *hashtable)
hashtable_find_pair	compat/jansson-2.6/src/hashtable.c	/^static pair_t *hashtable_find_pair(hashtable_t *hashtable, bucket_t *bucket,$/;"	f	file:	signature:(hashtable_t *hashtable, bucket_t *bucket, const char *key, size_t hash)
hashtable_get	compat/jansson-2.6/src/hashtable.c	/^void *hashtable_get(hashtable_t *hashtable, const char *key)$/;"	f	signature:(hashtable_t *hashtable, const char *key)
hashtable_get	compat/jansson-2.6/src/hashtable.h	/^void *hashtable_get(hashtable_t *hashtable, const char *key);$/;"	p	signature:(hashtable_t *hashtable, const char *key)
hashtable_init	compat/jansson-2.6/src/hashtable.c	/^int hashtable_init(hashtable_t *hashtable)$/;"	f	signature:(hashtable_t *hashtable)
hashtable_init	compat/jansson-2.6/src/hashtable.h	/^int hashtable_init(hashtable_t *hashtable);$/;"	p	signature:(hashtable_t *hashtable)
hashtable_iter	compat/jansson-2.6/src/hashtable.c	/^void *hashtable_iter(hashtable_t *hashtable)$/;"	f	signature:(hashtable_t *hashtable)
hashtable_iter	compat/jansson-2.6/src/hashtable.h	/^void *hashtable_iter(hashtable_t *hashtable);$/;"	p	signature:(hashtable_t *hashtable)
hashtable_iter_at	compat/jansson-2.6/src/hashtable.c	/^void *hashtable_iter_at(hashtable_t *hashtable, const char *key)$/;"	f	signature:(hashtable_t *hashtable, const char *key)
hashtable_iter_at	compat/jansson-2.6/src/hashtable.h	/^void *hashtable_iter_at(hashtable_t *hashtable, const char *key);$/;"	p	signature:(hashtable_t *hashtable, const char *key)
hashtable_iter_key	compat/jansson-2.6/src/hashtable.c	/^void *hashtable_iter_key(void *iter)$/;"	f	signature:(void *iter)
hashtable_iter_key	compat/jansson-2.6/src/hashtable.h	/^void *hashtable_iter_key(void *iter);$/;"	p	signature:(void *iter)
hashtable_iter_next	compat/jansson-2.6/src/hashtable.c	/^void *hashtable_iter_next(hashtable_t *hashtable, void *iter)$/;"	f	signature:(hashtable_t *hashtable, void *iter)
hashtable_iter_next	compat/jansson-2.6/src/hashtable.h	/^void *hashtable_iter_next(hashtable_t *hashtable, void *iter);$/;"	p	signature:(hashtable_t *hashtable, void *iter)
hashtable_iter_serial	compat/jansson-2.6/src/hashtable.c	/^size_t hashtable_iter_serial(void *iter)$/;"	f	signature:(void *iter)
hashtable_iter_serial	compat/jansson-2.6/src/hashtable.h	/^size_t hashtable_iter_serial(void *iter);$/;"	p	signature:(void *iter)
hashtable_iter_set	compat/jansson-2.6/src/hashtable.c	/^void hashtable_iter_set(void *iter, json_t *value)$/;"	f	signature:(void *iter, json_t *value)
hashtable_iter_set	compat/jansson-2.6/src/hashtable.h	/^void hashtable_iter_set(void *iter, json_t *value);$/;"	p	signature:(void *iter, json_t *value)
hashtable_iter_value	compat/jansson-2.6/src/hashtable.c	/^void *hashtable_iter_value(void *iter)$/;"	f	signature:(void *iter)
hashtable_iter_value	compat/jansson-2.6/src/hashtable.h	/^void *hashtable_iter_value(void *iter);$/;"	p	signature:(void *iter)
hashtable_key_to_iter	compat/jansson-2.6/src/hashtable.h	40;"	d
hashtable_list	compat/jansson-2.6/src/hashtable.h	/^struct hashtable_list {$/;"	s
hashtable_list::next	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list *next;$/;"	m	struct:hashtable_list	typeref:struct:hashtable_list::hashtable_list	access:public
hashtable_list::prev	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list *prev;$/;"	m	struct:hashtable_list	typeref:struct:hashtable_list::hashtable_list	access:public
hashtable_pair	compat/jansson-2.6/src/hashtable.h	/^struct hashtable_pair {$/;"	s
hashtable_pair::hash	compat/jansson-2.6/src/hashtable.h	/^    size_t hash;$/;"	m	struct:hashtable_pair	access:public
hashtable_pair::key	compat/jansson-2.6/src/hashtable.h	/^    char key[1];$/;"	m	struct:hashtable_pair	access:public
hashtable_pair::list	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list list;$/;"	m	struct:hashtable_pair	typeref:struct:hashtable_pair::hashtable_list	access:public
hashtable_pair::serial	compat/jansson-2.6/src/hashtable.h	/^    size_t serial;$/;"	m	struct:hashtable_pair	access:public
hashtable_pair::value	compat/jansson-2.6/src/hashtable.h	/^    json_t *value;$/;"	m	struct:hashtable_pair	access:public
hashtable_set	compat/jansson-2.6/src/hashtable.c	/^int hashtable_set(hashtable_t *hashtable,$/;"	f	signature:(hashtable_t *hashtable, const char *key, size_t serial, json_t *value)
hashtable_set	compat/jansson-2.6/src/hashtable.h	/^int hashtable_set(hashtable_t *hashtable,$/;"	p	signature:(hashtable_t *hashtable, const char *key, size_t serial, json_t *value)
hashtable_t	compat/jansson-2.6/src/hashtable.h	/^} hashtable_t;$/;"	t	typeref:struct:hashtable
hashv	uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle	access:public
have_longpoll	cgminer.c	/^bool have_longpoll;$/;"	v
hchip_list	driver-minion.c	/^	K_STORE *hchip_list[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
hd	driver-klondike.c	/^		HEADER hd;$/;"	m	union:kline::__anon12	file:	access:public
hdata	hf_protocol.h	/^	uint16_t hdata;                         \/\/ Header specific data$/;"	m	struct:hf_header	access:public
hdata	hf_protocol_be.h	/^	uint16_t hdata;                         \/\/ Header specific data$/;"	m	struct:hf_header	access:public
hdr_path	miner.h	/^	char *hdr_path;$/;"	m	struct:pool	access:public
head	A1-common.h	/^	struct list_head head;$/;"	m	struct:work_ent	typeref:struct:work_ent::list_head	access:public
head	A1-common.h	/^	struct list_head head;$/;"	m	struct:work_queue	typeref:struct:work_queue::list_head	access:public
head	driver-avalon2.h	/^	uint8_t head[2];$/;"	m	struct:avalon2_pkg	access:public
head	driver-hashratio.h	/^	uint8_t head[2];$/;"	m	struct:hashratio_pkg	access:public
head	klist.h	/^	struct k_item *head;$/;"	m	struct:k_list	typeref:struct:k_list::k_item	access:public
head_join	api.c	/^static void head_join(struct io_data *io_data, char *cmdptr, bool isjson, bool *firstjoin)$/;"	f	file:	signature:(struct io_data *io_data, char *cmdptr, bool isjson, bool *firstjoin)
header	driver-bflsc.h	/^	uint8_t header;$/;"	m	struct:DataForwardToChain	access:public
header_bin	miner.h	/^	unsigned char header_bin[128];$/;"	m	struct:pool	access:public
header_info	util.c	/^struct header_info {$/;"	s	file:
header_info::canroll	util.c	/^	bool		canroll;$/;"	m	struct:header_info	file:	access:public
header_info::hadexpire	util.c	/^	bool		hadexpire;$/;"	m	struct:header_info	file:	access:public
header_info::hadrolltime	util.c	/^	bool		hadrolltime;$/;"	m	struct:header_info	file:	access:public
header_info::lp_path	util.c	/^	char		*lp_path;$/;"	m	struct:header_info	file:	access:public
header_info::reason	util.c	/^	char		*reason;$/;"	m	struct:header_info	file:	access:public
header_info::rolltime	util.c	/^	int		rolltime;$/;"	m	struct:header_info	file:	access:public
header_info::stratum_url	util.c	/^	char		*stratum_url;$/;"	m	struct:header_info	file:	access:public
height	miner.h	/^	int height;$/;"	m	struct:pool	access:public
here	miner.php	/^$here = $_SERVER['PHP_SELF'];$/;"	v
hex	driver-icarus.c	/^	uint16_t hex;$/;"	m	struct:__anon11	file:	access:public
hex2bin	miner.h	/^extern bool hex2bin(unsigned char *p, const char *hexstr, size_t len);$/;"	p	signature:(unsigned char *p, const char *hexstr, size_t len)
hex2bin	util.c	/^bool hex2bin(unsigned char *p, const char *hexstr, size_t len)$/;"	f	signature:(unsigned char *p, const char *hexstr, size_t len)
hex2bin_tbl	util.c	/^static const int hex2bin_tbl[256] = {$/;"	v	file:
hex_print	hexdump.c	22;"	d	file:
hexdump	driver-SPI-bitmine-A1.c	/^static void hexdump(char *prefix, uint8_t *buff, int len)$/;"	f	file:	signature:(char *prefix, uint8_t *buff, int len)
hexdump	hexdump.c	/^static void hexdump(const uint8_t *p, unsigned int len)$/;"	f	file:	signature:(const uint8_t *p, unsigned int len)
hexdump_error	driver-SPI-bitmine-A1.c	/^static void hexdump_error(char *prefix, uint8_t *buff, int len)$/;"	f	file:	signature:(char *prefix, uint8_t *buff, int len)
hf_candidate_nonce	hf_protocol.h	/^struct hf_candidate_nonce {$/;"	s
hf_candidate_nonce	hf_protocol_be.h	/^struct hf_candidate_nonce {$/;"	s
hf_candidate_nonce::nonce	hf_protocol.h	/^	uint32_t nonce;                         \/\/ Candidate nonce$/;"	m	struct:hf_candidate_nonce	access:public
hf_candidate_nonce::nonce	hf_protocol_be.h	/^	uint32_t nonce;                         \/\/ Candidate nonce$/;"	m	struct:hf_candidate_nonce	access:public
hf_candidate_nonce::ntime	hf_protocol.h	/^	uint16_t ntime;                         \/\/ ntime offset, if ntime roll occurred, in LS 12 bits$/;"	m	struct:hf_candidate_nonce	access:public
hf_candidate_nonce::ntime	hf_protocol_be.h	/^	uint16_t ntime;                         \/\/ ntime offset, if ntime roll occurred, in LS 12 bits$/;"	m	struct:hf_candidate_nonce	access:public
hf_candidate_nonce::sequence	hf_protocol.h	/^	uint16_t sequence;                      \/\/ Sequence number from corresponding OP_HASH$/;"	m	struct:hf_candidate_nonce	access:public
hf_candidate_nonce::sequence	hf_protocol_be.h	/^	uint16_t sequence;                      \/\/ Sequence number from corresponding OP_HASH$/;"	m	struct:hf_candidate_nonce	access:public
hf_config_data	hf_protocol.h	/^struct hf_config_data {$/;"	s
hf_config_data	hf_protocol_be.h	/^struct hf_config_data {$/;"	s
hf_config_data::clock_diagnostic	hf_protocol.h	/^	uint32_t clock_diagnostic:1;                \/\/ Never set this$/;"	m	struct:hf_config_data	access:public
hf_config_data::clock_diagnostic	hf_protocol_be.h	/^	uint32_t clock_diagnostic:1;                \/\/ Never set this$/;"	m	struct:hf_config_data	access:public
hf_config_data::disable_sensors	hf_protocol.h	/^	uint8_t  disable_sensors:1;                 \/\/ Diagnostic$/;"	m	struct:hf_config_data	access:public
hf_config_data::disable_sensors	hf_protocol_be.h	/^	uint8_t  disable_sensors:1;                 \/\/ Diagnostic$/;"	m	struct:hf_config_data	access:public
hf_config_data::enable_periodic_status	hf_protocol.h	/^	uint16_t enable_periodic_status:1;          \/\/ Send periodic status$/;"	m	struct:hf_config_data	access:public
hf_config_data::enable_periodic_status	hf_protocol_be.h	/^	uint16_t enable_periodic_status:1;          \/\/ Send periodic status$/;"	m	struct:hf_config_data	access:public
hf_config_data::forward_all_packets	hf_protocol.h	/^	uint32_t forward_all_packets:1;             \/\/ Forward everything - diagnostic.$/;"	m	struct:hf_config_data	access:public
hf_config_data::forward_all_packets	hf_protocol_be.h	/^	uint32_t forward_all_packets:1;             \/\/ Forward everything - diagnostic.$/;"	m	struct:hf_config_data	access:public
hf_config_data::forward_all_privileged_packets	hf_protocol.h	/^	uint16_t forward_all_privileged_packets:1;  \/\/ Forward priv pkts -- diagnostic$/;"	m	struct:hf_config_data	access:public
hf_config_data::forward_all_privileged_packets	hf_protocol_be.h	/^	uint16_t forward_all_privileged_packets:1;  \/\/ Forward priv pkts -- diagnostic$/;"	m	struct:hf_config_data	access:public
hf_config_data::max_nonces_per_frame	hf_protocol.h	/^	uint32_t max_nonces_per_frame:4;            \/\/ Maximum # of nonces to combine in a single frame$/;"	m	struct:hf_config_data	access:public
hf_config_data::max_nonces_per_frame	hf_protocol_be.h	/^	uint32_t max_nonces_per_frame:4;            \/\/ Maximum # of nonces to combine in a single frame$/;"	m	struct:hf_config_data	access:public
hf_config_data::measure_interval	hf_protocol.h	/^	uint8_t  measure_interval;                  \/\/ Die temperature measurement interval (msec)$/;"	m	struct:hf_config_data	access:public
hf_config_data::measure_interval	hf_protocol_be.h	/^	uint8_t  measure_interval;                  \/\/ Die temperature measurement interval (msec)$/;"	m	struct:hf_config_data	access:public
hf_config_data::one_usec	hf_protocol.h	/^	uint32_t one_usec:12;                       \/\/ How many LF clocks per usec.$/;"	m	struct:hf_config_data	access:public
hf_config_data::one_usec	hf_protocol_be.h	/^	uint32_t one_usec:12;                       \/\/ How many LF clocks per usec.$/;"	m	struct:hf_config_data	access:public
hf_config_data::pwm_active_level	hf_protocol.h	/^	uint16_t pwm_active_level:1;                \/\/ Active level of PWM outputs, if used$/;"	m	struct:hf_config_data	access:public
hf_config_data::pwm_active_level	hf_protocol_be.h	/^	uint16_t pwm_active_level:1;                \/\/ Active level of PWM outputs, if used$/;"	m	struct:hf_config_data	access:public
hf_config_data::pwm_period	hf_protocol.h	/^	uint16_t pwm_period;                        \/\/ Period of PWM outputs, in reference clock cycles$/;"	m	struct:hf_config_data	access:public
hf_config_data::pwm_period	hf_protocol_be.h	/^	uint16_t pwm_period;                        \/\/ Period of PWM outputs, in reference clock cycles$/;"	m	struct:hf_config_data	access:public
hf_config_data::pwm_phases	hf_protocol.h	/^	uint32_t pwm_phases:2;                      \/\/ phases - 1$/;"	m	struct:hf_config_data	access:public
hf_config_data::pwm_phases	hf_protocol_be.h	/^	uint32_t pwm_phases:2;                      \/\/ phases - 1$/;"	m	struct:hf_config_data	access:public
hf_config_data::pwm_pulse_period	hf_protocol.h	/^	uint16_t pwm_pulse_period;                  \/\/ Initial count, phase 0$/;"	m	struct:hf_config_data	access:public
hf_config_data::pwm_pulse_period	hf_protocol_be.h	/^	uint16_t pwm_pulse_period;                  \/\/ Initial count, phase 0$/;"	m	struct:hf_config_data	access:public
hf_config_data::rx_data_timeout	hf_protocol.h	/^	uint8_t  rx_data_timeout:7;                 \/\/ Data timeout in char times \/ 16$/;"	m	struct:hf_config_data	access:public
hf_config_data::rx_data_timeout	hf_protocol_be.h	/^	uint8_t  rx_data_timeout:7;                 \/\/ Data timeout in char times \/ 16$/;"	m	struct:hf_config_data	access:public
hf_config_data::rx_header_timeout	hf_protocol.h	/^	uint8_t  rx_header_timeout:7;               \/\/ Header timeout in char times$/;"	m	struct:hf_config_data	access:public
hf_config_data::rx_header_timeout	hf_protocol_be.h	/^	uint8_t  rx_header_timeout:7;               \/\/ Header timeout in char times$/;"	m	struct:hf_config_data	access:public
hf_config_data::rx_ignore_data_crc	hf_protocol.h	/^	uint8_t  rx_ignore_data_crc:1;              \/\/ Ignore rx data crc's (diagnostic)$/;"	m	struct:hf_config_data	access:public
hf_config_data::rx_ignore_data_crc	hf_protocol_be.h	/^	uint8_t  rx_ignore_data_crc:1;              \/\/ Ignore rx data crc's (diagnostic)$/;"	m	struct:hf_config_data	access:public
hf_config_data::rx_ignore_header_crc	hf_protocol.h	/^	uint8_t  rx_ignore_header_crc:1;            \/\/ Ignore rx header crc's (diagnostic)$/;"	m	struct:hf_config_data	access:public
hf_config_data::rx_ignore_header_crc	hf_protocol_be.h	/^	uint8_t  rx_ignore_header_crc:1;            \/\/ Ignore rx header crc's (diagnostic)$/;"	m	struct:hf_config_data	access:public
hf_config_data::send_status_on_core_idle	hf_protocol.h	/^	uint16_t send_status_on_core_idle:1;        \/\/ Schedule status whenever core goes idle$/;"	m	struct:hf_config_data	access:public
hf_config_data::send_status_on_core_idle	hf_protocol_be.h	/^	uint16_t send_status_on_core_idle:1;        \/\/ Schedule status whenever core goes idle$/;"	m	struct:hf_config_data	access:public
hf_config_data::send_status_on_pending_empty	hf_protocol.h	/^	uint16_t send_status_on_pending_empty:1;    \/\/ Schedule status whenever core pending goes idle$/;"	m	struct:hf_config_data	access:public
hf_config_data::send_status_on_pending_empty	hf_protocol_be.h	/^	uint16_t send_status_on_pending_empty:1;    \/\/ Schedule status whenever core pending goes idle$/;"	m	struct:hf_config_data	access:public
hf_config_data::stat_diagnostic	hf_protocol.h	/^	uint8_t  stat_diagnostic:1;                 \/\/ Never set this$/;"	m	struct:hf_config_data	access:public
hf_config_data::stat_diagnostic	hf_protocol_be.h	/^	uint8_t  stat_diagnostic:1;                 \/\/ Never set this$/;"	m	struct:hf_config_data	access:public
hf_config_data::stats_interval	hf_protocol.h	/^	uint8_t  stats_interval:7;                  \/\/ Minimum interval to report statistics (seconds)$/;"	m	struct:hf_config_data	access:public
hf_config_data::stats_interval	hf_protocol_be.h	/^	uint8_t  stats_interval:7;                  \/\/ Minimum interval to report statistics (seconds)$/;"	m	struct:hf_config_data	access:public
hf_config_data::status_batch_delay	hf_protocol.h	/^	uint8_t  status_batch_delay;                \/\/ Batching delay, time to wait before sending status$/;"	m	struct:hf_config_data	access:public
hf_config_data::status_batch_delay	hf_protocol_be.h	/^	uint8_t  status_batch_delay;                \/\/ Batching delay, time to wait before sending status$/;"	m	struct:hf_config_data	access:public
hf_config_data::status_period	hf_protocol.h	/^	uint16_t status_period:11;                  \/\/ Periodic status time, msec$/;"	m	struct:hf_config_data	access:public
hf_config_data::status_period	hf_protocol_be.h	/^	uint16_t status_period:11;                  \/\/ Periodic status time, msec$/;"	m	struct:hf_config_data	access:public
hf_config_data::trim	hf_protocol.h	/^	uint32_t trim:4;                            \/\/ Trim value for temperature measurements$/;"	m	struct:hf_config_data	access:public
hf_config_data::trim	hf_protocol_be.h	/^	uint32_t trim:4;                            \/\/ Trim value for temperature measurements$/;"	m	struct:hf_config_data	access:public
hf_config_data::voltage_sample_points	hf_protocol.h	/^	uint32_t voltage_sample_points:8;           \/\/ Bit mask for sample points (up to 5 bits set)$/;"	m	struct:hf_config_data	access:public
hf_config_data::voltage_sample_points	hf_protocol_be.h	/^	uint32_t voltage_sample_points:8;           \/\/ Bit mask for sample points (up to 5 bits set)$/;"	m	struct:hf_config_data	access:public
hf_config_data::watchdog	hf_protocol.h	/^	uint8_t  watchdog:7;                        \/\/ Watchdog timeout, seconds$/;"	m	struct:hf_config_data	access:public
hf_config_data::watchdog	hf_protocol_be.h	/^	uint8_t  watchdog:7;                        \/\/ Watchdog timeout, seconds$/;"	m	struct:hf_config_data	access:public
hf_die_data	driver-hashfast.h	/^struct hf_die_data {$/;"	s
hf_die_data::board_temp	driver-hashfast.h	/^	double board_temp;$/;"	m	struct:hf_die_data	access:public
hf_die_data::hash_clock	driver-hashfast.h	/^	int hash_clock;$/;"	m	struct:hf_die_data	access:public
hf_die_data::last_restart	driver-hashfast.h	/^	time_t last_restart;$/;"	m	struct:hf_die_data	access:public
hf_die_data::temp	driver-hashfast.h	/^	double temp;$/;"	m	struct:hf_die_data	access:public
hf_g1_die_data	hf_protocol.h	/^struct hf_g1_die_data {$/;"	s
hf_g1_die_data	hf_protocol_be.h	/^struct hf_g1_die_data {$/;"	s
hf_g1_die_data::die	hf_protocol.h	/^	struct hf_g1_monitor die;                   \/\/ Die sensors - 8 bytes$/;"	m	struct:hf_g1_die_data	typeref:struct:hf_g1_die_data::hf_g1_monitor	access:public
hf_g1_die_data::die	hf_protocol_be.h	/^	struct hf_g1_monitor die;                   \/\/ Die sensors - 8 bytes$/;"	m	struct:hf_g1_die_data	typeref:struct:hf_g1_die_data::hf_g1_monitor	access:public
hf_g1_die_data::phase_currents	hf_protocol.h	/^	uint16_t phase_currents[4];                 \/\/ Phase currents (0 if unavailable)$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_die_data::phase_currents	hf_protocol_be.h	/^	uint16_t phase_currents[4];                 \/\/ Phase currents (0 if unavailable)$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_die_data::spare	hf_protocol.h	/^	uint16_t spare;$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_die_data::spare	hf_protocol_be.h	/^	uint16_t spare;$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_die_data::tacho	hf_protocol.h	/^	uint16_t tacho;                             \/\/ See documentation$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_die_data::tacho	hf_protocol_be.h	/^	uint16_t tacho;                             \/\/ See documentation$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_die_data::temperature	hf_protocol.h	/^	uint16_t temperature;                       \/\/ Regulator temp sensor$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_die_data::temperature	hf_protocol_be.h	/^	uint16_t temperature;                       \/\/ Regulator temp sensor$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_die_data::voltage	hf_protocol.h	/^	uint16_t voltage;                           \/\/ Voltage at device boundary (0 if unavailable)$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_die_data::voltage	hf_protocol_be.h	/^	uint16_t voltage;                           \/\/ Voltage at device boundary (0 if unavailable)$/;"	m	struct:hf_g1_die_data	access:public
hf_g1_monitor	hf_protocol.h	/^struct hf_g1_monitor { $/;"	s
hf_g1_monitor	hf_protocol_be.h	/^struct hf_g1_monitor { $/;"	s
hf_g1_monitor::core_voltage	hf_protocol.h	/^	uint8_t  core_voltage[6];                   \/\/ Core voltage$/;"	m	struct:hf_g1_monitor	access:public
hf_g1_monitor::core_voltage	hf_protocol_be.h	/^	uint8_t  core_voltage[6];                   \/\/ Core voltage$/;"	m	struct:hf_g1_monitor	access:public
hf_g1_monitor::die_temperature	hf_protocol.h	/^	uint16_t die_temperature;                   \/\/ Die temperature ADC count$/;"	m	struct:hf_g1_monitor	access:public
hf_g1_monitor::die_temperature	hf_protocol_be.h	/^	uint16_t die_temperature;                   \/\/ Die temperature ADC count$/;"	m	struct:hf_g1_monitor	access:public
hf_group_data	hf_protocol.h	/^struct hf_group_data {$/;"	s
hf_group_data	hf_protocol_be.h	/^struct hf_group_data {$/;"	s
hf_group_data::nonce_msoffset	hf_protocol.h	/^	uint16_t nonce_msoffset;                    \/\/ This value << 16 added to starting nonce$/;"	m	struct:hf_group_data	access:public
hf_group_data::nonce_msoffset	hf_protocol_be.h	/^	uint16_t nonce_msoffset;                    \/\/ This value << 16 added to starting nonce$/;"	m	struct:hf_group_data	access:public
hf_group_data::ntime_offset	hf_protocol.h	/^	uint16_t ntime_offset;                      \/\/ This value added to timestamp$/;"	m	struct:hf_group_data	access:public
hf_group_data::ntime_offset	hf_protocol_be.h	/^	uint16_t ntime_offset;                      \/\/ This value added to timestamp$/;"	m	struct:hf_group_data	access:public
hf_gwq_data	hf_protocol.h	/^struct hf_gwq_data {$/;"	s
hf_gwq_data	hf_protocol_be.h	/^struct hf_gwq_data {$/;"	s
hf_gwq_data::hash_count	hf_protocol.h	/^	uint64_t hash_count;                        \/\/ Add this to host's cumulative hash count$/;"	m	struct:hf_gwq_data	access:public
hf_gwq_data::hash_count	hf_protocol_be.h	/^	uint64_t hash_count;                        \/\/ Add this to host's cumulative hash count$/;"	m	struct:hf_gwq_data	access:public
hf_gwq_data::sequence_head	hf_protocol.h	/^	uint16_t sequence_head;                     \/\/ The latest, internal, active sequence #$/;"	m	struct:hf_gwq_data	access:public
hf_gwq_data::sequence_head	hf_protocol_be.h	/^	uint16_t sequence_head;                     \/\/ The latest, internal, active sequence #$/;"	m	struct:hf_gwq_data	access:public
hf_gwq_data::sequence_tail	hf_protocol.h	/^	uint16_t sequence_tail;                     \/\/ The latest, internal, inactive sequence #$/;"	m	struct:hf_gwq_data	access:public
hf_gwq_data::sequence_tail	hf_protocol_be.h	/^	uint16_t sequence_tail;                     \/\/ The latest, internal, inactive sequence #$/;"	m	struct:hf_gwq_data	access:public
hf_gwq_data::shed_count	hf_protocol.h	/^	uint16_t shed_count;                        \/\/ # of cores have been shedded for thermal control$/;"	m	struct:hf_gwq_data	access:public
hf_gwq_data::shed_count	hf_protocol_be.h	/^	uint16_t shed_count;                        \/\/ # of cores have been shedded for thermal control$/;"	m	struct:hf_gwq_data	access:public
hf_gwq_data::spare	hf_protocol.h	/^	uint16_t spare;$/;"	m	struct:hf_gwq_data	access:public
hf_gwq_data::spare	hf_protocol_be.h	/^	uint16_t spare;$/;"	m	struct:hf_gwq_data	access:public
hf_hash_serial	hf_protocol.h	/^struct hf_hash_serial {$/;"	s
hf_hash_serial	hf_protocol_be.h	/^struct hf_hash_serial {$/;"	s
hf_hash_serial::bits	hf_protocol.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::bits	hf_protocol_be.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::group	hf_protocol.h	/^	uint8_t  group;$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::group	hf_protocol_be.h	/^	uint8_t  group;$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::merkle_residual	hf_protocol.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::merkle_residual	hf_protocol_be.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::midstate	hf_protocol.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::midstate	hf_protocol_be.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::nonce_loops	hf_protocol.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::nonce_loops	hf_protocol_be.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::ntime_loops	hf_protocol.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::ntime_loops	hf_protocol_be.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::option	hf_protocol.h	/^	uint8_t  option;$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::option	hf_protocol_be.h	/^	uint8_t  option;$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::search_difficulty	hf_protocol.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::search_difficulty	hf_protocol_be.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::spare3	hf_protocol.h	/^	uint8_t  spare3[3];$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::spare3	hf_protocol_be.h	/^	uint8_t  spare3[3];$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::starting_nonce	hf_protocol.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::starting_nonce	hf_protocol_be.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::timestamp	hf_protocol.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_serial	access:public
hf_hash_serial::timestamp	hf_protocol_be.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_serial	access:public
hf_hash_usb	hf_protocol.h	/^struct hf_hash_usb {$/;"	s
hf_hash_usb	hf_protocol_be.h	/^struct hf_hash_usb {$/;"	s
hf_hash_usb::bits	hf_protocol.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::bits	hf_protocol_be.h	/^	uint32_t bits;                          \/\/ Actual difficulty target for block header$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::group	hf_protocol.h	/^	uint8_t  group;                         \/\/ Non-zero for valid group$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::group	hf_protocol_be.h	/^	uint8_t  group;                         \/\/ Non-zero for valid group$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::merkle_residual	hf_protocol.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::merkle_residual	hf_protocol_be.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::midstate	hf_protocol.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::midstate	hf_protocol_be.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::nonce_loops	hf_protocol.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::nonce_loops	hf_protocol_be.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::ntime_loops	hf_protocol.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::ntime_loops	hf_protocol_be.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::search_difficulty	hf_protocol.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::search_difficulty	hf_protocol_be.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::starting_nonce	hf_protocol.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::starting_nonce	hf_protocol_be.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::timestamp	hf_protocol.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_usb	access:public
hf_hash_usb::timestamp	hf_protocol_be.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_usb	access:public
hf_header	hf_protocol.h	/^struct hf_header {$/;"	s
hf_header	hf_protocol_be.h	/^struct hf_header {$/;"	s
hf_header::chip_address	hf_protocol.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_header	access:public
hf_header::chip_address	hf_protocol_be.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_header	access:public
hf_header::core_address	hf_protocol.h	/^	uint8_t  core_address;$/;"	m	struct:hf_header	access:public
hf_header::core_address	hf_protocol_be.h	/^	uint8_t  core_address;$/;"	m	struct:hf_header	access:public
hf_header::crc8	hf_protocol.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_header	access:public
hf_header::crc8	hf_protocol_be.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_header	access:public
hf_header::data_length	hf_protocol.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks, 0=no data$/;"	m	struct:hf_header	access:public
hf_header::data_length	hf_protocol_be.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks, 0=no data$/;"	m	struct:hf_header	access:public
hf_header::hdata	hf_protocol.h	/^	uint16_t hdata;                         \/\/ Header specific data$/;"	m	struct:hf_header	access:public
hf_header::hdata	hf_protocol_be.h	/^	uint16_t hdata;                         \/\/ Header specific data$/;"	m	struct:hf_header	access:public
hf_header::operation_code	hf_protocol.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_header	access:public
hf_header::operation_code	hf_protocol_be.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_header	access:public
hf_header::preamble	hf_protocol.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_header	access:public
hf_header::preamble	hf_protocol_be.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_header	access:public
hf_long_statistics	driver-hashfast.h	/^struct hf_long_statistics {$/;"	s
hf_long_statistics::array_nonce_fifo_full	driver-hashfast.h	/^	uint64_t array_nonce_fifo_full;             \/\/ System nonce Q overrun events$/;"	m	struct:hf_long_statistics	access:public
hf_long_statistics::core_nonce_fifo_full	driver-hashfast.h	/^	uint64_t core_nonce_fifo_full;              \/\/ Core nonce Q overrun events$/;"	m	struct:hf_long_statistics	access:public
hf_long_statistics::rx_body_crc	driver-hashfast.h	/^	uint64_t rx_body_crc;                       \/\/ Data CRCs$/;"	m	struct:hf_long_statistics	access:public
hf_long_statistics::rx_body_timeouts	driver-hashfast.h	/^	uint64_t rx_body_timeouts;                  \/\/ Data timeouts$/;"	m	struct:hf_long_statistics	access:public
hf_long_statistics::rx_header_crc	driver-hashfast.h	/^	uint64_t rx_header_crc;                     \/\/ Header CRCs$/;"	m	struct:hf_long_statistics	access:public
hf_long_statistics::rx_header_timeouts	driver-hashfast.h	/^	uint64_t rx_header_timeouts;                \/\/ Header timeouts$/;"	m	struct:hf_long_statistics	access:public
hf_long_statistics::stats_overrun	driver-hashfast.h	/^	uint64_t stats_overrun;                     \/\/ Overrun in statistics reporting$/;"	m	struct:hf_long_statistics	access:public
hf_long_usb_stats1	driver-hashfast.h	/^struct hf_long_usb_stats1 {$/;"	s
hf_long_usb_stats1::max_rx_buffers	driver-hashfast.h	/^	uint8_t  max_rx_buffers;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::max_tx_buffers	driver-hashfast.h	/^	uint8_t  max_tx_buffers;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_rx_bad_hcrc	driver-hashfast.h	/^	uint64_t usb_rx_bad_hcrc;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_rx_preambles	driver-hashfast.h	/^	uint64_t usb_rx_preambles;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_rx_receive_byte_errors	driver-hashfast.h	/^	uint64_t usb_rx_receive_byte_errors;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_tx_attempts	driver-hashfast.h	/^	uint64_t usb_tx_attempts;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_tx_disconnected	driver-hashfast.h	/^	uint64_t usb_tx_disconnected;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_tx_endpointstalled	driver-hashfast.h	/^	uint64_t usb_tx_endpointstalled;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_tx_incompletes	driver-hashfast.h	/^	uint64_t usb_tx_incompletes;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_tx_packets	driver-hashfast.h	/^	uint64_t usb_tx_packets;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_tx_suspended	driver-hashfast.h	/^	uint64_t usb_tx_suspended;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_long_usb_stats1::usb_tx_timeouts	driver-hashfast.h	/^	uint64_t usb_tx_timeouts;$/;"	m	struct:hf_long_usb_stats1	access:public
hf_pll_config	hf_protocol.h	/^struct hf_pll_config {$/;"	s
hf_pll_config	hf_protocol_be.h	/^struct hf_pll_config {$/;"	s
hf_pll_config::chip_address	hf_protocol.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::chip_address	hf_protocol_be.h	/^	uint8_t  chip_address;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::crc8	hf_protocol.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::crc8	hf_protocol_be.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::data_length	hf_protocol.h	/^	uint8_t  data_length;                   \/\/ Always 0$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::data_length	hf_protocol_be.h	/^	uint8_t  data_length;                   \/\/ Always 0$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::operation_code	hf_protocol.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::operation_code	hf_protocol_be.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_bypass	hf_protocol.h	/^	uint8_t  pll_bypass:1;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_bypass	hf_protocol_be.h	/^	uint8_t  pll_bypass:1;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_divf	hf_protocol.h	/^	uint8_t  pll_divf;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_divf	hf_protocol_be.h	/^	uint8_t  pll_divf;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_divq	hf_protocol.h	/^	uint8_t  pll_divq:3;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_divq	hf_protocol_be.h	/^	uint8_t  pll_divq:3;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_divr	hf_protocol.h	/^	uint8_t  pll_divr:6;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_divr	hf_protocol_be.h	/^	uint8_t  pll_divr:6;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_fse	hf_protocol.h	/^	uint8_t  pll_fse:1;                     \/\/ Must always be 1$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_fse	hf_protocol_be.h	/^	uint8_t  pll_fse:1;                     \/\/ Must always be 1$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_range	hf_protocol.h	/^	uint8_t  pll_range:3;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_range	hf_protocol_be.h	/^	uint8_t  pll_range:3;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_reset	hf_protocol.h	/^	uint8_t  pll_reset:1;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::pll_reset	hf_protocol_be.h	/^	uint8_t  pll_reset:1;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::preamble	hf_protocol.h	/^	uint8_t  preamble;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::preamble	hf_protocol_be.h	/^	uint8_t  preamble;$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::spare1	hf_protocol.h	/^	uint8_t  spare1:1;                      \/\/ Must always be 0$/;"	m	struct:hf_pll_config	access:public
hf_pll_config::spare1	hf_protocol_be.h	/^	uint8_t  spare1:1;                      \/\/ Must always be 0$/;"	m	struct:hf_pll_config	access:public
hf_settings_data	driver-hashfast.c	/^struct hf_settings_data {$/;"	s	file:
hf_settings_data::frequency0	driver-hashfast.c	/^	uint16_t frequency0;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::frequency1	driver-hashfast.c	/^	uint16_t frequency1;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::frequency2	driver-hashfast.c	/^	uint16_t frequency2;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::frequency3	driver-hashfast.c	/^	uint16_t frequency3;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::magic	driver-hashfast.c	/^	uint16_t magic;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::ref_frequency	driver-hashfast.c	/^	uint8_t ref_frequency;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::revision	driver-hashfast.c	/^	uint8_t revision;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::voltage0	driver-hashfast.c	/^	uint16_t voltage0;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::voltage1	driver-hashfast.c	/^	uint16_t voltage1;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::voltage2	driver-hashfast.c	/^	uint16_t voltage2;$/;"	m	struct:hf_settings_data	file:	access:public
hf_settings_data::voltage3	driver-hashfast.c	/^	uint16_t voltage3;$/;"	m	struct:hf_settings_data	file:	access:public
hf_statistics	hf_protocol.h	/^struct hf_statistics {$/;"	s
hf_statistics	hf_protocol_be.h	/^struct hf_statistics {$/;"	s
hf_statistics::array_nonce_fifo_full	hf_protocol.h	/^	uint8_t array_nonce_fifo_full;              \/\/ System nonce Q overrun events$/;"	m	struct:hf_statistics	access:public
hf_statistics::array_nonce_fifo_full	hf_protocol_be.h	/^	uint8_t array_nonce_fifo_full;              \/\/ System nonce Q overrun events$/;"	m	struct:hf_statistics	access:public
hf_statistics::core_nonce_fifo_full	hf_protocol.h	/^	uint8_t core_nonce_fifo_full;               \/\/ Core nonce Q overrun events$/;"	m	struct:hf_statistics	access:public
hf_statistics::core_nonce_fifo_full	hf_protocol_be.h	/^	uint8_t core_nonce_fifo_full;               \/\/ Core nonce Q overrun events$/;"	m	struct:hf_statistics	access:public
hf_statistics::rx_body_crc	hf_protocol.h	/^	uint8_t rx_body_crc;                        \/\/ Data CRC error's$/;"	m	struct:hf_statistics	access:public
hf_statistics::rx_body_crc	hf_protocol_be.h	/^	uint8_t rx_body_crc;                        \/\/ Data CRC error's$/;"	m	struct:hf_statistics	access:public
hf_statistics::rx_body_timeouts	hf_protocol.h	/^	uint8_t rx_body_timeouts;                   \/\/ Data timeouts$/;"	m	struct:hf_statistics	access:public
hf_statistics::rx_body_timeouts	hf_protocol_be.h	/^	uint8_t rx_body_timeouts;                   \/\/ Data timeouts$/;"	m	struct:hf_statistics	access:public
hf_statistics::rx_header_crc	hf_protocol.h	/^	uint8_t rx_header_crc;                      \/\/ Header CRC error's$/;"	m	struct:hf_statistics	access:public
hf_statistics::rx_header_crc	hf_protocol_be.h	/^	uint8_t rx_header_crc;                      \/\/ Header CRC error's$/;"	m	struct:hf_statistics	access:public
hf_statistics::rx_header_timeouts	hf_protocol.h	/^	uint8_t rx_header_timeouts;                 \/\/ Header timeouts$/;"	m	struct:hf_statistics	access:public
hf_statistics::rx_header_timeouts	hf_protocol_be.h	/^	uint8_t rx_header_timeouts;                 \/\/ Header timeouts$/;"	m	struct:hf_statistics	access:public
hf_statistics::spare	hf_protocol.h	/^	uint8_t spare;$/;"	m	struct:hf_statistics	access:public
hf_statistics::spare	hf_protocol_be.h	/^	uint8_t spare;$/;"	m	struct:hf_statistics	access:public
hf_statistics::stats_overrun	hf_protocol.h	/^	uint8_t stats_overrun;                      \/\/ Overrun in statistics reporting$/;"	m	struct:hf_statistics	access:public
hf_statistics::stats_overrun	hf_protocol_be.h	/^	uint8_t stats_overrun;                      \/\/ Overrun in statistics reporting$/;"	m	struct:hf_statistics	access:public
hf_usb_init_base	hf_protocol.h	/^struct hf_usb_init_base { $/;"	s
hf_usb_init_base	hf_protocol_be.h	/^struct hf_usb_init_base { $/;"	s
hf_usb_init_base::extra_status_1	hf_protocol.h	/^	uint8_t  extra_status_1;                    \/\/ Extra reply status information, code specific$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::extra_status_1	hf_protocol_be.h	/^	uint8_t  extra_status_1;                    \/\/ Extra reply status information, code specific$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::firmware_rev	hf_protocol.h	/^	uint16_t firmware_rev;                      \/\/ Firmware revision #$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::firmware_rev	hf_protocol_be.h	/^	uint16_t firmware_rev;                      \/\/ Firmware revision #$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::hardware_rev	hf_protocol.h	/^	uint16_t hardware_rev;                      \/\/ Hardware revision #$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::hardware_rev	hf_protocol_be.h	/^	uint16_t hardware_rev;                      \/\/ Hardware revision #$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::hash_clockrate	hf_protocol.h	/^	uint16_t hash_clockrate;                    \/\/ Actual hash clock rate used (nearest Mhz)$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::hash_clockrate	hf_protocol_be.h	/^	uint16_t hash_clockrate;                    \/\/ Actual hash clock rate used (nearest Mhz)$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::inflight_target	hf_protocol.h	/^	uint16_t inflight_target;                   \/\/ Target inflight amount for GWQ protocol$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::inflight_target	hf_protocol_be.h	/^	uint16_t inflight_target;                   \/\/ Target inflight amount for GWQ protocol$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::operation_status	hf_protocol.h	/^	uint8_t  operation_status;                  \/\/ Reply status for OP_USB_INIT (0 = success)$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::operation_status	hf_protocol_be.h	/^	uint8_t  operation_status;                  \/\/ Reply status for OP_USB_INIT (0 = success)$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::sequence_modulus	hf_protocol.h	/^	uint16_t sequence_modulus;                  \/\/ Sequence numbers are to be modulo this$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::sequence_modulus	hf_protocol_be.h	/^	uint16_t sequence_modulus;                  \/\/ Sequence numbers are to be modulo this$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::serial_number	hf_protocol.h	/^	uint32_t serial_number;                     \/\/ Board serial number$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_base::serial_number	hf_protocol_be.h	/^	uint32_t serial_number;                     \/\/ Board serial number$/;"	m	struct:hf_usb_init_base	access:public
hf_usb_init_errors	driver-hashfast.c	/^static const char *hf_usb_init_errors[] = {$/;"	v	file:
hf_usb_init_header	hf_protocol.h	/^struct hf_usb_init_header {$/;"	s
hf_usb_init_header	hf_protocol_be.h	/^struct hf_usb_init_header {$/;"	s
hf_usb_init_header::crc8	hf_protocol.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::crc8	hf_protocol_be.h	/^	uint8_t  crc8;                          \/\/ Computed across bytes 1-6 inclusive$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::data_length	hf_protocol.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::data_length	hf_protocol_be.h	/^	uint8_t  data_length;                   \/\/ .. of data frame to follow, in 4 byte blocks$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::do_atspeed_core_tests	hf_protocol.h	/^	uint8_t  do_atspeed_core_tests:1;       \/\/ Do core tests at speed, return second bitmap$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::do_atspeed_core_tests	hf_protocol_be.h	/^	uint8_t  do_atspeed_core_tests:1;       \/\/ Do core tests at speed, return second bitmap$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::hash_clock	hf_protocol.h	/^	uint16_t hash_clock;                    \/\/ Requested hash clock frequency$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::hash_clock	hf_protocol_be.h	/^	uint16_t hash_clock;                    \/\/ Requested hash clock frequency$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::no_asic_initialization	hf_protocol.h	/^	uint8_t  no_asic_initialization:1;      \/\/ Do not perform automatic ASIC initialization$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::no_asic_initialization	hf_protocol_be.h	/^	uint8_t  no_asic_initialization:1;      \/\/ Do not perform automatic ASIC initialization$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::operation_code	hf_protocol.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::operation_code	hf_protocol_be.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::pll_bypass	hf_protocol.h	/^	uint8_t  pll_bypass:1;                  \/\/ Force PLL bypass, hash clock = ref clock$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::pll_bypass	hf_protocol_be.h	/^	uint8_t  pll_bypass:1;                  \/\/ Force PLL bypass, hash clock = ref clock$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::preamble	hf_protocol.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::preamble	hf_protocol_be.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::protocol	hf_protocol.h	/^	uint8_t  protocol:3;                    \/\/ Which protocol to use$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::protocol	hf_protocol_be.h	/^	uint8_t  protocol:3;                    \/\/ Which protocol to use$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::shed_supported	hf_protocol.h	/^	uint8_t  shed_supported:1;              \/\/ Host supports gwq status shed_count$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::shed_supported	hf_protocol_be.h	/^	uint8_t  shed_supported:1;              \/\/ Host supports gwq status shed_count$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::spare1	hf_protocol.h	/^	uint8_t  spare1;$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::spare1	hf_protocol_be.h	/^	uint8_t  spare1;$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::user_configuration	hf_protocol.h	/^	uint8_t  user_configuration:1;          \/\/ Use the following configuration data$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_header::user_configuration	hf_protocol_be.h	/^	uint8_t  user_configuration:1;          \/\/ Use the following configuration data$/;"	m	struct:hf_usb_init_header	access:public
hf_usb_init_options	hf_protocol.h	/^struct hf_usb_init_options {$/;"	s
hf_usb_init_options	hf_protocol_be.h	/^struct hf_usb_init_options {$/;"	s
hf_usb_init_options::core_ntime_roll	hf_protocol.h	/^	uint16_t core_ntime_roll;                   \/\/ Total core ntime roll amount$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_init_options::core_ntime_roll	hf_protocol_be.h	/^	uint16_t core_ntime_roll;                   \/\/ Total core ntime roll amount$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_init_options::group_ntime_roll	hf_protocol.h	/^	uint16_t group_ntime_roll;                  \/\/ Total ntime roll amount per group$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_init_options::group_ntime_roll	hf_protocol_be.h	/^	uint16_t group_ntime_roll;                  \/\/ Total ntime roll amount per group$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_init_options::high_operating_temp_limit	hf_protocol.h	/^	uint8_t  high_operating_temp_limit;         \/\/ Highest normal operating limit$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_init_options::high_operating_temp_limit	hf_protocol_be.h	/^	uint8_t  high_operating_temp_limit;         \/\/ Highest normal operating limit$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_init_options::low_operating_temp_limit	hf_protocol.h	/^	uint8_t  low_operating_temp_limit;          \/\/ Lowest normal operating limit$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_init_options::low_operating_temp_limit	hf_protocol_be.h	/^	uint8_t  low_operating_temp_limit;          \/\/ Lowest normal operating limit$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_init_options::spare	hf_protocol.h	/^	uint16_t spare;$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_init_options::spare	hf_protocol_be.h	/^	uint16_t spare;$/;"	m	struct:hf_usb_init_options	access:public
hf_usb_notice_data	hf_protocol.h	/^struct hf_usb_notice_data {$/;"	s
hf_usb_notice_data	hf_protocol_be.h	/^struct hf_usb_notice_data {$/;"	s
hf_usb_notice_data::extra_data	hf_protocol.h	/^	uint32_t extra_data;                        \/\/ Depends on notification code$/;"	m	struct:hf_usb_notice_data	access:public
hf_usb_notice_data::extra_data	hf_protocol_be.h	/^	uint32_t extra_data;                        \/\/ Depends on notification code$/;"	m	struct:hf_usb_notice_data	access:public
hf_usb_notice_data::message	hf_protocol.h	/^	char     message[];                         \/\/ NULL terminated, little endian byte order$/;"	m	struct:hf_usb_notice_data	access:public
hf_usb_notice_data::message	hf_protocol_be.h	/^	char     message[];                         \/\/ NULL terminated, little endian byte order$/;"	m	struct:hf_usb_notice_data	access:public
hf_usb_stats1	hf_protocol.h	/^struct hf_usb_stats1 {$/;"	s
hf_usb_stats1	hf_protocol_be.h	/^struct hf_usb_stats1 {$/;"	s
hf_usb_stats1::max_rx_buffers	hf_protocol.h	/^	uint8_t  max_rx_buffers;                        \/\/ Maximum # of receive buffers ever used$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::max_rx_buffers	hf_protocol_be.h	/^	uint8_t  max_rx_buffers;                        \/\/ Maximum # of receive buffers ever used$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::max_tx_buffers	hf_protocol.h	/^	uint8_t  max_tx_buffers;                        \/\/ Maximum # of send buffers ever used$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::max_tx_buffers	hf_protocol_be.h	/^	uint8_t  max_tx_buffers;                        \/\/ Maximum # of send buffers ever used$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_bad_dma	hf_protocol.h	/^	uint16_t uart_rx_bad_dma;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_bad_dma	hf_protocol_be.h	/^	uint16_t uart_rx_bad_dma;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_bad_hcrc	hf_protocol.h	/^	uint16_t uart_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_bad_hcrc	hf_protocol_be.h	/^	uint16_t uart_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_buffers_full	hf_protocol.h	/^	uint16_t uart_rx_buffers_full;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_buffers_full	hf_protocol_be.h	/^	uint16_t uart_rx_buffers_full;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_data_done	hf_protocol.h	/^	uint16_t uart_rx_data_done;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_data_done	hf_protocol_be.h	/^	uint16_t uart_rx_data_done;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_header_done	hf_protocol.h	/^	uint16_t uart_rx_header_done;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_header_done	hf_protocol_be.h	/^	uint16_t uart_rx_header_done;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_missed_preamble_ints	hf_protocol.h	/^	uint16_t uart_rx_missed_preamble_ints;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_missed_preamble_ints	hf_protocol_be.h	/^	uint16_t uart_rx_missed_preamble_ints;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_preamble_ints	hf_protocol.h	/^	uint16_t uart_rx_preamble_ints;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_preamble_ints	hf_protocol_be.h	/^	uint16_t uart_rx_preamble_ints;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_short_dma	hf_protocol.h	/^	uint16_t uart_rx_short_dma;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_rx_short_dma	hf_protocol_be.h	/^	uint16_t uart_rx_short_dma;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_tx_interrupts	hf_protocol.h	/^	uint16_t uart_tx_interrupts;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_tx_interrupts	hf_protocol_be.h	/^	uint16_t uart_tx_interrupts;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_tx_queue_dma	hf_protocol.h	/^	uint16_t uart_tx_queue_dma;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::uart_tx_queue_dma	hf_protocol_be.h	/^	uint16_t uart_tx_queue_dma;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_rx_bad_hcrc	hf_protocol.h	/^	uint16_t usb_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_rx_bad_hcrc	hf_protocol_be.h	/^	uint16_t usb_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_rx_preambles	hf_protocol.h	/^	uint16_t usb_rx_preambles;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_rx_preambles	hf_protocol_be.h	/^	uint16_t usb_rx_preambles;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_rx_receive_byte_errors	hf_protocol.h	/^	uint16_t usb_rx_receive_byte_errors;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_rx_receive_byte_errors	hf_protocol_be.h	/^	uint16_t usb_rx_receive_byte_errors;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_attempts	hf_protocol.h	/^	uint16_t usb_tx_attempts;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_attempts	hf_protocol_be.h	/^	uint16_t usb_tx_attempts;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_disconnected	hf_protocol.h	/^	uint16_t usb_tx_disconnected;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_disconnected	hf_protocol_be.h	/^	uint16_t usb_tx_disconnected;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_endpointstalled	hf_protocol.h	/^	uint16_t usb_tx_endpointstalled;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_endpointstalled	hf_protocol_be.h	/^	uint16_t usb_tx_endpointstalled;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_incompletes	hf_protocol.h	/^	uint16_t usb_tx_incompletes;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_incompletes	hf_protocol_be.h	/^	uint16_t usb_tx_incompletes;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_packets	hf_protocol.h	/^	uint16_t usb_tx_packets;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_packets	hf_protocol_be.h	/^	uint16_t usb_tx_packets;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_suspended	hf_protocol.h	/^	uint16_t usb_tx_suspended;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_suspended	hf_protocol_be.h	/^	uint16_t usb_tx_suspended;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_timeouts	hf_protocol.h	/^	uint16_t usb_tx_timeouts;$/;"	m	struct:hf_usb_stats1	access:public
hf_usb_stats1::usb_tx_timeouts	hf_protocol_be.h	/^	uint16_t usb_tx_timeouts;$/;"	m	struct:hf_usb_stats1	access:public
hfa0_epinfos	usbutils.c	/^static struct usb_epinfo hfa0_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
hfa1_epinfos	usbutils.c	/^static struct usb_epinfo hfa1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
hfa_api_stats	driver-hashfast.c	/^static struct api_data *hfa_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
hfa_basejobs	driver-hashfast.c	/^static inline int hfa_basejobs(struct hashfast_info *info)$/;"	f	file:	signature:(struct hashfast_info *info)
hfa_check_options	driver-hashfast.c	/^static void hfa_check_options(struct hashfast_info *info)$/;"	f	file:	signature:(struct hashfast_info *info)
hfa_choose_opname	driver-hashfast.c	/^static void hfa_choose_opname(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfa_clear_readbuf	driver-hashfast.c	/^static bool hfa_clear_readbuf(struct cgpu_info *hashfast)$/;"	f	file:	signature:(struct cgpu_info *hashfast)
hfa_clear_readbuf	driver-hashfast.c	/^static bool hfa_clear_readbuf(struct cgpu_info *hashfast);$/;"	p	file:	signature:(struct cgpu_info *hashfast)
hfa_cmd	driver-hashfast.c	/^struct hfa_cmd {$/;"	s	file:
hfa_cmd::cmd	driver-hashfast.c	/^	uint8_t cmd;$/;"	m	struct:hfa_cmd	file:	access:public
hfa_cmd::cmd_name	driver-hashfast.c	/^	char *cmd_name;$/;"	m	struct:hfa_cmd	file:	access:public
hfa_cmd::usb_cmd	driver-hashfast.c	/^	enum usb_cmds usb_cmd;$/;"	m	struct:hfa_cmd	typeref:enum:hfa_cmd::usb_cmds	file:	access:public
hfa_cmds	driver-hashfast.c	/^static const struct hfa_cmd hfa_cmds[] = {$/;"	v	typeref:struct:hfa_cmd	file:
hfa_crc8	driver-hashfast.c	/^static unsigned char hfa_crc8(unsigned char *h)$/;"	f	file:	signature:(unsigned char *h)
hfa_crc8_set	driver-hashfast.c	/^static bool hfa_crc8_set;$/;"	v	file:
hfa_decrease_clock	driver-hashfast.c	/^static void hfa_decrease_clock(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info, int die)
hfa_detect	driver-hashfast.c	/^static void hfa_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
hfa_detect_common	driver-hashfast.c	/^static bool hfa_detect_common(struct cgpu_info *hashfast)$/;"	f	file:	signature:(struct cgpu_info *hashfast)
hfa_detect_one	driver-hashfast.c	/^static struct cgpu_info *hfa_detect_one(libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(libusb_device *dev, struct usb_find_devices *found)
hfa_dfu_boot	driver-hashfast.c	/^static void hfa_dfu_boot(struct cgpu_info *hashfast)$/;"	f	file:	signature:(struct cgpu_info *hashfast)
hfa_free_all_work	driver-hashfast.c	/^static void hfa_free_all_work(struct hashfast_info *info)$/;"	f	file:	signature:(struct hashfast_info *info)
hfa_get_data	driver-hashfast.c	/^static bool hfa_get_data(struct cgpu_info *hashfast, char *buf, int len4)$/;"	f	file:	signature:(struct cgpu_info *hashfast, char *buf, int len4)
hfa_get_header	driver-hashfast.c	/^static bool hfa_get_header(struct cgpu_info *hashfast, struct hf_header *h, uint8_t *computed_crc)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hf_header *h, uint8_t *computed_crc)
hfa_get_packet	driver-hashfast.c	/^static bool hfa_get_packet(struct cgpu_info *hashfast, struct hf_header *h)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hf_header *h)
hfa_increase_clock	driver-hashfast.c	/^static void hfa_increase_clock(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info, int die)
hfa_init	driver-hashfast.c	/^static bool hfa_init(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
hfa_init_crc8	driver-hashfast.c	/^static void hfa_init_crc8(void)$/;"	f	file:	signature:(void)
hfa_initialise	driver-hashfast.c	/^static bool hfa_initialise(struct cgpu_info *hashfast)$/;"	f	file:	signature:(struct cgpu_info *hashfast)
hfa_ints	usbutils.c	/^static struct usb_intinfo hfa_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
hfa_jobs	driver-hashfast.c	/^static int hfa_jobs(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfa_old_device	driver-hashfast.c	/^static struct cgpu_info *hfa_old_device(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfa_parse_gwq_status	driver-hashfast.c	/^static void hfa_parse_gwq_status(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info, struct hf_header *h)
hfa_parse_nonce	driver-hashfast.c	/^static void hfa_parse_nonce(struct thr_info *thr, struct cgpu_info *hashfast,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *hashfast, struct hashfast_info *info, struct hf_header *h)
hfa_parse_notice	driver-hashfast.c	/^static void hfa_parse_notice(struct cgpu_info *hashfast, struct hf_header *h)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hf_header *h)
hfa_parse_settings	driver-hashfast.c	/^static void hfa_parse_settings(struct cgpu_info *hashfast, struct hf_header *h)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hf_header *h)
hfa_read	driver-hashfast.c	/^static void *hfa_read(void *arg)$/;"	f	file:	signature:(void *arg)
hfa_reinit	driver-hashfast.c	/^static void hfa_reinit(struct cgpu_info *hashfast)$/;"	f	file:	signature:(struct cgpu_info *hashfast)
hfa_reset	driver-hashfast.c	/^static bool hfa_reset(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfa_running_shutdown	driver-hashfast.c	/^static void hfa_running_shutdown(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfa_running_shutdown	driver-hashfast.c	/^static void hfa_running_shutdown(struct cgpu_info *hashfast, struct hashfast_info *info);$/;"	p	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfa_scanwork	driver-hashfast.c	/^static int64_t hfa_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
hfa_send_frame	driver-hashfast.c	/^static bool hfa_send_frame(struct cgpu_info *hashfast, uint8_t opcode, uint16_t hdata,$/;"	f	file:	signature:(struct cgpu_info *hashfast, uint8_t opcode, uint16_t hdata, uint8_t *data, int len)
hfa_send_generic_frame	driver-hashfast.c	/^static bool hfa_send_generic_frame(struct cgpu_info *hashfast, uint8_t opcode, uint8_t chip_address,$/;"	f	file:	signature:(struct cgpu_info *hashfast, uint8_t opcode, uint8_t chip_address, uint8_t core_address, uint16_t hdata, uint8_t *data, int len)
hfa_send_packet	driver-hashfast.c	/^static bool hfa_send_packet(struct cgpu_info *hashfast, struct hf_header *h, int cmd)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hf_header *h, int cmd)
hfa_send_shutdown	driver-hashfast.c	/^static bool hfa_send_shutdown(struct cgpu_info *hashfast)$/;"	f	file:	signature:(struct cgpu_info *hashfast)
hfa_send_shutdown	driver-hashfast.c	/^static bool hfa_send_shutdown(struct cgpu_info *hashfast);$/;"	p	file:	signature:(struct cgpu_info *hashfast)
hfa_set_clock	driver-hashfast.c	/^static void hfa_set_clock(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfa_set_fanspeed	driver-hashfast.c	/^static void hfa_set_fanspeed(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info, int fandiff)
hfa_set_fanspeed	driver-hashfast.c	/^static void hfa_set_fanspeed(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	p	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info, int fanspeed)
hfa_set_voltages	driver-hashfast.c	/^static bool hfa_set_voltages(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfa_shutdown	driver-hashfast.c	/^static void hfa_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
hfa_statline_before	driver-hashfast.c	/^static void hfa_statline_before(char *buf, size_t bufsiz, struct cgpu_info *hashfast)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *hashfast)
hfa_temp_clock	driver-hashfast.c	/^static void hfa_temp_clock(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfa_update_die_statistics	driver-hashfast.c	/^static void hfa_update_die_statistics(struct hashfast_info *info, struct hf_header *h)$/;"	f	file:	signature:(struct hashfast_info *info, struct hf_header *h)
hfa_update_die_status	driver-hashfast.c	/^static void hfa_update_die_status(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info, struct hf_header *h)
hfa_update_stats1	driver-hashfast.c	/^static void hfa_update_stats1(struct cgpu_info *hashfast, struct hashfast_info *info,$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info, struct hf_header *h)
hfa_write_opname	driver-hashfast.c	/^static void hfa_write_opname(struct cgpu_info *hashfast, struct hashfast_info *info)$/;"	f	file:	signature:(struct cgpu_info *hashfast, struct hashfast_info *info)
hfree_list	driver-minion.c	/^	K_LIST *hfree_list;$/;"	m	struct:minion_info	file:	access:public
hh	cgminer.c	/^	UT_hash_handle hh;$/;"	m	struct:_cgpu_devid_counter	file:	access:public
hh	cgminer.c	/^	UT_hash_handle hh;$/;"	m	struct:block	file:	access:public
hh	cgminer.c	/^	UT_hash_handle hh;$/;"	m	struct:stratum_share	file:	access:public
hh	driver-bflsc.h	/^	UT_hash_handle hh;$/;"	m	struct:bflsc_work	access:public
hh	driver-drillbit.c	/^	UT_hash_handle hh;$/;"	m	struct:__anon7	file:	access:public
hh	miner.h	/^	UT_hash_handle	hh;$/;"	m	struct:work	access:public
hh_head	uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle	access:public
hh_next	uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
hh_prev	uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
hho	uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table	access:public
hiclass	miner.php	/^ $hiclass = 'hi';$/;"	v
hidefields	miner.php	/^$hidefields = array();$/;"	v
hidiff	miner.h	/^	int hidiff;$/;"	m	struct:cgpu_info	access:public
high_operating_temp_limit	hf_protocol.h	/^	uint8_t  high_operating_temp_limit;         \/\/ Highest normal operating limit$/;"	m	struct:hf_usb_init_options	access:public
high_operating_temp_limit	hf_protocol_be.h	/^	uint8_t  high_operating_temp_limit;         \/\/ Highest normal operating limit$/;"	m	struct:hf_usb_init_options	access:public
hires_frequency	compat/libusb-1.0/libusb/os/windows_usb.c	/^uint64_t hires_frequency, hires_ticks_to_ps;$/;"	v
hires_ticks_to_ps	compat/libusb-1.0/libusb/os/windows_usb.c	/^uint64_t hires_frequency, hires_ticks_to_ps;$/;"	v
hist_item	driver-minion.c	/^typedef struct hist_item {$/;"	s	file:
hist_item::when	driver-minion.c	/^	struct timeval when;$/;"	m	struct:hist_item	typeref:struct:hist_item::timeval	file:	access:public
history	driver-antrouter.c	/^	struct ANTROUTER_HISTORY history[INFO_HISTORY+1];$/;"	m	struct:ANTROUTER_INFO	typeref:struct:ANTROUTER_INFO::ANTROUTER_HISTORY	file:	access:public
history	driver-bmsc.c	/^	struct BMSC_HISTORY history[INFO_HISTORY+1];$/;"	m	struct:BMSC_INFO	typeref:struct:BMSC_INFO::BMSC_HISTORY	file:	access:public
history	driver-icarus.c	/^	struct ICARUS_HISTORY history[INFO_HISTORY+1];$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::ICARUS_HISTORY	file:	access:public
history_count	driver-antrouter.c	/^	uint64_t history_count;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
history_count	driver-bmsc.c	/^	uint64_t history_count;$/;"	m	struct:BMSC_INFO	file:	access:public
history_count	driver-icarus.c	/^	uint64_t history_count;$/;"	m	struct:ICARUS_INFO	file:	access:public
history_gen	driver-minion.c	/^	int history_gen;$/;"	m	struct:minion_info	file:	access:public
history_ghs	driver-minion.c	/^	double history_ghs[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
history_sec	driver-antrouter.c	/^static struct timeval history_sec = { HISTORY_SEC, 0 };$/;"	v	typeref:struct:timeval	file:
history_sec	driver-bmsc.c	/^static struct timeval history_sec = { HISTORY_SEC, 0 };$/;"	v	typeref:struct:timeval	file:
history_sec	driver-icarus.c	/^static struct timeval history_sec = { HISTORY_SEC, 0 };$/;"	v	typeref:struct:timeval	file:
history_time	driver-antrouter.c	/^	struct timeval history_time;$/;"	m	struct:ANTROUTER_INFO	typeref:struct:ANTROUTER_INFO::timeval	file:	access:public
history_time	driver-bmsc.c	/^	struct timeval history_time;$/;"	m	struct:BMSC_INFO	typeref:struct:BMSC_INFO::timeval	file:	access:public
history_time	driver-icarus.c	/^	struct timeval history_time;$/;"	m	struct:ICARUS_INFO	typeref:struct:ICARUS_INFO::timeval	file:	access:public
hold_work_until	driver-knc.c	/^	struct timeval hold_work_until;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::timeval	file:	access:public
hotplug_cbs	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head hotplug_cbs;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
hotplug_cbs_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t hotplug_cbs_lock;$/;"	m	struct:libusb_context	access:public
hotplug_lock	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static pthread_mutex_t hotplug_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
hotplug_mode	cgminer.c	/^bool hotplug_mode;$/;"	v
hotplug_pipe	compat/libusb-1.0/libusb/libusbi.h	/^        int hotplug_pipe[2];$/;"	m	struct:libusb_context	access:public
hotplug_process	cgminer.c	/^static void hotplug_process(void)$/;"	f	file:	signature:(void)
hotplug_thr_id	cgminer.c	/^static int hotplug_thr_id;$/;"	v	file:
hotplug_thread	cgminer.c	/^static void *hotplug_thread(void __maybe_unused *userdata)$/;"	f	file:	signature:(void __maybe_unused *userdata)
hotplug_time	cgminer.c	/^int hotplug_time = 5;$/;"	v
how_in_use	usbutils.c	/^static bool how_in_use(uint8_t bus_number, uint8_t device_address, bool *blacklisted)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address, bool *blacklisted)
howlong	miner.php	/^	$howlong = 1;$/;"	v
howlong	miner.php	/^ $howlong = $when - $alldata['Last Share Time'];$/;"	v
hro_epinfos	usbutils.c	/^static struct usb_epinfo hro_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
hro_ints	usbutils.c	/^static struct usb_intinfo hro_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
htab_create	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int htab_create(struct libusb_context *ctx, unsigned long nel)$/;"	f	file:	signature:(struct libusb_context *ctx, unsigned long nel)
htab_destroy	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void htab_destroy(void)$/;"	f	file:	signature:(void)
htab_entry	compat/libusb-1.0/libusb/os/windows_usb.c	/^typedef struct htab_entry {$/;"	s	file:
htab_entry	compat/libusb-1.0/libusb/os/windows_usb.c	/^} htab_entry;$/;"	t	typeref:struct:htab_entry	file:
htab_entry::str	compat/libusb-1.0/libusb/os/windows_usb.c	/^	char* str;$/;"	m	struct:htab_entry	file:	access:public
htab_entry::used	compat/libusb-1.0/libusb/os/windows_usb.c	/^	unsigned long used;$/;"	m	struct:htab_entry	file:	access:public
htab_filled	compat/libusb-1.0/libusb/os/windows_usb.c	/^unsigned long htab_size, htab_filled;$/;"	v
htab_hash	compat/libusb-1.0/libusb/os/windows_usb.c	/^static unsigned long htab_hash(char* str)$/;"	f	file:	signature:(char* str)
htab_size	compat/libusb-1.0/libusb/os/windows_usb.c	/^unsigned long htab_size, htab_filled;$/;"	v
htab_table	compat/libusb-1.0/libusb/os/windows_usb.c	/^htab_entry* htab_table = NULL;$/;"	v
htab_write_mutex	compat/libusb-1.0/libusb/os/windows_usb.c	/^usbi_mutex_t htab_write_mutex = NULL;$/;"	v
htmlhead	miner.php	/^function htmlhead($mcerr, $checkapi, $rig, $pg = null, $noscript = false)$/;"	f
htobe16	miner.h	177;"	d
htobe16	miner.h	190;"	d
htobe32	miner.h	178;"	d
htobe32	miner.h	191;"	d
htobe64	miner.h	179;"	d
htobe64	miner.h	192;"	d
htole16	miner.h	169;"	d
htole16	miner.h	182;"	d
htole32	miner.h	171;"	d
htole32	miner.h	184;"	d
htole64	miner.h	172;"	d
htole64	miner.h	187;"	d
htole8	miner.h	168;"	d
htole8	miner.h	181;"	d
htole8	miner.h	200;"	d
htole8	miner.h	202;"	d
http_negotiate	util.c	/^static bool http_negotiate(struct pool *pool, int sockd, bool http0)$/;"	f	file:	signature:(struct pool *pool, int sockd, bool http0)
hu16_from_msg	driver-cointerra.c	/^static uint16_t hu16_from_msg(char *buf, int msg)$/;"	f	file:	signature:(char *buf, int msg)
hu32_from_msg	driver-cointerra.c	/^static uint32_t hu32_from_msg(char *buf, int msg)$/;"	f	file:	signature:(char *buf, int msg)
hu64_from_msg	driver-cointerra.c	/^static uint64_t hu64_from_msg(char *buf, int msg)$/;"	f	file:	signature:(char *buf, int msg)
hub_driver_names	compat/libusb-1.0/libusb/os/windows_usb.c	/^const char* hub_driver_names[] = {"USBHUB", "USBHUB3", "USB3HUB", "NUSB3HUB", "RUSB3HUB", "FLXHCIH", "TIHUB3", "ETRONHUB3", "VIAHUB3", "ASMTHUB3", "IUSB3HUB", "VUSB3HUB", "AMDHUB30"};$/;"	v
hw_error	miner.h	/^	void (*hw_error)(struct thr_info *);$/;"	m	struct:device_drv	access:public
hw_error_eft	driver-bitmain.h	/^	uint8_t hw_error_eft         :1;$/;"	m	struct:bitmain_txconfig_token	access:public
hw_errors	A1-common.h	/^	int hw_errors;$/;"	m	struct:A1_chip	access:public
hw_errors	cgminer.c	/^int hw_errors;$/;"	v
hw_errors	driver-cointerra.h	/^	uint16_t hw_errors[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
hw_errors	miner.h	/^	int hw_errors;$/;"	m	struct:cgpu_info	access:public
hw_errors	miner.h	/^	uint32_t hw_errors;$/;"	m	struct:modminer_fpga_state	access:public
hw_rev	driver-bitfury.h	/^	int hw_rev;$/;"	m	struct:bitfury_info	access:public
hw_version	driver-bitmain.h	/^	int hw_version[4];$/;"	m	struct:bitmain_info	access:public
hw_version	driver-bitmain.h	/^	uint8_t hw_version[4];$/;"	m	struct:bitmain_rxstatus_data	access:public
hw_work	driver-avalon2.h	/^	int hw_work[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
hw_work	driver-hashratio.h	/^	int hw_work;$/;"	m	struct:hashratio_info	access:public
hw_works	driver-avalon2.h	/^	int hw_works[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
hw_works	driver-hashratio.h	/^	int hw_works;$/;"	m	struct:hashratio_info	access:public
hwe	driver-blockerupter.h	/^	double hwe;$/;"	m	struct:asic_info	access:public
hwe	driver-blockerupter.h	/^	double hwe;$/;"	m	struct:board_info	access:public
hwrev	driver-cointerra.h	/^	uint16_t hwrev;$/;"	m	struct:cointerra_info	access:public
i	miner.php	/^	if ($ch != '\\\\' || $i == ($len-1))$/;"	v
i2c_ctx	i2c-context.h	/^struct i2c_ctx {$/;"	s
i2c_ctx::addr	i2c-context.h	/^	uint8_t addr;$/;"	m	struct:i2c_ctx	access:public
i2c_ctx::exit	i2c-context.h	/^	void (*exit)(struct i2c_ctx *ctx);$/;"	m	struct:i2c_ctx	access:public
i2c_ctx::file	i2c-context.h	/^	int file;$/;"	m	struct:i2c_ctx	access:public
i2c_ctx::read	i2c-context.h	/^	bool (*read)(struct i2c_ctx *ctx, uint8_t reg, uint8_t *val);$/;"	m	struct:i2c_ctx	access:public
i2c_ctx::write	i2c-context.h	/^	bool (*write)(struct i2c_ctx *ctx, uint8_t reg, uint8_t val);$/;"	m	struct:i2c_ctx	access:public
i2c_slave_exit	i2c-context.c	/^static void i2c_slave_exit(struct i2c_ctx *ctx)$/;"	f	file:	signature:(struct i2c_ctx *ctx)
i2c_slave_open	i2c-context.c	/^extern struct i2c_ctx *i2c_slave_open(char *i2c_bus, uint8_t slave_addr)$/;"	f	signature:(char *i2c_bus, uint8_t slave_addr)
i2c_slave_open	i2c-context.h	/^extern struct i2c_ctx *i2c_slave_open(char *i2c_bus, uint8_t slave_addr);$/;"	p	signature:(char *i2c_bus, uint8_t slave_addr)
i2c_slave_read	i2c-context.c	/^static bool i2c_slave_read(struct i2c_ctx *ctx, uint8_t reg, uint8_t *val)$/;"	f	file:	signature:(struct i2c_ctx *ctx, uint8_t reg, uint8_t *val)
i2c_slave_write	i2c-context.c	/^static bool i2c_slave_write(struct i2c_ctx *ctx, uint8_t reg, uint8_t val)$/;"	f	file:	signature:(struct i2c_ctx *ctx, uint8_t reg, uint8_t val)
iConfiguration	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iConfiguration;$/;"	m	struct:libusb_config_descriptor	access:public
iConfiguration	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  iConfiguration;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
iInterface	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iInterface;$/;"	m	struct:libusb_interface_descriptor	access:public
iInterface	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  iInterface;$/;"	m	struct:USB_INTERFACE_DESCRIPTOR	access:public
iManufacturer	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iManufacturer;$/;"	m	struct:libusb_device_descriptor	access:public
iManufacturer	usbutils.h	/^	char *iManufacturer;$/;"	m	struct:usb_find_devices	access:public
iProduct	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iProduct;$/;"	m	struct:libusb_device_descriptor	access:public
iProduct	usbutils.h	/^	char *iProduct;$/;"	m	struct:usb_find_devices	access:public
iSerialNumber	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iSerialNumber;$/;"	m	struct:libusb_device_descriptor	access:public
ica1_epinfos0	usbutils.c	/^static struct usb_epinfo ica1_epinfos0[] = {$/;"	v	typeref:struct:usb_epinfo	file:
ica1_epinfos1	usbutils.c	/^static struct usb_epinfo ica1_epinfos1[] = {$/;"	v	typeref:struct:usb_epinfo	file:
ica1_ints	usbutils.c	/^static struct usb_intinfo ica1_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
ica_epinfos	usbutils.c	/^static struct usb_epinfo ica_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
ica_ints	usbutils.c	/^static struct usb_intinfo ica_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
icarus_api_stats	driver-icarus.c	/^static struct api_data *icarus_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
icarus_clear	driver-icarus.c	/^static void icarus_clear(struct cgpu_info *icarus, struct ICARUS_INFO *info)$/;"	f	file:	signature:(struct cgpu_info *icarus, struct ICARUS_INFO *info)
icarus_detect	driver-icarus.c	/^static void icarus_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
icarus_detect_one	driver-icarus.c	/^static struct cgpu_info *icarus_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
icarus_drv	driver-icarus.c	/^struct device_drv icarus_drv = {$/;"	v	typeref:struct:device_drv
icarus_get_device_id	cgminer.c	/^bool icarus_get_device_id(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
icarus_get_nonce	driver-icarus.c	/^static int icarus_get_nonce(struct cgpu_info *icarus, unsigned char *buf, struct timeval *tv_start,$/;"	f	file:	signature:(struct cgpu_info *icarus, unsigned char *buf, struct timeval *tv_start, struct timeval *tv_finish, struct thr_info *thr, int read_time)
icarus_identify	driver-icarus.c	/^static void icarus_identify(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
icarus_initialise	driver-icarus.c	/^static void icarus_initialise(struct cgpu_info *icarus, int baud)$/;"	f	file:	signature:(struct cgpu_info *icarus, int baud)
icarus_prepare	driver-icarus.c	/^static bool icarus_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
icarus_scanwork	driver-icarus.c	/^static int64_t icarus_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
icarus_set	driver-icarus.c	/^static char *icarus_set(struct cgpu_info *cgpu, char *option, char *setting, char *replybuf)$/;"	f	file:	signature:(struct cgpu_info *cgpu, char *option, char *setting, char *replybuf)
icarus_shutdown	driver-icarus.c	/^static void icarus_shutdown(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
icarus_statline_before	driver-icarus.c	/^static void icarus_statline_before(char *buf, size_t bufsiz, struct cgpu_info *cgpu)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *cgpu)
icsv	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
id	api-example.c	/^		int id;$/;"	m	struct:WSAERRORS	file:	access:public
id	api-example.php	/^				$id = explode('=', $item, 2);$/;"	v
id	api-example.php	/^			$id = explode('=', $items[0], 2);$/;"	v
id	api.c	/^	int id;$/;"	m	struct:WSAERRORS	file:	access:public
id	cgminer.c	/^	int id;$/;"	m	struct:stratum_share	file:	access:public
id	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const uint8_t id;$/;"	m	struct:windows_usb_api_backend	access:public
id	driver-bflsc.h	/^	int id;$/;"	m	struct:bflsc_work	access:public
id	driver-icarus.c	/^	uint8_t id; \/\/ Used only by ANT, otherwise unused by other icarus$/;"	m	struct:ICARUS_WORK	file:	access:public
id	driver-klondike.c	/^		IDENTITY id;$/;"	m	union:kline::__anon12	file:	access:public
id	miner.h	/^	int		id;$/;"	m	struct:thr_info	access:public
id	miner.h	/^	uint32_t	id;$/;"	m	struct:work	access:public
id	miner.php	/^				$id = explode('=', $item, 2);$/;"	v
id	miner.php	/^			$id = explode('=', $items[0], 2);$/;"	v
idProduct	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t idProduct;$/;"	m	struct:libusb_device_descriptor	access:public
idProduct	usbutils.h	/^	uint16_t idProduct;$/;"	m	struct:usb_find_devices	access:public
idVendor	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t idVendor;$/;"	m	struct:libusb_device_descriptor	access:public
idVendor	usbutils.h	/^	uint16_t idVendor;$/;"	m	struct:usb_find_devices	access:public
ideal_chain_maxlen	uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table	access:public
ident	driver-antrouter.c	/^	enum sub_ident ident;$/;"	m	struct:ANTROUTER_INFO	typeref:enum:ANTROUTER_INFO::sub_ident	file:	access:public
ident	driver-bflsc.h	/^	enum sub_ident ident;$/;"	m	struct:bflsc_info	typeref:enum:bflsc_info::sub_ident	access:public
ident	driver-bitfury.h	/^	enum sub_ident ident;$/;"	m	struct:bitfury_info	typeref:enum:bitfury_info::sub_ident	access:public
ident	driver-bmsc.c	/^	enum sub_ident ident;$/;"	m	struct:BMSC_INFO	typeref:enum:BMSC_INFO::sub_ident	file:	access:public
ident	driver-icarus.c	/^	enum sub_ident ident;$/;"	m	struct:ICARUS_INFO	typeref:enum:ICARUS_INFO::sub_ident	file:	access:public
ident	usbutils.h	/^	enum sub_ident ident;$/;"	m	struct:cg_usb_device	typeref:enum:cg_usb_device::sub_ident	access:public
ident	usbutils.h	/^	enum sub_ident ident;$/;"	m	struct:usb_find_devices	typeref:enum:usb_find_devices::sub_ident	access:public
identify_device	miner.h	/^	void (*identify_device)(struct cgpu_info *); \/\/ e.g. to flash a led$/;"	m	struct:device_drv	access:public
idle	driver-avalon.h	/^	int idle;$/;"	m	struct:avalon_info	access:public
idle	driver-bitmain.h	/^	int idle;$/;"	m	struct:bitmain_info	access:public
idle	driver-minion.c	/^	uint32_t idle;$/;"	m	struct:minion_status	file:	access:public
idle	miner.h	/^	bool idle;$/;"	m	struct:pool	access:public
idle_report	driver-minion.c	/^static void idle_report(struct cgpu_info *minioncgpu)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu)
idle_rpt	driver-minion.c	/^	struct timeval idle_rpt;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
idx	driver-avalon2.h	/^	uint8_t idx;$/;"	m	struct:avalon2_pkg	access:public
idx	driver-hashratio.h	/^	uint8_t idx;$/;"	m	struct:hashratio_pkg	access:public
ifno	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int ifno;	\/* interface 0..N ; negative numbers reserved *\/$/;"	m	struct:usbfs_ioctl	access:public
ign_total_links	driver-bab.c	/^	uint64_t ign_total_links;$/;"	m	struct:bab_info	file:	access:public
ign_total_tests	driver-bab.c	/^	uint64_t ign_total_tests;$/;"	m	struct:bab_info	file:	access:public
ign_total_work_links	driver-bab.c	/^	uint64_t ign_total_work_links;$/;"	m	struct:bab_info	file:	access:public
ignorerefresh	miner.php	/^# $ignorerefresh = true\/false always ignore refresh parameters$/;"	v
ignorerefresh	miner.php	/^$ignorerefresh = false;$/;"	v
in_addr_t	util.h	67;"	d
in_use	usbutils.c	/^	struct usb_busdev in_use;$/;"	m	struct:usb_in_use_list	typeref:struct:usb_in_use_list::usb_busdev	file:	access:public
in_use_get_fd	usbutils.c	/^static int in_use_get_fd(uint8_t bus_number, uint8_t device_address)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address)
in_use_get_ress	usbutils.c	/^static void in_use_get_ress(uint8_t bus_number, uint8_t device_address, void **resource1, void **resource2)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address, void **resource1, void **resource2)
in_use_head	usbutils.c	/^static struct usb_in_use_list *in_use_head = NULL;$/;"	v	typeref:struct:usb_in_use_list	file:
in_use_store_fd	usbutils.c	/^static void in_use_store_fd(uint8_t bus_number, uint8_t device_address, int fd)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address, int fd)
in_use_store_ress	usbutils.c	/^static void in_use_store_ress(uint8_t bus_number, uint8_t device_address, void *resource1, void *resource2)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address, void *resource1, void *resource2)
inactive	driver-cointerra.h	/^	uint16_t inactive;$/;"	m	struct:cointerra_info	access:public
inc_bflsc_errors	driver-bflsc.c	/^static void inc_bflsc_errors(struct thr_info *thr, struct bflsc_info *info, int8_t core)$/;"	f	file:	signature:(struct thr_info *thr, struct bflsc_info *info, int8_t core)
inc_bflsc_nonces	driver-bflsc.c	/^static void inc_bflsc_nonces(struct bflsc_info *info, int8_t core)$/;"	f	file:	signature:(struct bflsc_info *info, int8_t core)
inc_core_errors	driver-bflsc.c	/^static void inc_core_errors(struct bflsc_info *info, int8_t core)$/;"	f	file:	signature:(struct bflsc_info *info, int8_t core)
inc_dev_status	cgminer.c	/^void inc_dev_status(int max_fan, int max_temp)$/;"	f	signature:(int max_fan, int max_temp)
inc_dev_status	miner.h	/^extern void inc_dev_status(int max_fan, int max_temp);$/;"	p	signature:(int max_fan, int max_temp)
inc_hw_errors	cgminer.c	/^void inc_hw_errors(struct thr_info *thr)$/;"	f	signature:(struct thr_info *thr)
inc_hw_errors	miner.h	/^extern void inc_hw_errors(struct thr_info *thr);$/;"	p	signature:(struct thr_info *thr)
inc_work_stats	cgminer.c	/^void inc_work_stats(struct thr_info *thr, struct pool *pool, int diff1)$/;"	f	signature:(struct thr_info *thr, struct pool *pool, int diff1)
inc_work_stats	miner.h	/^extern void inc_work_stats(struct thr_info *thr, struct pool *pool, int diff1);$/;"	p	signature:(struct thr_info *thr, struct pool *pool, int diff1)
include_count	cgminer.c	/^static int include_count;$/;"	v	file:
incorrect_slave_sequential	driver-klondike.c	/^	int incorrect_slave_sequential;$/;"	m	struct:klondike_info	file:	access:public
increase_clock	driver-drillbit.c	/^	uint8_t increase_clock;$/;"	m	struct:__anon4	file:	access:public
increment	driver-avalon.h	/^	int increment;$/;"	m	struct:avalon_info	access:public
index	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT index;$/;"	m	struct:__anon37	access:public
ineff_expands	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
inflight_target	hf_protocol.h	/^	uint16_t inflight_target;                   \/\/ Target inflight amount for GWQ protocol$/;"	m	struct:hf_usb_init_base	access:public
inflight_target	hf_protocol_be.h	/^	uint16_t inflight_target;                   \/\/ Target inflight amount for GWQ protocol$/;"	m	struct:hf_usb_init_base	access:public
info	api.c	/^	LOCKINFO *info;$/;"	m	struct:locklist	file:	access:public
init	MCast.java	/^	public void init()$/;"	m	class:MCast	access:public	signature:()
init	compat/libusb-1.0/libusb/libusbi.h	/^	int (*init)(struct libusb_context *ctx);$/;"	m	struct:usbi_os_backend	access:public
init	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*init)(struct libusb_context *ctx);$/;"	m	struct:windows_usb_api_backend	access:public
init	miner.h	/^	char init[40];$/;"	m	struct:cgpu_info	access:public
initCount	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static volatile int32_t initCount = 0;$/;"	v	file:
init_A1_chain	driver-SPI-bitmine-A1.c	/^struct A1_chain *init_A1_chain(struct spi_ctx *ctx, int chain_id)$/;"	f	signature:(struct spi_ctx *ctx, int chain_id)
init_chip	driver-minion.c	/^static void init_chip(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip)
init_cores	driver-minion.c	/^	uint8_t init_cores[MINION_CHIPS][DATA_SIZ*MINION_CORE_REPS];$/;"	m	struct:minion_info	file:	access:public
init_count	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static volatile int init_count = 0;$/;"	v	file:
init_device	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int init_device(struct libusb_device* dev, struct libusb_device* parent_dev,$/;"	f	file:	signature:(struct libusb_device* dev, struct libusb_device* parent_dev, uint8_t port_number, char* device_id, DWORD devinst)
init_diffbits	driver-cointerra.h	/^	uint8_t init_diffbits;$/;"	m	struct:cointerra_info	access:public
init_dlls	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int init_dlls(void)$/;"	f	file:	signature:(void)
init_freq	driver-minion.c	/^	int init_freq[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
init_pins	driver-minion.c	/^static void init_pins(struct minion_info *minioninfo)$/;"	f	file:	signature:(struct minion_info *minioninfo)
init_polling	compat/libusb-1.0/libusb/os/poll_windows.c	/^void init_polling(void)$/;"	f	signature:(void)
init_polling	compat/libusb-1.0/libusb/os/poll_windows.h	/^void init_polling(void);$/;"	p	signature:(void)
init_socket	driver-spondoolies-sp10.c	/^static int init_socket(void)$/;"	f	file:	signature:(void)
init_socket	driver-spondoolies-sp30.c	/^static int init_socket(void)$/;"	f	file:	signature:(void)
init_stratum_threads	cgminer.c	/^static void init_stratum_threads(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
init_temp	driver-minion.c	/^	int init_temp[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
init_usb_transfer	usbutils.c	/^static void init_usb_transfer(struct usb_transfer *ut)$/;"	f	file:	signature:(struct usb_transfer *ut)
initial_args	cgminer.c	/^char **initial_args;$/;"	v	file:
initial_ignored	driver-bab.c	/^	uint32_t initial_ignored;$/;"	m	struct:bab_info	file:	access:public
initialise_usb	cgminer.c	/^static void initialise_usb(void) {$/;"	f	file:	signature:(void)
initialise_usb	cgminer.c	9788;"	d	file:
initialise_usblocks	usbutils.c	/^void initialise_usblocks(void)$/;"	f	signature:(void)
initialise_usblocks	usbutils.h	/^void initialise_usblocks(void);$/;"	p	signature:(void)
initialised	driver-bab.c	/^	bool initialised;$/;"	m	struct:bab_info	file:	access:public
initialised	driver-klondike.c	/^	bool initialised;$/;"	m	struct:klondike_info	file:	access:public
initialised	driver-minion.c	/^	bool initialised;$/;"	m	struct:minion_info	file:	access:public
initialised	usbutils.h	/^	bool initialised;$/;"	m	struct:cg_usb_info	access:public
initialize_device	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int initialize_device(struct libusb_device *dev, uint8_t busnum,$/;"	f	file:	signature:(struct libusb_device *dev, uint8_t busnum, uint8_t devaddr, const char *sysfs_dir)
initiate_stratum	util.c	/^bool initiate_stratum(struct pool *pool)$/;"	f	signature:(struct pool *pool)
initiate_stratum	util.h	/^bool initiate_stratum(struct pool *pool);$/;"	p	signature:(struct pool *pool)
inline	compat/libusb-1.0/libusb/libusb.h	28;"	d
inps	miner.php	/^ $inps = array('Pool URL' => array('purl', 20),$/;"	v
input_pool	cgminer.c	/^static bool input_pool(bool live)$/;"	f	file:	signature:(bool live)
input_pool	cgminer.c	/^static bool input_pool(bool live);$/;"	p	file:	signature:(bool live)
input_thr_id	cgminer.c	/^static int input_thr_id;$/;"	v	file:
input_thread	cgminer.c	/^static void *input_thread(void __maybe_unused *userdata)$/;"	f	file:	signature:(void __maybe_unused *userdata)
insert_to_bucket	compat/jansson-2.6/src/hashtable.c	/^static void insert_to_bucket(hashtable_t *hashtable, bucket_t *bucket,$/;"	f	file:	signature:(hashtable_t *hashtable, bucket_t *bucket, list_t *list)
int16_t	lib/stdint.in.h	125;"	d
int16_t	lib/stdint.in.h	129;"	d
int32_t	compat/jansson-2.6/src/utf.h	/^typedef int int32_t;$/;"	t
int32_t	lib/stdint.in.h	132;"	d
int32_t	lib/stdint.in.h	136;"	d
int64_t	lib/stdint.in.h	151;"	d
int64_t	lib/stdint.in.h	153;"	d
int64_t	lib/stdint.in.h	156;"	d
int64_t	lib/stdint.in.h	158;"	d
int64_t	lib/stdint.in.h	161;"	d
int64_t	lib/stdint.in.h	163;"	d
int8_t	lib/stdint.in.h	118;"	d
int8_t	lib/stdint.in.h	122;"	d
int_clock_level	driver-drillbit.c	/^	uint8_t int_clock_level; \/\/ Clock level (30-48 without divider), see asic.c for details$/;"	m	struct:__anon5	file:	access:public
int_fast16_t	lib/stdint.in.h	234;"	d
int_fast16_t	lib/stdint.in.h	248;"	d
int_fast32_t	lib/stdint.in.h	236;"	d
int_fast32_t	lib/stdint.in.h	250;"	d
int_fast64_t	lib/stdint.in.h	238;"	d
int_fast64_t	lib/stdint.in.h	253;"	d
int_fast8_t	lib/stdint.in.h	232;"	d
int_fast8_t	lib/stdint.in.h	246;"	d
int_least16_t	lib/stdint.in.h	203;"	d
int_least16_t	lib/stdint.in.h	211;"	d
int_least32_t	lib/stdint.in.h	205;"	d
int_least32_t	lib/stdint.in.h	213;"	d
int_least64_t	lib/stdint.in.h	207;"	d
int_least64_t	lib/stdint.in.h	216;"	d
int_least8_t	lib/stdint.in.h	201;"	d
int_least8_t	lib/stdint.in.h	209;"	d
integer	compat/jansson-2.6/src/load.c	/^        json_int_t integer;$/;"	m	union:__anon17::__anon18	file:	access:public
interface	compat/libusb-1.0/libusb/libusb.h	/^	const struct libusb_interface *interface;$/;"	m	struct:libusb_config_descriptor	typeref:struct:libusb_config_descriptor::libusb_interface	access:public
interface	compat/libusb-1.0/libusb/libusb.h	66;"	d
interface	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    usb_interface_t    **interface;$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
interface	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int interface;$/;"	m	struct:usbfs_getdriver	access:public
interface	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int interface;$/;"	m	struct:usbfs_setinterface	access:public
interface	usbutils.h	/^	int interface;$/;"	m	struct:usb_intinfo	access:public
interfaceVersion	usbutils.h	/^	unsigned char interfaceVersion;	\/\/ ??$/;"	m	struct:cg_usb_device	access:public
interface_by_endpoint	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int interface_by_endpoint(struct windows_device_priv *priv,$/;"	f	file:	signature:(struct windows_device_priv *priv, struct windows_device_handle_priv *handle_priv, uint8_t endpoint_address)
interface_handle	compat/libusb-1.0/libusb/os/windows_usb.h	/^	struct interface_handle_t interface_handle[USB_MAXINTERFACES];$/;"	m	struct:windows_device_handle_priv	typeref:struct:windows_device_handle_priv::interface_handle_t	access:public
interface_handle_t	compat/libusb-1.0/libusb/os/windows_usb.h	/^struct interface_handle_t {$/;"	s
interface_handle_t::api_handle	compat/libusb-1.0/libusb/os/windows_usb.h	/^	HANDLE api_handle; \/\/ used by the API to communicate with the device$/;"	m	struct:interface_handle_t	access:public
interface_handle_t::dev_handle	compat/libusb-1.0/libusb/os/windows_usb.h	/^	HANDLE dev_handle; \/\/ WinUSB needs an extra handle for the file$/;"	m	struct:interface_handle_t	access:public
interface_number	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t interface_number;$/;"	m	struct:windows_transfer_priv	access:public
interfaces	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  } interfaces[USB_MAXINTERFACES];$/;"	m	struct:darwin_device_handle_priv	typeref:struct:darwin_device_handle_priv::darwin_interface	access:public
interim	miner.php	/^		$interim = array();$/;"	v
interrupted	util.h	/^	static inline bool interrupted(void)$/;"	f	signature:(void)
interrupts	driver-minion.c	/^	uint64_t interrupts;$/;"	m	struct:minion_info	file:	access:public
inthandler	cgminer.c	/^struct sigaction termhandler, inthandler;$/;"	v	typeref:struct:
intinfo	driver-antrouter.c	/^	int intinfo;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
intinfo	driver-bmsc.c	/^	int intinfo;$/;"	m	struct:BMSC_INFO	file:	access:public
intinfo	driver-icarus.c	/^	int intinfo;$/;"	m	struct:ICARUS_INFO	file:	access:public
intinfo_count	usbutils.h	/^	int intinfo_count;$/;"	m	struct:usb_find_devices	access:public
intinfos	usbutils.h	/^	struct usb_intinfo *intinfos;$/;"	m	struct:usb_find_devices	typeref:struct:usb_find_devices::usb_intinfo	access:public
intmax_t	lib/stdint.in.h	273;"	d
intmax_t	lib/stdint.in.h	276;"	d
intmax_t	lib/stdint.in.h	278;"	d
intmax_t	lib/stdint.in.h	281;"	d
intptr_t	lib/stdint.in.h	261;"	d
intptr_t	lib/stdint.in.h	265;"	d
inuse	driver-knc.c	/^	bool inuse;$/;"	m	struct:knc_core_state	file:	access:public
io_add	api.c	/^static bool io_add(struct io_data *io_data, char *buf)$/;"	f	file:	signature:(struct io_data *io_data, char *buf)
io_cf_plugin_ref_t	compat/libusb-1.0/libusb/os/darwin_usb.h	/^typedef IOCFPlugInInterface *io_cf_plugin_ref_t;$/;"	t
io_close	api.c	/^static void io_close(struct io_data *io_data)$/;"	f	file:	signature:(struct io_data *io_data)
io_data	api.c	/^	struct io_data *io_data;$/;"	m	struct:io_list	typeref:struct:io_list::io_data	file:	access:public
io_data	api.c	/^struct io_data {$/;"	s	file:
io_data::close	api.c	/^	bool close;$/;"	m	struct:io_data	file:	access:public
io_data::cur	api.c	/^	char *cur;$/;"	m	struct:io_data	file:	access:public
io_data::ptr	api.c	/^	char *ptr;$/;"	m	struct:io_data	file:	access:public
io_data::siz	api.c	/^	size_t siz;$/;"	m	struct:io_data	file:	access:public
io_data::sock	api.c	/^	bool sock;$/;"	m	struct:io_data	file:	access:public
io_free	api.c	/^static void io_free()$/;"	f	file:
io_head	api.c	/^static struct io_list *io_head = NULL;$/;"	v	typeref:struct:io_list	file:
io_list	api.c	/^struct io_list {$/;"	s	file:
io_list::io_data	api.c	/^	struct io_data *io_data;$/;"	m	struct:io_list	typeref:struct:io_list::io_data	file:	access:public
io_list::next	api.c	/^	struct io_list *next;$/;"	m	struct:io_list	typeref:struct:io_list::io_list	file:	access:public
io_list::prev	api.c	/^	struct io_list *prev;$/;"	m	struct:io_list	typeref:struct:io_list::io_list	file:	access:public
io_new	api.c	667;"	d	file:
io_notification_port_t	compat/libusb-1.0/libusb/os/darwin_usb.h	/^typedef IONotificationPortRef io_notification_port_t;$/;"	t
io_put	api.c	/^static bool io_put(struct io_data *io_data, char *buf)$/;"	f	file:	signature:(struct io_data *io_data, char *buf)
io_reinit	api.c	/^static void io_reinit(struct io_data *io_data)$/;"	f	file:	signature:(struct io_data *io_data)
ioctl_code	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int ioctl_code;	\/* MUST encode size + direction of data so the$/;"	m	struct:usbfs_ioctl	access:public
ioerr_count	usbutils.h	/^	uint32_t ioerr_count;$/;"	m	struct:cg_usb_info	access:public
ioseq	driver-minion.c	/^	uint64_t ioseq;$/;"	m	struct:minion_info	file:	access:public
ioseq	driver-minion.c	/^	uint64_t ioseq;$/;"	m	struct:task_item	file:	access:public
ioseq	driver-minion.c	/^	uint64_t ioseq;$/;"	m	struct:work_item	file:	access:public
iostat	driver-minion.c	/^typedef struct iostat {$/;"	s	file:
iostat::count	driver-minion.c	/^	uint64_t count; \/\/ total ioctl()$/;"	m	struct:iostat	file:	access:public
iostat::max_bytes	driver-minion.c	/^	uint64_t max_bytes;$/;"	m	struct:iostat	file:	access:public
iostat::max_delay	driver-minion.c	/^	double max_delay;$/;"	m	struct:iostat	file:	access:public
iostat::max_dlock	driver-minion.c	/^	double max_dlock;$/;"	m	struct:iostat	file:	access:public
iostat::max_ioc	driver-minion.c	/^	uint64_t max_ioc;$/;"	m	struct:iostat	file:	access:public
iostat::min_bytes	driver-minion.c	/^	uint64_t min_bytes;$/;"	m	struct:iostat	file:	access:public
iostat::min_delay	driver-minion.c	/^	double min_delay;$/;"	m	struct:iostat	file:	access:public
iostat::min_dlock	driver-minion.c	/^	double min_dlock;$/;"	m	struct:iostat	file:	access:public
iostat::min_ioc	driver-minion.c	/^	uint64_t min_ioc;$/;"	m	struct:iostat	file:	access:public
iostat::total_bytes	driver-minion.c	/^	uint64_t total_bytes; \/\/ ioctl() bytes$/;"	m	struct:iostat	file:	access:public
iostat::total_delay	driver-minion.c	/^	double total_delay; \/\/ total elapsed ioctl()$/;"	m	struct:iostat	file:	access:public
iostat::total_dlock	driver-minion.c	/^	double total_dlock;$/;"	m	struct:iostat	file:	access:public
iostat::total_dlwait	driver-minion.c	/^	double total_dlwait;$/;"	m	struct:iostat	file:	access:public
iostat::total_ioc	driver-minion.c	/^	uint64_t total_ioc; \/\/ SPI_IOC_MESSAGE(x)$/;"	m	struct:iostat	file:	access:public
iostat::tsd	driver-minion.c	/^	double tsd; \/\/ total doing one extra cgtime() each time$/;"	m	struct:iostat	file:	access:public
iostat::zero_bytes	driver-minion.c	/^	uint64_t zero_bytes; \/\/ how many had siz == 0$/;"	m	struct:iostat	file:	access:public
iostat::zero_delay	driver-minion.c	/^	uint64_t zero_delay; \/\/ how many had <= 0 delay$/;"	m	struct:iostat	file:	access:public
iostat::zero_dlock	driver-minion.c	/^	uint64_t zero_dlock;$/;"	m	struct:iostat	file:	access:public
iostats	driver-minion.c	/^	IOSTAT iostats[0x200];$/;"	m	struct:minion_info	file:	access:public
ip	api.c	/^	struct in6_addr ip;$/;"	m	struct:IPACCESS	typeref:struct:IPACCESS::in6_addr	file:	access:public
ip	miner.php	/^					$ip = explode('.', $rigips[$parts[0]]);$/;"	v
ipaccess	api.c	/^static struct IPACCESS *ipaccess = NULL;$/;"	v	typeref:struct:IPACCESS	file:
ipower_used	driver-cointerra.h	/^	uint16_t ipower_used;$/;"	m	struct:cointerra_info	access:public
ipower_voltage	driver-cointerra.h	/^	uint16_t ipower_voltage;$/;"	m	struct:cointerra_info	access:public
ips	api.c	/^static int ips = 0;$/;"	v	file:
irstat_efficiency	driver-cointerra.h	/^	uint16_t irstat_efficiency[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
irstat_iin	driver-cointerra.h	/^	uint16_t irstat_iin[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
irstat_iout	driver-cointerra.h	/^	uint16_t irstat_iout[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
irstat_pin	driver-cointerra.h	/^	uint16_t irstat_pin[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
irstat_pout	driver-cointerra.h	/^	uint16_t irstat_pout[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
irstat_status	driver-cointerra.h	/^	uint16_t irstat_status[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
irstat_temp1	driver-cointerra.h	/^	uint16_t irstat_temp1[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
irstat_temp2	driver-cointerra.h	/^	uint16_t irstat_temp2[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
irstat_vin	driver-cointerra.h	/^	uint16_t irstat_vin[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
irstat_vout	driver-cointerra.h	/^	uint16_t irstat_vout[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
is_api_driver	compat/libusb-1.0/libusb/os/windows_usb.c	/^static bool is_api_driver(char* driver, uint8_t api)$/;"	f	file:	signature:(char* driver, uint8_t api)
is_bitburner	driver-avalon.c	/^static bool is_bitburner(struct cgpu_info *avalon)$/;"	f	file:	signature:(struct cgpu_info *avalon)
is_chip_disabled	driver-SPI-bitmine-A1.c	/^static bool is_chip_disabled(struct A1_chain *a1, uint8_t chip_id)$/;"	f	file:	signature:(struct A1_chain *a1, uint8_t chip_id)
is_idle	driver-drillbit.c	/^	uint8_t is_idle;$/;"	m	struct:__anon2	file:	access:public
is_in_use	usbutils.c	/^static bool is_in_use(libusb_device *dev)$/;"	f	file:	signature:(libusb_device *dev)
is_in_use_bd	usbutils.c	/^static bool is_in_use_bd(uint8_t bus_number, uint8_t device_address)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address)
is_open	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  int                  is_open;$/;"	m	struct:darwin_device_handle_priv	access:public
is_polling_set	compat/libusb-1.0/libusb/os/poll_windows.c	/^BOOLEAN is_polling_set = FALSE;$/;"	v
is_store	klist.h	/^	bool is_store;$/;"	m	struct:k_list	access:public
isdupnonce	miner.h	/^extern bool isdupnonce(struct cgpu_info *cgpu, struct work *work, uint32_t nonce);$/;"	p	signature:(struct cgpu_info *cgpu, struct work *work, uint32_t nonce)
isdupnonce	noncedup.c	/^bool isdupnonce(struct cgpu_info *cgpu, struct work *work, uint32_t nonce)$/;"	f	signature:(struct cgpu_info *cgpu, struct work *work, uint32_t nonce)
isinf	compat/jansson-2.6/src/value.c	/^static JSON_INLINE int isinf(double x) { return !isnan(x) && isnan(x - x); }$/;"	f	file:	signature:(double x)
islow	driver-minion.c	/^	bool islow;$/;"	m	struct:minion_status	file:	access:public
isnan	compat/jansson-2.6/src/value.c	/^static JSON_INLINE int isnan(double x) { return x != x; }$/;"	f	file:	signature:(double x)
iso_frame_desc	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	struct usbfs_iso_packet_desc iso_frame_desc[0];$/;"	m	struct:usbfs_urb	typeref:struct:usbfs_urb::usbfs_iso_packet_desc	access:public
iso_packet_desc	compat/libusb-1.0/libusb/libusb.h	/^	struct libusb_iso_packet_descriptor iso_packet_desc$/;"	m	struct:libusb_transfer	typeref:struct:libusb_transfer::libusb_iso_packet_descriptor	access:public
iso_packet_offset	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	int iso_packet_offset;$/;"	m	struct:linux_transfer_priv	file:	access:public
iso_urbs	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^		struct usbfs_urb **iso_urbs;$/;"	m	union:linux_transfer_priv::__anon39	typeref:struct:linux_transfer_priv::__anon39::usbfs_urb	file:	access:public
isoc_framelist	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOUSBIsocFrame *isoc_framelist;$/;"	m	struct:darwin_transfer_priv	access:public
isokerr	driver-bflsc.c	/^static bool isokerr(int err, char *buf, int amount)$/;"	f	file:	signature:(int err, char *buf, int amount)
isprime	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int isprime(unsigned long number)$/;"	f	file:	signature:(unsigned long number)
iswritemode	api.c	/^	bool iswritemode;$/;"	m	struct:CMDS	file:	access:public
item	api-example.php	/^			$item = $items[0];$/;"	v
item	miner.php	/^			$item = $items[0];$/;"	v
item	miner.php	/^	foreach ($ans as $item => $row)$/;"	v
item	miner.php	/^ foreach ($list as $item => $values)$/;"	v
item	usbutils.c	/^	struct cg_usb_stats_item item[CMD_ERROR+1];$/;"	m	struct:cg_usb_stats_details	typeref:struct:cg_usb_stats_details::cg_usb_stats_item	file:	access:public
item_mem_count	klist.h	/^	int item_mem_count;	\/\/ how many item memory buffers have been allocated$/;"	m	struct:k_list	access:public
item_memory	klist.h	/^	void **item_memory;	\/\/ allocated item memory buffers$/;"	m	struct:k_list	access:public
items	api-example.php	/^			$items = explode(',', $obj);$/;"	v
items	miner.php	/^			$items = explode(',', $obj);$/;"	v
itemstats	api.c	/^static int itemstats(struct io_data *io_data, int i, char *id, struct cgminer_stats *stats, struct cgminer_pool_stats *pool_stats, struct api_data *extra, struct cgpu_info *cgpu, bool isjson)$/;"	f	file:	signature:(struct io_data *io_data, int i, char *id, struct cgminer_stats *stats, struct cgminer_pool_stats *pool_stats, struct api_data *extra, struct cgpu_info *cgpu, bool isjson)
itransfer	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  struct usbi_transfer *itransfer;$/;"	m	struct:darwin_msg_async_io_complete	typeref:struct:darwin_msg_async_io_complete::usbi_transfer	access:public
jedata	cgminer.c	/^} *jedata = NULL;$/;"	v	typeref:struct:JE	file:
job	driver-bitfury.h	/^	int *job; \/\/ Completed jobs we're told about$/;"	m	struct:bitfury_info	access:public
job_complete	driver-spondoolies-sp30-p.h	/^  uint8_t job_complete; $/;"	m	struct:__anon65	access:public
job_count	driver-blockerupter.h	/^	int job_count;$/;"	m	struct:board_info	access:public
job_id	driver-spondoolies-sp10.h	/^	int              job_id[MAX_NROLES];$/;"	m	struct:__anon51	access:public
job_id	driver-spondoolies-sp30.h	/^	int              job_id;$/;"	m	struct:__anon13	access:public
job_id	miner.h	/^	char 		*job_id;$/;"	m	struct:work	access:public
job_id	miner.h	/^	char *job_id;$/;"	m	struct:stratum_work	access:public
job_idcmp	driver-avalon2.c	/^static int job_idcmp(uint8_t *job_id, char *pool_job_id)$/;"	f	file:	signature:(uint8_t *job_id, char *pool_job_id)
job_idcmp	driver-hashratio.c	/^static int job_idcmp(uint8_t *job_id, char *pool_job_id)$/;"	f	file:	signature:(uint8_t *job_id, char *pool_job_id)
job_switched	driver-bitfury.h	/^	bool *job_switched;$/;"	m	struct:bitfury_info	access:public
jobj_binary	cgminer.c	/^static bool jobj_binary(const json_t *obj, const char *key,$/;"	f	file:	signature:(const json_t *obj, const char *key, void *buf, size_t buflen, bool required)
jobque	driver-klondike.c	/^	JOBQUE *jobque;$/;"	m	struct:klondike_info	file:	access:public
jobque	driver-klondike.c	/^typedef struct jobque {$/;"	s	file:
jobque::flushed	driver-klondike.c	/^	bool flushed;$/;"	m	struct:jobque	file:	access:public
jobque::last_update	driver-klondike.c	/^	struct timeval last_update;$/;"	m	struct:jobque	typeref:struct:jobque::timeval	file:	access:public
jobque::late_update_count	driver-klondike.c	/^	int late_update_count;$/;"	m	struct:jobque	file:	access:public
jobque::late_update_sequential	driver-klondike.c	/^	int late_update_sequential;$/;"	m	struct:jobque	file:	access:public
jobque::overheat	driver-klondike.c	/^	bool overheat;$/;"	m	struct:jobque	file:	access:public
jobque::workqc	driver-klondike.c	/^	int workqc;$/;"	m	struct:jobque	file:	access:public
jobs	driver-bflsc.h	/^	struct QueueJobStructure jobs[5];$/;"	m	struct:QueueJobPackStructure	typeref:struct:QueueJobPackStructure::QueueJobStructure	access:public
jobsInArray	driver-bflsc.h	/^	uint8_t jobsInArray;$/;"	m	struct:QueueJobPackStructure	access:public
jobsel	driver-bab.c	/^	uint32_t jobsel;$/;"	m	struct:bab_work_reply	file:	access:public
join	miner.php	/^					$join = array('L' => array(':POOL','POOL'), 'R' => array('ID'));$/;"	v
join	miner.php	/^					$join = array('L' => array('Name','ID'), 'R' => array('ID'));$/;"	v
join	miner.php	/^					$join = array('Name', 'ID');$/;"	v
joinable	api.c	/^	bool joinable;$/;"	m	struct:CMDS	file:	access:public
joinall	miner.php	/^function joinall($section1, $section2, $results)$/;"	f
joinfields	miner.php	/^function joinfields($section1, $section2, $join, $results)$/;"	f
joinlr	miner.php	/^function joinlr($section1, $section2, $join, $results)$/;"	f
joinsections	miner.php	/^function joinsections($sections, $results, $errors)$/;"	f
json	api-example.py	/^import json$/;"	i
json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon22	access:public
json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon23	access:public
json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon24	access:public
json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon25	access:public
json	compat/jansson-2.6/src/jansson_private.h	/^    json_t json;$/;"	m	struct:__anon26	access:public
json_array	compat/jansson-2.6/src/jansson.h	/^json_t *json_array(void);$/;"	p	signature:(void)
json_array	compat/jansson-2.6/src/value.c	/^json_t *json_array(void)$/;"	f	signature:(void)
json_array_append	compat/jansson-2.6/src/jansson.h	/^int json_array_append(json_t *array, json_t *value)$/;"	f	signature:(json_t *array, json_t *value)
json_array_append_new	compat/jansson-2.6/src/jansson.h	/^int json_array_append_new(json_t *array, json_t *value);$/;"	p	signature:(json_t *array, json_t *value)
json_array_append_new	compat/jansson-2.6/src/value.c	/^int json_array_append_new(json_t *json, json_t *value)$/;"	f	signature:(json_t *json, json_t *value)
json_array_clear	compat/jansson-2.6/src/jansson.h	/^int json_array_clear(json_t *array);$/;"	p	signature:(json_t *array)
json_array_clear	compat/jansson-2.6/src/value.c	/^int json_array_clear(json_t *json)$/;"	f	signature:(json_t *json)
json_array_copy	compat/jansson-2.6/src/value.c	/^static json_t *json_array_copy(json_t *array)$/;"	f	file:	signature:(json_t *array)
json_array_deep_copy	compat/jansson-2.6/src/value.c	/^static json_t *json_array_deep_copy(const json_t *array)$/;"	f	file:	signature:(const json_t *array)
json_array_equal	compat/jansson-2.6/src/value.c	/^static int json_array_equal(json_t *array1, json_t *array2)$/;"	f	file:	signature:(json_t *array1, json_t *array2)
json_array_extend	compat/jansson-2.6/src/jansson.h	/^int json_array_extend(json_t *array, json_t *other);$/;"	p	signature:(json_t *array, json_t *other)
json_array_extend	compat/jansson-2.6/src/value.c	/^int json_array_extend(json_t *json, json_t *other_json)$/;"	f	signature:(json_t *json, json_t *other_json)
json_array_foreach	compat/jansson-2.6/src/jansson.h	151;"	d
json_array_get	compat/jansson-2.6/src/jansson.h	/^json_t *json_array_get(const json_t *array, size_t index);$/;"	p	signature:(const json_t *array, size_t index)
json_array_get	compat/jansson-2.6/src/value.c	/^json_t *json_array_get(const json_t *json, size_t index)$/;"	f	signature:(const json_t *json, size_t index)
json_array_grow	compat/jansson-2.6/src/value.c	/^static json_t **json_array_grow(json_array_t *array,$/;"	f	file:	signature:(json_array_t *array, size_t amount, int copy)
json_array_insert	compat/jansson-2.6/src/jansson.h	/^int json_array_insert(json_t *array, size_t ind, json_t *value)$/;"	f	signature:(json_t *array, size_t ind, json_t *value)
json_array_insert_new	compat/jansson-2.6/src/jansson.h	/^int json_array_insert_new(json_t *array, size_t index, json_t *value);$/;"	p	signature:(json_t *array, size_t index, json_t *value)
json_array_insert_new	compat/jansson-2.6/src/value.c	/^int json_array_insert_new(json_t *json, size_t index, json_t *value)$/;"	f	signature:(json_t *json, size_t index, json_t *value)
json_array_remove	compat/jansson-2.6/src/jansson.h	/^int json_array_remove(json_t *array, size_t index);$/;"	p	signature:(json_t *array, size_t index)
json_array_remove	compat/jansson-2.6/src/value.c	/^int json_array_remove(json_t *json, size_t index)$/;"	f	signature:(json_t *json, size_t index)
json_array_set	compat/jansson-2.6/src/jansson.h	/^int json_array_set(json_t *array, size_t ind, json_t *value)$/;"	f	signature:(json_t *array, size_t ind, json_t *value)
json_array_set_new	compat/jansson-2.6/src/jansson.h	/^int json_array_set_new(json_t *array, size_t index, json_t *value);$/;"	p	signature:(json_t *array, size_t index, json_t *value)
json_array_set_new	compat/jansson-2.6/src/value.c	/^int json_array_set_new(json_t *json, size_t index, json_t *value)$/;"	f	signature:(json_t *json, size_t index, json_t *value)
json_array_size	compat/jansson-2.6/src/jansson.h	/^size_t json_array_size(const json_t *array);$/;"	p	signature:(const json_t *array)
json_array_size	compat/jansson-2.6/src/value.c	/^size_t json_array_size(const json_t *json)$/;"	f	signature:(const json_t *json)
json_array_string	util.c	/^static char *json_array_string(json_t *val, unsigned int entry)$/;"	f	file:	signature:(json_t *val, unsigned int entry)
json_array_t	compat/jansson-2.6/src/jansson_private.h	/^} json_array_t;$/;"	t	typeref:struct:__anon23
json_boolean	compat/jansson-2.6/src/jansson.h	91;"	d
json_copy	compat/jansson-2.6/src/jansson.h	/^json_t *json_copy(json_t *value);$/;"	p	signature:(json_t *value)
json_copy	compat/jansson-2.6/src/value.c	/^json_t *json_copy(json_t *json)$/;"	f	signature:(json_t *json)
json_decref	compat/jansson-2.6/src/jansson.h	/^void json_decref(json_t *json)$/;"	f	signature:(json_t *json)
json_deep_copy	compat/jansson-2.6/src/jansson.h	/^json_t *json_deep_copy(const json_t *value);$/;"	p	signature:(const json_t *value)
json_deep_copy	compat/jansson-2.6/src/value.c	/^json_t *json_deep_copy(const json_t *json)$/;"	f	signature:(const json_t *json)
json_delete	compat/jansson-2.6/src/jansson.h	/^void json_delete(json_t *json);$/;"	p	signature:(json_t *json)
json_delete	compat/jansson-2.6/src/value.c	/^void json_delete(json_t *json)$/;"	f	signature:(json_t *json)
json_delete_array	compat/jansson-2.6/src/value.c	/^static void json_delete_array(json_array_t *array)$/;"	f	file:	signature:(json_array_t *array)
json_delete_integer	compat/jansson-2.6/src/value.c	/^static void json_delete_integer(json_integer_t *integer)$/;"	f	file:	signature:(json_integer_t *integer)
json_delete_object	compat/jansson-2.6/src/value.c	/^static void json_delete_object(json_object_t *object)$/;"	f	file:	signature:(json_object_t *object)
json_delete_real	compat/jansson-2.6/src/value.c	/^static void json_delete_real(json_real_t *real)$/;"	f	file:	signature:(json_real_t *real)
json_delete_string	compat/jansson-2.6/src/value.c	/^static void json_delete_string(json_string_t *string)$/;"	f	file:	signature:(json_string_t *string)
json_dump_callback	compat/jansson-2.6/src/dump.c	/^int json_dump_callback(const json_t *json, json_dump_callback_t callback, void *data, size_t flags)$/;"	f	signature:(const json_t *json, json_dump_callback_t callback, void *data, size_t flags)
json_dump_callback	compat/jansson-2.6/src/jansson.h	/^int json_dump_callback(const json_t *json, json_dump_callback_t callback, void *data, size_t flags);$/;"	p	signature:(const json_t *json, json_dump_callback_t callback, void *data, size_t flags)
json_dump_callback_t	compat/jansson-2.6/src/jansson.h	/^typedef int (*json_dump_callback_t)(const char *buffer, size_t size, void *data);$/;"	t
json_dump_file	compat/jansson-2.6/src/dump.c	/^int json_dump_file(const json_t *json, const char *path, size_t flags)$/;"	f	signature:(const json_t *json, const char *path, size_t flags)
json_dump_file	compat/jansson-2.6/src/jansson.h	/^int json_dump_file(const json_t *json, const char *path, size_t flags);$/;"	p	signature:(const json_t *json, const char *path, size_t flags)
json_dumpf	compat/jansson-2.6/src/dump.c	/^int json_dumpf(const json_t *json, FILE *output, size_t flags)$/;"	f	signature:(const json_t *json, FILE *output, size_t flags)
json_dumpf	compat/jansson-2.6/src/jansson.h	/^int json_dumpf(const json_t *json, FILE *output, size_t flags);$/;"	p	signature:(const json_t *json, FILE *output, size_t flags)
json_dumps	compat/jansson-2.6/src/dump.c	/^char *json_dumps(const json_t *json, size_t flags)$/;"	f	signature:(const json_t *json, size_t flags)
json_dumps	compat/jansson-2.6/src/jansson.h	/^char *json_dumps(const json_t *json, size_t flags);$/;"	p	signature:(const json_t *json, size_t flags)
json_equal	compat/jansson-2.6/src/jansson.h	/^int json_equal(json_t *value1, json_t *value2);$/;"	p	signature:(json_t *value1, json_t *value2)
json_equal	compat/jansson-2.6/src/value.c	/^int json_equal(json_t *json1, json_t *json2)$/;"	f	signature:(json_t *json1, json_t *json2)
json_error_t	compat/jansson-2.6/src/jansson.h	/^} json_error_t;$/;"	t	typeref:struct:__anon28
json_escape	cgminer.c	/^static char *json_escape(char *str)$/;"	f	file:	signature:(char *str)
json_escape_free	cgminer.c	/^static void json_escape_free()$/;"	f	file:
json_false	compat/jansson-2.6/src/jansson.h	/^json_t *json_false(void);$/;"	p	signature:(void)
json_false	compat/jansson-2.6/src/value.c	/^json_t *json_false(void)$/;"	f	signature:(void)
json_free_t	compat/jansson-2.6/src/jansson.h	/^typedef void (*json_free_t)(void *);$/;"	t
json_incref	compat/jansson-2.6/src/jansson.h	/^json_t *json_incref(json_t *json)$/;"	f	signature:(json_t *json)
json_init	compat/jansson-2.6/src/value.c	/^static JSON_INLINE void json_init(json_t *json, json_type type)$/;"	f	file:	signature:(json_t *json, json_type type)
json_int_t	compat/jansson-2.6/src/jansson.h	/^typedef long json_int_t;$/;"	t
json_int_t	compat/jansson-2.6/src/jansson.h	/^typedef long long json_int_t;$/;"	t
json_integer	compat/jansson-2.6/src/jansson.h	/^json_t *json_integer(json_int_t value);$/;"	p	signature:(json_int_t value)
json_integer	compat/jansson-2.6/src/value.c	/^json_t *json_integer(json_int_t value)$/;"	f	signature:(json_int_t value)
json_integer_copy	compat/jansson-2.6/src/value.c	/^static json_t *json_integer_copy(const json_t *integer)$/;"	f	file:	signature:(const json_t *integer)
json_integer_equal	compat/jansson-2.6/src/value.c	/^static int json_integer_equal(json_t *integer1, json_t *integer2)$/;"	f	file:	signature:(json_t *integer1, json_t *integer2)
json_integer_set	compat/jansson-2.6/src/jansson.h	/^int json_integer_set(json_t *integer, json_int_t value);$/;"	p	signature:(json_t *integer, json_int_t value)
json_integer_set	compat/jansson-2.6/src/value.c	/^int json_integer_set(json_t *json, json_int_t value)$/;"	f	signature:(json_t *json, json_int_t value)
json_integer_t	compat/jansson-2.6/src/jansson_private.h	/^} json_integer_t;$/;"	t	typeref:struct:__anon26
json_integer_value	compat/jansson-2.6/src/jansson.h	/^json_int_t json_integer_value(const json_t *integer);$/;"	p	signature:(const json_t *integer)
json_integer_value	compat/jansson-2.6/src/value.c	/^json_int_t json_integer_value(const json_t *json)$/;"	f	signature:(const json_t *json)
json_is_array	compat/jansson-2.6/src/jansson.h	71;"	d
json_is_boolean	compat/jansson-2.6/src/jansson.h	78;"	d
json_is_false	compat/jansson-2.6/src/jansson.h	77;"	d
json_is_integer	compat/jansson-2.6/src/jansson.h	73;"	d
json_is_null	compat/jansson-2.6/src/jansson.h	79;"	d
json_is_number	compat/jansson-2.6/src/jansson.h	75;"	d
json_is_object	compat/jansson-2.6/src/jansson.h	70;"	d
json_is_real	compat/jansson-2.6/src/jansson.h	74;"	d
json_is_string	compat/jansson-2.6/src/jansson.h	72;"	d
json_is_true	compat/jansson-2.6/src/jansson.h	76;"	d
json_load_callback	compat/jansson-2.6/src/jansson.h	/^json_t *json_load_callback(json_load_callback_t callback, void *data, size_t flags, json_error_t *error);$/;"	p	signature:(json_load_callback_t callback, void *data, size_t flags, json_error_t *error)
json_load_callback	compat/jansson-2.6/src/load.c	/^json_t *json_load_callback(json_load_callback_t callback, void *arg, size_t flags, json_error_t *error)$/;"	f	signature:(json_load_callback_t callback, void *arg, size_t flags, json_error_t *error)
json_load_callback_t	compat/jansson-2.6/src/jansson.h	/^typedef size_t (*json_load_callback_t)(void *buffer, size_t buflen, void *data);$/;"	t
json_load_file	compat/jansson-2.6/src/jansson.h	/^json_t *json_load_file(const char *path, size_t flags, json_error_t *error);$/;"	p	signature:(const char *path, size_t flags, json_error_t *error)
json_load_file	compat/jansson-2.6/src/load.c	/^json_t *json_load_file(const char *path, size_t flags, json_error_t *error)$/;"	f	signature:(const char *path, size_t flags, json_error_t *error)
json_loadb	compat/jansson-2.6/src/jansson.h	/^json_t *json_loadb(const char *buffer, size_t buflen, size_t flags, json_error_t *error);$/;"	p	signature:(const char *buffer, size_t buflen, size_t flags, json_error_t *error)
json_loadb	compat/jansson-2.6/src/load.c	/^json_t *json_loadb(const char *buffer, size_t buflen, size_t flags, json_error_t *error)$/;"	f	signature:(const char *buffer, size_t buflen, size_t flags, json_error_t *error)
json_loadf	compat/jansson-2.6/src/jansson.h	/^json_t *json_loadf(FILE *input, size_t flags, json_error_t *error);$/;"	p	signature:(FILE *input, size_t flags, json_error_t *error)
json_loadf	compat/jansson-2.6/src/load.c	/^json_t *json_loadf(FILE *input, size_t flags, json_error_t *error)$/;"	f	signature:(FILE *input, size_t flags, json_error_t *error)
json_loads	compat/jansson-2.6/src/jansson.h	/^json_t *json_loads(const char *input, size_t flags, json_error_t *error);$/;"	p	signature:(const char *input, size_t flags, json_error_t *error)
json_loads	compat/jansson-2.6/src/load.c	/^json_t *json_loads(const char *string, size_t flags, json_error_t *error)$/;"	f	signature:(const char *string, size_t flags, json_error_t *error)
json_malloc_t	compat/jansson-2.6/src/jansson.h	/^typedef void *(*json_malloc_t)(size_t);$/;"	t
json_null	compat/jansson-2.6/src/jansson.h	/^json_t *json_null(void);$/;"	p	signature:(void)
json_null	compat/jansson-2.6/src/value.c	/^json_t *json_null(void)$/;"	f	signature:(void)
json_number_value	compat/jansson-2.6/src/jansson.h	/^double json_number_value(const json_t *json);$/;"	p	signature:(const json_t *json)
json_number_value	compat/jansson-2.6/src/value.c	/^double json_number_value(const json_t *json)$/;"	f	signature:(const json_t *json)
json_object	compat/jansson-2.6/src/jansson.h	/^json_t *json_object(void);$/;"	p	signature:(void)
json_object	compat/jansson-2.6/src/value.c	/^json_t *json_object(void)$/;"	f	signature:(void)
json_object_clear	compat/jansson-2.6/src/jansson.h	/^int json_object_clear(json_t *object);$/;"	p	signature:(json_t *object)
json_object_clear	compat/jansson-2.6/src/value.c	/^int json_object_clear(json_t *json)$/;"	f	signature:(json_t *json)
json_object_copy	compat/jansson-2.6/src/value.c	/^static json_t *json_object_copy(json_t *object)$/;"	f	file:	signature:(json_t *object)
json_object_deep_copy	compat/jansson-2.6/src/value.c	/^static json_t *json_object_deep_copy(const json_t *object)$/;"	f	file:	signature:(const json_t *object)
json_object_del	compat/jansson-2.6/src/jansson.h	/^int json_object_del(json_t *object, const char *key);$/;"	p	signature:(json_t *object, const char *key)
json_object_del	compat/jansson-2.6/src/value.c	/^int json_object_del(json_t *json, const char *key)$/;"	f	signature:(json_t *json, const char *key)
json_object_equal	compat/jansson-2.6/src/value.c	/^static int json_object_equal(json_t *object1, json_t *object2)$/;"	f	file:	signature:(json_t *object1, json_t *object2)
json_object_foreach	compat/jansson-2.6/src/jansson.h	146;"	d
json_object_get	compat/jansson-2.6/src/jansson.h	/^json_t *json_object_get(const json_t *object, const char *key);$/;"	p	signature:(const json_t *object, const char *key)
json_object_get	compat/jansson-2.6/src/value.c	/^json_t *json_object_get(const json_t *json, const char *key)$/;"	f	signature:(const json_t *json, const char *key)
json_object_iter	compat/jansson-2.6/src/jansson.h	/^void *json_object_iter(json_t *object);$/;"	p	signature:(json_t *object)
json_object_iter	compat/jansson-2.6/src/value.c	/^void *json_object_iter(json_t *json)$/;"	f	signature:(json_t *json)
json_object_iter_at	compat/jansson-2.6/src/jansson.h	/^void *json_object_iter_at(json_t *object, const char *key);$/;"	p	signature:(json_t *object, const char *key)
json_object_iter_at	compat/jansson-2.6/src/value.c	/^void *json_object_iter_at(json_t *json, const char *key)$/;"	f	signature:(json_t *json, const char *key)
json_object_iter_key	compat/jansson-2.6/src/jansson.h	/^const char *json_object_iter_key(void *iter);$/;"	p	signature:(void *iter)
json_object_iter_key	compat/jansson-2.6/src/value.c	/^const char *json_object_iter_key(void *iter)$/;"	f	signature:(void *iter)
json_object_iter_next	compat/jansson-2.6/src/jansson.h	/^void *json_object_iter_next(json_t *object, void *iter);$/;"	p	signature:(json_t *object, void *iter)
json_object_iter_next	compat/jansson-2.6/src/value.c	/^void *json_object_iter_next(json_t *json, void *iter)$/;"	f	signature:(json_t *json, void *iter)
json_object_iter_set	compat/jansson-2.6/src/jansson.h	/^int json_object_iter_set(json_t *object, void *iter, json_t *value)$/;"	f	signature:(json_t *object, void *iter, json_t *value)
json_object_iter_set_new	compat/jansson-2.6/src/jansson.h	/^int json_object_iter_set_new(json_t *object, void *iter, json_t *value);$/;"	p	signature:(json_t *object, void *iter, json_t *value)
json_object_iter_set_new	compat/jansson-2.6/src/value.c	/^int json_object_iter_set_new(json_t *json, void *iter, json_t *value)$/;"	f	signature:(json_t *json, void *iter, json_t *value)
json_object_iter_value	compat/jansson-2.6/src/jansson.h	/^json_t *json_object_iter_value(void *iter);$/;"	p	signature:(void *iter)
json_object_iter_value	compat/jansson-2.6/src/value.c	/^json_t *json_object_iter_value(void *iter)$/;"	f	signature:(void *iter)
json_object_key_to_iter	compat/jansson-2.6/src/jansson.h	/^void *json_object_key_to_iter(const char *key);$/;"	p	signature:(const char *key)
json_object_key_to_iter	compat/jansson-2.6/src/value.c	/^void *json_object_key_to_iter(const char *key)$/;"	f	signature:(const char *key)
json_object_set	compat/jansson-2.6/src/jansson.h	/^int json_object_set(json_t *object, const char *key, json_t *value)$/;"	f	signature:(json_t *object, const char *key, json_t *value)
json_object_set_new	compat/jansson-2.6/src/jansson.h	/^int json_object_set_new(json_t *object, const char *key, json_t *value);$/;"	p	signature:(json_t *object, const char *key, json_t *value)
json_object_set_new	compat/jansson-2.6/src/value.c	/^int json_object_set_new(json_t *json, const char *key, json_t *value)$/;"	f	signature:(json_t *json, const char *key, json_t *value)
json_object_set_new_nocheck	compat/jansson-2.6/src/jansson.h	/^int json_object_set_new_nocheck(json_t *object, const char *key, json_t *value);$/;"	p	signature:(json_t *object, const char *key, json_t *value)
json_object_set_new_nocheck	compat/jansson-2.6/src/value.c	/^int json_object_set_new_nocheck(json_t *json, const char *key, json_t *value)$/;"	f	signature:(json_t *json, const char *key, json_t *value)
json_object_set_nocheck	compat/jansson-2.6/src/jansson.h	/^int json_object_set_nocheck(json_t *object, const char *key, json_t *value)$/;"	f	signature:(json_t *object, const char *key, json_t *value)
json_object_size	compat/jansson-2.6/src/jansson.h	/^size_t json_object_size(const json_t *object);$/;"	p	signature:(const json_t *object)
json_object_size	compat/jansson-2.6/src/value.c	/^size_t json_object_size(const json_t *json)$/;"	f	signature:(const json_t *json)
json_object_t	compat/jansson-2.6/src/jansson_private.h	/^} json_object_t;$/;"	t	typeref:struct:__anon22
json_object_update	compat/jansson-2.6/src/jansson.h	/^int json_object_update(json_t *object, json_t *other);$/;"	p	signature:(json_t *object, json_t *other)
json_object_update	compat/jansson-2.6/src/value.c	/^int json_object_update(json_t *object, json_t *other)$/;"	f	signature:(json_t *object, json_t *other)
json_object_update_existing	compat/jansson-2.6/src/jansson.h	/^int json_object_update_existing(json_t *object, json_t *other);$/;"	p	signature:(json_t *object, json_t *other)
json_object_update_existing	compat/jansson-2.6/src/value.c	/^int json_object_update_existing(json_t *object, json_t *other)$/;"	f	signature:(json_t *object, json_t *other)
json_object_update_missing	compat/jansson-2.6/src/jansson.h	/^int json_object_update_missing(json_t *object, json_t *other);$/;"	p	signature:(json_t *object, json_t *other)
json_object_update_missing	compat/jansson-2.6/src/value.c	/^int json_object_update_missing(json_t *object, json_t *other)$/;"	f	signature:(json_t *object, json_t *other)
json_pack	compat/jansson-2.6/src/jansson.h	/^json_t *json_pack(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
json_pack	compat/jansson-2.6/src/pack_unpack.c	/^json_t *json_pack(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
json_pack_ex	compat/jansson-2.6/src/jansson.h	/^json_t *json_pack_ex(json_error_t *error, size_t flags, const char *fmt, ...);$/;"	p	signature:(json_error_t *error, size_t flags, const char *fmt, ...)
json_pack_ex	compat/jansson-2.6/src/pack_unpack.c	/^json_t *json_pack_ex(json_error_t *error, size_t flags, const char *fmt, ...)$/;"	f	signature:(json_error_t *error, size_t flags, const char *fmt, ...)
json_real	compat/jansson-2.6/src/jansson.h	/^json_t *json_real(double value);$/;"	p	signature:(double value)
json_real	compat/jansson-2.6/src/value.c	/^json_t *json_real(double value)$/;"	f	signature:(double value)
json_real_copy	compat/jansson-2.6/src/value.c	/^static json_t *json_real_copy(const json_t *real)$/;"	f	file:	signature:(const json_t *real)
json_real_equal	compat/jansson-2.6/src/value.c	/^static int json_real_equal(json_t *real1, json_t *real2)$/;"	f	file:	signature:(json_t *real1, json_t *real2)
json_real_set	compat/jansson-2.6/src/jansson.h	/^int json_real_set(json_t *real, double value);$/;"	p	signature:(json_t *real, double value)
json_real_set	compat/jansson-2.6/src/value.c	/^int json_real_set(json_t *json, double value)$/;"	f	signature:(json_t *json, double value)
json_real_t	compat/jansson-2.6/src/jansson_private.h	/^} json_real_t;$/;"	t	typeref:struct:__anon25
json_real_value	compat/jansson-2.6/src/jansson.h	/^double json_real_value(const json_t *real);$/;"	p	signature:(const json_t *real)
json_real_value	compat/jansson-2.6/src/value.c	/^double json_real_value(const json_t *json)$/;"	f	signature:(const json_t *json)
json_rpc_call	cgminer.c	2701;"	d	file:
json_rpc_call	miner.h	/^extern json_t *json_rpc_call(CURL *curl, const char *url, const char *userpass,$/;"	p	signature:(CURL *curl, const char *url, const char *userpass, const char *rpc_req, bool, bool, int *, struct pool *pool, bool)
json_rpc_call	util.c	/^json_t *json_rpc_call(CURL *curl, const char *url,$/;"	f	signature:(CURL *curl, const char *url, const char *userpass, const char *rpc_req, bool probe, bool longpoll, int *rolltime, struct pool *pool, bool share)
json_set_alloc_funcs	compat/jansson-2.6/src/jansson.h	/^void json_set_alloc_funcs(json_malloc_t malloc_fn, json_free_t free_fn);$/;"	p	signature:(json_malloc_t malloc_fn, json_free_t free_fn)
json_set_alloc_funcs	compat/jansson-2.6/src/memory.c	/^void json_set_alloc_funcs(json_malloc_t malloc_fn, json_free_t free_fn)$/;"	f	signature:(json_malloc_t malloc_fn, json_free_t free_fn)
json_string	compat/jansson-2.6/src/jansson.h	/^json_t *json_string(const char *value);$/;"	p	signature:(const char *value)
json_string	compat/jansson-2.6/src/value.c	/^json_t *json_string(const char *value)$/;"	f	signature:(const char *value)
json_string_copy	compat/jansson-2.6/src/value.c	/^static json_t *json_string_copy(const json_t *string)$/;"	f	file:	signature:(const json_t *string)
json_string_equal	compat/jansson-2.6/src/value.c	/^static int json_string_equal(json_t *string1, json_t *string2)$/;"	f	file:	signature:(json_t *string1, json_t *string2)
json_string_nocheck	compat/jansson-2.6/src/jansson.h	/^json_t *json_string_nocheck(const char *value);$/;"	p	signature:(const char *value)
json_string_nocheck	compat/jansson-2.6/src/value.c	/^json_t *json_string_nocheck(const char *value)$/;"	f	signature:(const char *value)
json_string_set	compat/jansson-2.6/src/jansson.h	/^int json_string_set(json_t *string, const char *value);$/;"	p	signature:(json_t *string, const char *value)
json_string_set	compat/jansson-2.6/src/value.c	/^int json_string_set(json_t *json, const char *value)$/;"	f	signature:(json_t *json, const char *value)
json_string_set_nocheck	compat/jansson-2.6/src/jansson.h	/^int json_string_set_nocheck(json_t *string, const char *value);$/;"	p	signature:(json_t *string, const char *value)
json_string_set_nocheck	compat/jansson-2.6/src/value.c	/^int json_string_set_nocheck(json_t *json, const char *value)$/;"	f	signature:(json_t *json, const char *value)
json_string_t	compat/jansson-2.6/src/jansson_private.h	/^} json_string_t;$/;"	t	typeref:struct:__anon24
json_string_value	compat/jansson-2.6/src/jansson.h	/^const char *json_string_value(const json_t *string);$/;"	p	signature:(const json_t *string)
json_string_value	compat/jansson-2.6/src/value.c	/^const char *json_string_value(const json_t *json)$/;"	f	signature:(const json_t *json)
json_strtoint	compat/jansson-2.6/src/load.c	464;"	d	file:
json_strtoint	compat/jansson-2.6/src/load.c	466;"	d	file:
json_strtoint	compat/jansson-2.6/src/load.c	469;"	d	file:
json_t	compat/jansson-2.6/src/jansson.h	/^typedef struct json_t {$/;"	s
json_t	compat/jansson-2.6/src/jansson.h	/^} json_t;$/;"	t	typeref:struct:json_t
json_t::refcount	compat/jansson-2.6/src/jansson.h	/^    size_t refcount;$/;"	m	struct:json_t	access:public
json_t::type	compat/jansson-2.6/src/jansson.h	/^    json_type type;$/;"	m	struct:json_t	access:public
json_to_array	compat/jansson-2.6/src/jansson_private.h	65;"	d
json_to_integer	compat/jansson-2.6/src/jansson_private.h	68;"	d
json_to_object	compat/jansson-2.6/src/jansson_private.h	64;"	d
json_to_real	compat/jansson-2.6/src/jansson_private.h	67;"	d
json_to_string	compat/jansson-2.6/src/jansson_private.h	66;"	d
json_true	compat/jansson-2.6/src/jansson.h	/^json_t *json_true(void);$/;"	p	signature:(void)
json_true	compat/jansson-2.6/src/value.c	/^json_t *json_true(void)$/;"	f	signature:(void)
json_type	compat/jansson-2.6/src/jansson.h	/^} json_type;$/;"	t	typeref:enum:__anon27
json_typeof	compat/jansson-2.6/src/jansson.h	69;"	d
json_unpack	compat/jansson-2.6/src/jansson.h	/^int json_unpack(json_t *root, const char *fmt, ...);$/;"	p	signature:(json_t *root, const char *fmt, ...)
json_unpack	compat/jansson-2.6/src/pack_unpack.c	/^int json_unpack(json_t *root, const char *fmt, ...)$/;"	f	signature:(json_t *root, const char *fmt, ...)
json_unpack_ex	compat/jansson-2.6/src/jansson.h	/^int json_unpack_ex(json_t *root, json_error_t *error, size_t flags, const char *fmt, ...);$/;"	p	signature:(json_t *root, json_error_t *error, size_t flags, const char *fmt, ...)
json_unpack_ex	compat/jansson-2.6/src/pack_unpack.c	/^int json_unpack_ex(json_t *root, json_error_t *error, size_t flags, const char *fmt, ...)$/;"	f	signature:(json_t *root, json_error_t *error, size_t flags, const char *fmt, ...)
json_vpack_ex	compat/jansson-2.6/src/jansson.h	/^json_t *json_vpack_ex(json_error_t *error, size_t flags, const char *fmt, va_list ap);$/;"	p	signature:(json_error_t *error, size_t flags, const char *fmt, va_list ap)
json_vpack_ex	compat/jansson-2.6/src/pack_unpack.c	/^json_t *json_vpack_ex(json_error_t *error, size_t flags,$/;"	f	signature:(json_error_t *error, size_t flags, const char *fmt, va_list ap)
json_vunpack_ex	compat/jansson-2.6/src/jansson.h	/^int json_vunpack_ex(json_t *root, json_error_t *error, size_t flags, const char *fmt, va_list ap);$/;"	p	signature:(json_t *root, json_error_t *error, size_t flags, const char *fmt, va_list ap)
json_vunpack_ex	compat/jansson-2.6/src/pack_unpack.c	/^int json_vunpack_ex(json_t *root, json_error_t *error, size_t flags,$/;"	f	signature:(json_t *root, json_error_t *error, size_t flags, const char *fmt, va_list ap)
json_web_config	miner.h	/^extern json_t *json_web_config(const char *url);$/;"	p	signature:(const char *url)
json_web_config	util.c	/^json_t *json_web_config(const char *url)$/;"	f	signature:(const char *url)
jsonp_dtostr	compat/jansson-2.6/src/jansson_private.h	/^int jsonp_dtostr(char *buffer, size_t size, double value);$/;"	p	signature:(char *buffer, size_t size, double value)
jsonp_dtostr	compat/jansson-2.6/src/strconv.c	/^int jsonp_dtostr(char *buffer, size_t size, double value)$/;"	f	signature:(char *buffer, size_t size, double value)
jsonp_error_init	compat/jansson-2.6/src/error.c	/^void jsonp_error_init(json_error_t *error, const char *source)$/;"	f	signature:(json_error_t *error, const char *source)
jsonp_error_init	compat/jansson-2.6/src/jansson_private.h	/^void jsonp_error_init(json_error_t *error, const char *source);$/;"	p	signature:(json_error_t *error, const char *source)
jsonp_error_set	compat/jansson-2.6/src/error.c	/^void jsonp_error_set(json_error_t *error, int line, int column,$/;"	f	signature:(json_error_t *error, int line, int column, size_t position, const char *msg, ...)
jsonp_error_set	compat/jansson-2.6/src/jansson_private.h	/^void jsonp_error_set(json_error_t *error, int line, int column,$/;"	p	signature:(json_error_t *error, int line, int column, size_t position, const char *msg, ...)
jsonp_error_set_source	compat/jansson-2.6/src/error.c	/^void jsonp_error_set_source(json_error_t *error, const char *source)$/;"	f	signature:(json_error_t *error, const char *source)
jsonp_error_set_source	compat/jansson-2.6/src/jansson_private.h	/^void jsonp_error_set_source(json_error_t *error, const char *source);$/;"	p	signature:(json_error_t *error, const char *source)
jsonp_error_vset	compat/jansson-2.6/src/error.c	/^void jsonp_error_vset(json_error_t *error, int line, int column,$/;"	f	signature:(json_error_t *error, int line, int column, size_t position, const char *msg, va_list ap)
jsonp_error_vset	compat/jansson-2.6/src/jansson_private.h	/^void jsonp_error_vset(json_error_t *error, int line, int column,$/;"	p	signature:(json_error_t *error, int line, int column, size_t position, const char *msg, va_list ap)
jsonp_free	compat/jansson-2.6/src/jansson_private.h	/^void jsonp_free(void *ptr);$/;"	p	signature:(void *ptr)
jsonp_free	compat/jansson-2.6/src/memory.c	/^void jsonp_free(void *ptr)$/;"	f	signature:(void *ptr)
jsonp_malloc	compat/jansson-2.6/src/jansson_private.h	/^void* jsonp_malloc(size_t size);$/;"	p	signature:(size_t size)
jsonp_malloc	compat/jansson-2.6/src/memory.c	/^void *jsonp_malloc(size_t size)$/;"	f	signature:(size_t size)
jsonp_strdup	compat/jansson-2.6/src/jansson_private.h	/^char *jsonp_strdup(const char *str);$/;"	p	signature:(const char *str)
jsonp_strdup	compat/jansson-2.6/src/memory.c	/^char *jsonp_strdup(const char *str)$/;"	f	signature:(const char *str)
jsonp_strndup	compat/jansson-2.6/src/jansson_private.h	/^char *jsonp_strndup(const char *str, size_t length);$/;"	p	signature:(const char *str, size_t length)
jsonp_strtod	compat/jansson-2.6/src/jansson_private.h	/^int jsonp_strtod(strbuffer_t *strbuffer, double *out);$/;"	p	signature:(strbuffer_t *strbuffer, double *out)
jsonp_strtod	compat/jansson-2.6/src/strconv.c	/^int jsonp_strtod(strbuffer_t *strbuffer, double *out)$/;"	f	signature:(strbuffer_t *strbuffer, double *out)
junk	driver-bitfury.h	/^	unsigned int junk[8];$/;"	m	struct:bitfury_payload	access:public
justnames	miner.php	/^function showhead($cmd, $values, $justnames = false)$/;"	v
k_add_head	klist.h	74;"	d
k_add_tail	klist.h	78;"	d
k_alloc_items	klist.c	/^static void k_alloc_items(K_LIST *list, KLIST_FFL_ARGS)$/;"	f	file:	signature:(K_LIST *list, KLIST_FFL_ARGS)
k_free_head	klist.h	76;"	d
k_free_list	klist.h	90;"	d
k_free_store	klist.h	92;"	d
k_insert_after	klist.h	82;"	d
k_insert_before	klist.h	80;"	d
k_item	klist.h	/^typedef struct k_item {$/;"	s
k_item::data	klist.h	/^	void *data;$/;"	m	struct:k_item	access:public
k_item::name	klist.h	/^	const char *name;$/;"	m	struct:k_item	access:public
k_item::next	klist.h	/^	struct k_item *next;$/;"	m	struct:k_item	typeref:struct:k_item::k_item	access:public
k_item::prev	klist.h	/^	struct k_item *prev;$/;"	m	struct:k_item	typeref:struct:k_item::k_item	access:public
k_list	klist.h	/^typedef struct k_list {$/;"	s
k_list::allocate	klist.h	/^	int allocate;		\/\/ number to intially allocate and each time we run out$/;"	m	struct:k_list	access:public
k_list::count	klist.h	/^	int count;		\/\/ in this list$/;"	m	struct:k_list	access:public
k_list::count_up	klist.h	/^	int count_up;		\/\/ incremented every time one is added$/;"	m	struct:k_list	access:public
k_list::data_mem_count	klist.h	/^	int data_mem_count;	\/\/ how many item data memory buffers have been allocated$/;"	m	struct:k_list	access:public
k_list::data_memory	klist.h	/^	void **data_memory;	\/\/ allocated item data memory buffers$/;"	m	struct:k_list	access:public
k_list::do_tail	klist.h	/^	bool do_tail;		\/\/ track the tail?$/;"	m	struct:k_list	access:public
k_list::head	klist.h	/^	struct k_item *head;$/;"	m	struct:k_list	typeref:struct:k_list::k_item	access:public
k_list::is_store	klist.h	/^	bool is_store;$/;"	m	struct:k_list	access:public
k_list::item_mem_count	klist.h	/^	int item_mem_count;	\/\/ how many item memory buffers have been allocated$/;"	m	struct:k_list	access:public
k_list::item_memory	klist.h	/^	void **item_memory;	\/\/ allocated item memory buffers$/;"	m	struct:k_list	access:public
k_list::limit	klist.h	/^	int limit;		\/\/ total limit - 0 means unlimited$/;"	m	struct:k_list	access:public
k_list::lock	klist.h	/^	cglock_t *lock;$/;"	m	struct:k_list	access:public
k_list::name	klist.h	/^	const char *name;$/;"	m	struct:k_list	access:public
k_list::siz	klist.h	/^	size_t siz;		\/\/ item data size$/;"	m	struct:k_list	access:public
k_list::tail	klist.h	/^	struct k_item *tail;$/;"	m	struct:k_list	typeref:struct:k_list::k_item	access:public
k_list::total	klist.h	/^	int total;		\/\/ total allocated$/;"	m	struct:k_list	access:public
k_list_transfer_to_head	klist.h	86;"	d
k_list_transfer_to_tail	klist.h	88;"	d
k_new_list	klist.h	66;"	d
k_new_store	klist.c	/^K_STORE *k_new_store(K_LIST *list)$/;"	f	signature:(K_LIST *list)
k_new_store	klist.h	/^extern K_STORE *k_new_store(K_LIST *list);$/;"	p	signature:(K_LIST *list)
k_unlink_head	klist.h	68;"	d
k_unlink_head_zero	klist.h	70;"	d
k_unlink_item	klist.h	84;"	d
k_unlink_tail	klist.h	72;"	d
kanogenext	miner.php	/^$kanogenext = array($/;"	v
kanogenpage	miner.php	/^$kanogenpage = array($/;"	v
kanogensum	miner.php	/^$kanogensum = array($/;"	v
keep	miner.php	/^							$keep = false;$/;"	v
keep	miner.php	/^					$keep = true;$/;"	v
keep_curlalive	util.c	/^static void keep_curlalive(CURL *curl)$/;"	f	file:	signature:(CURL *curl)
keep_sockalive	util.c	/^static void keep_sockalive(SOCKETTYPE fd)$/;"	f	file:	signature:(SOCKETTYPE fd)
kernel_driver_active	compat/libusb-1.0/libusb/libusbi.h	/^	int (*kernel_driver_active)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
kernel_version_ge	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int kernel_version_ge(int major, int minor, int sublevel)$/;"	f	file:	signature:(int major, int minor, int sublevel)
key	compat/jansson-2.6/src/dump.c	/^    const char *key;$/;"	m	struct:object_key	file:	access:public
key	compat/jansson-2.6/src/hashtable.h	/^    char key[1];$/;"	m	struct:hashtable_pair	access:public
key	driver-drillbit.c	/^	char key[9];$/;"	m	struct:__anon7	file:	access:public
key	miner.php	/^			$key = $row['sec'];$/;"	v
key	uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle	access:public
keylen	uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle	access:public
kill_mining	cgminer.c	/^static void kill_mining(void)$/;"	f	file:	signature:(void)
kill_timeout	cgminer.c	/^static void kill_timeout(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
kill_work	cgminer.c	/^void kill_work(void)$/;"	f	signature:(void)
kill_work	miner.h	/^extern void kill_work(void);$/;"	p	signature:(void)
killall_thread	cgminer.c	/^static void *killall_thread(void __maybe_unused *arg)$/;"	f	file:	signature:(void __maybe_unused *arg)
kli0_epinfos	usbutils.c	/^static struct usb_epinfo kli0_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
kli1_epinfos	usbutils.c	/^static struct usb_epinfo kli1_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
kli_ints	usbutils.c	/^static struct usb_intinfo kli_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
kline	driver-klondike.c	/^	KLINE kline;$/;"	m	struct:klist	file:	access:public
kline	driver-klondike.c	/^typedef struct kline {$/;"	s	file:
kline::__anon12::cfg	driver-klondike.c	/^		WORKCFG cfg;$/;"	m	union:kline::__anon12	file:	access:public
kline::__anon12::hd	driver-klondike.c	/^		HEADER hd;$/;"	m	union:kline::__anon12	file:	access:public
kline::__anon12::id	driver-klondike.c	/^		IDENTITY id;$/;"	m	union:kline::__anon12	file:	access:public
kline::__anon12::wr	driver-klondike.c	/^		WORKRESULT wr;$/;"	m	union:kline::__anon12	file:	access:public
kline::__anon12::ws	driver-klondike.c	/^		WORKSTATUS ws;$/;"	m	union:kline::__anon12	file:	access:public
kline::__anon12::wt	driver-klondike.c	/^		WORKTASK wt;$/;"	m	union:kline::__anon12	file:	access:public
kline_count	driver-klondike.c	/^	int kline_count;$/;"	m	struct:klondike_info	file:	access:public
klist	driver-klondike.c	/^typedef struct klist {$/;"	s	file:
klist::block_seq	driver-klondike.c	/^	int block_seq;$/;"	m	struct:klist	file:	access:public
klist::kline	driver-klondike.c	/^	KLINE kline;$/;"	m	struct:klist	file:	access:public
klist::next	driver-klondike.c	/^	struct klist *next;$/;"	m	struct:klist	typeref:struct:klist::klist	file:	access:public
klist::prev	driver-klondike.c	/^	struct klist *prev;$/;"	m	struct:klist	typeref:struct:klist::klist	file:	access:public
klist::ready	driver-klondike.c	/^	bool ready;$/;"	m	struct:klist	file:	access:public
klist::tv_when	driver-klondike.c	/^	struct timeval tv_when;$/;"	m	struct:klist	typeref:struct:klist::timeval	file:	access:public
klist::working	driver-klondike.c	/^	bool working;$/;"	m	struct:klist	file:	access:public
klist_lock	driver-klondike.c	/^	cglock_t klist_lock;$/;"	m	struct:klondike_info	file:	access:public
kln_disable	driver-klondike.c	/^static void kln_disable(struct cgpu_info *klncgpu, int dev, bool all)$/;"	f	file:	signature:(struct cgpu_info *klncgpu, int dev, bool all)
kln_enable	driver-klondike.c	/^static bool kln_enable(struct cgpu_info *klncgpu)$/;"	f	file:	signature:(struct cgpu_info *klncgpu)
kln_epinfos	usbutils.c	/^static struct usb_epinfo kln_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
kln_ints	usbutils.c	/^static struct usb_intinfo kln_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
klondike_api_stats	driver-klondike.c	/^static struct api_data *klondike_api_stats(struct cgpu_info *klncgpu)$/;"	f	file:	signature:(struct cgpu_info *klncgpu)
klondike_cfg	driver-klondike.c	/^typedef struct klondike_cfg {$/;"	s	file:
klondike_cfg::cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_cfg	file:	access:public
klondike_cfg::dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_cfg	file:	access:public
klondike_cfg::fantarget	driver-klondike.c	/^	uint8_t fantarget;$/;"	m	struct:klondike_cfg	file:	access:public
klondike_cfg::hashclock	driver-klondike.c	/^	uint8_t hashclock[2];$/;"	m	struct:klondike_cfg	file:	access:public
klondike_cfg::pad2	driver-klondike.c	/^	uint8_t pad2;$/;"	m	struct:klondike_cfg	file:	access:public
klondike_cfg::tempcritical	driver-klondike.c	/^	uint8_t tempcritical;$/;"	m	struct:klondike_cfg	file:	access:public
klondike_cfg::temptarget	driver-klondike.c	/^	uint8_t temptarget;$/;"	m	struct:klondike_cfg	file:	access:public
klondike_check_nonce	driver-klondike.c	/^static void klondike_check_nonce(struct cgpu_info *klncgpu, KLIST *kitem)$/;"	f	file:	signature:(struct cgpu_info *klncgpu, KLIST *kitem)
klondike_detect	driver-klondike.c	/^static void klondike_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
klondike_detect_one	driver-klondike.c	/^static struct cgpu_info *klondike_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
klondike_drv	driver-klondike.c	/^struct device_drv klondike_drv = {$/;"	v	typeref:struct:device_drv
klondike_drv	driver-klondike.c	/^struct device_drv klondike_drv;$/;"	v	typeref:struct:device_drv
klondike_flush_work	driver-klondike.c	/^static void klondike_flush_work(struct cgpu_info *klncgpu)$/;"	f	file:	signature:(struct cgpu_info *klncgpu)
klondike_get_replies	driver-klondike.c	/^static void *klondike_get_replies(void *userdata)$/;"	f	file:	signature:(void *userdata)
klondike_get_stats	driver-klondike.c	/^static bool klondike_get_stats(struct cgpu_info *klncgpu)$/;"	f	file:	signature:(struct cgpu_info *klncgpu)
klondike_header	driver-klondike.c	/^typedef struct klondike_header {$/;"	s	file:
klondike_header::buf	driver-klondike.c	/^	uint8_t buf[REPLY_SIZE-2];$/;"	m	struct:klondike_header	file:	access:public
klondike_header::cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_header	file:	access:public
klondike_header::dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_header	file:	access:public
klondike_id	driver-klondike.c	/^typedef struct klondike_id {$/;"	s	file:
klondike_id::cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_id	file:	access:public
klondike_id::dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_id	file:	access:public
klondike_id::product	driver-klondike.c	/^	uint8_t product[7];$/;"	m	struct:klondike_id	file:	access:public
klondike_id::serial	driver-klondike.c	/^	uint8_t serial[4];$/;"	m	struct:klondike_id	file:	access:public
klondike_id::version	driver-klondike.c	/^	uint8_t version;$/;"	m	struct:klondike_id	file:	access:public
klondike_identify	driver-klondike.c	/^static void klondike_identify(__maybe_unused struct cgpu_info *klncgpu)$/;"	f	file:	signature:(__maybe_unused struct cgpu_info *klncgpu)
klondike_info	driver-klondike.c	/^struct klondike_info {$/;"	s	file:
klondike_info::block_seq	driver-klondike.c	/^	int block_seq;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::cfg	driver-klondike.c	/^	KLIST *cfg;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::delay_count	driver-klondike.c	/^	double delay_count;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::delay_max	driver-klondike.c	/^	double delay_max;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::delay_min	driver-klondike.c	/^	double delay_min;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::delay_total	driver-klondike.c	/^	double delay_total;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::devinfo	driver-klondike.c	/^	DEVINFO *devinfo;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::errorcount	driver-klondike.c	/^	uint64_t errorcount;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::free	driver-klondike.c	/^	KLIST *free;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::hashcount	driver-klondike.c	/^	uint64_t hashcount;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::incorrect_slave_sequential	driver-klondike.c	/^	int incorrect_slave_sequential;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::initialised	driver-klondike.c	/^	bool initialised;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::jobque	driver-klondike.c	/^	JOBQUE *jobque;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::kline_count	driver-klondike.c	/^	int kline_count;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::klist_lock	driver-klondike.c	/^	cglock_t klist_lock;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::noisecount	driver-klondike.c	/^	uint64_t noisecount;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::nonce_count	driver-klondike.c	/^	double nonce_count;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::nonce_max	driver-klondike.c	/^	double nonce_max;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::nonce_min	driver-klondike.c	/^	double nonce_min;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::nonce_total	driver-klondike.c	/^	double nonce_total;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::noncecount	driver-klondike.c	/^	int noncecount;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::replies_thr	driver-klondike.c	/^	struct thr_info replies_thr;$/;"	m	struct:klondike_info	typeref:struct:klondike_info::thr_info	file:	access:public
klondike_info::stat_lock	driver-klondike.c	/^	pthread_rwlock_t stat_lock;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::status	driver-klondike.c	/^	KLIST *status;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::tv_last_nonce_received	driver-klondike.c	/^	struct timeval tv_last_nonce_received;$/;"	m	struct:klondike_info	typeref:struct:klondike_info::timeval	file:	access:public
klondike_info::used	driver-klondike.c	/^	KLIST *used;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::used_count	driver-klondike.c	/^	int used_count;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::wque_cleared	driver-klondike.c	/^	int wque_cleared;$/;"	m	struct:klondike_info	file:	access:public
klondike_info::wque_size	driver-klondike.c	/^	int wque_size;$/;"	m	struct:klondike_info	file:	access:public
klondike_init	driver-klondike.c	/^static bool klondike_init(struct cgpu_info *klncgpu)$/;"	f	file:	signature:(struct cgpu_info *klncgpu)
klondike_queue_full	driver-klondike.c	/^static bool klondike_queue_full(struct cgpu_info *klncgpu)$/;"	f	file:	signature:(struct cgpu_info *klncgpu)
klondike_scanwork	driver-klondike.c	/^static int64_t klondike_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
klondike_send_work	driver-klondike.c	/^static bool klondike_send_work(struct cgpu_info *klncgpu, int dev, struct work *work)$/;"	f	file:	signature:(struct cgpu_info *klncgpu, int dev, struct work *work)
klondike_shutdown	driver-klondike.c	/^static void klondike_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
klondike_status	driver-klondike.c	/^typedef struct klondike_status {$/;"	s	file:
klondike_status::chipcount	driver-klondike.c	/^	uint8_t chipcount;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::cmd	driver-klondike.c	/^	uint8_t cmd;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::dev	driver-klondike.c	/^	uint8_t dev;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::errorcount	driver-klondike.c	/^	uint8_t errorcount;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::fanspeed	driver-klondike.c	/^	uint8_t fanspeed;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::hashcount	driver-klondike.c	/^	uint8_t hashcount[2];$/;"	m	struct:klondike_status	file:	access:public
klondike_status::maxcount	driver-klondike.c	/^	uint8_t maxcount[2];$/;"	m	struct:klondike_status	file:	access:public
klondike_status::noise	driver-klondike.c	/^	uint8_t noise;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::slavecount	driver-klondike.c	/^	uint8_t slavecount;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::state	driver-klondike.c	/^	uint8_t state;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::temp	driver-klondike.c	/^	uint8_t temp;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::workid	driver-klondike.c	/^	uint8_t workid;$/;"	m	struct:klondike_status	file:	access:public
klondike_status::workqc	driver-klondike.c	/^	uint8_t workqc;$/;"	m	struct:klondike_status	file:	access:public
klondike_thread_enable	driver-klondike.c	/^static void klondike_thread_enable(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
klondike_thread_init	driver-klondike.c	/^static bool klondike_thread_init(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
klondike_thread_prepare	driver-klondike.c	/^static bool klondike_thread_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
kname	miner.h	/^	const char *kname;$/;"	m	struct:cgpu_info	access:public
knc	driver-knc.c	/^	struct knc_state *knc;$/;"	m	struct:knc_die	typeref:struct:knc_die::knc_state	file:	access:public
knc_api_die_int	driver-knc.c	806;"	d	file:
knc_api_die_string	driver-knc.c	802;"	d	file:
knc_api_stats	driver-knc.c	/^static struct api_data *knc_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
knc_core_disabled	driver-knc.c	/^static int knc_core_disabled(struct knc_core_state *core)$/;"	f	file:	signature:(struct knc_core_state *core)
knc_core_failure	driver-knc.c	/^static void knc_core_failure(struct knc_core_state *core)$/;"	f	file:	signature:(struct knc_core_state *core)
knc_core_handle_nonce	driver-knc.c	/^static int knc_core_handle_nonce(struct thr_info *thr, struct knc_core_state *core, int slot, uint32_t nonce)$/;"	f	file:	signature:(struct thr_info *thr, struct knc_core_state *core, int slot, uint32_t nonce)
knc_core_has_work	driver-knc.c	/^static int knc_core_has_work(struct knc_core_state *core)$/;"	f	file:	signature:(struct knc_core_state *core)
knc_core_hold_work	driver-knc.c	/^static int knc_core_hold_work(struct knc_core_state *core)$/;"	f	file:	signature:(struct knc_core_state *core)
knc_core_need_work	driver-knc.c	/^static int knc_core_need_work(struct knc_core_state *core)$/;"	f	file:	signature:(struct knc_core_state *core)
knc_core_next_slot	driver-knc.c	/^static int knc_core_next_slot(struct knc_core_state *core)$/;"	f	file:	signature:(struct knc_core_state *core)
knc_core_process_report	driver-knc.c	/^static int knc_core_process_report(struct thr_info *thr, struct knc_core_state *core, uint8_t *response)$/;"	f	file:	signature:(struct thr_info *thr, struct knc_core_state *core, uint8_t *response)
knc_core_request_report	driver-knc.c	/^static int knc_core_request_report(struct thr_info *thr, struct knc_core_state *core)$/;"	f	file:	signature:(struct thr_info *thr, struct knc_core_state *core)
knc_core_send_work	driver-knc.c	/^static int knc_core_send_work(struct thr_info *thr, struct knc_core_state *core, struct work *work, bool clean)$/;"	f	file:	signature:(struct thr_info *thr, struct knc_core_state *core, struct work *work, bool clean)
knc_core_slot_busy	driver-knc.c	/^static bool knc_core_slot_busy(struct knc_core_state *core, int slot)$/;"	f	file:	signature:(struct knc_core_state *core, int slot)
knc_core_state	driver-knc.c	/^struct knc_core_state {$/;"	s	file:
knc_core_state::__anon54::slot	driver-knc.c	/^		int slot;$/;"	m	struct:knc_core_state::__anon54	file:	access:public
knc_core_state::__anon54::work	driver-knc.c	/^		struct work *work;$/;"	m	struct:knc_core_state::__anon54	typeref:struct:knc_core_state::__anon54::work	file:	access:public
knc_core_state::__anon55::nonce	driver-knc.c	/^		uint32_t nonce;$/;"	m	struct:knc_core_state::__anon55	file:	access:public
knc_core_state::__anon55::slot	driver-knc.c	/^		int slot;$/;"	m	struct:knc_core_state::__anon55	file:	access:public
knc_core_state::completed	driver-knc.c	/^	uint32_t completed;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::core	driver-knc.c	/^	int core;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::coreid	driver-knc.c	/^	int coreid;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::die	driver-knc.c	/^	struct knc_die *die;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::knc_die	file:	access:public
knc_core_state::disabled_until	driver-knc.c	/^	struct timeval disabled_until;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::timeval	file:	access:public
knc_core_state::errors	driver-knc.c	/^	uint32_t errors;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::errors_now	driver-knc.c	/^	uint32_t errors_now;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::generation	driver-knc.c	/^	int generation;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::hold_work_until	driver-knc.c	/^	struct timeval hold_work_until;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::timeval	file:	access:public
knc_core_state::inuse	driver-knc.c	/^	bool inuse;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::last_nonce	driver-knc.c	/^	} last_nonce;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::__anon55	file:	access:public
knc_core_state::last_slot	driver-knc.c	/^	int last_slot;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::report	driver-knc.c	/^	struct knc_report report;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::knc_report	file:	access:public
knc_core_state::shares	driver-knc.c	/^	uint32_t shares;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::timeout	driver-knc.c	/^	struct timeval timeout;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::timeval	file:	access:public
knc_core_state::transfer_stamp	driver-knc.c	/^	int transfer_stamp;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::works	driver-knc.c	/^	uint32_t works;$/;"	m	struct:knc_core_state	file:	access:public
knc_core_state::workslot	driver-knc.c	/^	} workslot[WORKS_PER_CORE]; 	\/* active, next *\/$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::__anon54	file:	access:public
knc_decode_info	knc-asic.c	/^int knc_decode_info(uint8_t *response, struct knc_die_info *die_info)$/;"	f	signature:(uint8_t *response, struct knc_die_info *die_info)
knc_decode_info	knc-asic.h	/^int knc_decode_info(uint8_t *response, struct knc_die_info *die_info);$/;"	p	signature:(uint8_t *response, struct knc_die_info *die_info)
knc_decode_report	knc-asic.c	/^int knc_decode_report(uint8_t *response, struct knc_report *report, int version)$/;"	f	signature:(uint8_t *response, struct knc_report *report, int version)
knc_decode_report	knc-asic.h	/^int knc_decode_report(uint8_t *response, struct knc_report *report, int version);$/;"	p	signature:(uint8_t *response, struct knc_report *report, int version)
knc_decode_response	knc-asic.c	/^int knc_decode_response(uint8_t *rxbuf, int request_length, uint8_t **response, int response_length)$/;"	f	signature:(uint8_t *rxbuf, int request_length, uint8_t **response, int response_length)
knc_decode_response	knc-asic.h	/^int knc_decode_response(uint8_t *rxbuf, int request_length, uint8_t **response, int response_length);$/;"	p	signature:(uint8_t *rxbuf, int request_length, uint8_t **response, int response_length)
knc_detect	driver-knc.c	/^void knc_detect(bool __maybe_unused hotplug)$/;"	f	signature:(bool __maybe_unused hotplug)
knc_detect_die	knc-asic.c	/^int knc_detect_die(void *ctx, int channel, int die, struct knc_die_info *die_info)$/;"	f	signature:(void *ctx, int channel, int die, struct knc_die_info *die_info)
knc_detect_die	knc-asic.h	/^int knc_detect_die(void *ctx, int channel, int die, struct knc_die_info *die_info);$/;"	p	signature:(void *ctx, int channel, int die, struct knc_die_info *die_info)
knc_detect_one	driver-knc.c	/^static bool knc_detect_one(void *ctx)$/;"	f	file:	signature:(void *ctx)
knc_die	driver-knc.c	/^struct knc_die {$/;"	s	file:
knc_die::channel	driver-knc.c	/^	int channel;$/;"	m	struct:knc_die	file:	access:public
knc_die::core	driver-knc.c	/^	struct knc_core_state *core;$/;"	m	struct:knc_die	typeref:struct:knc_die::knc_core_state	file:	access:public
knc_die::cores	driver-knc.c	/^	int cores;$/;"	m	struct:knc_die	file:	access:public
knc_die::die	driver-knc.c	/^	int die;$/;"	m	struct:knc_die	file:	access:public
knc_die::knc	driver-knc.c	/^	struct knc_state *knc;$/;"	m	struct:knc_die	typeref:struct:knc_die::knc_state	file:	access:public
knc_die::version	driver-knc.c	/^	int version;$/;"	m	struct:knc_die	file:	access:public
knc_die_info	knc-asic.h	/^struct knc_die_info {$/;"	s
knc_die_info::KNC_VERSION_JUPITER	knc-asic.h	/^		KNC_VERSION_JUPITER,$/;"	e	enum:knc_die_info::__anon58
knc_die_info::KNC_VERSION_NEPTUNE	knc-asic.h	/^		KNC_VERSION_NEPTUNE$/;"	e	enum:knc_die_info::__anon58
knc_die_info::KNC_VERSION_UNKNOWN	knc-asic.h	/^		KNC_VERSION_UNKNOWN = 0,$/;"	e	enum:knc_die_info::__anon58
knc_die_info::cores	knc-asic.h	/^	int cores;$/;"	m	struct:knc_die_info	access:public
knc_die_info::hash_reset_n	knc-asic.h	/^	int hash_reset_n;$/;"	m	struct:knc_die_info	access:public
knc_die_info::pll_locked	knc-asic.h	/^	int pll_locked;$/;"	m	struct:knc_die_info	access:public
knc_die_info::pll_power_down	knc-asic.h	/^	int pll_power_down;$/;"	m	struct:knc_die_info	access:public
knc_die_info::pll_reset_n	knc-asic.h	/^	int pll_reset_n;$/;"	m	struct:knc_die_info	access:public
knc_die_info::version	knc-asic.h	/^	} version;$/;"	m	struct:knc_die_info	typeref:enum:knc_die_info::__anon58	access:public
knc_die_info::want_work	knc-asic.h	/^	char want_work[KNC_MAX_CORES_PER_DIE];$/;"	m	struct:knc_die_info	access:public
knc_drv	driver-knc.c	/^struct device_drv knc_drv = {$/;"	v	typeref:struct:device_drv
knc_flush	driver-knc.c	/^static void knc_flush(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
knc_flush_work	driver-knc.c	/^static void knc_flush_work(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
knc_log_file	driver-knc.c	/^char *knc_log_file = NULL;$/;"	v
knc_prepare_core_command	knc-asic.c	/^static void knc_prepare_core_command(uint8_t *request, int command, int die, int core)$/;"	f	file:	signature:(uint8_t *request, int command, int die, int core)
knc_prepare_info	knc-asic.c	/^int knc_prepare_info(uint8_t *request, int die, struct knc_die_info *die_info, int *response_size)$/;"	f	signature:(uint8_t *request, int die, struct knc_die_info *die_info, int *response_size)
knc_prepare_info	knc-asic.h	/^int knc_prepare_info(uint8_t *request, int die, struct knc_die_info *die_info, int *response_size);$/;"	p	signature:(uint8_t *request, int die, struct knc_die_info *die_info, int *response_size)
knc_prepare_jupiter_halt	knc-asic.c	/^int knc_prepare_jupiter_halt(uint8_t *request, int die, int core)$/;"	f	signature:(uint8_t *request, int die, int core)
knc_prepare_jupiter_halt	knc-asic.h	/^int knc_prepare_jupiter_halt(uint8_t *request, int die, int core);$/;"	p	signature:(uint8_t *request, int die, int core)
knc_prepare_jupiter_setwork	knc-asic.c	/^int knc_prepare_jupiter_setwork(uint8_t *request, int die, int core, int slot, struct work *work)$/;"	f	signature:(uint8_t *request, int die, int core, int slot, struct work *work)
knc_prepare_jupiter_setwork	knc-asic.h	/^int knc_prepare_jupiter_setwork(uint8_t *request, int die, int core, int slot, struct work *work);$/;"	p	signature:(uint8_t *request, int die, int core, int slot, struct work *work)
knc_prepare_jupiter_work	knc-asic.c	/^static void knc_prepare_jupiter_work(unsigned char *out, struct work *work) {$/;"	f	file:	signature:(unsigned char *out, struct work *work)
knc_prepare_led	knc-asic.c	/^int knc_prepare_led(uint8_t *txbuf, int offset, int size, int red, int green, int blue)$/;"	f	signature:(uint8_t *txbuf, int offset, int size, int red, int green, int blue)
knc_prepare_led	knc-asic.h	/^int knc_prepare_led(uint8_t *txbuf, int offset, int size, int red, int green, int blue);$/;"	p	signature:(uint8_t *txbuf, int offset, int size, int red, int green, int blue)
knc_prepare_neptune_halt	knc-asic.c	/^int knc_prepare_neptune_halt(uint8_t *request, int die, int core)$/;"	f	signature:(uint8_t *request, int die, int core)
knc_prepare_neptune_halt	knc-asic.h	/^int knc_prepare_neptune_halt(uint8_t *request, int die, int core);$/;"	p	signature:(uint8_t *request, int die, int core)
knc_prepare_neptune_message	knc-asic.c	/^void knc_prepare_neptune_message(int request_length, const uint8_t *request, uint8_t *buffer)$/;"	f	signature:(int request_length, const uint8_t *request, uint8_t *buffer)
knc_prepare_neptune_message	knc-asic.h	/^void knc_prepare_neptune_message(int request_length, const uint8_t *request, uint8_t *buffer);$/;"	p	signature:(int request_length, const uint8_t *request, uint8_t *buffer)
knc_prepare_neptune_setwork	knc-asic.c	/^int knc_prepare_neptune_setwork(uint8_t *request, int die, int core, int slot, struct work *work, int clean)$/;"	f	signature:(uint8_t *request, int die, int core, int slot, struct work *work, int clean)
knc_prepare_neptune_setwork	knc-asic.h	/^int knc_prepare_neptune_setwork(uint8_t *request, int die, int core, int slot, struct work *work, int clean);$/;"	p	signature:(uint8_t *request, int die, int core, int slot, struct work *work, int clean)
knc_prepare_neptune_work	knc-asic.c	/^static void knc_prepare_neptune_work(unsigned char *out, struct work *work) {$/;"	f	file:	signature:(unsigned char *out, struct work *work)
knc_prepare_report	knc-asic.c	/^int knc_prepare_report(uint8_t *request, int die, int core)$/;"	f	signature:(uint8_t *request, int die, int core)
knc_prepare_report	knc-asic.h	/^int knc_prepare_report(uint8_t *request, int die, int core);$/;"	p	signature:(uint8_t *request, int die, int core)
knc_prepare_reset	knc-asic.c	/^int knc_prepare_reset(uint8_t *txbuf, int offset, int size)$/;"	f	signature:(uint8_t *txbuf, int offset, int size)
knc_prepare_reset	knc-asic.h	/^int knc_prepare_reset(uint8_t *txbuf, int offset, int size);$/;"	p	signature:(uint8_t *txbuf, int offset, int size)
knc_prepare_transfer	knc-asic.c	/^int knc_prepare_transfer(uint8_t *txbuf, int offset, int size, int channel, int request_length, const uint8_t *request, int response_length)$/;"	f	signature:(uint8_t *txbuf, int offset, int size, int channel, int request_length, const uint8_t *request, int response_length)
knc_prepare_transfer	knc-asic.h	/^int knc_prepare_transfer(uint8_t *txbuf, int offset, int size, int channel, int request_length, const uint8_t *request, int response_length);$/;"	p	signature:(uint8_t *txbuf, int offset, int size, int channel, int request_length, const uint8_t *request, int response_length)
knc_process_responses	driver-knc.c	/^static void knc_process_responses(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
knc_process_responses	driver-knc.c	/^static void knc_process_responses(struct thr_info *thr);$/;"	p	file:	signature:(struct thr_info *thr)
knc_report	knc-asic.h	/^struct knc_report {$/;"	s
knc_report::__anon59::nonce	knc-asic.h	/^		uint32_t nonce;$/;"	m	struct:knc_report::__anon59	access:public
knc_report::__anon59::slot	knc-asic.h	/^		int slot;$/;"	m	struct:knc_report::__anon59	access:public
knc_report::active_slot	knc-asic.h	/^	int active_slot;$/;"	m	struct:knc_report	access:public
knc_report::next_slot	knc-asic.h	/^	int next_slot;$/;"	m	struct:knc_report	access:public
knc_report::next_state	knc-asic.h	/^	int next_state;$/;"	m	struct:knc_report	access:public
knc_report::nonce	knc-asic.h	/^	} nonce[KNC_NONCES_PER_REPORT];$/;"	m	struct:knc_report	typeref:struct:knc_report::__anon59	access:public
knc_report::progress	knc-asic.h	/^	uint32_t progress;$/;"	m	struct:knc_report	access:public
knc_report::state	knc-asic.h	/^	int state;$/;"	m	struct:knc_report	access:public
knc_scanwork	driver-knc.c	/^static int64_t knc_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
knc_spi	driver-knc.c	/^static void *knc_spi(void *thr_data)$/;"	f	file:	signature:(void *thr_data)
knc_spi_buffer	driver-knc.c	/^	struct knc_spi_buffer {$/;"	s	struct:knc_state	file:	access:public
knc_spi_response	driver-knc.c	/^		struct knc_spi_response {$/;"	s	struct:knc_state::knc_spi_buffer	file:	access:public
knc_state	driver-knc.c	/^struct knc_state {$/;"	s	file:
knc_state::cgpu	driver-knc.c	/^	struct cgpu_info *cgpu;$/;"	m	struct:knc_state	typeref:struct:knc_state::cgpu_info	file:	access:public
knc_state::completed	driver-knc.c	/^	uint64_t completed;		\/* Work units completed *\/$/;"	m	struct:knc_state	file:	access:public
knc_state::core	driver-knc.c	/^	struct knc_core_state core[];$/;"	m	struct:knc_state	typeref:struct:knc_state::knc_core_state	file:	access:public
knc_state::cores	driver-knc.c	/^	int cores;$/;"	m	struct:knc_state	file:	access:public
knc_state::ctx	driver-knc.c	/^	void *ctx;$/;"	m	struct:knc_state	file:	access:public
knc_state::die	driver-knc.c	/^	struct knc_die die[MAX_ASICS*DIES_PER_ASIC];$/;"	m	struct:knc_state	typeref:struct:knc_state::knc_die	file:	access:public
knc_state::dies	driver-knc.c	/^	int dies;$/;"	m	struct:knc_state	file:	access:public
knc_state::errors	driver-knc.c	/^	uint64_t errors;		\/* Hardware & communication errors *\/$/;"	m	struct:knc_state	file:	access:public
knc_state::generation	driver-knc.c	/^	int generation;    \/* work\/block generation, incremented on each flush invalidating older works *\/$/;"	m	struct:knc_state	file:	access:public
knc_state::knc_spi_buffer	driver-knc.c	/^	struct knc_spi_buffer {$/;"	s	struct:knc_state	file:	access:public
knc_state::knc_spi_buffer::KNC_SPI_DONE	driver-knc.c	/^			KNC_SPI_DONE$/;"	e	enum:knc_state::knc_spi_buffer::__anon56	file:
knc_state::knc_spi_buffer::KNC_SPI_IDLE	driver-knc.c	/^			KNC_SPI_IDLE=0,$/;"	e	enum:knc_state::knc_spi_buffer::__anon56	file:
knc_state::knc_spi_buffer::KNC_SPI_PENDING	driver-knc.c	/^			KNC_SPI_PENDING,$/;"	e	enum:knc_state::knc_spi_buffer::__anon56	file:
knc_state::knc_spi_buffer::knc_spi_response	driver-knc.c	/^		struct knc_spi_response {$/;"	s	struct:knc_state::knc_spi_buffer	file:	access:public
knc_state::knc_spi_buffer::knc_spi_response::KNC_INFO	driver-knc.c	/^				KNC_INFO$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
knc_state::knc_spi_buffer::knc_spi_response::KNC_NO_RESPONSE	driver-knc.c	/^				KNC_NO_RESPONSE,$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
knc_state::knc_spi_buffer::knc_spi_response::KNC_REPORT	driver-knc.c	/^				KNC_REPORT,$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
knc_state::knc_spi_buffer::knc_spi_response::KNC_SETWORK	driver-knc.c	/^				KNC_SETWORK,$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
knc_state::knc_spi_buffer::knc_spi_response::KNC_UNKNOWN	driver-knc.c	/^				KNC_UNKNOWN = 0,$/;"	e	enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:
knc_state::knc_spi_buffer::knc_spi_response::core	driver-knc.c	/^			struct knc_core_state *core;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	typeref:struct:knc_state::knc_spi_buffer::knc_spi_response::knc_core_state	file:	access:public
knc_state::knc_spi_buffer::knc_spi_response::data	driver-knc.c	/^			uint32_t data;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
knc_state::knc_spi_buffer::knc_spi_response::offset	driver-knc.c	/^			int offset;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
knc_state::knc_spi_buffer::knc_spi_response::request_length	driver-knc.c	/^			int request_length;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
knc_state::knc_spi_buffer::knc_spi_response::response_length	driver-knc.c	/^			int response_length;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
knc_state::knc_spi_buffer::knc_spi_response::type	driver-knc.c	/^			} type;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	typeref:enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:	access:public
knc_state::knc_spi_buffer::response_info	driver-knc.c	/^		} response_info[MAX_SPI_RESPONSES];$/;"	m	struct:knc_state::knc_spi_buffer	typeref:struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
knc_state::knc_spi_buffer::responses	driver-knc.c	/^		int responses;$/;"	m	struct:knc_state::knc_spi_buffer	file:	access:public
knc_state::knc_spi_buffer::rxbuf	driver-knc.c	/^		uint8_t rxbuf[MAX_SPI_SIZE];$/;"	m	struct:knc_state::knc_spi_buffer	file:	access:public
knc_state::knc_spi_buffer::size	driver-knc.c	/^		int size;$/;"	m	struct:knc_state::knc_spi_buffer	file:	access:public
knc_state::knc_spi_buffer::state	driver-knc.c	/^		} state;$/;"	m	struct:knc_state::knc_spi_buffer	typeref:enum:knc_state::knc_spi_buffer::__anon56	file:	access:public
knc_state::knc_spi_buffer::txbuf	driver-knc.c	/^		uint8_t txbuf[MAX_SPI_SIZE];$/;"	m	struct:knc_state::knc_spi_buffer	file:	access:public
knc_state::next_error_interval	driver-knc.c	/^	struct timeval next_error_interval;$/;"	m	struct:knc_state	typeref:struct:knc_state::timeval	file:	access:public
knc_state::read_buffer	driver-knc.c	/^	int read_buffer;$/;"	m	struct:knc_state	file:	access:public
knc_state::read_buffer_count	driver-knc.c	/^	int read_buffer_count;$/;"	m	struct:knc_state	file:	access:public
knc_state::scan_adjust	driver-knc.c	/^	int scan_adjust;$/;"	m	struct:knc_state	file:	access:public
knc_state::send_buffer	driver-knc.c	/^	int send_buffer;$/;"	m	struct:knc_state	file:	access:public
knc_state::send_buffer_count	driver-knc.c	/^	int send_buffer_count;$/;"	m	struct:knc_state	file:	access:public
knc_state::shares	driver-knc.c	/^	uint64_t shares;		\/* diff1 shares reported by hardware *\/$/;"	m	struct:knc_state	file:	access:public
knc_state::spi_buffer	driver-knc.c	/^	} spi_buffer[KNC_SPI_BUFFERS];$/;"	m	struct:knc_state	typeref:struct:knc_state::knc_spi_buffer	file:	access:public
knc_state::spi_qcond	driver-knc.c	/^	pthread_cond_t spi_qcond;	\/* SPI queue change wakeup *\/$/;"	m	struct:knc_state	file:	access:public
knc_state::spi_qlock	driver-knc.c	/^	pthread_mutex_t spi_qlock;	\/* SPI queue status lock *\/$/;"	m	struct:knc_state	file:	access:public
knc_state::spi_thr	driver-knc.c	/^	struct thr_info spi_thr;	\/* SPI I\/O thread *\/$/;"	m	struct:knc_state	typeref:struct:knc_state::thr_info	file:	access:public
knc_state::startup	driver-knc.c	/^	int startup;$/;"	m	struct:knc_state	file:	access:public
knc_state::works	driver-knc.c	/^	uint64_t works;			\/* Work units submitted *\/$/;"	m	struct:knc_state	file:	access:public
knc_sync	driver-knc.c	/^static void knc_sync(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
knc_syncronous_transfer	knc-asic.c	/^int knc_syncronous_transfer(void *ctx, int channel, int request_length, const uint8_t *request, int response_length, uint8_t *response)$/;"	f	signature:(void *ctx, int channel, int request_length, const uint8_t *request, int response_length, uint8_t *response)
knc_syncronous_transfer	knc-asic.h	/^int knc_syncronous_transfer(void *ctx, int channel, int request_length, const uint8_t *request, int response_length, uint8_t *response);$/;"	p	signature:(void *ctx, int channel, int request_length, const uint8_t *request, int response_length, uint8_t *response)
knc_transfer	driver-knc.c	/^static void knc_transfer(struct thr_info *thr, struct knc_core_state *core, int request_length, uint8_t *request, int response_length, int response_type, uint32_t data)$/;"	f	file:	signature:(struct thr_info *thr, struct knc_core_state *core, int request_length, uint8_t *request, int response_length, int response_type, uint32_t data)
knc_transfer_completed	driver-knc.c	/^static int knc_transfer_completed(struct knc_state *knc, int stamp)$/;"	f	file:	signature:(struct knc_state *knc, int stamp)
knc_transfer_length	knc-asic.c	/^int knc_transfer_length(int request_length, int response_length)$/;"	f	signature:(int request_length, int response_length)
knc_transfer_stamp	driver-knc.c	/^static int knc_transfer_stamp(struct knc_state *knc)$/;"	f	file:	signature:(struct knc_state *knc)
knc_trnsp_asic_detect	knc-transport-spi.c	/^bool knc_trnsp_asic_detect(void *opaque_ctx, int chip_id)$/;"	f	signature:(void *opaque_ctx, int chip_id)
knc_trnsp_asic_detect	knc-transport.h	/^bool knc_trnsp_asic_detect(void *opaque_ctx, int chip_id);$/;"	p	signature:(void *opaque_ctx, int chip_id)
knc_trnsp_free	knc-transport-spi.c	/^void knc_trnsp_free(void *opaque_ctx)$/;"	f	signature:(void *opaque_ctx)
knc_trnsp_free	knc-transport.h	/^void knc_trnsp_free(void *opaque_ctx);$/;"	p	signature:(void *opaque_ctx)
knc_trnsp_new	knc-transport-spi.c	/^void *knc_trnsp_new(int dev_idx)$/;"	f	signature:(int dev_idx)
knc_trnsp_new	knc-transport.h	/^void *knc_trnsp_new(int dev_idx);$/;"	p	signature:(int dev_idx)
knc_trnsp_periodic_check	knc-transport-spi.c	/^void knc_trnsp_periodic_check(void *opaque_ctx)$/;"	f	signature:(void *opaque_ctx)
knc_trnsp_periodic_check	knc-transport.h	/^void knc_trnsp_periodic_check(void *opaque_ctx);$/;"	p	signature:(void *opaque_ctx)
knc_trnsp_transfer	knc-transport-spi.c	/^int knc_trnsp_transfer(void *opaque_ctx, uint8_t *txbuf, uint8_t *rxbuf, int len)$/;"	f	signature:(void *opaque_ctx, uint8_t *txbuf, uint8_t *rxbuf, int len)
knc_trnsp_transfer	knc-transport.h	/^int knc_trnsp_transfer(void *opaque_ctx, uint8_t *txbuf, uint8_t *rxbuf, int len);$/;"	p	signature:(void *opaque_ctx, uint8_t *txbuf, uint8_t *rxbuf, int len)
knc_zero_stats	driver-knc.c	/^static void knc_zero_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
l_isalpha	compat/jansson-2.6/src/load.c	40;"	d	file:
l_isdigit	compat/jansson-2.6/src/load.c	41;"	d	file:
l_islower	compat/jansson-2.6/src/load.c	39;"	d	file:
l_isupper	compat/jansson-2.6/src/load.c	38;"	d	file:
l_isxdigit	compat/jansson-2.6/src/load.c	42;"	d	file:
la	miner.php	/^ $la = strlen($a);$/;"	v
lagging	miner.h	/^	bool lagging;$/;"	m	struct:pool	access:public
last	MCast.java	/^	static private Date last = null;$/;"	f	class:MCast	file:	access:private
last	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list *last;$/;"	m	struct:hashtable_bucket	typeref:struct:hashtable_bucket::hashtable_list	access:public
last	driver-minion.c	/^	struct timeval last;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
last	miner.h	/^	struct timeval last;$/;"	m	struct:thr_info	typeref:struct:thr_info::timeval	access:public
last	usbutils.c	/^	struct timeval last;$/;"	m	struct:cg_usb_stats_item	typeref:struct:cg_usb_stats_item::timeval	file:	access:public
last_allocation	ccan/opt/test/run-helpers.c	/^static void *last_allocation;$/;"	v	file:
last_changed	miner.h	/^	struct timeval last_changed;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval	access:public
last_check_result	driver-bflsc.h	/^	struct timeval last_check_result;$/;"	m	struct:bflsc_dev	typeref:struct:bflsc_dev::timeval	access:public
last_column	compat/jansson-2.6/src/load.c	/^    int column, last_column;$/;"	m	struct:__anon16	file:	access:public
last_decitemp	driver-bitfury.h	/^	int last_decitemp;$/;"	m	struct:bitfury_info	access:public
last_dev_result	driver-bflsc.h	/^	struct timeval last_dev_result; \/\/ array > 0$/;"	m	struct:bflsc_dev	typeref:struct:bflsc_dev::timeval	access:public
last_device_valid_work	miner.h	/^	time_t last_device_valid_work;$/;"	m	struct:cgpu_info	access:public
last_did	driver-bab.c	/^	struct timeval last_did;$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:	access:public
last_did	driver-minion.c	/^	struct timeval last_did;$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
last_die_adjusted	driver-hashfast.h	/^	int last_die_adjusted;$/;"	m	struct:hashfast_info	access:public
last_diff	miner.h	/^	double last_diff;$/;"	m	struct:cgminer_pool_stats	access:public
last_displayed_xff	driver-minion.c	/^	uint64_t last_displayed_xff;$/;"	m	struct:minion_info	file:	access:public
last_force_queue	driver-spondoolies-sp10.c	/^static struct timeval last_force_queue = {0};$/;"	v	typeref:struct:timeval	file:
last_force_queue	driver-spondoolies-sp30.c	/^static struct timeval last_force_queue;$/;"	v	typeref:struct:timeval	file:
last_getwork	cgminer.c	/^time_t last_getwork;$/;"	v
last_interrupt	driver-minion.c	/^	char last_interrupt[64];$/;"	m	struct:minion_info	file:	access:public
last_job	driver-blockerupter.h	/^	struct timeval last_job;$/;"	m	struct:blockerupter_info	typeref:struct:blockerupter_info::timeval	access:public
last_max_temp	driver-hashfast.h	/^	int last_max_temp;$/;"	m	struct:hashfast_info	access:public
last_message_tv	miner.h	/^	struct timeval last_message_tv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::timeval	access:public
last_nettime	util.c	/^static void last_nettime(struct timeval *last)$/;"	f	file:	signature:(struct timeval *last)
last_nodev	usbutils.h	/^	struct timeval last_nodev;$/;"	m	struct:cg_usb_info	typeref:struct:cg_usb_info::timeval	access:public
last_nonce	driver-icarus.c	/^	uint32_t last_nonce[MAX_CHIP_NUM][MAX_WORK_BUFFER_SIZE];$/;"	m	struct:ICARUS_INFO	file:	access:public
last_nonce	driver-knc.c	/^	} last_nonce;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::__anon55	file:	access:public
last_nonce	miner.h	/^	struct timeval last_nonce;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval	access:public
last_nonce	miner.h	/^	uint32_t last_nonce;$/;"	m	struct:cgpu_info	access:public
last_nonce_error	driver-bitmain.h	/^	uint32_t last_nonce_error;$/;"	m	struct:bitmain_info	access:public
last_nonce_result	driver-bflsc.h	/^	struct timeval last_nonce_result; \/\/ > 0 nonce$/;"	m	struct:bflsc_dev	typeref:struct:bflsc_dev::timeval	access:public
last_pipe	usbutils.h	/^	time_t last_pipe;$/;"	m	struct:cg_usb_info	access:public
last_pipe_nonce	driver-cointerra.h	/^	time_t last_pipe_nonce[1024];$/;"	m	struct:cointerra_info	access:public
last_power_cycle	driver-minion.c	/^	time_t last_power_cycle;$/;"	m	struct:minion_info	file:	access:public
last_queued_id	A1-common.h	/^	int last_queued_id;$/;"	m	struct:A1_chip	access:public
last_received_task_complete_time	driver-icarus.c	/^	time_t last_received_task_complete_time;$/;"	m	struct:rockminer_chip_info	file:	access:public
last_reset	driver-minion.c	/^	struct timeval last_reset[MINION_CHIPS];$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
last_restart	driver-hashfast.h	/^	time_t last_restart;$/;"	m	struct:hashfast_info	access:public
last_restart	driver-hashfast.h	/^	time_t last_restart;$/;"	m	struct:hf_die_data	access:public
last_rpt_idle	driver-minion.c	/^	uint32_t last_rpt_idle;$/;"	m	struct:minion_status	file:	access:public
last_send	driver-hashfast.h	/^	time_t last_send;$/;"	m	struct:hashfast_info	access:public
last_sent_work	driver-bab.c	/^	struct timeval last_sent_work;$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:	access:public
last_share_diff	miner.h	/^	double last_share_diff;$/;"	m	struct:cgpu_info	access:public
last_share_diff	miner.h	/^	double last_share_diff;$/;"	m	struct:pool	access:public
last_share_pool	miner.h	/^	int last_share_pool;$/;"	m	struct:cgpu_info	access:public
last_share_pool_time	miner.h	/^	time_t last_share_pool_time;$/;"	m	struct:cgpu_info	access:public
last_share_time	miner.h	/^	time_t last_share_time;$/;"	m	struct:pool	access:public
last_shares	miner.h	/^	int last_shares, shares;$/;"	m	struct:pool	access:public
last_slot	driver-knc.c	/^	int last_slot;$/;"	m	struct:knc_core_state	file:	access:public
last_spi_reset	driver-minion.c	/^	time_t last_spi_reset;$/;"	m	struct:minion_info	file:	access:public
last_stats	driver-spondoolies-sp10.h	/^	time_t last_stats;$/;"	m	struct:spond_adapter	access:public
last_stats	driver-spondoolies-sp30.h	/^	time_t last_stats;$/;"	m	struct:spond_adapter	access:public
last_status_time	driver-bitmain.h	/^	struct timeval last_status_time;$/;"	m	struct:bitmain_info	typeref:struct:bitmain_info::timeval	access:public
last_stratum	driver-avalon2.h	/^	struct timeval last_stratum;$/;"	m	struct:avalon2_info	typeref:struct:avalon2_info::timeval	access:public
last_stratum	driver-hashratio.h	/^	struct timeval last_stratum;$/;"	m	struct:hashratio_info	typeref:struct:hashratio_info::timeval	access:public
last_temp_time	A1-common.h	/^	int last_temp_time;$/;"	m	struct:A1_chain	access:public
last_total_secs	cgminer.c	/^double last_total_secs = 1.0;$/;"	v
last_tune	driver-bab.c	/^	struct timeval last_tune[BAB_MAXCHIPS];$/;"	m	struct:bab_info	typeref:struct:bab_info::timeval	file:	access:public
last_update	driver-bflsc.h	/^	struct timeval last_update;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::timeval	access:public
last_update	driver-klondike.c	/^	struct timeval last_update;$/;"	m	struct:jobque	typeref:struct:jobque::timeval	file:	access:public
last_work_block	driver-bitmain.h	/^	unsigned int last_work_block;$/;"	m	struct:bitmain_info	access:public
last_xff	driver-minion.c	/^	time_t last_xff;$/;"	m	struct:minion_info	file:	access:public
lastfreq	driver-minion.c	/^	struct timeval lastfreq[MINION_CHIPS];$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
lastgot	api.c	/^	LOCKSTAT lastgot;$/;"	m	struct:lockinfo	file:	access:public
lasthashcount	driver-klondike.c	/^	uint16_t lasthashcount;$/;"	m	struct:device_info	file:	access:public
lastid	cgminer.c	/^	int lastid;$/;"	m	struct:_cgpu_devid_counter	file:	access:public
lastoverheat	driver-minion.c	/^	struct timeval lastoverheat;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
lastrecover	driver-minion.c	/^	struct timeval lastrecover;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
late_update_count	driver-klondike.c	/^	int late_update_count;$/;"	m	struct:jobque	file:	access:public
late_update_sequential	driver-klondike.c	/^	int late_update_sequential;$/;"	m	struct:jobque	file:	access:public
latency	usbutils.h	/^	uint16_t latency;$/;"	m	struct:usb_find_devices	access:public
lb	miner.php	/^ $lb = strlen($b);$/;"	v
lcddata	api.c	/^static void lcddata(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
lcddisplay	api.c	/^static void lcddisplay(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
ldbtcsd	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
le16toh	miner.h	170;"	d
le16toh	miner.h	183;"	d
le256todouble	cgminer.c	/^static double le256todouble(const void *target)$/;"	f	file:	signature:(const void *target)
le32toh	miner.h	173;"	d
le32toh	miner.h	185;"	d
le64toh	miner.h	174;"	d
le64toh	miner.h	186;"	d
leading_zeroes	driver-spondoolies-sp10-p.h	/^	uint8_t leading_zeroes;$/;"	m	struct:__anon44	access:public
leading_zeroes	driver-spondoolies-sp30-p.h	/^  uint8_t leading_zeroes;$/;"	m	struct:__anon64	access:public
led_red	driver-avalon2.h	/^	int led_red[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
lednow	driver-minion.c	/^	bool lednow[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
len	compat/jansson-2.6/src/load.c	/^    size_t len;$/;"	m	struct:__anon20	file:	access:public
len	compat/jansson-2.6/src/load.c	/^    size_t len;$/;"	m	struct:__anon21	file:	access:public
len	compat/libusb-1.0/libusb/libusbi.h	/^	size_t len;$/;"	m	struct:discovered_devs	access:public
len	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int len;$/;"	m	struct:usbfs_bulktransfer	access:public
len	miner.php	/^ $len = strlen($str);$/;"	v
len	sha2.h	/^    unsigned int len;$/;"	m	struct:__anon62	access:public
len	util.c	/^	size_t		len;$/;"	m	struct:data_buffer	file:	access:public
len	util.c	/^	size_t		len;$/;"	m	struct:upload_buffer	file:	access:public
length	cgminer.c	/^	int length;$/;"	m	struct:benchfile_layout	file:	access:public
length	compat/jansson-2.6/src/strbuffer.h	/^    size_t length;   \/* bytes used *\/$/;"	m	struct:__anon29	access:public
length	compat/libusb-1.0/libusb/libusb.h	/^	int length;$/;"	m	struct:libusb_transfer	access:public
length	compat/libusb-1.0/libusb/libusb.h	/^	unsigned int length;$/;"	m	struct:libusb_iso_packet_descriptor	access:public
length	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int length;$/;"	m	struct:usbfs_iso_packet_desc	access:public
length	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT length;$/;"	m	struct:__anon37	access:public
length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_packet_head	access:public
length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_rxnonce_data	access:public
length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_rxstatus_data	access:public
length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_rxstatus_token	access:public
length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_txconfig_token	access:public
length	driver-bitmain.h	/^	uint16_t length;$/;"	m	struct:bitmain_txtask_token	access:public
lex_close	compat/jansson-2.6/src/load.c	/^static void lex_close(lex_t *lex)$/;"	f	file:	signature:(lex_t *lex)
lex_get	compat/jansson-2.6/src/load.c	/^static int lex_get(lex_t *lex, json_error_t *error)$/;"	f	file:	signature:(lex_t *lex, json_error_t *error)
lex_get_save	compat/jansson-2.6/src/load.c	/^static int lex_get_save(lex_t *lex, json_error_t *error)$/;"	f	file:	signature:(lex_t *lex, json_error_t *error)
lex_init	compat/jansson-2.6/src/load.c	/^static int lex_init(lex_t *lex, get_func get, void *data)$/;"	f	file:	signature:(lex_t *lex, get_func get, void *data)
lex_save	compat/jansson-2.6/src/load.c	/^static void lex_save(lex_t *lex, int c)$/;"	f	file:	signature:(lex_t *lex, int c)
lex_save_cached	compat/jansson-2.6/src/load.c	/^static void lex_save_cached(lex_t *lex)$/;"	f	file:	signature:(lex_t *lex)
lex_scan	compat/jansson-2.6/src/load.c	/^static int lex_scan(lex_t *lex, json_error_t *error)$/;"	f	file:	signature:(lex_t *lex, json_error_t *error)
lex_scan_number	compat/jansson-2.6/src/load.c	/^static int lex_scan_number(lex_t *lex, int c, json_error_t *error)$/;"	f	file:	signature:(lex_t *lex, int c, json_error_t *error)
lex_scan_string	compat/jansson-2.6/src/load.c	/^static void lex_scan_string(lex_t *lex, json_error_t *error)$/;"	f	file:	signature:(lex_t *lex, json_error_t *error)
lex_steal_string	compat/jansson-2.6/src/load.c	/^static char *lex_steal_string(lex_t *lex)$/;"	f	file:	signature:(lex_t *lex)
lex_t	compat/jansson-2.6/src/load.c	/^} lex_t;$/;"	t	typeref:struct:__anon17	file:
lex_unget	compat/jansson-2.6/src/load.c	/^static void lex_unget(lex_t *lex, int c)$/;"	f	file:	signature:(lex_t *lex, int c)
lex_unget_unsave	compat/jansson-2.6/src/load.c	/^static void lex_unget_unsave(lex_t *lex, int c)$/;"	f	file:	signature:(lex_t *lex, int c)
liSleep	util.c	/^static void liSleep(LARGE_INTEGER *li, int timeout)$/;"	f	file:	signature:(LARGE_INTEGER *li, int timeout)
libbitfury_sendHashData	libbitfury.c	/^bool libbitfury_sendHashData(struct thr_info *thr, struct cgpu_info *bitfury,$/;"	f	signature:(struct thr_info *thr, struct cgpu_info *bitfury, struct bitfury_info *info, int chip_n)
libbitfury_sendHashData	libbitfury.h	/^bool libbitfury_sendHashData(struct thr_info *thr, struct cgpu_info *bitfury,$/;"	p	signature:(struct thr_info *thr, struct cgpu_info *bitfury, struct bitfury_info *info, int chip_n)
libusb_alloc_transfer	compat/libusb-1.0/libusb/io.c	/^struct libusb_transfer * LIBUSB_CALL libusb_alloc_transfer($/;"	f	signature:( int iso_packets)
libusb_alloc_transfer	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_transfer * LIBUSB_CALL libusb_alloc_transfer(int iso_packets);$/;"	p	signature:(int iso_packets)
libusb_attach_kernel_driver	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_attach_kernel_driver(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, int interface_number)
libusb_attach_kernel_driver	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_attach_kernel_driver(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, int interface_number)
libusb_bos_descriptor	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_bos_descriptor {$/;"	s
libusb_bos_descriptor::bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_bos_descriptor	access:public
libusb_bos_descriptor::bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_bos_descriptor	access:public
libusb_bos_descriptor::bNumDeviceCaps	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bNumDeviceCaps;$/;"	m	struct:libusb_bos_descriptor	access:public
libusb_bos_descriptor::ss_usb_cap	compat/libusb-1.0/libusb/libusb.h	/^	struct libusb_ss_usb_device_capability_descriptor *ss_usb_cap;$/;"	m	struct:libusb_bos_descriptor	typeref:struct:libusb_bos_descriptor::libusb_ss_usb_device_capability_descriptor	access:public
libusb_bos_descriptor::usb_2_0_ext_cap	compat/libusb-1.0/libusb/libusb.h	/^	struct libusb_usb_2_0_device_capability_descriptor *usb_2_0_ext_cap;$/;"	m	struct:libusb_bos_descriptor	typeref:struct:libusb_bos_descriptor::libusb_usb_2_0_device_capability_descriptor	access:public
libusb_bos_descriptor::wTotalLength	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wTotalLength;$/;"	m	struct:libusb_bos_descriptor	access:public
libusb_bulk_transfer	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_bulk_transfer(libusb_device_handle *dev_handle,$/;"	p	signature:(libusb_device_handle *dev_handle, unsigned char endpoint, unsigned char *data, int length, int *actual_length, unsigned int timeout)
libusb_bulk_transfer	compat/libusb-1.0/libusb/sync.c	/^int API_EXPORTED libusb_bulk_transfer(struct libusb_device_handle *dev_handle,$/;"	f	signature:(struct libusb_device_handle *dev_handle, unsigned char endpoint, unsigned char *data, int length, int *transferred, unsigned int timeout)
libusb_cancel_transfer	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_cancel_transfer(struct libusb_transfer *transfer)$/;"	f	signature:(struct libusb_transfer *transfer)
libusb_cancel_transfer	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_cancel_transfer(struct libusb_transfer *transfer);$/;"	p	signature:(struct libusb_transfer *transfer)
libusb_capability	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_capability {$/;"	g
libusb_capability_attributes	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_capability_attributes {$/;"	g
libusb_capability_type	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_capability_type {$/;"	g
libusb_claim_interface	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_claim_interface(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, int interface_number)
libusb_claim_interface	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_claim_interface(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, int interface_number)
libusb_class_code	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_class_code {$/;"	g
libusb_clear_halt	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_clear_halt(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, unsigned char endpoint)
libusb_clear_halt	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_clear_halt(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, unsigned char endpoint)
libusb_close	compat/libusb-1.0/libusb/core.c	/^void API_EXPORTED libusb_close(libusb_device_handle *dev_handle)$/;"	f	signature:(libusb_device_handle *dev_handle)
libusb_close	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_close(libusb_device_handle *dev_handle);$/;"	p	signature:(libusb_device_handle *dev_handle)
libusb_config_descriptor	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_config_descriptor {$/;"	s
libusb_config_descriptor::MaxPower	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  MaxPower;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_config_descriptor::bConfigurationValue	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bConfigurationValue;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_config_descriptor::bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_config_descriptor::bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_config_descriptor::bNumInterfaces	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bNumInterfaces;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_config_descriptor::bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_config_descriptor::extra	compat/libusb-1.0/libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_config_descriptor::extra_length	compat/libusb-1.0/libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_config_descriptor::iConfiguration	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iConfiguration;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_config_descriptor::interface	compat/libusb-1.0/libusb/libusb.h	/^	const struct libusb_interface *interface;$/;"	m	struct:libusb_config_descriptor	typeref:struct:libusb_config_descriptor::libusb_interface	access:public
libusb_config_descriptor::wTotalLength	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wTotalLength;$/;"	m	struct:libusb_config_descriptor	access:public
libusb_context	compat/libusb-1.0/libusb/libusb.h	/^typedef struct libusb_context libusb_context;$/;"	t	typeref:struct:libusb_context
libusb_context	compat/libusb-1.0/libusb/libusbi.h	/^struct libusb_context {$/;"	s
libusb_context::ctrl_pipe	compat/libusb-1.0/libusb/libusbi.h	/^	int ctrl_pipe[2];$/;"	m	struct:libusb_context	access:public
libusb_context::debug	compat/libusb-1.0/libusb/libusbi.h	/^	int debug;$/;"	m	struct:libusb_context	access:public
libusb_context::debug_fixed	compat/libusb-1.0/libusb/libusbi.h	/^	int debug_fixed;$/;"	m	struct:libusb_context	access:public
libusb_context::event_handler_active	compat/libusb-1.0/libusb/libusbi.h	/^	int event_handler_active;$/;"	m	struct:libusb_context	access:public
libusb_context::event_waiters_cond	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_cond_t event_waiters_cond;$/;"	m	struct:libusb_context	access:public
libusb_context::event_waiters_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t event_waiters_lock;$/;"	m	struct:libusb_context	access:public
libusb_context::events_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t events_lock;$/;"	m	struct:libusb_context	access:public
libusb_context::fd_added_cb	compat/libusb-1.0/libusb/libusbi.h	/^	libusb_pollfd_added_cb fd_added_cb;$/;"	m	struct:libusb_context	access:public
libusb_context::fd_cb_user_data	compat/libusb-1.0/libusb/libusbi.h	/^	void *fd_cb_user_data;$/;"	m	struct:libusb_context	access:public
libusb_context::fd_removed_cb	compat/libusb-1.0/libusb/libusbi.h	/^	libusb_pollfd_removed_cb fd_removed_cb;$/;"	m	struct:libusb_context	access:public
libusb_context::flying_transfers	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head flying_transfers;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
libusb_context::flying_transfers_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t flying_transfers_lock;$/;"	m	struct:libusb_context	access:public
libusb_context::hotplug_cbs	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head hotplug_cbs;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
libusb_context::hotplug_cbs_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t hotplug_cbs_lock;$/;"	m	struct:libusb_context	access:public
libusb_context::hotplug_pipe	compat/libusb-1.0/libusb/libusbi.h	/^        int hotplug_pipe[2];$/;"	m	struct:libusb_context	access:public
libusb_context::list	compat/libusb-1.0/libusb/libusbi.h	/^        struct list_head list;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
libusb_context::open_devs	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head open_devs;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
libusb_context::open_devs_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t open_devs_lock;$/;"	m	struct:libusb_context	access:public
libusb_context::pollfd_modify	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned int pollfd_modify;$/;"	m	struct:libusb_context	access:public
libusb_context::pollfd_modify_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t pollfd_modify_lock;$/;"	m	struct:libusb_context	access:public
libusb_context::pollfds	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head pollfds;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
libusb_context::pollfds_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t pollfds_lock;$/;"	m	struct:libusb_context	access:public
libusb_context::timerfd	compat/libusb-1.0/libusb/libusbi.h	/^	int timerfd;$/;"	m	struct:libusb_context	access:public
libusb_context::usb_devs	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head usb_devs;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
libusb_context::usb_devs_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t usb_devs_lock;$/;"	m	struct:libusb_context	access:public
libusb_control_setup	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_control_setup {$/;"	s
libusb_control_setup::bRequest	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bRequest;$/;"	m	struct:libusb_control_setup	access:public
libusb_control_setup::bmRequestType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmRequestType;$/;"	m	struct:libusb_control_setup	access:public
libusb_control_setup::wIndex	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wIndex;$/;"	m	struct:libusb_control_setup	access:public
libusb_control_setup::wLength	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wLength;$/;"	m	struct:libusb_control_setup	access:public
libusb_control_setup::wValue	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wValue;$/;"	m	struct:libusb_control_setup	access:public
libusb_control_transfer	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_control_transfer(libusb_device_handle *dev_handle,$/;"	p	signature:(libusb_device_handle *dev_handle, uint8_t request_type, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, unsigned char *data, uint16_t wLength, unsigned int timeout)
libusb_control_transfer	compat/libusb-1.0/libusb/sync.c	/^int API_EXPORTED libusb_control_transfer(libusb_device_handle *dev_handle,$/;"	f	signature:(libusb_device_handle *dev_handle, uint8_t bmRequestType, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, unsigned char *data, uint16_t wLength, unsigned int timeout)
libusb_control_transfer_get_data	compat/libusb-1.0/libusb/libusb.h	/^static inline unsigned char *libusb_control_transfer_get_data($/;"	f	signature:( struct libusb_transfer *transfer)
libusb_control_transfer_get_setup	compat/libusb-1.0/libusb/libusb.h	/^static inline struct libusb_control_setup *libusb_control_transfer_get_setup($/;"	f	signature:( struct libusb_transfer *transfer)
libusb_cpu_to_le16	compat/libusb-1.0/libusb/libusb.h	/^static inline uint16_t libusb_cpu_to_le16(const uint16_t x)$/;"	f	signature:(const uint16_t x)
libusb_darwin_acfl	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static CFRunLoopRef libusb_darwin_acfl = NULL; \/* event cf loop *\/$/;"	v	file:
libusb_darwin_at	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static pthread_t libusb_darwin_at;$/;"	v	file:
libusb_darwin_at_cond	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static pthread_cond_t  libusb_darwin_at_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
libusb_darwin_at_mutex	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static pthread_mutex_t libusb_darwin_at_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
libusb_descriptor_type	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_descriptor_type {$/;"	g
libusb_detach_kernel_driver	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_detach_kernel_driver(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, int interface_number)
libusb_detach_kernel_driver	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_detach_kernel_driver(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, int interface_number)
libusb_device	compat/libusb-1.0/libusb/libusb.h	/^typedef struct libusb_device libusb_device;$/;"	t	typeref:struct:libusb_device
libusb_device	compat/libusb-1.0/libusb/libusbi.h	/^struct libusb_device {$/;"	s
libusb_device::attached	compat/libusb-1.0/libusb/libusbi.h	/^	int attached;$/;"	m	struct:libusb_device	access:public
libusb_device::bus_number	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t bus_number;$/;"	m	struct:libusb_device	access:public
libusb_device::ctx	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_context *ctx;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::libusb_context	access:public
libusb_device::device_address	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t device_address;$/;"	m	struct:libusb_device	access:public
libusb_device::device_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_device_descriptor device_descriptor;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::libusb_device_descriptor	access:public
libusb_device::list	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::list_head	access:public
libusb_device::lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t lock;$/;"	m	struct:libusb_device	access:public
libusb_device::num_configurations	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t num_configurations;$/;"	m	struct:libusb_device	access:public
libusb_device::os_priv	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned char os_priv$/;"	m	struct:libusb_device	access:public
libusb_device::refcnt	compat/libusb-1.0/libusb/libusbi.h	/^	int refcnt;$/;"	m	struct:libusb_device	access:public
libusb_device::session_data	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned long session_data;$/;"	m	struct:libusb_device	access:public
libusb_device::speed	compat/libusb-1.0/libusb/libusbi.h	/^	enum libusb_speed speed;$/;"	m	struct:libusb_device	typeref:enum:libusb_device::libusb_speed	access:public
libusb_device_descriptor	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_device_descriptor {$/;"	s
libusb_device_descriptor::bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::bDeviceClass	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDeviceClass;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::bDeviceProtocol	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDeviceProtocol;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::bDeviceSubClass	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDeviceSubClass;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::bMaxPacketSize0	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bMaxPacketSize0;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::bNumConfigurations	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bNumConfigurations;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::bcdDevice	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t bcdDevice;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::bcdUSB	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t bcdUSB;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::iManufacturer	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iManufacturer;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::iProduct	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iProduct;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::iSerialNumber	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iSerialNumber;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::idProduct	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t idProduct;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_descriptor::idVendor	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t idVendor;$/;"	m	struct:libusb_device_descriptor	access:public
libusb_device_handle	compat/libusb-1.0/libusb/libusb.h	/^typedef struct libusb_device_handle libusb_device_handle;$/;"	t	typeref:struct:libusb_device_handle
libusb_device_handle	compat/libusb-1.0/libusb/libusbi.h	/^struct libusb_device_handle {$/;"	s
libusb_device_handle::claimed_interfaces	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned long claimed_interfaces;$/;"	m	struct:libusb_device_handle	access:public
libusb_device_handle::dev	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_device *dev;$/;"	m	struct:libusb_device_handle	typeref:struct:libusb_device_handle::libusb_device	access:public
libusb_device_handle::list	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:libusb_device_handle	typeref:struct:libusb_device_handle::list_head	access:public
libusb_device_handle::lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t lock;$/;"	m	struct:libusb_device_handle	access:public
libusb_device_handle::os_priv	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned char os_priv$/;"	m	struct:libusb_device_handle	access:public
libusb_endpoint_descriptor	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_endpoint_descriptor {$/;"	s
libusb_endpoint_descriptor::bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_descriptor::bEndpointAddress	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bEndpointAddress;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_descriptor::bInterval	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterval;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_descriptor::bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_descriptor::bRefresh	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bRefresh;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_descriptor::bSynchAddress	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bSynchAddress;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_descriptor::bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_descriptor::extra	compat/libusb-1.0/libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_descriptor::extra_length	compat/libusb-1.0/libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_descriptor::wMaxPacketSize	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wMaxPacketSize;$/;"	m	struct:libusb_endpoint_descriptor	access:public
libusb_endpoint_direction	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_endpoint_direction {$/;"	g
libusb_error	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_error {$/;"	g
libusb_error_name	compat/libusb-1.0/libusb/core.c	/^DEFAULT_VISIBILITY const char * LIBUSB_CALL libusb_error_name(int error_code)$/;"	f	signature:(int error_code)
libusb_error_name	compat/libusb-1.0/libusb/libusb.h	/^const char * LIBUSB_CALL libusb_error_name(int errcode);$/;"	p	signature:(int errcode)
libusb_event_handler_active	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_event_handler_active(libusb_context *ctx)$/;"	f	signature:(libusb_context *ctx)
libusb_event_handler_active	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_event_handler_active(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_event_handling_ok	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_event_handling_ok(libusb_context *ctx)$/;"	f	signature:(libusb_context *ctx)
libusb_event_handling_ok	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_event_handling_ok(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_exit	compat/libusb-1.0/libusb/core.c	/^void API_EXPORTED libusb_exit(struct libusb_context *ctx)$/;"	f	signature:(struct libusb_context *ctx)
libusb_exit	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_exit(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_fill_bulk_transfer	compat/libusb-1.0/libusb/libusb.h	/^static inline void libusb_fill_bulk_transfer(struct libusb_transfer *transfer,$/;"	f	signature:(struct libusb_transfer *transfer, libusb_device_handle *dev_handle, unsigned char endpoint, unsigned char *buffer, int length, libusb_transfer_cb_fn callback, void *user_data, unsigned int timeout)
libusb_fill_control_setup	compat/libusb-1.0/libusb/libusb.h	/^static inline void libusb_fill_control_setup(unsigned char *buffer,$/;"	f	signature:(unsigned char *buffer, uint8_t bmRequestType, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, uint16_t wLength)
libusb_fill_control_transfer	compat/libusb-1.0/libusb/libusb.h	/^static inline void libusb_fill_control_transfer($/;"	f	signature:( struct libusb_transfer *transfer, libusb_device_handle *dev_handle, unsigned char *buffer, libusb_transfer_cb_fn callback, void *user_data, unsigned int timeout)
libusb_fill_interrupt_transfer	compat/libusb-1.0/libusb/libusb.h	/^static inline void libusb_fill_interrupt_transfer($/;"	f	signature:( struct libusb_transfer *transfer, libusb_device_handle *dev_handle, unsigned char endpoint, unsigned char *buffer, int length, libusb_transfer_cb_fn callback, void *user_data, unsigned int timeout)
libusb_fill_iso_transfer	compat/libusb-1.0/libusb/libusb.h	/^static inline void libusb_fill_iso_transfer(struct libusb_transfer *transfer,$/;"	f	signature:(struct libusb_transfer *transfer, libusb_device_handle *dev_handle, unsigned char endpoint, unsigned char *buffer, int length, int num_iso_packets, libusb_transfer_cb_fn callback, void *user_data, unsigned int timeout)
libusb_free_bos_descriptor	compat/libusb-1.0/libusb/descriptor.c	/^void API_EXPORTED libusb_free_bos_descriptor(struct libusb_bos_descriptor *bos)$/;"	f	signature:(struct libusb_bos_descriptor *bos)
libusb_free_bos_descriptor	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_free_bos_descriptor(struct libusb_bos_descriptor *bos);$/;"	p	signature:(struct libusb_bos_descriptor *bos)
libusb_free_config_descriptor	compat/libusb-1.0/libusb/descriptor.c	/^void API_EXPORTED libusb_free_config_descriptor($/;"	f	signature:( struct libusb_config_descriptor *config)
libusb_free_config_descriptor	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_free_config_descriptor($/;"	p	signature:( struct libusb_config_descriptor *config)
libusb_free_device_list	compat/libusb-1.0/libusb/core.c	/^void API_EXPORTED libusb_free_device_list(libusb_device **list,$/;"	f	signature:(libusb_device **list, int unref_devices)
libusb_free_device_list	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_free_device_list(libusb_device **list,$/;"	p	signature:(libusb_device **list, int unref_devices)
libusb_free_ss_endpoint_comp	compat/libusb-1.0/libusb/descriptor.c	/^void API_EXPORTED libusb_free_ss_endpoint_comp(struct libusb_ss_endpoint_companion_descriptor *ep_comp)$/;"	f	signature:(struct libusb_ss_endpoint_companion_descriptor *ep_comp)
libusb_free_ss_endpoint_comp	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_free_ss_endpoint_comp(struct libusb_ss_endpoint_companion_descriptor *ep_comp);$/;"	p	signature:(struct libusb_ss_endpoint_companion_descriptor *ep_comp)
libusb_free_transfer	compat/libusb-1.0/libusb/io.c	/^void API_EXPORTED libusb_free_transfer(struct libusb_transfer *transfer)$/;"	f	signature:(struct libusb_transfer *transfer)
libusb_free_transfer	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_free_transfer(struct libusb_transfer *transfer);$/;"	p	signature:(struct libusb_transfer *transfer)
libusb_get_active_config_descriptor	compat/libusb-1.0/libusb/descriptor.c	/^int API_EXPORTED libusb_get_active_config_descriptor(libusb_device *dev,$/;"	f	signature:(libusb_device *dev, struct libusb_config_descriptor **config)
libusb_get_active_config_descriptor	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_active_config_descriptor(libusb_device *dev,$/;"	p	signature:(libusb_device *dev, struct libusb_config_descriptor **config)
libusb_get_bus_number	compat/libusb-1.0/libusb/core.c	/^uint8_t API_EXPORTED libusb_get_bus_number(libusb_device *dev)$/;"	f	signature:(libusb_device *dev)
libusb_get_bus_number	compat/libusb-1.0/libusb/libusb.h	/^uint8_t LIBUSB_CALL libusb_get_bus_number(libusb_device *dev);$/;"	p	signature:(libusb_device *dev)
libusb_get_config_descriptor	compat/libusb-1.0/libusb/descriptor.c	/^int API_EXPORTED libusb_get_config_descriptor(libusb_device *dev,$/;"	f	signature:(libusb_device *dev, uint8_t config_index, struct libusb_config_descriptor **config)
libusb_get_config_descriptor	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_config_descriptor(libusb_device *dev,$/;"	p	signature:(libusb_device *dev, uint8_t config_index, struct libusb_config_descriptor **config)
libusb_get_config_descriptor_by_value	compat/libusb-1.0/libusb/descriptor.c	/^int API_EXPORTED libusb_get_config_descriptor_by_value(libusb_device *dev,$/;"	f	signature:(libusb_device *dev, uint8_t bConfigurationValue, struct libusb_config_descriptor **config)
libusb_get_config_descriptor_by_value	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_config_descriptor_by_value(libusb_device *dev,$/;"	p	signature:(libusb_device *dev, uint8_t bConfigurationValue, struct libusb_config_descriptor **config)
libusb_get_configuration	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_get_configuration(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, int *config)
libusb_get_configuration	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_configuration(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, int *config)
libusb_get_descriptor	compat/libusb-1.0/libusb/libusb.h	/^static inline int libusb_get_descriptor(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, uint8_t desc_type, uint8_t desc_index, unsigned char *data, int length)
libusb_get_device	compat/libusb-1.0/libusb/core.c	/^libusb_device * LIBUSB_CALL libusb_get_device(libusb_device_handle *dev_handle)$/;"	f	signature:(libusb_device_handle *dev_handle)
libusb_get_device	compat/libusb-1.0/libusb/libusb.h	/^libusb_device * LIBUSB_CALL libusb_get_device(libusb_device_handle *dev_handle);$/;"	p	signature:(libusb_device_handle *dev_handle)
libusb_get_device_address	compat/libusb-1.0/libusb/core.c	/^uint8_t API_EXPORTED libusb_get_device_address(libusb_device *dev)$/;"	f	signature:(libusb_device *dev)
libusb_get_device_address	compat/libusb-1.0/libusb/libusb.h	/^uint8_t LIBUSB_CALL libusb_get_device_address(libusb_device *dev);$/;"	p	signature:(libusb_device *dev)
libusb_get_device_descriptor	compat/libusb-1.0/libusb/descriptor.c	/^int API_EXPORTED libusb_get_device_descriptor(libusb_device *dev,$/;"	f	signature:(libusb_device *dev, struct libusb_device_descriptor *desc)
libusb_get_device_descriptor	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_device_descriptor(libusb_device *dev,$/;"	p	signature:(libusb_device *dev, struct libusb_device_descriptor *desc)
libusb_get_device_list	compat/libusb-1.0/libusb/core.c	/^ssize_t API_EXPORTED libusb_get_device_list(libusb_context *ctx,$/;"	f	signature:(libusb_context *ctx, libusb_device ***list)
libusb_get_device_list	compat/libusb-1.0/libusb/libusb.h	/^ssize_t LIBUSB_CALL libusb_get_device_list(libusb_context *ctx,$/;"	p	signature:(libusb_context *ctx, libusb_device ***list)
libusb_get_device_speed	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_get_device_speed(libusb_device *dev)$/;"	f	signature:(libusb_device *dev)
libusb_get_device_speed	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_device_speed(libusb_device *dev);$/;"	p	signature:(libusb_device *dev)
libusb_get_iso_packet_buffer	compat/libusb-1.0/libusb/libusb.h	/^static inline unsigned char *libusb_get_iso_packet_buffer($/;"	f	signature:( struct libusb_transfer *transfer, unsigned int packet)
libusb_get_iso_packet_buffer_simple	compat/libusb-1.0/libusb/libusb.h	/^static inline unsigned char *libusb_get_iso_packet_buffer_simple($/;"	f	signature:( struct libusb_transfer *transfer, unsigned int packet)
libusb_get_max_iso_packet_size	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_get_max_iso_packet_size(libusb_device *dev,$/;"	f	signature:(libusb_device *dev, unsigned char endpoint)
libusb_get_max_iso_packet_size	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_max_iso_packet_size(libusb_device *dev,$/;"	p	signature:(libusb_device *dev, unsigned char endpoint)
libusb_get_max_packet_size	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_get_max_packet_size(libusb_device *dev,$/;"	f	signature:(libusb_device *dev, unsigned char endpoint)
libusb_get_max_packet_size	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_max_packet_size(libusb_device *dev,$/;"	p	signature:(libusb_device *dev, unsigned char endpoint)
libusb_get_next_timeout	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_get_next_timeout(libusb_context *ctx,$/;"	f	signature:(libusb_context *ctx, struct timeval *tv)
libusb_get_next_timeout	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_next_timeout(libusb_context *ctx,$/;"	p	signature:(libusb_context *ctx, struct timeval *tv)
libusb_get_pollfds	compat/libusb-1.0/libusb/io.c	/^const struct libusb_pollfd ** LIBUSB_CALL libusb_get_pollfds($/;"	f	signature:( libusb_context *ctx)
libusb_get_pollfds	compat/libusb-1.0/libusb/libusb.h	/^const struct libusb_pollfd ** LIBUSB_CALL libusb_get_pollfds($/;"	p	signature:( libusb_context *ctx)
libusb_get_string_descriptor	compat/libusb-1.0/libusb/libusb.h	/^static inline int libusb_get_string_descriptor(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, uint8_t desc_index, uint16_t langid, unsigned char *data, int length)
libusb_get_string_descriptor_ascii	compat/libusb-1.0/libusb/descriptor.c	/^int API_EXPORTED libusb_get_string_descriptor_ascii(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, uint8_t desc_index, unsigned char *data, int length)
libusb_get_string_descriptor_ascii	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_get_string_descriptor_ascii(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, uint8_t desc_index, unsigned char *data, int length)
libusb_get_version	compat/libusb-1.0/libusb/core.c	/^const struct libusb_version * LIBUSB_CALL libusb_get_version(void)$/;"	f	signature:(void)
libusb_get_version	compat/libusb-1.0/libusb/libusb.h	/^const struct libusb_version * LIBUSB_CALL libusb_get_version(void);$/;"	p	signature:(void)
libusb_handle_events	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_handle_events(libusb_context *ctx)$/;"	f	signature:(libusb_context *ctx)
libusb_handle_events	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_handle_events_completed	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_handle_events_completed(libusb_context *ctx,$/;"	f	signature:(libusb_context *ctx, int *completed)
libusb_handle_events_completed	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events_completed(libusb_context *ctx, int *completed);$/;"	p	signature:(libusb_context *ctx, int *completed)
libusb_handle_events_locked	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_handle_events_locked(libusb_context *ctx,$/;"	f	signature:(libusb_context *ctx, struct timeval *tv)
libusb_handle_events_locked	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events_locked(libusb_context *ctx,$/;"	p	signature:(libusb_context *ctx, struct timeval *tv)
libusb_handle_events_timeout	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_handle_events_timeout(libusb_context *ctx,$/;"	f	signature:(libusb_context *ctx, struct timeval *tv)
libusb_handle_events_timeout	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events_timeout(libusb_context *ctx,$/;"	p	signature:(libusb_context *ctx, struct timeval *tv)
libusb_handle_events_timeout_completed	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_handle_events_timeout_completed(libusb_context *ctx,$/;"	f	signature:(libusb_context *ctx, struct timeval *tv, int *completed)
libusb_handle_events_timeout_completed	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events_timeout_completed(libusb_context *ctx,$/;"	p	signature:(libusb_context *ctx, struct timeval *tv, int *completed)
libusb_has_capability	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_has_capability(uint32_t capability)$/;"	f	signature:(uint32_t capability)
libusb_has_capability	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_has_capability(uint32_t capability);$/;"	p	signature:(uint32_t capability)
libusb_hotplug_callback	compat/libusb-1.0/libusb/hotplug.h	/^struct libusb_hotplug_callback {$/;"	s
libusb_hotplug_callback	compat/libusb-1.0/libusb/hotplug.h	/^typedef struct libusb_hotplug_callback libusb_hotplug_callback;$/;"	t	typeref:struct:libusb_hotplug_callback
libusb_hotplug_callback::cb	compat/libusb-1.0/libusb/hotplug.h	/^	libusb_hotplug_callback_fn cb;$/;"	m	struct:libusb_hotplug_callback	access:public
libusb_hotplug_callback::ctx	compat/libusb-1.0/libusb/hotplug.h	/^	struct libusb_context *ctx;$/;"	m	struct:libusb_hotplug_callback	typeref:struct:libusb_hotplug_callback::libusb_context	access:public
libusb_hotplug_callback::dev_class	compat/libusb-1.0/libusb/hotplug.h	/^	int dev_class;$/;"	m	struct:libusb_hotplug_callback	access:public
libusb_hotplug_callback::events	compat/libusb-1.0/libusb/hotplug.h	/^	libusb_hotplug_event events;$/;"	m	struct:libusb_hotplug_callback	access:public
libusb_hotplug_callback::flags	compat/libusb-1.0/libusb/hotplug.h	/^        libusb_hotplug_flag flags;$/;"	m	struct:libusb_hotplug_callback	access:public
libusb_hotplug_callback::handle	compat/libusb-1.0/libusb/hotplug.h	/^        libusb_hotplug_callback_handle handle;$/;"	m	struct:libusb_hotplug_callback	access:public
libusb_hotplug_callback::list	compat/libusb-1.0/libusb/hotplug.h	/^        struct list_head list;$/;"	m	struct:libusb_hotplug_callback	typeref:struct:libusb_hotplug_callback::list_head	access:public
libusb_hotplug_callback::needs_free	compat/libusb-1.0/libusb/hotplug.h	/^        int needs_free;$/;"	m	struct:libusb_hotplug_callback	access:public
libusb_hotplug_callback::product_id	compat/libusb-1.0/libusb/hotplug.h	/^	int product_id;$/;"	m	struct:libusb_hotplug_callback	access:public
libusb_hotplug_callback::user_data	compat/libusb-1.0/libusb/hotplug.h	/^	void *user_data;$/;"	m	struct:libusb_hotplug_callback	access:public
libusb_hotplug_callback::vendor_id	compat/libusb-1.0/libusb/hotplug.h	/^	int vendor_id;$/;"	m	struct:libusb_hotplug_callback	access:public
libusb_hotplug_callback_fn	compat/libusb-1.0/libusb/libusb.h	/^typedef int (LIBUSB_CALL *libusb_hotplug_callback_fn)(libusb_context *ctx,$/;"	t
libusb_hotplug_callback_handle	compat/libusb-1.0/libusb/libusb.h	/^typedef int libusb_hotplug_callback_handle;$/;"	t
libusb_hotplug_deregister_callback	compat/libusb-1.0/libusb/hotplug.c	/^void API_EXPORTED libusb_hotplug_deregister_callback (struct libusb_context *ctx, libusb_hotplug_callback_handle handle) {$/;"	f	signature:(struct libusb_context *ctx, libusb_hotplug_callback_handle handle)
libusb_hotplug_deregister_callback	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_hotplug_deregister_callback(libusb_context *ctx,$/;"	p	signature:(libusb_context *ctx, libusb_hotplug_callback_handle handle)
libusb_hotplug_event	compat/libusb-1.0/libusb/libusb.h	/^} libusb_hotplug_event;$/;"	t	typeref:enum:__anon42
libusb_hotplug_flag	compat/libusb-1.0/libusb/libusb.h	/^} libusb_hotplug_flag;$/;"	t	typeref:enum:__anon41
libusb_hotplug_message	compat/libusb-1.0/libusb/hotplug.h	/^struct libusb_hotplug_message {$/;"	s
libusb_hotplug_message	compat/libusb-1.0/libusb/hotplug.h	/^typedef struct libusb_hotplug_message libusb_hotplug_message;$/;"	t	typeref:struct:libusb_hotplug_message
libusb_hotplug_message::device	compat/libusb-1.0/libusb/hotplug.h	/^        struct libusb_device *device;$/;"	m	struct:libusb_hotplug_message	typeref:struct:libusb_hotplug_message::libusb_device	access:public
libusb_hotplug_message::event	compat/libusb-1.0/libusb/hotplug.h	/^        libusb_hotplug_event event;$/;"	m	struct:libusb_hotplug_message	access:public
libusb_hotplug_register_callback	compat/libusb-1.0/libusb/hotplug.c	/^int API_EXPORTED libusb_hotplug_register_callback(libusb_context *ctx,$/;"	f	signature:(libusb_context *ctx, libusb_hotplug_event events, libusb_hotplug_flag flags, int vendor_id, int product_id, int dev_class, libusb_hotplug_callback_fn cb_fn, void *user_data, libusb_hotplug_callback_handle *handle)
libusb_hotplug_register_callback	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_hotplug_register_callback(libusb_context *ctx,$/;"	p	signature:(libusb_context *ctx, libusb_hotplug_event events, libusb_hotplug_flag flags, int vendor_id, int product_id, int dev_class, libusb_hotplug_callback_fn cb_fn, void *user_data, libusb_hotplug_callback_handle *handle)
libusb_init	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_init(libusb_context **context)$/;"	f	signature:(libusb_context **context)
libusb_init	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_init(libusb_context **ctx);$/;"	p	signature:(libusb_context **ctx)
libusb_interface	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_interface {$/;"	s
libusb_interface::altsetting	compat/libusb-1.0/libusb/libusb.h	/^	const struct libusb_interface_descriptor *altsetting;$/;"	m	struct:libusb_interface	typeref:struct:libusb_interface::libusb_interface_descriptor	access:public
libusb_interface::num_altsetting	compat/libusb-1.0/libusb/libusb.h	/^	int num_altsetting;$/;"	m	struct:libusb_interface	access:public
libusb_interface_descriptor	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_interface_descriptor {$/;"	s
libusb_interface_descriptor::bAlternateSetting	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bAlternateSetting;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::bInterfaceClass	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterfaceClass;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::bInterfaceNumber	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterfaceNumber;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::bInterfaceProtocol	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterfaceProtocol;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::bInterfaceSubClass	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bInterfaceSubClass;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::bNumEndpoints	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bNumEndpoints;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::endpoint	compat/libusb-1.0/libusb/libusb.h	/^	const struct libusb_endpoint_descriptor *endpoint;$/;"	m	struct:libusb_interface_descriptor	typeref:struct:libusb_interface_descriptor::libusb_endpoint_descriptor	access:public
libusb_interface_descriptor::extra	compat/libusb-1.0/libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::extra_length	compat/libusb-1.0/libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interface_descriptor::iInterface	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  iInterface;$/;"	m	struct:libusb_interface_descriptor	access:public
libusb_interrupt_transfer	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_interrupt_transfer(libusb_device_handle *dev_handle,$/;"	p	signature:(libusb_device_handle *dev_handle, unsigned char endpoint, unsigned char *data, int length, int *actual_length, unsigned int timeout)
libusb_interrupt_transfer	compat/libusb-1.0/libusb/sync.c	/^int API_EXPORTED libusb_interrupt_transfer($/;"	f	signature:( struct libusb_device_handle *dev_handle, unsigned char endpoint, unsigned char *data, int length, int *transferred, unsigned int timeout)
libusb_iso_packet_descriptor	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_iso_packet_descriptor {$/;"	s
libusb_iso_packet_descriptor::actual_length	compat/libusb-1.0/libusb/libusb.h	/^	unsigned int actual_length;$/;"	m	struct:libusb_iso_packet_descriptor	access:public
libusb_iso_packet_descriptor::length	compat/libusb-1.0/libusb/libusb.h	/^	unsigned int length;$/;"	m	struct:libusb_iso_packet_descriptor	access:public
libusb_iso_packet_descriptor::status	compat/libusb-1.0/libusb/libusb.h	/^	enum libusb_transfer_status status;$/;"	m	struct:libusb_iso_packet_descriptor	typeref:enum:libusb_iso_packet_descriptor::libusb_transfer_status	access:public
libusb_iso_sync_type	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_iso_sync_type {$/;"	g
libusb_iso_usage_type	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_iso_usage_type {$/;"	g
libusb_kernel_driver_active	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_kernel_driver_active(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, int interface_number)
libusb_kernel_driver_active	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_kernel_driver_active(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, int interface_number)
libusb_le16_to_cpu	compat/libusb-1.0/libusb/libusb.h	139;"	d
libusb_linux_event_thread	compat/libusb-1.0/libusb/os/linux_netlink.c	/^static pthread_t libusb_linux_event_thread;$/;"	v	file:
libusb_lock_event_waiters	compat/libusb-1.0/libusb/io.c	/^void API_EXPORTED libusb_lock_event_waiters(libusb_context *ctx)$/;"	f	signature:(libusb_context *ctx)
libusb_lock_event_waiters	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_lock_event_waiters(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_lock_events	compat/libusb-1.0/libusb/io.c	/^void API_EXPORTED libusb_lock_events(libusb_context *ctx)$/;"	f	signature:(libusb_context *ctx)
libusb_lock_events	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_lock_events(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_open	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_open(libusb_device *dev,$/;"	f	signature:(libusb_device *dev, libusb_device_handle **handle)
libusb_open	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_open(libusb_device *dev, libusb_device_handle **handle);$/;"	p	signature:(libusb_device *dev, libusb_device_handle **handle)
libusb_open_device_with_vid_pid	compat/libusb-1.0/libusb/core.c	/^libusb_device_handle * LIBUSB_CALL libusb_open_device_with_vid_pid($/;"	f	signature:( libusb_context *ctx, uint16_t vendor_id, uint16_t product_id)
libusb_open_device_with_vid_pid	compat/libusb-1.0/libusb/libusb.h	/^libusb_device_handle * LIBUSB_CALL libusb_open_device_with_vid_pid($/;"	p	signature:( libusb_context *ctx, uint16_t vendor_id, uint16_t product_id)
libusb_parse_bos_descriptor	compat/libusb-1.0/libusb/descriptor.c	/^int API_EXPORTED libusb_parse_bos_descriptor(const void *buf, int len,$/;"	f	signature:(const void *buf, int len, struct libusb_bos_descriptor **bos)
libusb_parse_bos_descriptor	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_parse_bos_descriptor(const void *buf, int len,$/;"	p	signature:(const void *buf, int len, struct libusb_bos_descriptor **bos)
libusb_parse_ss_endpoint_comp	compat/libusb-1.0/libusb/descriptor.c	/^int API_EXPORTED libusb_parse_ss_endpoint_comp(const void *buf, int len,$/;"	f	signature:(const void *buf, int len, struct libusb_ss_endpoint_companion_descriptor **ep_comp)
libusb_parse_ss_endpoint_comp	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_parse_ss_endpoint_comp(const void *buf, int len,$/;"	p	signature:(const void *buf, int len, struct libusb_ss_endpoint_companion_descriptor **ep_comp)
libusb_poll_thread	cgminer.c	/^static void *libusb_poll_thread(void __maybe_unused *arg)$/;"	f	file:	signature:(void __maybe_unused *arg)
libusb_pollfd	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_pollfd {$/;"	s
libusb_pollfd::events	compat/libusb-1.0/libusb/libusb.h	/^	short events;$/;"	m	struct:libusb_pollfd	access:public
libusb_pollfd::fd	compat/libusb-1.0/libusb/libusb.h	/^	int fd;$/;"	m	struct:libusb_pollfd	access:public
libusb_pollfd_added_cb	compat/libusb-1.0/libusb/libusb.h	/^typedef void (LIBUSB_CALL *libusb_pollfd_added_cb)(int fd, short events,$/;"	t
libusb_pollfd_removed_cb	compat/libusb-1.0/libusb/libusb.h	/^typedef void (LIBUSB_CALL *libusb_pollfd_removed_cb)(int fd, void *user_data);$/;"	t
libusb_pollfds_handle_timeouts	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_pollfds_handle_timeouts(libusb_context *ctx)$/;"	f	signature:(libusb_context *ctx)
libusb_pollfds_handle_timeouts	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_pollfds_handle_timeouts(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_ref_device	compat/libusb-1.0/libusb/core.c	/^libusb_device * LIBUSB_CALL libusb_ref_device(libusb_device *dev)$/;"	f	signature:(libusb_device *dev)
libusb_ref_device	compat/libusb-1.0/libusb/libusb.h	/^libusb_device * LIBUSB_CALL libusb_ref_device(libusb_device *dev);$/;"	p	signature:(libusb_device *dev)
libusb_release_interface	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_release_interface(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, int interface_number)
libusb_release_interface	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_release_interface(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, int interface_number)
libusb_request_recipient	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_request_recipient {$/;"	g
libusb_request_type	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_request_type {$/;"	g
libusb_reset_device	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_reset_device(libusb_device_handle *dev)$/;"	f	signature:(libusb_device_handle *dev)
libusb_reset_device	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_reset_device(libusb_device_handle *dev);$/;"	p	signature:(libusb_device_handle *dev)
libusb_set_configuration	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_set_configuration(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, int configuration)
libusb_set_configuration	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_set_configuration(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, int configuration)
libusb_set_debug	compat/libusb-1.0/libusb/core.c	/^void API_EXPORTED libusb_set_debug(libusb_context *ctx, int level)$/;"	f	signature:(libusb_context *ctx, int level)
libusb_set_debug	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_set_debug(libusb_context *ctx, int level);$/;"	p	signature:(libusb_context *ctx, int level)
libusb_set_interface_alt_setting	compat/libusb-1.0/libusb/core.c	/^int API_EXPORTED libusb_set_interface_alt_setting(libusb_device_handle *dev,$/;"	f	signature:(libusb_device_handle *dev, int interface_number, int alternate_setting)
libusb_set_interface_alt_setting	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_set_interface_alt_setting(libusb_device_handle *dev,$/;"	p	signature:(libusb_device_handle *dev, int interface_number, int alternate_setting)
libusb_set_iso_packet_lengths	compat/libusb-1.0/libusb/libusb.h	/^static inline void libusb_set_iso_packet_lengths($/;"	f	signature:( struct libusb_transfer *transfer, unsigned int length)
libusb_set_pollfd_notifiers	compat/libusb-1.0/libusb/io.c	/^void API_EXPORTED libusb_set_pollfd_notifiers(libusb_context *ctx,$/;"	f	signature:(libusb_context *ctx, libusb_pollfd_added_cb added_cb, libusb_pollfd_removed_cb removed_cb, void *user_data)
libusb_set_pollfd_notifiers	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_set_pollfd_notifiers(libusb_context *ctx,$/;"	p	signature:(libusb_context *ctx, libusb_pollfd_added_cb added_cb, libusb_pollfd_removed_cb removed_cb, void *user_data)
libusb_speed	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_speed {$/;"	g
libusb_ss_endpoint_companion_descriptor	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_ss_endpoint_companion_descriptor {$/;"	s
libusb_ss_endpoint_companion_descriptor::bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
libusb_ss_endpoint_companion_descriptor::bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
libusb_ss_endpoint_companion_descriptor::bMaxBurst	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bMaxBurst;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
libusb_ss_endpoint_companion_descriptor::bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
libusb_ss_endpoint_companion_descriptor::wBytesPerInterval	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wBytesPerInterval;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
libusb_ss_usb_device_capability_descriptor	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_ss_usb_device_capability_descriptor {$/;"	s
libusb_ss_usb_device_capability_descriptor::bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
libusb_ss_usb_device_capability_descriptor::bDevCapabilityType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
libusb_ss_usb_device_capability_descriptor::bFunctionalitySupport	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bFunctionalitySupport;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
libusb_ss_usb_device_capability_descriptor::bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
libusb_ss_usb_device_capability_descriptor::bU1DevExitLat	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bU1DevExitLat;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
libusb_ss_usb_device_capability_descriptor::bU2DevExitLat	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t bU2DevExitLat;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
libusb_ss_usb_device_capability_descriptor::bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
libusb_ss_usb_device_capability_descriptor::wSpeedSupported	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wSpeedSupported;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
libusb_standard_request	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_standard_request {$/;"	g
libusb_strerror	compat/libusb-1.0/libusb/core.c	/^API_EXPORTED const char* libusb_strerror(enum libusb_error errcode)$/;"	f	signature:(enum libusb_error errcode)
libusb_strerror	compat/libusb-1.0/libusb/libusb.h	/^const char * LIBUSB_CALL libusb_strerror(enum libusb_error errcode);$/;"	p	signature:(enum libusb_error errcode)
libusb_submit_transfer	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_submit_transfer(struct libusb_transfer *transfer)$/;"	f	signature:(struct libusb_transfer *transfer)
libusb_submit_transfer	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_submit_transfer(struct libusb_transfer *transfer);$/;"	p	signature:(struct libusb_transfer *transfer)
libusb_supported_speed	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_supported_speed {$/;"	g
libusb_transfer	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_transfer {$/;"	s
libusb_transfer::actual_length	compat/libusb-1.0/libusb/libusb.h	/^	int actual_length;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::buffer	compat/libusb-1.0/libusb/libusb.h	/^	unsigned char *buffer;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::callback	compat/libusb-1.0/libusb/libusb.h	/^	libusb_transfer_cb_fn callback;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::dev_handle	compat/libusb-1.0/libusb/libusb.h	/^	libusb_device_handle *dev_handle;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::endpoint	compat/libusb-1.0/libusb/libusb.h	/^	unsigned char endpoint;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::flags	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t flags;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::iso_packet_desc	compat/libusb-1.0/libusb/libusb.h	/^	struct libusb_iso_packet_descriptor iso_packet_desc$/;"	m	struct:libusb_transfer	typeref:struct:libusb_transfer::libusb_iso_packet_descriptor	access:public
libusb_transfer::length	compat/libusb-1.0/libusb/libusb.h	/^	int length;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::num_iso_packets	compat/libusb-1.0/libusb/libusb.h	/^	int num_iso_packets;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::status	compat/libusb-1.0/libusb/libusb.h	/^	enum libusb_transfer_status status;$/;"	m	struct:libusb_transfer	typeref:enum:libusb_transfer::libusb_transfer_status	access:public
libusb_transfer::timeout	compat/libusb-1.0/libusb/libusb.h	/^	unsigned int timeout;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::type	compat/libusb-1.0/libusb/libusb.h	/^	unsigned char type;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer::user_data	compat/libusb-1.0/libusb/libusb.h	/^	void *user_data;$/;"	m	struct:libusb_transfer	access:public
libusb_transfer_cb_fn	compat/libusb-1.0/libusb/libusb.h	/^typedef void (LIBUSB_CALL *libusb_transfer_cb_fn)(struct libusb_transfer *transfer);$/;"	t
libusb_transfer_flags	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_transfer_flags {$/;"	g
libusb_transfer_status	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_transfer_status {$/;"	g
libusb_transfer_type	compat/libusb-1.0/libusb/libusb.h	/^enum libusb_transfer_type {$/;"	g
libusb_try_lock_events	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_try_lock_events(libusb_context *ctx)$/;"	f	signature:(libusb_context *ctx)
libusb_try_lock_events	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_try_lock_events(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_unlock_event_waiters	compat/libusb-1.0/libusb/io.c	/^void API_EXPORTED libusb_unlock_event_waiters(libusb_context *ctx)$/;"	f	signature:(libusb_context *ctx)
libusb_unlock_event_waiters	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_unlock_event_waiters(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_unlock_events	compat/libusb-1.0/libusb/io.c	/^void API_EXPORTED libusb_unlock_events(libusb_context *ctx)$/;"	f	signature:(libusb_context *ctx)
libusb_unlock_events	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_unlock_events(libusb_context *ctx);$/;"	p	signature:(libusb_context *ctx)
libusb_unref_device	compat/libusb-1.0/libusb/core.c	/^void API_EXPORTED libusb_unref_device(libusb_device *dev)$/;"	f	signature:(libusb_device *dev)
libusb_unref_device	compat/libusb-1.0/libusb/libusb.h	/^void LIBUSB_CALL libusb_unref_device(libusb_device *dev);$/;"	p	signature:(libusb_device *dev)
libusb_usb_2_0_device_capability_descriptor	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_usb_2_0_device_capability_descriptor {$/;"	s
libusb_usb_2_0_device_capability_descriptor::bDescriptorType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_usb_2_0_device_capability_descriptor	access:public
libusb_usb_2_0_device_capability_descriptor::bDevCapabilityType	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_usb_2_0_device_capability_descriptor	access:public
libusb_usb_2_0_device_capability_descriptor::bLength	compat/libusb-1.0/libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_usb_2_0_device_capability_descriptor	access:public
libusb_usb_2_0_device_capability_descriptor::bmAttributes	compat/libusb-1.0/libusb/libusb.h	/^	uint32_t  bmAttributes;$/;"	m	struct:libusb_usb_2_0_device_capability_descriptor	access:public
libusb_version	compat/libusb-1.0/libusb/libusb.h	/^struct libusb_version {$/;"	s
libusb_version::describe	compat/libusb-1.0/libusb/libusb.h	/^	const char *describe;$/;"	m	struct:libusb_version	access:public
libusb_version::major	compat/libusb-1.0/libusb/libusb.h	/^	const uint16_t major;$/;"	m	struct:libusb_version	access:public
libusb_version::micro	compat/libusb-1.0/libusb/libusb.h	/^	const uint16_t micro;$/;"	m	struct:libusb_version	access:public
libusb_version::minor	compat/libusb-1.0/libusb/libusb.h	/^	const uint16_t minor;$/;"	m	struct:libusb_version	access:public
libusb_version::nano	compat/libusb-1.0/libusb/libusb.h	/^	const uint16_t nano;$/;"	m	struct:libusb_version	access:public
libusb_version::rc	compat/libusb-1.0/libusb/libusb.h	/^	const char *rc;$/;"	m	struct:libusb_version	access:public
libusb_version_internal	compat/libusb-1.0/libusb/core.c	/^const struct libusb_version libusb_version_internal = {$/;"	v	typeref:struct:libusb_version
libusb_wait_for_event	compat/libusb-1.0/libusb/io.c	/^int API_EXPORTED libusb_wait_for_event(libusb_context *ctx, struct timeval *tv)$/;"	f	signature:(libusb_context *ctx, struct timeval *tv)
libusb_wait_for_event	compat/libusb-1.0/libusb/libusb.h	/^int LIBUSB_CALL libusb_wait_for_event(libusb_context *ctx, struct timeval *tv);$/;"	p	signature:(libusb_context *ctx, struct timeval *tv)
likely	miner.h	210;"	d
likely	miner.h	213;"	d
likely	miner.h	216;"	d
limit	klist.h	/^	int limit;		\/\/ total limit - 0 means unlimited$/;"	m	struct:k_list	access:public
limit	usbutils.c	/^	int limit;$/;"	m	struct:driver_count	file:	access:public
line	api-example.php	/^	$line = readsockline($socket);$/;"	v
line	api-example.php	/^ $line = '';$/;"	v
line	compat/jansson-2.6/src/jansson.h	/^    int line;$/;"	m	struct:__anon28	access:public
line	compat/jansson-2.6/src/load.c	/^    int line;$/;"	m	struct:__anon16	file:	access:public
line	compat/jansson-2.6/src/pack_unpack.c	/^    int line;$/;"	m	struct:__anon14	file:	access:public
line	compat/jansson-2.6/src/pack_unpack.c	/^    int line;$/;"	m	struct:__anon15	file:	access:public
line	miner.php	/^	$line = api_convert_escape($line);$/;"	v
line	miner.php	/^	$line = readsockline($socket);$/;"	v
line	miner.php	/^ $line = '';$/;"	v
linenum	api.c	/^	int linenum;$/;"	m	struct:lockinfo	file:	access:public
linenum	api.c	/^	int linenum;$/;"	m	struct:lockstat	file:	access:public
linesplit	api-example.py	/^def linesplit(socket):$/;"	f	access:public
linux_default_scan_devices	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int linux_default_scan_devices (struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
linux_default_scan_devices	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int linux_default_scan_devices (struct libusb_context *ctx);$/;"	p	file:	signature:(struct libusb_context *ctx)
linux_device_handle_priv	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^struct linux_device_handle_priv {$/;"	s	file:
linux_device_handle_priv::caps	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	uint32_t caps;$/;"	m	struct:linux_device_handle_priv	file:	access:public
linux_device_handle_priv::fd	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	int fd;$/;"	m	struct:linux_device_handle_priv	file:	access:public
linux_device_priv	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^struct linux_device_priv {$/;"	s	file:
linux_device_priv::config_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	unsigned char *config_descriptor;$/;"	m	struct:linux_device_priv	file:	access:public
linux_device_priv::dev_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	unsigned char *dev_descriptor;$/;"	m	struct:linux_device_priv	file:	access:public
linux_device_priv::sysfs_dir	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	char *sysfs_dir;$/;"	m	struct:linux_device_priv	file:	access:public
linux_enumerate_device	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^int linux_enumerate_device(struct libusb_context *ctx,$/;"	f	signature:(struct libusb_context *ctx, uint8_t busnum, uint8_t devaddr, const char *sysfs_dir)
linux_enumerate_device	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^int linux_enumerate_device(struct libusb_context *ctx,$/;"	p	signature:(struct libusb_context *ctx, uint8_t busnum, uint8_t devaddr, const char *sysfs_dir)
linux_event_thread	compat/libusb-1.0/libusb/os/linux_udev.c	/^static pthread_t linux_event_thread;$/;"	v	file:
linux_get_device_address	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^int linux_get_device_address (struct libusb_context *ctx, int detached,$/;"	f	signature:(struct libusb_context *ctx, int detached, uint8_t *busnum, uint8_t *devaddr, const char *dev_node, const char *sys_name)
linux_get_device_address	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^int linux_get_device_address (struct libusb_context *ctx, int detached,$/;"	p	signature:(struct libusb_context *ctx, int detached, uint8_t *busnum, uint8_t *devaddr, const char *dev_node, const char *sys_name)
linux_hotplug_disconnected	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^void linux_hotplug_disconnected(uint8_t busnum, uint8_t devaddr, const char *sys_name)$/;"	f	signature:(uint8_t busnum, uint8_t devaddr, const char *sys_name)
linux_hotplug_disconnected	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^void linux_hotplug_disconnected(uint8_t busnum, uint8_t devaddr, const char *sys_name);$/;"	p	signature:(uint8_t busnum, uint8_t devaddr, const char *sys_name)
linux_hotplug_enumerate	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^void linux_hotplug_enumerate(uint8_t busnum, uint8_t devaddr, const char *sys_name)$/;"	f	signature:(uint8_t busnum, uint8_t devaddr, const char *sys_name)
linux_hotplug_enumerate	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^void linux_hotplug_enumerate(uint8_t busnum, uint8_t devaddr, const char *sys_name);$/;"	p	signature:(uint8_t busnum, uint8_t devaddr, const char *sys_name)
linux_netlink_event_thread_main	compat/libusb-1.0/libusb/os/linux_netlink.c	/^static void *linux_netlink_event_thread_main(void *arg)$/;"	f	file:	signature:(void *arg)
linux_netlink_event_thread_main	compat/libusb-1.0/libusb/os/linux_netlink.c	/^static void *linux_netlink_event_thread_main(void *arg);$/;"	p	file:	signature:(void *arg)
linux_netlink_parse	compat/libusb-1.0/libusb/os/linux_netlink.c	/^static int linux_netlink_parse(char *buffer, size_t len, int *detached, const char **sys_name,$/;"	f	file:	signature:(char *buffer, size_t len, int *detached, const char **sys_name, uint8_t *busnum, uint8_t *devaddr)
linux_netlink_socket	compat/libusb-1.0/libusb/os/linux_netlink.c	/^static int linux_netlink_socket = -1;$/;"	v	file:
linux_netlink_start_event_monitor	compat/libusb-1.0/libusb/os/linux_netlink.c	/^int linux_netlink_start_event_monitor(void)$/;"	f	signature:(void)
linux_netlink_start_event_monitor	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^int linux_netlink_start_event_monitor(void);$/;"	p	signature:(void)
linux_netlink_stop_event_monitor	compat/libusb-1.0/libusb/os/linux_netlink.c	/^int linux_netlink_stop_event_monitor(void)$/;"	f	signature:(void)
linux_netlink_stop_event_monitor	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^int linux_netlink_stop_event_monitor(void);$/;"	p	signature:(void)
linux_scan_devices	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int linux_scan_devices(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
linux_scan_devices	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int linux_scan_devices(struct libusb_context *ctx);$/;"	p	file:	signature:(struct libusb_context *ctx)
linux_start_event_monitor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int linux_start_event_monitor(void)$/;"	f	file:	signature:(void)
linux_start_event_monitor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int linux_start_event_monitor(void);$/;"	p	file:	signature:(void)
linux_stop_event_monitor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int linux_stop_event_monitor(void)$/;"	f	file:	signature:(void)
linux_stop_event_monitor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int linux_stop_event_monitor(void);$/;"	p	file:	signature:(void)
linux_transfer_priv	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^struct linux_transfer_priv {$/;"	s	file:
linux_transfer_priv::__anon39::iso_urbs	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^		struct usbfs_urb **iso_urbs;$/;"	m	union:linux_transfer_priv::__anon39	typeref:struct:linux_transfer_priv::__anon39::usbfs_urb	file:	access:public
linux_transfer_priv::__anon39::urbs	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^		struct usbfs_urb *urbs;$/;"	m	union:linux_transfer_priv::__anon39	typeref:struct:linux_transfer_priv::__anon39::usbfs_urb	file:	access:public
linux_transfer_priv::iso_packet_offset	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	int iso_packet_offset;$/;"	m	struct:linux_transfer_priv	file:	access:public
linux_transfer_priv::num_retired	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	int num_retired;$/;"	m	struct:linux_transfer_priv	file:	access:public
linux_transfer_priv::num_urbs	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	int num_urbs;$/;"	m	struct:linux_transfer_priv	file:	access:public
linux_transfer_priv::reap_action	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	enum reap_action reap_action;$/;"	m	struct:linux_transfer_priv	typeref:enum:linux_transfer_priv::reap_action	file:	access:public
linux_transfer_priv::reap_status	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	enum libusb_transfer_status reap_status;$/;"	m	struct:linux_transfer_priv	typeref:enum:linux_transfer_priv::libusb_transfer_status	file:	access:public
linux_udev_event_thread_main	compat/libusb-1.0/libusb/os/linux_udev.c	/^static void *linux_udev_event_thread_main(void *arg);$/;"	p	file:	signature:(void *arg)
linux_udev_event_thread_main	compat/libusb-1.0/libusb/os/linux_udev.c	/^static void *linux_udev_event_thread_main(void __attribute__((unused)) *arg)$/;"	f	file:	signature:(void __attribute__((unused)) *arg)
linux_udev_scan_devices	compat/libusb-1.0/libusb/os/linux_udev.c	/^int linux_udev_scan_devices(struct libusb_context *ctx)$/;"	f	signature:(struct libusb_context *ctx)
linux_udev_scan_devices	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^int linux_udev_scan_devices(struct libusb_context *ctx);$/;"	p	signature:(struct libusb_context *ctx)
linux_udev_start_event_monitor	compat/libusb-1.0/libusb/os/linux_udev.c	/^int linux_udev_start_event_monitor(void)$/;"	f	signature:(void)
linux_udev_start_event_monitor	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^int linux_udev_start_event_monitor(void);$/;"	p	signature:(void)
linux_udev_stop_event_monitor	compat/libusb-1.0/libusb/os/linux_udev.c	/^int linux_udev_stop_event_monitor(void)$/;"	f	signature:(void)
linux_udev_stop_event_monitor	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^int linux_udev_stop_event_monitor(void);$/;"	p	signature:(void)
linux_usbfs_backend	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^const struct usbi_os_backend linux_usbfs_backend = {$/;"	v	typeref:struct:usbi_os_backend
list	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list list;$/;"	m	struct:hashtable	typeref:struct:hashtable::hashtable_list	access:public
list	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list list;$/;"	m	struct:hashtable_pair	typeref:struct:hashtable_pair::hashtable_list	access:public
list	compat/libusb-1.0/libusb/hotplug.h	/^        struct list_head list;$/;"	m	struct:libusb_hotplug_callback	typeref:struct:libusb_hotplug_callback::list_head	access:public
list	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:libusb_device	typeref:struct:libusb_device::list_head	access:public
list	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:libusb_device_handle	typeref:struct:libusb_device_handle::list_head	access:public
list	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:usbi_pollfd	typeref:struct:usbi_pollfd::list_head	access:public
list	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:usbi_transfer	typeref:struct:usbi_transfer::list_head	access:public
list	compat/libusb-1.0/libusb/libusbi.h	/^        struct list_head list;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
list	compat/libusb-1.0/libusb/os/threads_windows.h	/^	struct list_head list;$/;"	m	struct:usbi_cond_perthread	typeref:struct:usbi_cond_perthread::list_head	access:public
list	compat/libusb-1.0/libusb/os/windows_usb.h	/^	char list[MAX_KEY_LENGTH+1];\/\/ REG_MULTI_SZ list of services (driver) names$/;"	m	struct:driver_lookup	access:public
list	miner.h	/^	struct list_head list;$/;"	m	struct:string_elist	typeref:struct:string_elist::list_head	access:public
list	miner.php	/^			$list = array();$/;"	v
list	miner.php	/^			$list = array_flip($userlist['def']);$/;"	v
list	miner.php	/^		$list = $customsummarypages;$/;"	v
list	usbutils.c	/^	struct list_head list;$/;"	m	struct:usb_transfer	typeref:struct:usb_transfer::list_head	file:	access:public
list_add	compat/libusb-1.0/libusb/libusbi.h	/^static inline void list_add(struct list_head *entry, struct list_head *head)$/;"	f	signature:(struct list_head *entry, struct list_head *head)
list_add	elist.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_add_tail	compat/libusb-1.0/libusb/libusbi.h	/^static inline void list_add_tail(struct list_head *entry,$/;"	f	signature:(struct list_head *entry, struct list_head *head)
list_add_tail	elist.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f	signature:(struct list_head *new, struct list_head *head)
list_del	compat/libusb-1.0/libusb/libusbi.h	/^static inline void list_del(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_del	elist.h	/^static inline void list_del(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_del_init	elist.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_empty	compat/libusb-1.0/libusb/libusbi.h	81;"	d
list_empty	elist.h	/^static inline int list_empty(struct list_head *head)$/;"	f	signature:(struct list_head *head)
list_entry	compat/libusb-1.0/libusb/libusbi.h	61;"	d
list_entry	elist.h	184;"	d
list_entry	elist.h	187;"	d
list_for_each	elist.h	196;"	d
list_for_each_entry	compat/libusb-1.0/libusb/libusbi.h	70;"	d
list_for_each_entry	elist.h	224;"	d
list_for_each_entry_continue	elist.h	249;"	d
list_for_each_entry_safe	compat/libusb-1.0/libusb/libusbi.h	75;"	d
list_for_each_entry_safe	elist.h	236;"	d
list_for_each_prev	elist.h	204;"	d
list_for_each_safe	elist.h	214;"	d
list_head	compat/libusb-1.0/libusb/libusbi.h	/^struct list_head {$/;"	s
list_head	elist.h	/^struct list_head {$/;"	s
list_head::next	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
list_head::next	elist.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
list_head::prev	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
list_head::prev	elist.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
list_init	compat/jansson-2.6/src/hashtable.c	/^static JSON_INLINE void list_init(list_t *list)$/;"	f	file:	signature:(list_t *list)
list_init	compat/libusb-1.0/libusb/libusbi.h	/^static inline void list_init(struct list_head *entry)$/;"	f	signature:(struct list_head *entry)
list_insert	compat/jansson-2.6/src/hashtable.c	/^static JSON_INLINE void list_insert(list_t *list, list_t *node)$/;"	f	file:	signature:(list_t *list, list_t *node)
list_move	elist.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_move_tail	elist.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_remove	compat/jansson-2.6/src/hashtable.c	/^static JSON_INLINE void list_remove(list_t *list)$/;"	f	file:	signature:(list_t *list)
list_splice	elist.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_splice_init	elist.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f	signature:(struct list_head *list, struct list_head *head)
list_t	compat/jansson-2.6/src/hashtable.c	/^typedef struct hashtable_list list_t;$/;"	t	typeref:struct:hashtable_list	file:
list_to_pair	compat/jansson-2.6/src/hashtable.c	18;"	d	file:
listen	MCast.java	/^	static private Thread listen = null;$/;"	f	class:MCast	file:	access:private
listname	miner.php	/^ $listname = "0.0.0.0";$/;"	v
llt_epinfos	usbutils.c	/^static struct usb_epinfo llt_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
llt_ints	usbutils.c	/^static struct usb_intinfo llt_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
load_config	cgminer.c	/^static char *load_config(const char *arg, void __maybe_unused *unused)$/;"	f	file:	signature:(const char *arg, void __maybe_unused *unused)
load_config	cgminer.c	/^static char *load_config(const char *arg, void __maybe_unused *unused);$/;"	p	file:	signature:(const char *arg, void __maybe_unused *unused)
load_default_config	cgminer.c	/^static void load_default_config(void)$/;"	f	file:	signature:(void)
load_temp_cutoffs	cgminer.c	/^static void load_temp_cutoffs()$/;"	f	file:
load_web_config	cgminer.c	/^static char *load_web_config(const char *arg)$/;"	f	file:	signature:(const char *arg)
local_work	cgminer.c	/^unsigned int local_work;$/;"	v
local_work	driver-avalon2.h	/^	int local_work[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
local_work	driver-hashratio.h	/^	int local_work;$/;"	m	struct:hashratio_info	access:public
local_work_last	cgminer.c	/^unsigned int local_work_last = 0;$/;"	v
local_work_lasttime	cgminer.c	/^long local_work_lasttime = 0;$/;"	v
local_works	driver-avalon2.h	/^	int local_works[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
local_works	driver-hashratio.h	/^	int local_works;$/;"	m	struct:hashratio_info	access:public
localaddr	api.c	/^static const char *localaddr = "127.0.0.1";$/;"	v	file:
location	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  UInt32                location;$/;"	m	struct:darwin_device_priv	access:public
lock	A1-board-selector-CCD.c	/^pthread_mutex_t lock;$/;"	v
lock	A1-board-selector-CCR.c	/^static pthread_mutex_t lock;$/;"	v	file:
lock	A1-common.h	/^	pthread_mutex_t lock;$/;"	m	struct:A1_chain	access:public
lock	A1-desk-board-selector.c	/^	pthread_mutex_t lock;$/;"	m	struct:pcf8575_ctx	file:	access:public
lock	MCast.java	/^	static private final Integer lock = new Integer(666);$/;"	f	class:MCast	file:	access:private
lock	api.c	/^	void *lock;$/;"	m	struct:lockinfo	file:	access:public
lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t lock;$/;"	m	struct:libusb_device	access:public
lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t lock;$/;"	m	struct:libusb_device_handle	access:public
lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t lock;$/;"	m	struct:usbi_transfer	access:public
lock	driver-avalon.h	/^	pthread_mutex_t lock;$/;"	m	struct:avalon_info	access:public
lock	driver-bitfury.h	/^	pthread_mutex_t lock;$/;"	m	struct:bitfury_info	access:public
lock	driver-bitmain.h	/^	pthread_mutex_t lock;$/;"	m	struct:bitmain_info	access:public
lock	driver-cointerra.h	/^	pthread_mutex_t lock;$/;"	m	struct:cointerra_info	access:public
lock	driver-hashfast.h	/^	pthread_mutex_t lock;$/;"	m	struct:hashfast_info	access:public
lock	driver-icarus.c	/^	pthread_mutex_t lock;$/;"	m	struct:ICARUS_INFO	file:	access:public
lock	driver-spondoolies-sp10.h	/^	pthread_mutex_t lock;$/;"	m	struct:spond_adapter	access:public
lock	driver-spondoolies-sp30.h	/^	pthread_mutex_t lock;$/;"	m	struct:spond_adapter	access:public
lock	klist.h	/^	cglock_t *lock;$/;"	m	struct:k_list	access:public
lock	usbutils.c	/^	bool lock;$/;"	m	struct:resource_work	file:	access:public
lock_board_selector	A1-desk-board-selector.c	/^void lock_board_selector(void)$/;"	f	signature:(void)
lock_curses	cgminer.c	/^static inline void lock_curses(void)$/;"	f	file:	signature:(void)
lock_id	api.c	/^	uint64_t lock_id;$/;"	m	struct:lockstat	file:	access:public
lock_id	api.c	/^static uint64_t lock_id = 1;$/;"	v	file:
lockgets	api.c	/^	LOCKLINE *lockgets;$/;"	m	struct:lockinfo	file:	access:public
lockhead	api.c	/^static LOCKLIST *lockhead;$/;"	v	file:
lockinfo	api.c	/^typedef struct lockinfo {$/;"	s	file:
lockinfo::didnts	api.c	/^	uint64_t didnts; \/\/ should be tries - dids$/;"	m	struct:lockinfo	file:	access:public
lockinfo::dids	api.c	/^	uint64_t dids;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::file	api.c	/^	const char *file;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::func	api.c	/^	const char *func;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::gets	api.c	/^	uint64_t gets;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::gots	api.c	/^	uint64_t gots;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::lastgot	api.c	/^	LOCKSTAT lastgot;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::linenum	api.c	/^	int linenum;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::lock	api.c	/^	void *lock;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::lockgets	api.c	/^	LOCKLINE *lockgets;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::locktries	api.c	/^	LOCKLINE *locktries;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::tries	api.c	/^	uint64_t tries;$/;"	m	struct:lockinfo	file:	access:public
lockinfo::typ	api.c	/^	enum cglock_typ typ;$/;"	m	struct:lockinfo	typeref:enum:lockinfo::cglock_typ	file:	access:public
lockinfo::unlocks	api.c	/^	uint64_t unlocks;$/;"	m	struct:lockinfo	file:	access:public
lockline	api.c	/^typedef struct lockline {$/;"	s	file:
lockline::next	api.c	/^	struct lockline *next;$/;"	m	struct:lockline	typeref:struct:lockline::lockline	file:	access:public
lockline::prev	api.c	/^	struct lockline *prev;$/;"	m	struct:lockline	typeref:struct:lockline::lockline	file:	access:public
lockline::stat	api.c	/^	struct lockstat *stat;$/;"	m	struct:lockline	typeref:struct:lockline::lockstat	file:	access:public
locklist	api.c	/^typedef struct locklist {$/;"	s	file:
locklist::info	api.c	/^	LOCKINFO *info;$/;"	m	struct:locklist	file:	access:public
locklist::next	api.c	/^	struct locklist *next;$/;"	m	struct:locklist	typeref:struct:locklist::locklist	file:	access:public
locklock	api.c	/^static void locklock()$/;"	f	file:
lockmsgnow	api.c	/^static void lockmsgnow()$/;"	f	file:
lockstat	api.c	/^typedef struct lockstat {$/;"	s	file:
lockstat::file	api.c	/^	const char *file;$/;"	m	struct:lockstat	file:	access:public
lockstat::func	api.c	/^	const char *func;$/;"	m	struct:lockstat	file:	access:public
lockstat::linenum	api.c	/^	int linenum;$/;"	m	struct:lockstat	file:	access:public
lockstat::lock_id	api.c	/^	uint64_t lock_id;$/;"	m	struct:lockstat	file:	access:public
lockstat::tv	api.c	/^	struct timeval tv;$/;"	m	struct:lockstat	typeref:struct:lockstat::timeval	file:	access:public
lockstat_lock	cgminer.c	/^pthread_mutex_t lockstat_lock;$/;"	v
lockstats	api.c	/^static void lockstats(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
locktries	api.c	/^	LOCKLINE *locktries;$/;"	m	struct:lockinfo	file:	access:public
lockunlock	api.c	/^static void lockunlock()$/;"	f	file:
loclass	miner.php	/^ $loclass = 'lo';$/;"	v
lodiff	miner.h	/^	int lodiff;$/;"	m	struct:cgpu_info	access:public
log2_num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
log_curses_only	cgminer.c	/^bool log_curses_only(int prio, const char *datetime, const char *str)$/;"	f	signature:(int prio, const char *datetime, const char *str)
log_curses_only	miner.h	/^extern bool log_curses_only(int prio, const char *datetime, const char *str);$/;"	p	signature:(int prio, const char *datetime, const char *str)
log_print_status	cgminer.c	/^static void log_print_status(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
logcursor	cgminer.c	/^static int devcursor, logstart, logcursor;$/;"	v	file:
login	miner.php	/^ $login = trim(getparam('login', true));$/;"	v
logstart	cgminer.c	/^static int devcursor, logstart, logcursor;$/;"	v	file:
logwin	cgminer.c	/^WINDOW *mainwin, *statuswin, *logwin;$/;"	v
logwin_update	cgminer.c	/^void logwin_update(void)$/;"	f	signature:(void)
logwin_update	miner.h	/^extern void logwin_update(void);$/;"	p	signature:(void)
long_and_short_table	ccan/opt/test/utils.c	/^struct opt_table long_and_short_table[] = {$/;"	v	typeref:struct:opt_table
long_table	ccan/opt/test/utils.c	/^struct opt_table long_table[] = {$/;"	v	typeref:struct:opt_table
longpoll	miner.h	/^	bool		longpoll;$/;"	m	struct:work	access:public
longpoll_thread	cgminer.c	/^static void *longpoll_thread(void *userdata)$/;"	f	file:	signature:(void *userdata)
longpoll_thread	cgminer.c	/^static void *longpoll_thread(void *userdata);$/;"	p	file:	signature:(void *userdata)
longpoll_thread	cgminer.c	/^static void *longpoll_thread(void __maybe_unused *userdata)$/;"	f	file:	signature:(void __maybe_unused *userdata)
longpoll_thread	miner.h	/^	pthread_t longpoll_thread;$/;"	m	struct:pool	access:public
longpollid	miner.h	/^	char *longpollid;$/;"	m	struct:pool	access:public
low_operating_temp_limit	hf_protocol.h	/^	uint8_t  low_operating_temp_limit;          \/\/ Lowest normal operating limit$/;"	m	struct:hf_usb_init_options	access:public
low_operating_temp_limit	hf_protocol_be.h	/^	uint8_t  low_operating_temp_limit;          \/\/ Lowest normal operating limit$/;"	m	struct:hf_usb_init_options	access:public
lowcount	driver-minion.c	/^	int lowcount;$/;"	m	struct:minion_status	file:	access:public
lp_cond	cgminer.c	/^static pthread_cond_t lp_cond;$/;"	v	file:
lp_lock	cgminer.c	/^static pthread_mutex_t lp_lock;$/;"	v	file:
lp_path	util.c	/^	char		*lp_path;$/;"	m	struct:header_info	file:	access:public
lp_started	miner.h	/^	bool lp_started;$/;"	m	struct:pool	access:public
lp_url	miner.h	/^	char *lp_url;$/;"	m	struct:pool	access:public
lstclass	miner.php	/^ $lstclass = 'lst';$/;"	v
m	miner.php	/^			$m = $value % 60;$/;"	v
m7	driver-bitfury.h	/^	unsigned m7;$/;"	m	struct:bitfury_payload	access:public
magic	driver-hashfast.c	/^	uint16_t magic;$/;"	m	struct:hf_settings_data	file:	access:public
magic	driver-spondoolies-sp10-p.h	/^	uint16_t magic; \/\/ 0xcafe$/;"	m	struct:__anon46	access:public
magic	driver-spondoolies-sp10-p.h	/^	uint16_t magic; \/\/ 0xcafe$/;"	m	struct:__anon47	access:public
magic	driver-spondoolies-sp30-p.h	/^  uint16_t magic;   \/\/ 0xcaf4$/;"	m	struct:__anon66	access:public
magic	driver-spondoolies-sp30-p.h	/^  uint16_t magic;   \/\/ 0xcaf4$/;"	m	struct:__anon67	access:public
main	API.java	/^	public static void main(String[] params) throws Exception$/;"	m	class:API	access:public	signature:(String[] params)
main	MCast.java	/^	public static void main(String[] params) throws Exception$/;"	m	class:MCast	access:public	signature:(String[] params)
main	api-example.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	bitforce-firmware-flash.c	/^int main(int argc, char**argv)$/;"	f	signature:(int argc, char**argv)
main	ccan/compiler/test/compile_fail-printf.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/compiler/test/run-is_compile_constant.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/opt/test/compile_ok-const-arg.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/opt/test/run-checkopt.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/opt/test/run-correct-reporting.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/opt/test/run-helpers.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/opt/test/run-iter.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/opt/test/run-no-options.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/opt/test/run-usage.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/opt/test/run.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_fail-cast_if_type-promotable.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_fail-typesafe_cb-int.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_fail-typesafe_cb.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_fail-typesafe_cb_postargs.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_fail-typesafe_cb_preargs.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_ok-typesafe_cb-NULL.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	ccan/typesafe_cb/test/run.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	cgminer.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	compat/jansson-2.6/config.guess	/^		main()$/;"	f
main	compat/jansson-2.6/config.guess	/^	main ()$/;"	f
main	compat/jansson-2.6/config.guess	/^main ()$/;"	f
main	compat/libusb-1.0/config.guess	/^		main()$/;"	f
main	compat/libusb-1.0/config.guess	/^	main ()$/;"	f
main	compat/libusb-1.0/config.guess	/^main ()$/;"	f
mainwin	cgminer.c	/^WINDOW *mainwin, *statuswin, *logwin;$/;"	v
major	compat/libusb-1.0/libusb/libusb.h	/^	const uint16_t major;$/;"	m	struct:libusb_version	access:public
make_clone	cgminer.c	/^struct work *make_clone(struct work *work)$/;"	f	signature:(struct work *work)
make_clone	miner.h	/^extern struct work *make_clone(struct work *work);$/;"	p	signature:(struct work *work)
make_work	cgminer.c	/^static struct work *make_work(void)$/;"	f	file:	signature:(void)
malloc	ccan/opt/test/run-helpers.c	22;"	d	file:
malloc	ccan/opt/test/run-helpers.c	75;"	d	file:
mandatory	miner.h	/^	bool		mandatory;$/;"	m	struct:work	access:public
manuf_string	usbutils.h	/^	char *manuf_string;$/;"	m	struct:cg_usb_device	access:public
map	miner.php	/^									$map = $section.'.'.$f;$/;"	v
map	miner.php	/^								$map = $section.'.'.$field;$/;"	v
markgotdid	api.c	/^static void markgotdid(LOCKINFO *info, uint64_t id, const char *file, const char *func, const int linenum, bool got, int ret)$/;"	f	file:	signature:(LOCKINFO *info, uint64_t id, const char *file, const char *func, const int linenum, bool got, int ret)
mask	api.c	/^	struct in6_addr mask;$/;"	m	struct:IPACCESS	typeref:struct:IPACCESS::in6_addr	file:	access:public
mask	driver-antrouter.c	/^static uint32_t mask(int work_division)$/;"	f	file:	signature:(int work_division)
mask	driver-bmsc.c	/^static uint32_t mask(int work_division)$/;"	f	file:	signature:(int work_division)
mask	driver-icarus.c	/^static uint32_t mask(int work_division)$/;"	f	file:	signature:(int work_division)
mask	driver-spondoolies-sp10-p.h	/^	uint8_t mask; \/\/ 0x01 = first request, 0x2 = drop old work$/;"	m	struct:__anon46	access:public
mask	driver-spondoolies-sp30-p.h	/^	uint8_t mask; \/\/ 0x01 = first request, 0x2 = drop old work$/;"	m	struct:__anon66	access:public
match	miner.php	/^					$match = false;$/;"	v
match	miner.php	/^			$match = true;$/;"	v
matching_work	driver-avalon.h	/^	int matching_work[AVALON_MAX_MINER_NUM];$/;"	m	struct:avalon_info	access:public
matching_work	driver-avalon2.h	/^	int matching_work[AVA2_DEFAULT_MINERS * AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
matching_work	driver-hashratio.h	/^	int matching_work[HRTO_DEFAULT_MINERS];$/;"	m	struct:hashratio_info	access:public
max	compat/jansson-2.6/src/jansson_private.h	21;"	d
max_bytes	driver-minion.c	/^	uint64_t max_bytes;$/;"	m	struct:iostat	file:	access:public
max_decitemp	driver-bitfury.h	/^	int max_decitemp;$/;"	m	struct:bitfury_info	access:public
max_delay	driver-minion.c	/^	double max_delay;$/;"	m	struct:iostat	file:	access:public
max_delay	usbutils.c	/^	double max_delay;$/;"	m	struct:cg_usb_stats_item	file:	access:public
max_diff	miner.h	/^	double max_diff;$/;"	m	struct:cgminer_pool_stats	access:public
max_diff	miner.h	/^	double max_diff;$/;"	m	struct:device_drv	access:public
max_diff_count	miner.h	/^	uint32_t max_diff_count;$/;"	m	struct:cgminer_pool_stats	access:public
max_diffbits	driver-cointerra.h	/^	uint8_t max_diffbits;$/;"	m	struct:cointerra_info	access:public
max_dlock	driver-minion.c	/^	double max_dlock;$/;"	m	struct:iostat	file:	access:public
max_frq	driver-icarus.c	/^	float max_frq;$/;"	m	struct:rockminer_device_info	file:	access:public
max_hashes	miner.h	/^	int64_t max_hashes;$/;"	m	struct:cgpu_info	access:public
max_ioc	driver-minion.c	/^	uint64_t max_ioc;$/;"	m	struct:iostat	file:	access:public
max_links	driver-bab.c	/^	uint64_t max_links;$/;"	m	struct:bab_info	file:	access:public
max_nonces_per_frame	hf_protocol.h	/^	uint32_t max_nonces_per_frame:4;            \/\/ Maximum # of nonces to combine in a single frame$/;"	m	struct:hf_config_data	access:public
max_nonces_per_frame	hf_protocol_be.h	/^	uint32_t max_nonces_per_frame:4;            \/\/ Maximum # of nonces to combine in a single frame$/;"	m	struct:hf_config_data	access:public
max_proc_links	driver-bab.c	/^	uint64_t max_proc_links;$/;"	m	struct:bab_info	file:	access:public
max_queue	cgminer.c	/^static int max_queue = 1;$/;"	v	file:
max_rx_buffers	driver-hashfast.h	/^	uint8_t  max_rx_buffers;$/;"	m	struct:hf_long_usb_stats1	access:public
max_rx_buffers	hf_protocol.h	/^	uint8_t  max_rx_buffers;                        \/\/ Maximum # of receive buffers ever used$/;"	m	struct:hf_usb_stats1	access:public
max_rx_buffers	hf_protocol_be.h	/^	uint8_t  max_rx_buffers;                        \/\/ Maximum # of receive buffers ever used$/;"	m	struct:hf_usb_stats1	access:public
max_speed	driver-bab.c	/^	uint8_t max_speed;$/;"	m	struct:bab_info	file:	access:public
max_temp	driver-drillbit.h	/^  uint16_t max_temp;$/;"	m	struct:drillbit_info	access:public
max_tests_per_nonce	driver-bab.c	/^	uint64_t max_tests_per_nonce;$/;"	m	struct:bab_info	file:	access:public
max_tmo	usbutils.h	/^	uint32_t max_tmo;$/;"	m	struct:cg_usb_tmo	access:public
max_tx_buffers	driver-hashfast.h	/^	uint8_t  max_tx_buffers;$/;"	m	struct:hf_long_usb_stats1	access:public
max_tx_buffers	hf_protocol.h	/^	uint8_t  max_tx_buffers;                        \/\/ Maximum # of send buffers ever used$/;"	m	struct:hf_usb_stats1	access:public
max_tx_buffers	hf_protocol_be.h	/^	uint8_t  max_tx_buffers;                        \/\/ Maximum # of send buffers ever used$/;"	m	struct:hf_usb_stats1	access:public
maxcount	driver-klondike.c	/^	uint8_t maxcount[2];$/;"	m	struct:klondike_status	file:	access:public
maxroll	driver-bitfury.h	/^	int maxroll; \/\/ Last maxroll sent to device$/;"	m	struct:bitfury_info	access:public
mbschr	lib/string.in.h	/^_GL_CXXALIASWARN (mbschr);$/;"	v
mbschr	lib/string.in.h	721;"	d
mbslen	lib/string.in.h	/^_GL_CXXALIASWARN (mbslen);$/;"	v
mbslen	lib/string.in.h	692;"	d
mbslen	lib/string.in.h	696;"	d
mbspbrk	lib/string.in.h	/^_GL_CXXALIASWARN (mbspbrk);$/;"	v
mbspbrk	lib/string.in.h	828;"	d
mbsrchr	lib/string.in.h	/^_GL_CXXALIASWARN (mbsrchr);$/;"	v
mbsrchr	lib/string.in.h	741;"	d
mcast	api.c	/^static void mcast()$/;"	f	file:
mcast	miner.php	/^$mcast = false;$/;"	v
mcast_addr	MCast.java	/^	private InetAddress mcast_addr = null;$/;"	f	class:MCast	file:	access:private
mcast_init	api.c	/^void mcast_init()$/;"	f
mcast_soc	miner.php	/^	$mcast_soc = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);$/;"	v
mcast_soc	miner.php	/^	if ($mcast_soc === false || $mcast_soc == null)$/;"	v
mcast_thread	api.c	/^static void *mcast_thread(void *userdata)$/;"	f	file:	signature:(void *userdata)
mcastaddr	miner.php	/^$mcastaddr = '224.0.0.75';$/;"	v
mcastcode	miner.php	/^$mcastcode = 'FTW';$/;"	v
mcastexpect	miner.php	/^$mcastexpect = 0;$/;"	v
mcastlistport	miner.php	/^$mcastlistport = 4027;$/;"	v
mcastport	miner.php	/^$mcastport = 4028;$/;"	v
mcastretries	miner.php	/^$mcastretries = 0;$/;"	v
mcastrigs	miner.php	/^function mcastrigs()$/;"	f
mcasttimeout	miner.php	/^$mcasttimeout = 1.5;$/;"	v
mcerr	miner.php	/^		$mcerr = othrow('<td class=bad>Found '.count($rigs)." rigs but expected at least $mcastexpect<\/td>");$/;"	v
mcerr	miner.php	/^ $mcerr = '';$/;"	v
mcp	driver-bitfury.h	/^	struct mcp_settings mcp;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::mcp_settings	access:public
mcp2210_get_gpio_pin	mcp2210.c	/^bool mcp2210_get_gpio_pin(struct cgpu_info *cgpu, int pin, int *des)$/;"	f	signature:(struct cgpu_info *cgpu, int pin, int *des)
mcp2210_get_gpio_pin	mcp2210.h	/^bool mcp2210_get_gpio_pin(struct cgpu_info *cgpu, int pin, int *des);$/;"	p	signature:(struct cgpu_info *cgpu, int pin, int *des)
mcp2210_get_gpio_pindes	mcp2210.c	/^bool mcp2210_get_gpio_pindes(struct cgpu_info *cgpu, struct gpio_pin *gp)$/;"	f	signature:(struct cgpu_info *cgpu, struct gpio_pin *gp)
mcp2210_get_gpio_pindes	mcp2210.h	/^bool mcp2210_get_gpio_pindes(struct cgpu_info *cgpu, struct gpio_pin *gp);$/;"	p	signature:(struct cgpu_info *cgpu, struct gpio_pin *gp)
mcp2210_get_gpio_pindir	mcp2210.c	/^bool mcp2210_get_gpio_pindir(struct cgpu_info *cgpu, int pin, int *dir)$/;"	f	signature:(struct cgpu_info *cgpu, int pin, int *dir)
mcp2210_get_gpio_pindir	mcp2210.h	/^bool mcp2210_get_gpio_pindir(struct cgpu_info *cgpu, int pin, int *dir);$/;"	p	signature:(struct cgpu_info *cgpu, int pin, int *dir)
mcp2210_get_gpio_pindirs	mcp2210.c	/^bool mcp2210_get_gpio_pindirs(struct cgpu_info *cgpu, struct gpio_pin *gp)$/;"	f	signature:(struct cgpu_info *cgpu, struct gpio_pin *gp)
mcp2210_get_gpio_pindirs	mcp2210.h	/^bool mcp2210_get_gpio_pindirs(struct cgpu_info *cgpu, struct gpio_pin *gp);$/;"	p	signature:(struct cgpu_info *cgpu, struct gpio_pin *gp)
mcp2210_get_gpio_pinval	mcp2210.c	/^bool mcp2210_get_gpio_pinval(struct cgpu_info *cgpu, int pin, int *val)$/;"	f	signature:(struct cgpu_info *cgpu, int pin, int *val)
mcp2210_get_gpio_pinval	mcp2210.h	/^bool mcp2210_get_gpio_pinval(struct cgpu_info *cgpu, int pin, int *val);$/;"	p	signature:(struct cgpu_info *cgpu, int pin, int *val)
mcp2210_get_gpio_pinvals	mcp2210.c	/^bool mcp2210_get_gpio_pinvals(struct cgpu_info *cgpu, struct gpio_pin *gp)$/;"	f	signature:(struct cgpu_info *cgpu, struct gpio_pin *gp)
mcp2210_get_gpio_pinvals	mcp2210.h	/^bool mcp2210_get_gpio_pinvals(struct cgpu_info *cgpu, struct gpio_pin *gp);$/;"	p	signature:(struct cgpu_info *cgpu, struct gpio_pin *gp)
mcp2210_get_gpio_settings	mcp2210.c	/^bool mcp2210_get_gpio_settings(struct cgpu_info *cgpu, struct mcp_settings *mcp)$/;"	f	signature:(struct cgpu_info *cgpu, struct mcp_settings *mcp)
mcp2210_get_gpio_settings	mcp2210.h	/^bool mcp2210_get_gpio_settings(struct cgpu_info *cgpu, struct mcp_settings *mcp);$/;"	p	signature:(struct cgpu_info *cgpu, struct mcp_settings *mcp)
mcp2210_get_spi_transfer_settings	mcp2210.c	/^mcp2210_get_spi_transfer_settings(struct cgpu_info *cgpu, unsigned int *bitrate, unsigned int *icsv,$/;"	f	signature:(struct cgpu_info *cgpu, unsigned int *bitrate, unsigned int *icsv, unsigned int *acsv, unsigned int *cstdd, unsigned int *ldbtcsd, unsigned int *sdbd, unsigned int *bpst, unsigned int *spimode)
mcp2210_get_spi_transfer_settings	mcp2210.h	/^mcp2210_get_spi_transfer_settings(struct cgpu_info *cgpu, unsigned int *bitrate, unsigned int *icsv,$/;"	p	signature:(struct cgpu_info *cgpu, unsigned int *bitrate, unsigned int *icsv, unsigned int *acsv, unsigned int *cstdd, unsigned int *ldbtcsd, unsigned int *sdbd, unsigned int *bpst, unsigned int *spimode)
mcp2210_recv	mcp2210.c	/^static bool mcp2210_recv(struct cgpu_info *cgpu, char *buf, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *cgpu, char *buf, enum usb_cmds cmd)
mcp2210_send	mcp2210.c	/^static bool mcp2210_send(struct cgpu_info *cgpu, char *buf, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *cgpu, char *buf, enum usb_cmds cmd)
mcp2210_send_recv	mcp2210.c	/^bool mcp2210_send_recv(struct cgpu_info *cgpu, char *buf, enum usb_cmds cmd)$/;"	f	signature:(struct cgpu_info *cgpu, char *buf, enum usb_cmds cmd)
mcp2210_send_recv	mcp2210.h	/^bool mcp2210_send_recv(struct cgpu_info *cgpu, char *buf, enum usb_cmds cmd);$/;"	p	signature:(struct cgpu_info *cgpu, char *buf, enum usb_cmds cmd)
mcp2210_set_gpio_settings	mcp2210.c	/^bool mcp2210_set_gpio_settings(struct cgpu_info *cgpu, struct mcp_settings *mcp)$/;"	f	signature:(struct cgpu_info *cgpu, struct mcp_settings *mcp)
mcp2210_set_gpio_settings	mcp2210.h	/^bool mcp2210_set_gpio_settings(struct cgpu_info *cgpu, struct mcp_settings *mcp);$/;"	p	signature:(struct cgpu_info *cgpu, struct mcp_settings *mcp)
mcp2210_set_spi_transfer_settings	mcp2210.c	/^mcp2210_set_spi_transfer_settings(struct cgpu_info *cgpu, unsigned int bitrate, unsigned int icsv,$/;"	f	signature:(struct cgpu_info *cgpu, unsigned int bitrate, unsigned int icsv, unsigned int acsv, unsigned int cstdd, unsigned int ldbtcsd, unsigned int sdbd, unsigned int bpst, unsigned int spimode)
mcp2210_set_spi_transfer_settings	mcp2210.h	/^mcp2210_set_spi_transfer_settings(struct cgpu_info *cgpu, unsigned int bitrate, unsigned int icsv,$/;"	p	signature:(struct cgpu_info *cgpu, unsigned int bitrate, unsigned int icsv, unsigned int acsv, unsigned int cstdd, unsigned int ldbtcsd, unsigned int sdbd, unsigned int bpst, unsigned int spimode)
mcp2210_spi_cancel	mcp2210.c	/^bool mcp2210_spi_cancel(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
mcp2210_spi_cancel	mcp2210.h	/^bool mcp2210_spi_cancel(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
mcp2210_spi_transfer	mcp2210.c	/^bool mcp2210_spi_transfer(struct cgpu_info *cgpu, struct mcp_settings *mcp,$/;"	f	signature:(struct cgpu_info *cgpu, struct mcp_settings *mcp, char *data, unsigned int *length)
mcp2210_spi_transfer	mcp2210.h	/^bool mcp2210_spi_transfer(struct cgpu_info *cgpu, struct mcp_settings *mcp,$/;"	p	signature:(struct cgpu_info *cgpu, struct mcp_settings *mcp, char *data, unsigned int *length)
mcp4x	A1-trimpot-mcp4x.h	/^struct mcp4x {$/;"	s
mcp4x::addr	A1-trimpot-mcp4x.h	/^	uint8_t addr;$/;"	m	struct:mcp4x	access:public
mcp4x::exit	A1-trimpot-mcp4x.h	/^	void (*exit)(struct mcp4x *me);$/;"	m	struct:mcp4x	access:public
mcp4x::file	A1-trimpot-mcp4x.h	/^	int file;$/;"	m	struct:mcp4x	access:public
mcp4x::get_wiper	A1-trimpot-mcp4x.h	/^	uint16_t (*get_wiper)(struct mcp4x *me, uint8_t id);$/;"	m	struct:mcp4x	access:public
mcp4x::set_wiper	A1-trimpot-mcp4x.h	/^	bool (*set_wiper)(struct mcp4x *me, uint8_t id, uint16_t w);$/;"	m	struct:mcp4x	access:public
mcp4x_check_status	A1-trimpot-mcp4x.c	/^static bool mcp4x_check_status(int file)$/;"	f	file:	signature:(int file)
mcp4x_exit	A1-trimpot-mcp4x.c	/^void mcp4x_exit(struct mcp4x *me)$/;"	f	signature:(struct mcp4x *me)
mcp4x_get_wiper	A1-trimpot-mcp4x.c	/^static uint16_t mcp4x_get_wiper(struct mcp4x *me, uint8_t id)$/;"	f	file:	signature:(struct mcp4x *me, uint8_t id)
mcp4x_init	A1-trimpot-mcp4x.c	/^struct mcp4x *mcp4x_init(uint8_t addr)$/;"	f	signature:(uint8_t addr)
mcp4x_init	A1-trimpot-mcp4x.h	/^extern struct mcp4x *mcp4x_init(uint8_t addr);$/;"	p	signature:(uint8_t addr)
mcp4x_set_wiper	A1-trimpot-mcp4x.c	/^static bool mcp4x_set_wiper(struct mcp4x *me, uint8_t id, uint16_t w)$/;"	f	file:	signature:(struct mcp4x *me, uint8_t id, uint16_t w)
mcp_settings	mcp2210.h	/^struct mcp_settings {$/;"	s
mcp_settings::acsv	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
mcp_settings::bitrate	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
mcp_settings::bpst	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
mcp_settings::cstdd	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
mcp_settings::designation	mcp2210.h	/^	struct gpio_pin designation;$/;"	m	struct:mcp_settings	typeref:struct:mcp_settings::gpio_pin	access:public
mcp_settings::direction	mcp2210.h	/^	struct gpio_pin direction;$/;"	m	struct:mcp_settings	typeref:struct:mcp_settings::gpio_pin	access:public
mcp_settings::icsv	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
mcp_settings::ldbtcsd	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
mcp_settings::sdbd	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
mcp_settings::spimode	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
mcp_settings::value	mcp2210.h	/^	struct gpio_pin value;$/;"	m	struct:mcp_settings	typeref:struct:mcp_settings::gpio_pin	access:public
mcp_spi_txrx	libbitfury.c	/^bool mcp_spi_txrx(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
mcp_spi_txrx	libbitfury.h	/^bool mcp_spi_txrx(struct cgpu_info *bitfury, struct bitfury_info *info);$/;"	p	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
mdes	miner.php	/^					$mdes = '';$/;"	v
mdes	miner.php	/^					$mdes = str_replace("\\0", '', $ans[3]);$/;"	v
measure_interval	hf_protocol.h	/^	uint8_t  measure_interval;                  \/\/ Die temperature measurement interval (msec)$/;"	m	struct:hf_config_data	access:public
measure_interval	hf_protocol_be.h	/^	uint8_t  measure_interval;                  \/\/ Die temperature measurement interval (msec)$/;"	m	struct:hf_config_data	access:public
memchr	lib/memchr.c	50;"	d	file:
memchr	lib/string.in.h	/^_GL_CXXALIASWARN (memchr);$/;"	v
memchr	lib/string.in.h	66;"	d
memmem	lib/memmem.c	/^memmem (const void *haystack_start, size_t haystack_len,$/;"	f	signature:(const void *haystack_start, size_t haystack_len, const void *needle_start, size_t needle_len)
memmem	lib/string.in.h	/^_GL_CXXALIASWARN (memmem);$/;"	v
memmem	lib/string.in.h	104;"	d
memmem	lib/string.in.h	128;"	d
mempcpy	lib/string.in.h	/^_GL_CXXALIASWARN (mempcpy);$/;"	v
mempcpy	lib/string.in.h	150;"	d
memrchr	lib/string.in.h	/^_GL_CXXALIASWARN (memrchr);$/;"	v
memrchr	lib/string.in.h	178;"	d
merkle	driver-blockerupter.h	/^	uint8_t merkle[4];$/;"	m	struct:blockerupter_response	access:public
merkle	driver-klondike.c	/^	uint8_t merkle[12];$/;"	m	struct:_worktask	file:	access:public
merkle7	driver-bab.c	/^	uint32_t merkle7;$/;"	m	struct:bab_work_send	file:	access:public
merkle7	driver-minion.c	/^	uint8_t merkle7[DATA_SIZ];$/;"	m	struct:minion_que	file:	access:public
merkle_bin	miner.h	/^	unsigned char **merkle_bin;$/;"	m	struct:stratum_work	access:public
merkle_residual	hf_protocol.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_serial	access:public
merkle_residual	hf_protocol.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_usb	access:public
merkle_residual	hf_protocol_be.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_serial	access:public
merkle_residual	hf_protocol_be.h	/^	uint8_t  merkle_residual[4];            \/\/ From block header$/;"	m	struct:hf_hash_usb	access:public
merkle_root	driver-spondoolies-sp10.h	/^	uint32_t         merkle_root;$/;"	m	struct:__anon51	access:public
merkle_root	driver-spondoolies-sp30.h	/^	uint32_t         merkle_root;$/;"	m	struct:__anon13	access:public
merklebin	miner.h	/^	unsigned char merklebin[16 * 32];$/;"	m	struct:pool	access:public
merkles	miner.h	/^	int merkles;$/;"	m	struct:pool	access:public
message	api.c	/^static void message(struct io_data *io_data, int messageid, int paramid, char *param2, bool isjson)$/;"	f	file:	signature:(struct io_data *io_data, int messageid, int paramid, char *param2, bool isjson)
message	hf_protocol.h	/^	char     message[];                         \/\/ NULL terminated, little endian byte order$/;"	m	struct:hf_usb_notice_data	access:public
message	hf_protocol_be.h	/^	char     message[];                         \/\/ NULL terminated, little endian byte order$/;"	m	struct:hf_usb_notice_data	access:public
micro	compat/libusb-1.0/libusb/libusb.h	/^	const uint16_t micro;$/;"	m	struct:libusb_version	access:public
midState	driver-bflsc.h	/^	uint8_t midState[MIDSTATE_BYTES];$/;"	m	struct:QueueJobStructure	access:public
midstate	driver-antrouter.c	/^	uint8_t midstate[ANTROUTER_MIDSTATE_SIZE];$/;"	m	struct:ANTROUTER_WORK	file:	access:public
midstate	driver-avalon.h	/^	uint8_t midstate[32];$/;"	m	struct:avalon_result	access:public
midstate	driver-avalon.h	/^	uint8_t midstate[32];$/;"	m	struct:avalon_task	access:public
midstate	driver-bab.c	/^	uint32_t midstate[MIDSTATE_UINTS];$/;"	m	struct:bab_work_send	file:	access:public
midstate	driver-bitfury.h	/^	unsigned char midstate[32];$/;"	m	struct:bitfury_payload	access:public
midstate	driver-bitmain.h	/^	uint8_t midstate[32];$/;"	m	struct:bitmain_txtask_work	access:public
midstate	driver-blockerupter.h	/^	uint8_t midstate[32];$/;"	m	struct:blockerupter_response	access:public
midstate	driver-bmsc.c	/^	uint8_t midstate[BMSC_MIDSTATE_SIZE];$/;"	m	struct:BMSC_WORK	file:	access:public
midstate	driver-drillbit.c	/^	uint8_t midstate[32];$/;"	m	struct:__anon1	file:	access:public
midstate	driver-icarus.c	/^	uint8_t midstate[ICARUS_MIDSTATE_SIZE];$/;"	m	struct:ICARUS_WORK	file:	access:public
midstate	driver-klondike.c	/^	uint8_t midstate[32];$/;"	m	struct:_worktask	file:	access:public
midstate	driver-minion.c	/^	uint8_t midstate[MIDSTATE_BYTES];$/;"	m	struct:minion_que	file:	access:public
midstate	driver-spondoolies-sp10-p.h	/^	uint32_t midstate[8];$/;"	m	struct:__anon44	access:public
midstate	driver-spondoolies-sp30-p.h	/^  uint32_t midstate[8];$/;"	m	struct:__anon64	access:public
midstate	hf_protocol.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_serial	access:public
midstate	hf_protocol.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_usb	access:public
midstate	hf_protocol_be.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_serial	access:public
midstate	hf_protocol_be.h	/^	uint8_t  midstate[32];                  \/\/ Computed from first half of block header$/;"	m	struct:hf_hash_usb	access:public
midstate	miner.h	/^	unsigned char	midstate[32];$/;"	m	struct:work	access:public
midstate	usbtest.py	/^	midstate = "33c5bf5751ec7f7e056443b5aee3800331432c83f404d9de38b94ecbf907b92d"$/;"	v
min_bytes	driver-minion.c	/^	uint64_t min_bytes;$/;"	m	struct:iostat	file:	access:public
min_data_count	driver-antrouter.c	/^	uint32_t min_data_count;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
min_data_count	driver-bmsc.c	/^	uint32_t min_data_count;$/;"	m	struct:BMSC_INFO	file:	access:public
min_data_count	driver-icarus.c	/^	uint32_t min_data_count;$/;"	m	struct:ICARUS_INFO	file:	access:public
min_delay	driver-minion.c	/^	double min_delay;$/;"	m	struct:iostat	file:	access:public
min_delay	usbutils.c	/^	double min_delay;$/;"	m	struct:cg_usb_stats_item	file:	access:public
min_diff	miner.h	/^	double min_diff;$/;"	m	struct:cgminer_pool_stats	access:public
min_diff	miner.h	/^	double min_diff;$/;"	m	struct:device_drv	access:public
min_diff_count	miner.h	/^	uint32_t min_diff_count;$/;"	m	struct:cgminer_pool_stats	access:public
min_diffbits	driver-cointerra.h	/^	uint8_t min_diffbits;$/;"	m	struct:cointerra_info	access:public
min_dlock	driver-minion.c	/^	double min_dlock;$/;"	m	struct:iostat	file:	access:public
min_frq	driver-icarus.c	/^	float min_frq;$/;"	m	struct:rockminer_device_info	file:	access:public
min_ioc	driver-minion.c	/^	uint64_t min_ioc;$/;"	m	struct:iostat	file:	access:public
min_speed	driver-bab.c	/^	uint8_t min_speed;$/;"	m	struct:bab_info	file:	access:public
min_temp_100	driver-minion.c	/^static const char *min_temp_100 = "80-100";$/;"	v	file:
min_temp_40	driver-minion.c	/^static const char *min_temp_40 = "<40";$/;"	v	file:
min_temp_60	driver-minion.c	/^static const char *min_temp_60 = "40-60";$/;"	v	file:
min_temp_80	driver-minion.c	/^static const char *min_temp_80 = "60-80";$/;"	v	file:
min_temp_invalid	driver-minion.c	/^static const char *min_temp_invalid = "?";$/;"	v	file:
min_temp_over	driver-minion.c	/^static const char *min_temp_over = ">100";$/;"	v	file:
min_tmo	usbutils.h	/^	uint32_t min_tmo;$/;"	m	struct:cg_usb_tmo	access:public
minecoin	api.c	/^static void minecoin(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
mined	miner.h	/^	bool		mined;$/;"	m	struct:work	access:public
miner	miner.php	/^				$miner = $parts[0];$/;"	v
miner	miner.php	/^		$miner = $parts[0];$/;"	v
miner	miner.php	/^$miner = null;$/;"	v
miner_count	driver-avalon.h	/^	int miner_count;$/;"	m	struct:avalon_info	access:public
miner_font	miner.php	/^ $miner_font = "font-family:$miner_font_family; font-size:$miner_font_size;";$/;"	v
miner_font_family	miner.php	/^$miner_font_family = 'Verdana, Arial, sans-serif, sans';$/;"	v
miner_font_size	miner.php	/^$miner_font_size = '13pt';$/;"	v
miner_num	driver-avalon.h	/^	uint8_t miner_num;$/;"	m	struct:avalon_result	access:public
miner_num	driver-avalon.h	/^	uint8_t miner_num;$/;"	m	struct:avalon_task	access:public
miner_thread	cgminer.c	/^void *miner_thread(void *userdata)$/;"	f	signature:(void *userdata)
minerconfig	api.c	/^static void minerconfig(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
minerestats	api.c	/^static void minerestats(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
minergate_do_job_req	driver-spondoolies-sp10-p.h	/^} minergate_do_job_req;$/;"	t	typeref:struct:__anon44
minergate_do_job_req_sp30	driver-spondoolies-sp30-p.h	/^} minergate_do_job_req_sp30;$/;"	t	typeref:struct:__anon64
minergate_do_job_rsp	driver-spondoolies-sp10-p.h	/^} minergate_do_job_rsp;$/;"	t	typeref:struct:__anon45
minergate_do_job_rsp_sp30	driver-spondoolies-sp30-p.h	/^} minergate_do_job_rsp_sp30;$/;"	t	typeref:struct:__anon65
minergate_req_packet	driver-spondoolies-sp10-p.h	/^} minergate_req_packet;$/;"	t	typeref:struct:__anon46
minergate_req_packet_sp30	driver-spondoolies-sp30-p.h	/^} minergate_req_packet_sp30;$/;"	t	typeref:struct:__anon66
minergate_rsp_packet	driver-spondoolies-sp10-p.h	/^} minergate_rsp_packet;$/;"	t	typeref:struct:__anon47
minergate_rsp_packet_sp30	driver-spondoolies-sp30-p.h	/^} minergate_rsp_packet_sp30;$/;"	t	typeref:struct:__anon67
minerstats	api.c	/^static void minerstats(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
minhead	miner.php	/^function minhead($mcerr = '')$/;"	f
mining_thr	cgminer.c	/^struct thr_info **mining_thr;$/;"	v	typeref:struct:thr_info
mining_thr_lock	cgminer.c	/^pthread_rwlock_t mining_thr_lock;$/;"	v
mining_threads	cgminer.c	/^int mining_threads;$/;"	v
minionPins	driver-minion.c	/^} minionPins[] = {$/;"	v	typeref:struct:minion_select_pins	file:
minion_api_set	driver-minion.c	/^static char *minion_api_set(struct cgpu_info *minioncgpu, char *option, char *setting, char *replybuf)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, char *option, char *setting, char *replybuf)
minion_api_stats	driver-minion.c	/^static struct api_data *minion_api_stats(struct cgpu_info *minioncgpu)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu)
minion_detect	driver-minion.c	/^static void minion_detect(__maybe_unused bool hotplug)$/;"	f	file:	signature:(__maybe_unused bool hotplug)
minion_detect	driver-minion.c	/^static void minion_detect(bool hotplug)$/;"	f	file:	signature:(bool hotplug)
minion_detect_chips	driver-minion.c	/^static void minion_detect_chips(struct cgpu_info *minioncgpu, struct minion_info *minioninfo)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo)
minion_detect_one	driver-minion.c	/^static void minion_detect_one(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int pin, int chipid)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int pin, int chipid)
minion_do_work	driver-minion.c	/^static void minion_do_work(struct cgpu_info *minioncgpu)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu)
minion_drv	driver-minion.c	/^struct device_drv minion_drv = {$/;"	v	typeref:struct:device_drv
minion_flush_work	driver-minion.c	/^static void minion_flush_work(struct cgpu_info *minioncgpu)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu)
minion_freq	driver-minion.c	/^static uint32_t minion_freq[] = {$/;"	v	file:
minion_get_statline_before	driver-minion.c	/^static void minion_get_statline_before(char *buf, size_t bufsiz, struct cgpu_info *minioncgpu)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *minioncgpu)
minion_header	driver-minion.c	/^struct minion_header {$/;"	s	file:
minion_header::chipid	driver-minion.c	/^	uint8_t chipid;$/;"	m	struct:minion_header	file:	access:public
minion_header::data	driver-minion.c	/^	uint8_t data[4]; \/\/ placeholder$/;"	m	struct:minion_header	file:	access:public
minion_header::reg	driver-minion.c	/^	uint8_t reg;$/;"	m	struct:minion_header	file:	access:public
minion_header::siz	driver-minion.c	/^	uint8_t siz[2];$/;"	m	struct:minion_header	file:	access:public
minion_identify	driver-minion.c	/^static void minion_identify(__maybe_unused struct cgpu_info *minioncgpu)$/;"	f	file:	signature:(__maybe_unused struct cgpu_info *minioncgpu)
minion_info	driver-minion.c	/^struct minion_info {$/;"	s	file:
minion_info::changing	driver-minion.c	/^	bool changing[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_bad	driver-minion.c	/^	uint64_t chip_bad[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_chk	driver-minion.c	/^	struct timeval chip_chk;$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
minion_info::chip_core_act	driver-minion.c	/^	uint32_t chip_core_act[MINION_CORE_REPS][MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_core_ena	driver-minion.c	/^	uint32_t chip_core_ena[MINION_CORE_REPS][MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_dup	driver-minion.c	/^	uint64_t chip_dup[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_err	driver-minion.c	/^	uint64_t chip_err[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_good	driver-minion.c	/^	uint64_t chip_good[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_nonces	driver-minion.c	/^	uint64_t chip_nonces[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_nononces	driver-minion.c	/^	uint64_t chip_nononces[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_pin	driver-minion.c	/^	int chip_pin[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::chip_rpt	driver-minion.c	/^	struct timeval chip_rpt;$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
minion_info::chip_status	driver-minion.c	/^	struct minion_status chip_status[MINION_CHIPS];$/;"	m	struct:minion_info	typeref:struct:minion_info::minion_status	file:	access:public
minion_info::chipid	driver-minion.c	/^	uint8_t chipid[MINION_CHIPS]; \/\/ Chip Number$/;"	m	struct:minion_info	file:	access:public
minion_info::chips	driver-minion.c	/^	int chips;$/;"	m	struct:minion_info	file:	access:public
minion_info::command_interrupts	driver-minion.c	/^	uint64_t command_interrupts;$/;"	m	struct:minion_info	file:	access:public
minion_info::core_bad	driver-minion.c	/^	uint64_t core_bad[MINION_CHIPS][MINION_CORES+1];$/;"	m	struct:minion_info	file:	access:public
minion_info::core_good	driver-minion.c	/^	uint64_t core_good[MINION_CHIPS][MINION_CORES+1];$/;"	m	struct:minion_info	file:	access:public
minion_info::do_reset	driver-minion.c	/^	double do_reset[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::fifo_spi_errors	driver-minion.c	/^	uint64_t fifo_spi_errors[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::flag_reset	driver-minion.c	/^	bool flag_reset[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::freqms	driver-minion.c	/^	int freqms[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::freqsent	driver-minion.c	/^	uint32_t freqsent[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::gpio	driver-minion.c	/^	volatile unsigned *gpio;$/;"	m	struct:minion_info	file:	access:public
minion_info::gpiointfd	driver-minion.c	/^	int gpiointfd;$/;"	m	struct:minion_info	file:	access:public
minion_info::gpiointvalue	driver-minion.c	/^	char gpiointvalue[64];$/;"	m	struct:minion_info	file:	access:public
minion_info::has_chip	driver-minion.c	/^	bool has_chip[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::hchip_list	driver-minion.c	/^	K_STORE *hchip_list[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::hfree_list	driver-minion.c	/^	K_LIST *hfree_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::history_gen	driver-minion.c	/^	int history_gen;$/;"	m	struct:minion_info	file:	access:public
minion_info::history_ghs	driver-minion.c	/^	double history_ghs[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::init_cores	driver-minion.c	/^	uint8_t init_cores[MINION_CHIPS][DATA_SIZ*MINION_CORE_REPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::init_freq	driver-minion.c	/^	int init_freq[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::init_temp	driver-minion.c	/^	int init_temp[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::initialised	driver-minion.c	/^	bool initialised;$/;"	m	struct:minion_info	file:	access:public
minion_info::interrupts	driver-minion.c	/^	uint64_t interrupts;$/;"	m	struct:minion_info	file:	access:public
minion_info::ioseq	driver-minion.c	/^	uint64_t ioseq;$/;"	m	struct:minion_info	file:	access:public
minion_info::iostats	driver-minion.c	/^	IOSTAT iostats[0x200];$/;"	m	struct:minion_info	file:	access:public
minion_info::last_did	driver-minion.c	/^	struct timeval last_did;$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
minion_info::last_displayed_xff	driver-minion.c	/^	uint64_t last_displayed_xff;$/;"	m	struct:minion_info	file:	access:public
minion_info::last_interrupt	driver-minion.c	/^	char last_interrupt[64];$/;"	m	struct:minion_info	file:	access:public
minion_info::last_power_cycle	driver-minion.c	/^	time_t last_power_cycle;$/;"	m	struct:minion_info	file:	access:public
minion_info::last_reset	driver-minion.c	/^	struct timeval last_reset[MINION_CHIPS];$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
minion_info::last_spi_reset	driver-minion.c	/^	time_t last_spi_reset;$/;"	m	struct:minion_info	file:	access:public
minion_info::last_xff	driver-minion.c	/^	time_t last_xff;$/;"	m	struct:minion_info	file:	access:public
minion_info::lastfreq	driver-minion.c	/^	struct timeval lastfreq[MINION_CHIPS];$/;"	m	struct:minion_info	typeref:struct:minion_info::timeval	file:	access:public
minion_info::lednow	driver-minion.c	/^	bool lednow[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::new_nonces	driver-minion.c	/^	uint64_t new_nonces;$/;"	m	struct:minion_info	file:	access:public
minion_info::next_task_id	driver-minion.c	/^	uint32_t next_task_id;$/;"	m	struct:minion_info	file:	access:public
minion_info::next_tid	driver-minion.c	/^	uint64_t next_tid;$/;"	m	struct:minion_info	file:	access:public
minion_info::nonce_lock	driver-minion.c	/^	pthread_mutex_t nonce_lock;$/;"	m	struct:minion_info	file:	access:public
minion_info::nonce_ready	driver-minion.c	/^	cgsem_t nonce_ready;$/;"	m	struct:minion_info	file:	access:public
minion_info::nonces_failed	driver-minion.c	/^	uint64_t nonces_failed[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::nonces_recovered	driver-minion.c	/^	uint64_t nonces_recovered[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::ok_nonces	driver-minion.c	/^	uint64_t ok_nonces;$/;"	m	struct:minion_info	file:	access:public
minion_info::p_list	driver-minion.c	/^	K_STORE *p_list[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::pfree_list	driver-minion.c	/^	K_LIST *pfree_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::power_cycles	driver-minion.c	/^	uint64_t power_cycles;$/;"	m	struct:minion_info	file:	access:public
minion_info::que_bands	driver-minion.c	/^	uint64_t que_bands[TIME_BANDS+1];$/;"	m	struct:minion_info	file:	access:public
minion_info::que_max	driver-minion.c	/^	double que_max;$/;"	m	struct:minion_info	file:	access:public
minion_info::que_min	driver-minion.c	/^	double que_min;$/;"	m	struct:minion_info	file:	access:public
minion_info::que_time	driver-minion.c	/^	double que_time;$/;"	m	struct:minion_info	file:	access:public
minion_info::que_work	driver-minion.c	/^	uint64_t que_work;$/;"	m	struct:minion_info	file:	access:public
minion_info::res_err_count	driver-minion.c	/^	int res_err_count[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::res_spi_errors	driver-minion.c	/^	uint64_t res_spi_errors[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::res_thr	driver-minion.c	/^	struct thr_info res_thr;$/;"	m	struct:minion_info	typeref:struct:minion_info::thr_info	file:	access:public
minion_info::reset2_count	driver-minion.c	/^	int reset2_count[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::reset2_mark	driver-minion.c	/^	K_ITEM *reset2_mark[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::reset2_time	driver-minion.c	/^	int reset2_time[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::reset_count	driver-minion.c	/^	int reset_count[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::reset_mark	driver-minion.c	/^	K_ITEM *reset_mark[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::reset_time	driver-minion.c	/^	int reset_time[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::result_interrupts	driver-minion.c	/^	uint64_t result_interrupts;$/;"	m	struct:minion_info	file:	access:public
minion_info::rfree_list	driver-minion.c	/^	K_LIST *rfree_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::rnonce_list	driver-minion.c	/^	K_STORE *rnonce_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::scan_work	driver-minion.c	/^	cgsem_t scan_work;$/;"	m	struct:minion_info	file:	access:public
minion_info::setled	driver-minion.c	/^	bool setled[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::spi_errors	driver-minion.c	/^	uint64_t spi_errors;$/;"	m	struct:minion_info	file:	access:public
minion_info::spi_lock	driver-minion.c	/^	pthread_mutex_t spi_lock;$/;"	m	struct:minion_info	file:	access:public
minion_info::spi_reset_count	driver-minion.c	/^	int spi_reset_count;$/;"	m	struct:minion_info	file:	access:public
minion_info::spi_reset_io	driver-minion.c	/^	bool spi_reset_io;$/;"	m	struct:minion_info	file:	access:public
minion_info::spi_resets	driver-minion.c	/^	uint64_t spi_resets;$/;"	m	struct:minion_info	file:	access:public
minion_info::spifd	driver-minion.c	/^	int spifd;$/;"	m	struct:minion_info	file:	access:public
minion_info::spir_thr	driver-minion.c	/^	struct thr_info spir_thr;$/;"	m	struct:minion_info	typeref:struct:minion_info::thr_info	file:	access:public
minion_info::spiw_thr	driver-minion.c	/^	struct thr_info spiw_thr;$/;"	m	struct:minion_info	typeref:struct:minion_info::thr_info	file:	access:public
minion_info::sta_lock	driver-minion.c	/^	pthread_mutex_t sta_lock;$/;"	m	struct:minion_info	file:	access:public
minion_info::summary	driver-minion.c	/^	IOSTAT summary;$/;"	m	struct:minion_info	file:	access:public
minion_info::task_list	driver-minion.c	/^	K_STORE *task_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::task_ready	driver-minion.c	/^	cgsem_t task_ready;$/;"	m	struct:minion_info	file:	access:public
minion_info::tasks_failed	driver-minion.c	/^	uint64_t tasks_failed[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::tasks_recovered	driver-minion.c	/^	uint64_t tasks_recovered[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::tested_nonces	driver-minion.c	/^	uint64_t tested_nonces;$/;"	m	struct:minion_info	file:	access:public
minion_info::tfree_list	driver-minion.c	/^	K_LIST *tfree_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::thr	driver-minion.c	/^	struct thr_info *thr;$/;"	m	struct:minion_info	typeref:struct:minion_info::thr_info	file:	access:public
minion_info::treply_list	driver-minion.c	/^	K_STORE *treply_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::untested_nonces	driver-minion.c	/^	uint64_t untested_nonces;$/;"	m	struct:minion_info	file:	access:public
minion_info::use_res2	driver-minion.c	/^	uint64_t use_res2[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::want_freq	driver-minion.c	/^	int want_freq[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::wchip_list	driver-minion.c	/^	K_STORE *wchip_list[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::wchip_staled	driver-minion.c	/^	uint64_t wchip_staled;$/;"	m	struct:minion_info	file:	access:public
minion_info::wfree_list	driver-minion.c	/^	K_LIST *wfree_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::work_rolled	driver-minion.c	/^	uint64_t work_rolled;$/;"	m	struct:minion_info	file:	access:public
minion_info::work_unrolled	driver-minion.c	/^	uint64_t work_unrolled;$/;"	m	struct:minion_info	file:	access:public
minion_info::wque_flushed	driver-minion.c	/^	uint64_t wque_flushed;$/;"	m	struct:minion_info	file:	access:public
minion_info::wque_list	driver-minion.c	/^	K_STORE *wque_list[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
minion_info::wstale_list	driver-minion.c	/^	K_STORE *wstale_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::wt_bands	driver-minion.c	/^	uint64_t wt_bands[TIME_BANDS+1];$/;"	m	struct:minion_info	file:	access:public
minion_info::wt_max	driver-minion.c	/^	double wt_max;$/;"	m	struct:minion_info	file:	access:public
minion_info::wt_min	driver-minion.c	/^	double wt_min;$/;"	m	struct:minion_info	file:	access:public
minion_info::wt_time	driver-minion.c	/^	double wt_time;$/;"	m	struct:minion_info	file:	access:public
minion_info::wt_work	driver-minion.c	/^	uint64_t wt_work;$/;"	m	struct:minion_info	file:	access:public
minion_info::wwork_flushed	driver-minion.c	/^	uint64_t wwork_flushed;$/;"	m	struct:minion_info	file:	access:public
minion_info::wwork_list	driver-minion.c	/^	K_STORE *wwork_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::xff_list	driver-minion.c	/^	K_STORE *xff_list;$/;"	m	struct:minion_info	file:	access:public
minion_info::xffs	driver-minion.c	/^	uint64_t xffs;$/;"	m	struct:minion_info	file:	access:public
minion_info::xfree_list	driver-minion.c	/^	K_LIST *xfree_list;$/;"	m	struct:minion_info	file:	access:public
minion_init_gpio_interrupt	driver-minion.c	/^static bool minion_init_gpio_interrupt(struct cgpu_info *minioncgpu, struct minion_info *minioninfo)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo)
minion_init_spi	driver-minion.c	/^static bool minion_init_spi(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int bus, int chip, bool reset)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int bus, int chip, bool reset)
minion_init_spi	driver-minion.c	/^static bool minion_init_spi(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int bus, int chip, bool reset);$/;"	p	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int bus, int chip, bool reset)
minion_ioc	driver-minion.c	/^} minion_ioc[] = {$/;"	v	typeref:struct:__anon49	file:
minion_memory	driver-minion.c	/^static const char *minion_memory = "\/dev\/mem";$/;"	v	file:
minion_memory_addr	driver-minion.c	/^static int minion_memory_addr = BCM2835_GPIO_BASE;$/;"	v	file:
minion_modules	driver-minion.c	/^static const char *minion_modules[] = {$/;"	v	file:
minion_process_options	driver-minion.c	/^static void minion_process_options(struct minion_info *minioninfo)$/;"	f	file:	signature:(struct minion_info *minioninfo)
minion_que	driver-minion.c	/^struct minion_que {$/;"	s	file:
minion_que::bits	driver-minion.c	/^	uint8_t bits[DATA_SIZ];$/;"	m	struct:minion_que	file:	access:public
minion_que::merkle7	driver-minion.c	/^	uint8_t merkle7[DATA_SIZ];$/;"	m	struct:minion_que	file:	access:public
minion_que::midstate	driver-minion.c	/^	uint8_t midstate[MIDSTATE_BYTES];$/;"	m	struct:minion_que	file:	access:public
minion_que::ntime	driver-minion.c	/^	uint8_t ntime[DATA_SIZ];$/;"	m	struct:minion_que	file:	access:public
minion_que::reserved	driver-minion.c	/^	uint8_t reserved[2];$/;"	m	struct:minion_que	file:	access:public
minion_que::task_id	driver-minion.c	/^	uint8_t task_id[2];$/;"	m	struct:minion_que	file:	access:public
minion_queue_full	driver-minion.c	/^static bool minion_queue_full(struct cgpu_info *minioncgpu)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu)
minion_result	driver-minion.c	/^struct minion_result {$/;"	s	file:
minion_result::nonce	driver-minion.c	/^	uint8_t nonce[DATA_SIZ];$/;"	m	struct:minion_result	file:	access:public
minion_result::status	driver-minion.c	/^	uint8_t status[DATA_SIZ];$/;"	m	struct:minion_result	file:	access:public
minion_results	driver-minion.c	/^static void *minion_results(void *userdata)$/;"	f	file:	signature:(void *userdata)
minion_scanwork	driver-minion.c	/^static int64_t minion_scanwork(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
minion_select_pins	driver-minion.c	/^static struct minion_select_pins {$/;"	s	file:
minion_select_pins::bcm	driver-minion.c	/^	int bcm; \/\/ this is what we use$/;"	m	struct:minion_select_pins	file:	access:public
minion_select_pins::name	driver-minion.c	/^	char *name;$/;"	m	struct:minion_select_pins	file:	access:public
minion_select_pins::pin	driver-minion.c	/^	int pin;$/;"	m	struct:minion_select_pins	file:	access:public
minion_select_pins::wpi	driver-minion.c	/^	int wpi;$/;"	m	struct:minion_select_pins	file:	access:public
minion_setup_chip_select	driver-minion.c	/^static bool minion_setup_chip_select(struct cgpu_info *minioncgpu, struct minion_info *minioninfo)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo)
minion_shutdown	driver-minion.c	/^static void minion_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
minion_spi_reply	driver-minion.c	/^static void *minion_spi_reply(void *userdata)$/;"	f	file:	signature:(void *userdata)
minion_spi_write	driver-minion.c	/^static void *minion_spi_write(void *userdata)$/;"	f	file:	signature:(void *userdata)
minion_status	driver-minion.c	/^struct minion_status {$/;"	s	file:
minion_status::chipwork	driver-minion.c	/^	uint32_t chipwork;$/;"	m	struct:minion_status	file:	access:public
minion_status::cores	driver-minion.c	/^	uint16_t cores;$/;"	m	struct:minion_status	file:	access:public
minion_status::first_nonce	driver-minion.c	/^	struct timeval first_nonce;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
minion_status::freq	driver-minion.c	/^	uint32_t freq;$/;"	m	struct:minion_status	file:	access:public
minion_status::from_first_good	driver-minion.c	/^	uint64_t from_first_good;$/;"	m	struct:minion_status	file:	access:public
minion_status::idle	driver-minion.c	/^	uint32_t idle;$/;"	m	struct:minion_status	file:	access:public
minion_status::idle_rpt	driver-minion.c	/^	struct timeval idle_rpt;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
minion_status::islow	driver-minion.c	/^	bool islow;$/;"	m	struct:minion_status	file:	access:public
minion_status::last	driver-minion.c	/^	struct timeval last;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
minion_status::last_rpt_idle	driver-minion.c	/^	uint32_t last_rpt_idle;$/;"	m	struct:minion_status	file:	access:public
minion_status::lastoverheat	driver-minion.c	/^	struct timeval lastoverheat;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
minion_status::lastrecover	driver-minion.c	/^	struct timeval lastrecover;$/;"	m	struct:minion_status	typeref:struct:minion_status::timeval	file:	access:public
minion_status::lowcount	driver-minion.c	/^	int lowcount;$/;"	m	struct:minion_status	file:	access:public
minion_status::overheat	driver-minion.c	/^	bool overheat;$/;"	m	struct:minion_status	file:	access:public
minion_status::overheats	driver-minion.c	/^	uint32_t overheats;$/;"	m	struct:minion_status	file:	access:public
minion_status::overheattime	driver-minion.c	/^	double overheattime;$/;"	m	struct:minion_status	file:	access:public
minion_status::quework	driver-minion.c	/^	uint32_t quework;$/;"	m	struct:minion_status	file:	access:public
minion_status::realwork	driver-minion.c	/^	uint32_t realwork; \/\/ FIFO_STA$/;"	m	struct:minion_status	file:	access:public
minion_status::temp	driver-minion.c	/^	uint16_t temp;$/;"	m	struct:minion_status	file:	access:public
minion_status::tempsent	driver-minion.c	/^	uint32_t tempsent;$/;"	m	struct:minion_status	file:	access:public
minion_status::tohigh	driver-minion.c	/^	bool tohigh;$/;"	m	struct:minion_status	file:	access:public
minion_thread_prepare	driver-minion.c	/^static bool minion_thread_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
minion_toggle_gpio	driver-minion.c	/^static bool minion_toggle_gpio(struct cgpu_info *minioncgpu, int gpionum)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, int gpionum)
minion_txrx	driver-minion.c	153;"	d	file:
minor	compat/libusb-1.0/libusb/libusb.h	/^	const uint16_t minor;$/;"	m	struct:libusb_version	access:public
minreread	driver-minion.c	/^static bool minreread = false;$/;"	v	file:
missing_chips_per_bank	driver-bab.c	/^	int missing_chips_per_bank[BAB_MAXBANKS+1];$/;"	m	struct:bab_info	file:	access:public
mksec	usbutils.c	/^static LPSECURITY_ATTRIBUTES mksec(const char *dname, uint8_t bus_number, uint8_t device_address)$/;"	f	file:	signature:(const char *dname, uint8_t bus_number, uint8_t device_address)
mm_cmp_1404	driver-avalon2.c	/^static inline int mm_cmp_1404(struct avalon2_info *info, int modular)$/;"	f	file:	signature:(struct avalon2_info *info, int modular)
mm_cmp_1406	driver-avalon2.c	/^static inline int mm_cmp_1406(struct avalon2_info *info)$/;"	f	file:	signature:(struct avalon2_info *info)
mm_version	driver-avalon2.h	/^	char mm_version[AVA2_DEFAULT_MODULARS][16];$/;"	m	struct:avalon2_info	access:public
mm_version	driver-hashratio.h	/^	char mm_version[16];$/;"	m	struct:hashratio_info	access:public
mmq_epinfos	usbutils.c	/^static struct usb_epinfo mmq_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
mmq_ints	usbutils.c	/^static struct usb_intinfo mmq_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
mobilepage	miner.php	/^$mobilepage = array($/;"	v
mobilesum	miner.php	/^$mobilesum = array($/;"	v
mode	knc-transport-spi.c	/^	uint8_t mode;$/;"	m	struct:spidev_context	file:	access:public
mode	spi-context.h	/^	uint8_t mode;$/;"	m	struct:spi_config	access:public
modes	usbutils.c	/^	uint32_t modes;$/;"	m	struct:cg_usb_stats_details	file:	access:public
modes_str	usbutils.c	/^static void modes_str(char *buf, uint32_t modes)$/;"	f	file:	signature:(char *buf, uint32_t modes)
modify_ntime	cgminer.c	/^static void modify_ntime(char *ntime, int noffset)$/;"	f	file:	signature:(char *ntime, int noffset)
modminer_delta_clock	driver-modminer.c	/^static const char *modminer_delta_clock(struct thr_info *thr, int delta, bool temp, bool force)$/;"	f	file:	signature:(struct thr_info *thr, int delta, bool temp, bool force)
modminer_detect	driver-modminer.c	/^static void modminer_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
modminer_detect_one	driver-modminer.c	/^static struct cgpu_info *modminer_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
modminer_drv	driver-modminer.c	/^struct device_drv modminer_drv = {$/;"	v	typeref:struct:device_drv
modminer_fpga_init	driver-modminer.c	/^static bool modminer_fpga_init(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
modminer_fpga_prepare	driver-modminer.c	/^static bool modminer_fpga_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
modminer_fpga_shutdown	driver-modminer.c	/^static void modminer_fpga_shutdown(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
modminer_fpga_state	miner.h	/^struct modminer_fpga_state {$/;"	s
modminer_fpga_state::death_stage_one	miner.h	/^	bool death_stage_one;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::first_work	miner.h	/^	struct timeval first_work;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval	access:public
modminer_fpga_state::fpgaid	miner.h	/^	char fpgaid;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::hashes	miner.h	/^	uint32_t hashes;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::hw_errors	miner.h	/^	uint32_t hw_errors;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::last_changed	miner.h	/^	struct timeval last_changed;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval	access:public
modminer_fpga_state::last_nonce	miner.h	/^	struct timeval last_nonce;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval	access:public
modminer_fpga_state::new_work	miner.h	/^	bool new_work;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::next_work_cmd	miner.h	/^	char next_work_cmd[46];$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::one_byte_temp	miner.h	/^	bool one_byte_temp;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::overheated	miner.h	/^	bool overheated;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::running_work	miner.h	/^	struct work running_work;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::work	access:public
modminer_fpga_state::shares	miner.h	/^	uint32_t shares;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::shares_last_hw	miner.h	/^	uint32_t shares_last_hw;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::shares_to_good	miner.h	/^	uint32_t shares_to_good;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::success_more	miner.h	/^	uint32_t success_more;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::timeout_fail	miner.h	/^	uint32_t timeout_fail;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::tried_two_byte_temp	miner.h	/^	bool tried_two_byte_temp;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_state::tv_workstart	miner.h	/^	struct timeval tv_workstart;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval	access:public
modminer_fpga_state::work_running	miner.h	/^	bool work_running;$/;"	m	struct:modminer_fpga_state	access:public
modminer_fpga_upload_bitstream	driver-modminer.c	/^static bool modminer_fpga_upload_bitstream(struct cgpu_info *modminer)$/;"	f	file:	signature:(struct cgpu_info *modminer)
modminer_hw_error	driver-modminer.c	/^static void modminer_hw_error(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
modminer_mutex	miner.h	/^	pthread_mutex_t *modminer_mutex;$/;"	m	struct:cgpu_info	access:public
modminer_process_results	driver-modminer.c	/^static uint64_t modminer_process_results(struct thr_info *thr, struct work *work)$/;"	f	file:	signature:(struct thr_info *thr, struct work *work)
modminer_scanhash	driver-modminer.c	/^static int64_t modminer_scanhash(struct thr_info *thr, struct work *work, int64_t __maybe_unused max_nonce)$/;"	f	file:	signature:(struct thr_info *thr, struct work *work, int64_t __maybe_unused max_nonce)
modminer_set_device	driver-modminer.c	/^static char *modminer_set_device(struct cgpu_info *modminer, char *option, char *setting, char *replybuf)$/;"	f	file:	signature:(struct cgpu_info *modminer, char *option, char *setting, char *replybuf)
modminer_start_work	driver-modminer.c	/^static bool modminer_start_work(struct thr_info *thr, struct work *work)$/;"	f	file:	signature:(struct thr_info *thr, struct work *work)
modulars	driver-avalon2.h	/^	int modulars[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
monotonic_clkid	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static clockid_t monotonic_clkid = -1;$/;"	v	file:
most_devices	cgminer.c	/^static int most_devices;$/;"	v	file:
mp_last_rsp	driver-spondoolies-sp10.h	/^	minergate_rsp_packet* mp_last_rsp;$/;"	m	struct:spond_adapter	access:public
mp_last_rsp	driver-spondoolies-sp30.h	/^	minergate_rsp_packet_sp30* mp_last_rsp;$/;"	m	struct:spond_adapter	access:public
mp_next_req	driver-spondoolies-sp10.h	/^	minergate_req_packet* mp_next_req;$/;"	m	struct:spond_adapter	access:public
mp_next_req	driver-spondoolies-sp30.h	/^	minergate_req_packet_sp30* mp_next_req;$/;"	m	struct:spond_adapter	access:public
mrkle_root	driver-spondoolies-sp10-p.h	/^	uint32_t mrkle_root;     \/\/ to validate$/;"	m	struct:__anon45	access:public
mrkle_root	driver-spondoolies-sp10-p.h	/^	uint32_t mrkle_root;$/;"	m	struct:__anon44	access:public
mrkle_root	driver-spondoolies-sp30-p.h	/^  uint32_t mrkle_root; \/\/ to validate$/;"	m	struct:__anon65	access:public
mrkle_root	driver-spondoolies-sp30-p.h	/^  uint32_t mrkle_root;$/;"	m	struct:__anon64	access:public
ms3steps	driver-bab.c	/^	uint32_t ms3steps[MIDSTATE_UINTS];$/;"	m	struct:bab_work_send	file:	access:public
ms3steps	libbitfury.c	/^void ms3steps(uint32_t *p)$/;"	f	signature:(uint32_t *p)
ms3steps	libbitfury.h	/^void ms3steps(uint32_t *p);$/;"	p	signature:(uint32_t *p)
ms_tdiff	util.c	/^int ms_tdiff(struct timeval *end, struct timeval *start)$/;"	f	signature:(struct timeval *end, struct timeval *start)
ms_tdiff	util.h	/^int ms_tdiff(struct timeval *end, struct timeval *start);$/;"	p	signature:(struct timeval *end, struct timeval *start)
ms_to_timespec	util.c	/^void ms_to_timespec(struct timespec *spec, int64_t ms)$/;"	f	signature:(struct timespec *spec, int64_t ms)
ms_to_timespec	util.h	/^void ms_to_timespec(struct timespec *spec, int64_t ms);$/;"	p	signature:(struct timespec *spec, int64_t ms)
ms_to_timeval	util.c	/^void ms_to_timeval(struct timeval *val, int64_t ms)$/;"	f	signature:(struct timeval *val, int64_t ms)
ms_work	driver-bflsc.h	/^	unsigned int ms_work;$/;"	m	struct:bflsc_dev	access:public
msg	api-example.php	/^	$msg = "socket connect($addr,$port) failed";$/;"	v
msg	api-example.php	/^	$msg = "socket create(TCP) failed";$/;"	v
msg	miner.php	/^		$msg = "ERR: mcast send socket create(UDP) failed";$/;"	v
msg	miner.php	/^		$msg = "socket connect($addr,$port) failed";$/;"	v
msg	miner.php	/^		$msg = "socket create(TCP) failed";$/;"	v
msg	miner.php	/^	$msg = "ERR: mcast listen socket create(UDP) failed";$/;"	v
msg1	miner.php	/^	$msg1 = "ERR: mcast listen socket bind(";$/;"	v
msg2	miner.php	/^	$msg2 = ") failed";$/;"	v
msg_detect_reply	driver-klondike.c	/^static const char *msg_detect_reply = "DReply";$/;"	v	file:
msg_detect_send	driver-klondike.c	/^static const char *msg_detect_send = "DSend";$/;"	v	file:
msg_from_hu16	driver-cointerra.c	/^static void msg_from_hu16(char *buf, int msg, uint16_t val)$/;"	f	file:	signature:(char *buf, int msg, uint16_t val)
msg_reply	driver-klondike.c	/^static const char *msg_reply = "Reply";$/;"	v	file:
msg_send	driver-klondike.c	/^static const char *msg_send = "Send";$/;"	v	file:
mt_disable	cgminer.c	/^static void mt_disable(struct thr_info *mythr, const int thr_id,$/;"	f	file:	signature:(struct thr_info *mythr, const int thr_id, struct device_drv *drv)
mt_enable	cgminer.c	/^static void mt_enable(struct thr_info *mythr)$/;"	f	file:	signature:(struct thr_info *mythr)
mutex	compat/libusb-1.0/libusb/os/poll_windows.c	/^	CRITICAL_SECTION mutex; \/\/ lock for fds$/;"	m	struct:__anon38	file:	access:public
mutex	miner.h	/^	pthread_mutex_t		mutex;$/;"	m	struct:thread_q	access:public
mutex	usbutils.h	/^	pthread_mutex_t *mutex;$/;"	m	struct:cg_usb_device	access:public
mutex	util.h	/^	pthread_mutex_t mutex;$/;"	m	struct:cglock	access:public
mutex_destroy	miner.h	/^static inline void mutex_destroy(pthread_mutex_t *lock)$/;"	f	signature:(pthread_mutex_t *lock)
mutex_init	miner.h	783;"	d
mutex_lock	miner.h	771;"	d
mutex_trylock	miner.h	774;"	d
mutex_unlock	miner.h	773;"	d
mutex_unlock_noyield	miner.h	772;"	d
my_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb-int.c	/^void my_callback(int something)$/;"	f	signature:(int something)
my_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb-int.c	/^void my_callback(int something);$/;"	p	file:	signature:(int something)
my_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb.c	/^static void my_callback(char *p)$/;"	f	file:	signature:(char *p)
my_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb_postargs.c	/^static void my_callback(char *p, int x)$/;"	f	file:	signature:(char *p, int x)
my_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb_preargs.c	/^static void my_callback(int x, char *p)$/;"	f	file:	signature:(int x, char *p)
my_callback	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	/^static void my_callback(struct undefined *undef)$/;"	f	file:	signature:(struct undefined *undef)
my_callback	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	/^static void my_callback(struct undefined *undef)$/;"	f	file:	signature:(struct undefined *undef)
my_callback_onearg	ccan/typesafe_cb/test/run.c	/^static void my_callback_onearg(char *p)$/;"	f	file:	signature:(char *p)
my_callback_post	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	/^static void my_callback_post(struct undefined *undef, int x)$/;"	f	file:	signature:(struct undefined *undef, int x)
my_callback_post	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	/^static void my_callback_post(struct undefined *undef, int x)$/;"	f	file:	signature:(struct undefined *undef, int x)
my_callback_postargs	ccan/typesafe_cb/test/run.c	/^static void my_callback_postargs(char *p, int a, int b)$/;"	f	file:	signature:(char *p, int a, int b)
my_callback_pre	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	/^static void my_callback_pre(int x, struct undefined *undef)$/;"	f	file:	signature:(int x, struct undefined *undef)
my_callback_pre	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	/^static void my_callback_pre(int x, struct undefined *undef)$/;"	f	file:	signature:(int x, struct undefined *undef)
my_callback_preargs	ccan/typesafe_cb/test/run.c	/^static void my_callback_preargs(int a, int b, char *p)$/;"	f	file:	signature:(int a, int b, char *p)
my_cb	ccan/opt/test/run-usage.c	/^static char *my_cb(void *p)$/;"	f	file:	signature:(void *p)
my_jobs	driver-spondoolies-sp10.h	/^	spond_driver_work my_jobs[MAX_JOBS_IN_MINERGATE];$/;"	m	struct:spond_adapter	access:public
my_jobs	driver-spondoolies-sp30.h	/^	spond_driver_work_sp30 my_jobs[MAX_JOBS_PENDING_IN_MINERGATE_SP30];$/;"	m	struct:spond_adapter	access:public
my_log_curses	logging.c	/^static void my_log_curses(int prio, const char *datetime, const char *str, bool force)$/;"	f	file:	signature:(int prio, const char *datetime, const char *str, bool force)
my_printf	ccan/compiler/test/compile_fail-printf.c	/^static void PRINTF_FMT(2,3) my_printf(int x, const char *fmt, ...)$/;"	f	signature:(int x, const char *fmt, ...)
my_thr_id	api.c	/^static int my_thr_id = 0;$/;"	v	file:
myassert	bitforce-firmware-flash.c	21;"	d	file:
mystrstr	driver-cointerra.c	/^static char *mystrstr(char *haystack, int size, const char *needle)$/;"	f	file:	signature:(char *haystack, int size, const char *needle)
n	miner.php	/^ $n = 0;$/;"	v
n1_len	miner.h	/^	size_t n1_len;$/;"	m	struct:pool	access:public
n2size	miner.h	/^	int n2size;$/;"	m	struct:pool	access:public
nDevs	cgminer.c	/^int nDevs;$/;"	v
nValue	miner.h	/^	int nValue;$/;"	m	struct:pool	access:public
nam	miner.php	/^				foreach ($fields1b as $nam => $val)$/;"	v
nam	miner.php	/^				foreach ($fields2b as $nam => $val)$/;"	v
nam	miner.php	/^			foreach ($fields1b as $nam => $val)$/;"	v
nam	miner.php	/^			foreach ($fields2b as $nam => $val)$/;"	v
name	api-example.php	/^				$name = $id[0].$id[1];$/;"	v
name	api-example.php	/^				$name = $id[0];$/;"	v
name	api-example.php	/^				$name = 'null';$/;"	v
name	api.c	/^	char *name;$/;"	m	struct:CMDS	file:	access:public
name	cgminer.c	/^	char *name;$/;"	m	struct:benchfile_layout	file:	access:public
name	cgminer.c	/^	char name[4];$/;"	m	struct:_cgpu_devid_counter	file:	access:public
name	compat/libusb-1.0/libusb/libusbi.h	/^	const char *name;$/;"	m	struct:usbi_os_backend	access:public
name	driver-hashfast.c	/^	char name[32];$/;"	m	struct:op_nameframe	file:	access:public
name	driver-minion.c	/^	char *name;$/;"	m	struct:minion_select_pins	file:	access:public
name	klist.h	/^	const char *name;$/;"	m	struct:k_item	access:public
name	klist.h	/^	const char *name;$/;"	m	struct:k_list	access:public
name	miner.h	/^	char *name;$/;"	m	struct:api_data	access:public
name	miner.h	/^	char *name;$/;"	m	struct:cgpu_info	access:public
name	miner.h	/^	char *name;$/;"	m	struct:device_drv	access:public
name	miner.php	/^				$name = "$gname.$fld";$/;"	v
name	miner.php	/^				$name = $id[0].$id[1];$/;"	v
name	miner.php	/^				$name = $id[0];$/;"	v
name	miner.php	/^				$name = 'null';$/;"	v
name	miner.php	/^			$name = $parts[2];$/;"	v
name	miner.php	/^			$name = $rig;$/;"	v
name	miner.php	/^			if ($item == 'STATUS' && $name == $headname)$/;"	v
name	miner.php	/^		$name = '&nbsp;';$/;"	v
name	miner.php	/^		foreach ($dthead as $name => $x)$/;"	v
name	miner.php	/^		foreach ($poolcmd as $name => $pcmd)$/;"	v
name	miner.php	/^		foreach ($result as $name => $fields)$/;"	v
name	miner.php	/^	$name = $nams[count($nams)-1];$/;"	v
name	miner.php	/^	foreach ($options as $name => $des)$/;"	v
name	miner.php	/^	foreach ($poolcmd as $name => $pcmd)$/;"	v
name	miner.php	/^	foreach ($showfields as $name => $one)$/;"	v
name	miner.php	/^	foreach ($values as $name => $value)$/;"	v
name	miner.php	/^	if ($name == '0' or $name == '')$/;"	v
name	miner.php	/^ foreach ($oldvalues as $name => $value)$/;"	v
name	miner.php	/^ foreach ($options as $name => $des)$/;"	v
name	miner.php	/^ foreach ($page as $name => $fields)$/;"	v
name	miner.php	/^ foreach ($row as $name => $value)$/;"	v
name	miner.php	/^ foreach ($values as $name => $value)$/;"	v
name	usbutils.c	/^	char *name;$/;"	m	struct:cg_usb_stats	file:	access:public
name	usbutils.h	/^	const char *name;$/;"	m	struct:usb_find_devices	access:public
name	util.c	/^	const char *name;$/;"	m	struct:__anon53	file:	access:public
name1	miner.php	/^ $name1 = $sectionmap[$section1];$/;"	v
name1b	miner.php	/^	foreach ($result as $name1b => $fields1b)$/;"	v
name2	miner.php	/^ $name2 = $sectionmap[$section2];$/;"	v
name2b	miner.php	/^		foreach ($results[$name2][$rig] as $name2b => $fields2b)$/;"	v
namemap	miner.php	/^ $namemap = array();$/;"	v
names	ccan/opt/opt.h	/^	const char *names; \/* pipe-separated names, --longopt or -s *\/$/;"	m	struct:opt_table	access:public
names	miner.php	/^				$names = explode('=', $field, 2);$/;"	v
nams	miner.php	/^ $nams = explode('.', $name);$/;"	v
nano	compat/libusb-1.0/libusb/libusb.h	/^	const uint16_t nano;$/;"	m	struct:libusb_version	access:public
nanosleep	compat.h	/^static inline int nanosleep(const struct timespec *req, struct timespec *rem)$/;"	f	signature:(const struct timespec *req, struct timespec *rem)
nanosleep_abstime	util.c	/^static void nanosleep_abstime(struct timespec *ts_end)$/;"	f	file:	signature:(struct timespec *ts_end)
nb_driver_names	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const uint8_t nb_driver_names;$/;"	m	struct:windows_usb_api_backend	access:public
nb_endpoints	compat/libusb-1.0/libusb/os/windows_usb.h	/^		int8_t nb_endpoints;			\/\/ and a set of endpoint addresses (USB_MAXENDPOINTS)$/;"	m	struct:windows_device_priv::__anon30	access:public
nbit	miner.h	/^	char nbit[12];$/;"	m	struct:pool	access:public
nbits	driver-bitfury.h	/^	unsigned nbits;$/;"	m	struct:bitfury_payload	access:public
needs_free	compat/libusb-1.0/libusb/hotplug.h	/^        int needs_free;$/;"	m	struct:libusb_hotplug_callback	access:public
net_bytes_received	miner.h	/^	uint64_t net_bytes_received;$/;"	m	struct:cgminer_pool_stats	access:public
net_bytes_sent	miner.h	/^	uint64_t net_bytes_sent;$/;"	m	struct:cgminer_pool_stats	access:public
net_diff	driver-bitmain.h	/^	uint16_t net_diff;$/;"	m	struct:bitmain_txtask_token	access:public
netacc_lock	cgminer.c	/^pthread_rwlock_t netacc_lock;$/;"	v
netlink_message_parse	compat/libusb-1.0/libusb/os/linux_netlink.c	/^static const char *netlink_message_parse (const char *buffer, size_t len, const char *key)$/;"	f	file:	signature:(const char *buffer, size_t len, const char *key)
nettime	util.c	/^struct timeval nettime;$/;"	v	typeref:struct:timeval
new_block	driver-bitmain.h	/^	uint8_t new_block            :1;$/;"	m	struct:bitmain_txtask_token	access:public
new_blocks	cgminer.c	/^unsigned int new_blocks;$/;"	v
new_devices	cgminer.c	/^static int new_devices;$/;"	v	file:
new_klist_set	driver-klondike.c	/^static KLIST *new_klist_set(struct cgpu_info *klncgpu)$/;"	f	file:	signature:(struct cgpu_info *klncgpu)
new_nonce	cgminer.c	/^static bool new_nonce(struct thr_info *thr, uint32_t nonce)$/;"	f	file:	signature:(struct thr_info *thr, uint32_t nonce)
new_nonces	driver-bab.c	/^	uint64_t new_nonces;$/;"	m	struct:bab_info	file:	access:public
new_nonces	driver-minion.c	/^	uint64_t new_nonces;$/;"	m	struct:minion_info	file:	access:public
new_threads	cgminer.c	/^static int new_threads;$/;"	v	file:
new_work	miner.h	/^	bool new_work;$/;"	m	struct:cgpu_info	access:public
new_work	miner.h	/^	bool new_work;$/;"	m	struct:modminer_fpga_state	access:public
new_work_task	driver-minion.c	/^static void new_work_task(struct cgpu_info *minioncgpu, K_ITEM *witem, int chip, bool urgent, uint8_t state)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, K_ITEM *witem, int chip, bool urgent, uint8_t state)
newfields	miner.php	/^	$newfields = array();$/;"	v
newlock	api.c	/^static LOCKLIST *newlock(void *lock, enum cglock_typ typ, const char *file, const char *func, const int linenum)$/;"	f	file:	signature:(void *lock, enum cglock_typ typ, const char *file, const char *func, const int linenum)
newres	miner.php	/^ $newres = array();$/;"	v
newrow	miner.php	/^					$newrow = array();$/;"	v
newrow	miner.php	/^function newrow()$/;"	f
newstats	usbutils.c	/^static void newstats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
newtable	miner.php	/^function newtable()$/;"	f
newvalue	miner.php	/^		$newvalue = $total[$name];$/;"	v
newvalue	miner.php	/^		$newvalue = '';$/;"	v
next	api.c	/^	struct io_list *next;$/;"	m	struct:io_list	typeref:struct:io_list::io_list	file:	access:public
next	api.c	/^	struct lockline *next;$/;"	m	struct:lockline	typeref:struct:lockline::lockline	file:	access:public
next	api.c	/^	struct locklist *next;$/;"	m	struct:locklist	typeref:struct:locklist::locklist	file:	access:public
next	cgminer.c	/^	struct JE *next;$/;"	m	struct:JE	typeref:struct:JE::JE	file:	access:public
next	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list *next;$/;"	m	struct:hashtable_list	typeref:struct:hashtable_list::hashtable_list	access:public
next	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
next	driver-klondike.c	/^	struct klist *next;$/;"	m	struct:klist	typeref:struct:klist::klist	file:	access:public
next	elist.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
next	klist.h	/^	struct k_item *next;$/;"	m	struct:k_item	typeref:struct:k_item::k_item	access:public
next	miner.h	/^	struct api_data *next;$/;"	m	struct:api_data	typeref:struct:api_data::api_data	access:public
next	miner.php	/^		$next = ($rig + 1) % count($rigs);$/;"	v
next	miner.php	/^		$next = null;$/;"	v
next	miner.php	/^	$next = null;$/;"	v
next	usbutils.c	/^	struct resource_reply *next;$/;"	m	struct:resource_reply	typeref:struct:resource_reply::resource_reply	file:	access:public
next	usbutils.c	/^	struct resource_work *next;$/;"	m	struct:resource_work	typeref:struct:resource_work::resource_work	file:	access:public
next	usbutils.c	/^	struct usb_in_use_list *next;$/;"	m	struct:usb_in_use_list	typeref:struct:usb_in_use_list::usb_in_use_list	file:	access:public
next	uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
next_error_interval	driver-knc.c	/^	struct timeval next_error_interval;$/;"	m	struct:knc_state	typeref:struct:knc_state::timeval	file:	access:public
next_lopt	ccan/opt/opt.c	/^const char *next_lopt(const char *p, unsigned *i, unsigned *len)$/;"	f	signature:(const char *p, unsigned *i, unsigned *len)
next_lopt	ccan/opt/private.h	/^const char *next_lopt(const char *p, unsigned *i, unsigned *len);$/;"	p	signature:(const char *p, unsigned *i, unsigned *len)
next_name	ccan/opt/opt.c	/^static const char *next_name(const char *names, unsigned *len)$/;"	f	file:	signature:(const char *names, unsigned *len)
next_opt	ccan/opt/opt.c	/^static const char *next_opt(const char *p, unsigned *i, unsigned *len)$/;"	f	file:	signature:(const char *p, unsigned *i, unsigned *len)
next_slot	knc-asic.h	/^	int next_slot;$/;"	m	struct:knc_report	access:public
next_sopt	ccan/opt/opt.c	/^const char *next_sopt(const char *p, unsigned *i)$/;"	f	signature:(const char *p, unsigned *i)
next_sopt	ccan/opt/private.h	/^const char *next_sopt(const char *names, unsigned *i);$/;"	p	signature:(const char *names, unsigned *i)
next_stat	usbutils.c	/^static int next_stat = USB_NOSTAT;$/;"	v	file:
next_state	knc-asic.h	/^	int next_state;$/;"	m	struct:knc_report	access:public
next_task_id	driver-minion.c	/^	uint32_t next_task_id;$/;"	m	struct:minion_info	file:	access:public
next_tid	driver-minion.c	/^	uint64_t next_tid;$/;"	m	struct:minion_info	file:	access:public
next_token	compat/jansson-2.6/src/pack_unpack.c	/^    token_t next_token;$/;"	m	struct:__anon15	file:	access:public
next_token	compat/jansson-2.6/src/pack_unpack.c	/^static void next_token(scanner_t *s)$/;"	f	file:	signature:(scanner_t *s)
next_work	driver-minion.c	/^static K_ITEM *next_work(struct minion_info *minioninfo)$/;"	f	file:	signature:(struct minion_info *minioninfo)
next_work_cmd	miner.h	/^	char next_work_cmd[46];$/;"	m	struct:modminer_fpga_state	access:public
nextworkid	driver-klondike.c	/^	uint32_t nextworkid;$/;"	m	struct:device_info	file:	access:public
nfree_list	driver-bab.c	/^	K_LIST *nfree_list;$/;"	m	struct:bab_info	file:	access:public
nfree_list	noncedup.c	/^	K_LIST *nfree_list;$/;"	m	struct:dupdata	file:	access:public
nfu_alloc_arrays	driver-bitfury.c	/^static void nfu_alloc_arrays(struct bitfury_info *info)$/;"	f	file:	signature:(struct bitfury_info *info)
nfu_api_stats	driver-bitfury.c	/^static struct api_data *nfu_api_stats(struct bitfury_info *info)$/;"	f	file:	signature:(struct bitfury_info *info)
nfu_close	driver-bitfury.c	/^static void nfu_close(struct cgpu_info *bitfury)$/;"	f	file:	signature:(struct cgpu_info *bitfury)
nfu_detect_one	driver-bitfury.c	/^static bool nfu_detect_one(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
nfu_epinfos	usbutils.c	/^static struct usb_epinfo nfu_epinfos[] = {$/;"	v	typeref:struct:usb_epinfo	file:
nfu_ints	usbutils.c	/^static struct usb_intinfo nfu_ints[] = {$/;"	v	typeref:struct:usb_intinfo	file:
nfu_reinit	driver-bitfury.c	/^static bool nfu_reinit(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
nfu_scan	driver-bitfury.c	/^static int64_t nfu_scan(struct thr_info *thr, struct cgpu_info *bitfury,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *bitfury, struct bitfury_info *info)
nfu_set_spi_settings	driver-bitfury.c	/^static bool nfu_set_spi_settings(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
nibble	hexdump.c	/^static char nibble[] = {$/;"	v	file:
nitem	driver-bab.c	/^typedef struct nitem {$/;"	s	file:
nitem	noncedup.c	/^typedef struct nitem {$/;"	s	file:
nitem::found	driver-bab.c	/^	struct timeval found;$/;"	m	struct:nitem	typeref:struct:nitem::timeval	file:	access:public
nitem::nonce	noncedup.c	/^	uint32_t nonce;$/;"	m	struct:nitem	file:	access:public
nitem::when	noncedup.c	/^	struct timeval when;$/;"	m	struct:nitem	typeref:struct:nitem::timeval	file:	access:public
nitem::work_id	noncedup.c	/^	uint32_t work_id;$/;"	m	struct:nitem	file:	access:public
nnonce	driver-bitfury.h	/^	unsigned nnonce;$/;"	m	struct:bitfury_payload	access:public
no_asic_initialization	hf_protocol.h	/^	uint8_t  no_asic_initialization:1;      \/\/ Do not perform automatic ASIC initialization$/;"	m	struct:hf_usb_init_header	access:public
no_asic_initialization	hf_protocol_be.h	/^	uint8_t  no_asic_initialization:1;      \/\/ Do not perform automatic ASIC initialization$/;"	m	struct:hf_usb_init_header	access:public
no_matching_work	driver-avalon.h	/^	int no_matching_work;$/;"	m	struct:avalon_info	access:public
no_matching_work	driver-bitfury.h	/^	int no_matching_work;$/;"	m	struct:bitfury_info	access:public
no_matching_work	driver-bitmain.h	/^	int no_matching_work;$/;"	m	struct:bitmain_info	access:public
no_matching_work	driver-cointerra.h	/^	int no_matching_work;$/;"	m	struct:cointerra_info	access:public
no_matching_work	driver-hashfast.h	/^	int no_matching_work;$/;"	m	struct:hashfast_info	access:public
no_nonce	driver-minion.c	/^	bool no_nonce;$/;"	m	struct:res_item	file:	access:public
no_work	cgminer.c	/^static bool no_work;$/;"	v	file:
no_yield	util.c	/^int no_yield(void)$/;"	f	signature:(void)
no_yield	util.h	/^int no_yield(void);$/;"	p	signature:(void)
noblock_socket	util.c	/^static void noblock_socket(SOCKETTYPE fd)$/;"	f	file:	signature:(SOCKETTYPE fd)
nodatareturned	usbutils.c	/^static const char *nodatareturned = "no data returned ";$/;"	v	file:
node	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USB_NODE_CONNECTION_NAME_FIXED node;$/;"	m	union:USB_HUB_NAME_FIXED::__anon34	access:public
node	miner.h	/^	struct list_head node;$/;"	m	struct:curl_ent	typeref:struct:curl_ent::list_head	access:public
nodev	usbutils.h	/^	bool nodev;$/;"	m	struct:cg_usb_info	access:public
nodev_count	usbutils.h	/^	int nodev_count;$/;"	m	struct:cg_usb_info	access:public
noexpand	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
noise	driver-klondike.c	/^	uint8_t noise;$/;"	m	struct:klondike_status	file:	access:public
noisecount	driver-klondike.c	/^	uint64_t noisecount;$/;"	m	struct:klondike_info	file:	access:public
nonce	driver-avalon.h	/^	uint32_t nonce;$/;"	m	struct:avalon_result	access:public
nonce	driver-bab.c	/^	uint32_t nonce[BAB_REPLY_NONCES];$/;"	m	struct:bab_work_reply	file:	access:public
nonce	driver-bab.c	/^	uint32_t nonce[BAB_REPLY_NONCES];$/;"	m	struct:ritem	file:	access:public
nonce	driver-bitmain.h	/^	uint32_t nonce;$/;"	m	struct:bitmain_rxnonce_nonce	access:public
nonce	driver-blockerupter.h	/^	uint8_t nonce[4];$/;"	m	struct:blockerupter_response	access:public
nonce	driver-drillbit.c	/^	uint32_t nonce[MAX_RESULTS];$/;"	m	struct:__anon2	file:	access:public
nonce	driver-klondike.c	/^	uint8_t nonce[4];$/;"	m	struct:_workresult	file:	access:public
nonce	driver-knc.c	/^		uint32_t nonce;$/;"	m	struct:knc_core_state::__anon55	file:	access:public
nonce	driver-minion.c	/^	uint32_t nonce;$/;"	m	struct:res_item	file:	access:public
nonce	driver-minion.c	/^	uint8_t nonce[DATA_SIZ];$/;"	m	struct:minion_result	file:	access:public
nonce	hf_protocol.h	/^	uint32_t nonce;                         \/\/ Candidate nonce$/;"	m	struct:hf_candidate_nonce	access:public
nonce	hf_protocol_be.h	/^	uint32_t nonce;                         \/\/ Candidate nonce$/;"	m	struct:hf_candidate_nonce	access:public
nonce	knc-asic.h	/^		uint32_t nonce;$/;"	m	struct:knc_report::__anon59	access:public
nonce	knc-asic.h	/^	} nonce[KNC_NONCES_PER_REPORT];$/;"	m	struct:knc_report	typeref:struct:knc_report::__anon59	access:public
nonce	miner.h	/^	uint32_t	nonce; \/* For devices that hash sole work *\/$/;"	m	struct:work	access:public
nonce	noncedup.c	/^	uint32_t nonce;$/;"	m	struct:nitem	file:	access:public
nonce1	miner.h	/^	char		*nonce1;$/;"	m	struct:work	access:public
nonce1	miner.h	/^	char *nonce1;$/;"	m	struct:pool	access:public
nonce1bin	miner.h	/^	unsigned char *nonce1bin;$/;"	m	struct:pool	access:public
nonce2	driver-minion.c	/^	uint32_t nonce2;$/;"	m	struct:res_item	file:	access:public
nonce2	miner.h	/^	uint64_t	nonce2;$/;"	m	struct:work	access:public
nonce2	miner.h	/^	uint64_t nonce2;$/;"	m	struct:pool	access:public
nonce2_len	miner.h	/^	size_t		nonce2_len;$/;"	m	struct:work	access:public
nonce2_offset	miner.h	/^	int nonce2_offset;$/;"	m	struct:pool	access:public
nonce_bin	driver-antrouter.c	/^	unsigned char nonce_bin[ANTROUTER_NONCE_ARRAY_SIZE][ANTROUTER_READ_SIZE+1];$/;"	m	struct:ANTROUTER_INFO	file:	access:public
nonce_bin	driver-bmsc.c	/^	unsigned char nonce_bin[BMSC_NONCE_ARRAY_SIZE][BMSC_READ_SIZE+1];$/;"	m	struct:BMSC_INFO	file:	access:public
nonce_count	driver-klondike.c	/^	double nonce_count;$/;"	m	struct:klondike_info	file:	access:public
nonce_data	driver-icarus.c	/^typedef struct nonce_data {$/;"	s	file:
nonce_data::chip_no	driver-icarus.c	/^	int chip_no;$/;"	m	struct:nonce_data	file:	access:public
nonce_data::cmd_value	driver-icarus.c	/^	int cmd_value;$/;"	m	struct:nonce_data	file:	access:public
nonce_data::task_no	driver-icarus.c	/^	unsigned int task_no ;$/;"	m	struct:nonce_data	file:	access:public
nonce_data::work_state	driver-icarus.c	/^	unsigned char work_state;$/;"	m	struct:nonce_data	file:	access:public
nonce_elf	driver-avalon.h	/^	uint8_t nonce_elf		:1;$/;"	m	struct:avalon_task	access:public
nonce_error	driver-bitmain.h	/^	uint32_t nonce_error;$/;"	m	struct:bitmain_info	access:public
nonce_error	driver-bitmain.h	/^	uint32_t nonce_error;$/;"	m	struct:bitmain_rxstatus_data	access:public
nonce_index	driver-antrouter.c	/^	int nonce_index;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
nonce_index	driver-bmsc.c	/^	int nonce_index;$/;"	m	struct:BMSC_INFO	file:	access:public
nonce_list	noncedup.c	/^	K_STORE *nonce_list;$/;"	m	struct:dupdata	file:	access:public
nonce_lock	driver-bab.c	/^	pthread_mutex_t nonce_lock;$/;"	m	struct:bab_info	file:	access:public
nonce_lock	driver-minion.c	/^	pthread_mutex_t nonce_lock;$/;"	m	struct:minion_info	file:	access:public
nonce_loops	hf_protocol.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_serial	access:public
nonce_loops	hf_protocol.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_usb	access:public
nonce_loops	hf_protocol_be.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_serial	access:public
nonce_loops	hf_protocol_be.h	/^	uint32_t nonce_loops;                   \/\/ How many nonces to search, or 0 for 2^32$/;"	m	struct:hf_hash_usb	access:public
nonce_mask	driver-antrouter.c	/^	uint32_t nonce_mask;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
nonce_mask	driver-bmsc.c	/^	uint32_t nonce_mask;$/;"	m	struct:BMSC_INFO	file:	access:public
nonce_mask	driver-icarus.c	/^	uint32_t nonce_mask;$/;"	m	struct:ICARUS_INFO	file:	access:public
nonce_max	driver-klondike.c	/^	double nonce_max;$/;"	m	struct:klondike_info	file:	access:public
nonce_min	driver-klondike.c	/^	double nonce_min;$/;"	m	struct:klondike_info	file:	access:public
nonce_msoffset	hf_protocol.h	/^	uint16_t nonce_msoffset;                    \/\/ This value << 16 added to starting nonce$/;"	m	struct:hf_group_data	access:public
nonce_msoffset	hf_protocol_be.h	/^	uint16_t nonce_msoffset;                    \/\/ This value << 16 added to starting nonce$/;"	m	struct:hf_group_data	access:public
nonce_offset_count	driver-bab.c	/^	uint64_t nonce_offset_count[BAB_NONCE_OFFSETS];$/;"	m	struct:bab_info	file:	access:public
nonce_range	miner.h	/^	bool nonce_range;$/;"	m	struct:cgpu_info	access:public
nonce_ranges_done	A1-common.h	/^	int nonce_ranges_done;$/;"	m	struct:A1_chip	access:public
nonce_ready	driver-minion.c	/^	cgsem_t nonce_ready;$/;"	m	struct:minion_info	file:	access:public
nonce_size	driver-icarus.c	/^	int nonce_size;$/;"	m	struct:ICARUS_INFO	file:	access:public
nonce_state	driver-minion.c	/^enum nonce_state {$/;"	g	file:
nonce_total	driver-klondike.c	/^	double nonce_total;$/;"	m	struct:klondike_info	file:	access:public
noncecount	driver-klondike.c	/^	int noncecount;$/;"	m	struct:klondike_info	file:	access:public
noncecount	driver-klondike.c	/^	uint32_t noncecount;$/;"	m	struct:device_info	file:	access:public
nonces	driver-avalon.h	/^	int nonces;$/;"	m	struct:avalon_info	access:public
nonces	driver-bab.c	/^	int nonces;$/;"	m	struct:ritem	file:	access:public
nonces	driver-bab.c	/^	int nonces;$/;"	m	struct:witem	file:	access:public
nonces	driver-bitfury.h	/^	int nonces;$/;"	m	struct:bitfury_info	access:public
nonces	driver-bitmain.h	/^	int nonces;$/;"	m	struct:bitmain_info	access:public
nonces	driver-bitmain.h	/^	struct bitmain_rxnonce_nonce nonces[BITMAIN_MAX_NONCE_NUM];$/;"	m	struct:bitmain_rxnonce_data	typeref:struct:bitmain_rxnonce_data::bitmain_rxnonce_nonce	access:public
nonces	driver-blockerupter.h	/^	int nonces;$/;"	m	struct:asic_info	access:public
nonces	driver-blockerupter.h	/^	int nonces;$/;"	m	struct:blockerupter_info	access:public
nonces	driver-blockerupter.h	/^	int nonces;$/;"	m	struct:board_info	access:public
nonces	driver-icarus.c	/^	int nonces;$/;"	m	struct:ICARUS_INFO	file:	access:public
nonces	driver-minion.c	/^	int nonces;$/;"	m	struct:work_item	file:	access:public
nonces	driver-minion.c	/^	uint64_t nonces;$/;"	m	struct:perf_item	file:	access:public
nonces	miner.h	/^	uint32_t nonces;$/;"	m	struct:cgpu_info	access:public
nonces_checked	driver-icarus.c	/^	uint64_t nonces_checked;$/;"	m	struct:ICARUS_INFO	file:	access:public
nonces_correction	driver-icarus.c	/^	uint64_t nonces_correction[NONCE_CORRECTION_TIMES];$/;"	m	struct:ICARUS_INFO	file:	access:public
nonces_correction_tests	driver-icarus.c	/^	uint64_t nonces_correction_tests;$/;"	m	struct:ICARUS_INFO	file:	access:public
nonces_correction_times	driver-icarus.c	/^	uint64_t nonces_correction_times;$/;"	m	struct:ICARUS_INFO	file:	access:public
nonces_fail	driver-icarus.c	/^	uint64_t nonces_fail;$/;"	m	struct:ICARUS_INFO	file:	access:public
nonces_failed	driver-minion.c	/^	uint64_t nonces_failed[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
nonces_found	A1-common.h	/^	int nonces_found;$/;"	m	struct:A1_chip	access:public
nonces_found	driver-bflsc.h	/^	uint64_t nonces_found;$/;"	m	struct:bflsc_dev	access:public
nonces_hw	driver-bflsc.h	/^	int nonces_hw; \/\/ TODO: this - need to add a paramter to submit_nonce()$/;"	m	struct:bflsc_dev	access:public
nonces_recovered	driver-minion.c	/^	uint64_t nonces_recovered[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
nonideal_items	uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table	access:public
noop_can_limit_work	cgminer.c	/^static uint64_t noop_can_limit_work(struct thr_info __maybe_unused *thr)$/;"	f	file:	signature:(struct thr_info __maybe_unused *thr)
noop_detect	cgminer.c	/^static void noop_detect(bool __maybe_unused hotplug)$/;"	f	file:	signature:(bool __maybe_unused hotplug)
noop_flush_work	cgminer.c	9451;"	d	file:
noop_get_api_stats	cgminer.c	/^static struct api_data *noop_get_api_stats(struct cgpu_info __maybe_unused *cgpu)$/;"	f	file:	signature:(struct cgpu_info __maybe_unused *cgpu)
noop_get_statline	cgminer.c	/^static void noop_get_statline(char __maybe_unused *buf, size_t __maybe_unused bufsiz, struct cgpu_info __maybe_unused *cgpu)$/;"	f	file:	signature:(char __maybe_unused *buf, size_t __maybe_unused bufsiz, struct cgpu_info __maybe_unused *cgpu)
noop_get_statline	cgminer.c	/^static void noop_get_statline(char __maybe_unused *buf, size_t __maybe_unused bufsiz, struct cgpu_info __maybe_unused *cgpu);$/;"	p	file:	signature:(char __maybe_unused *buf, size_t __maybe_unused bufsiz, struct cgpu_info __maybe_unused *cgpu)
noop_get_stats	cgminer.c	/^static bool noop_get_stats(struct cgpu_info __maybe_unused *cgpu)$/;"	f	file:	signature:(struct cgpu_info __maybe_unused *cgpu)
noop_hash_work	cgminer.c	/^static void noop_hash_work(struct thr_info __maybe_unused *thr)$/;"	f	file:	signature:(struct thr_info __maybe_unused *thr)
noop_hw_error	cgminer.c	/^static void noop_hw_error(struct thr_info __maybe_unused *thr)$/;"	f	file:	signature:(struct thr_info __maybe_unused *thr)
noop_identify_device	cgminer.c	9455;"	d	file:
noop_prepare_work	cgminer.c	/^static bool noop_prepare_work(struct thr_info __maybe_unused *thr, struct work __maybe_unused *work)$/;"	f	file:	signature:(struct thr_info __maybe_unused *thr, struct work __maybe_unused *work)
noop_queue_full	cgminer.c	9453;"	d	file:
noop_reinit_device	cgminer.c	/^static void noop_reinit_device(struct cgpu_info __maybe_unused *cgpu)$/;"	f	file:	signature:(struct cgpu_info __maybe_unused *cgpu)
noop_thread_enable	cgminer.c	/^static void noop_thread_enable(struct thr_info __maybe_unused *thr)$/;"	f	file:	signature:(struct thr_info __maybe_unused *thr)
noop_thread_init	cgminer.c	/^static bool noop_thread_init(struct thr_info __maybe_unused *thr)$/;"	f	file:	signature:(struct thr_info __maybe_unused *thr)
noop_thread_prepare	cgminer.c	/^static bool noop_thread_prepare(struct thr_info __maybe_unused *thr)$/;"	f	file:	signature:(struct thr_info __maybe_unused *thr)
noop_thread_shutdown	cgminer.c	/^static void noop_thread_shutdown(struct thr_info __maybe_unused *thr)$/;"	f	file:	signature:(struct thr_info __maybe_unused *thr)
noop_update_work	cgminer.c	9452;"	d	file:
noop_zero_stats	cgminer.c	9454;"	d	file:
not_first_reply	driver-bab.c	/^	bool not_first_reply;$/;"	m	struct:ritem	file:	access:public
not_first_reply	driver-bab.c	/^	bool not_first_reply[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
not_first_work	driver-bflsc.h	/^	bool not_first_work; \/\/ allow ignoring the first nonce error$/;"	m	struct:bflsc_info	access:public
not_waiting	compat/libusb-1.0/libusb/os/threads_windows.h	/^	struct list_head not_waiting;$/;"	m	struct:usbi_cond_t_	typeref:struct:usbi_cond_t_::list_head	access:public
notify	api.c	/^static void notify(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, char group)
notify	miner.php	/^$notify = true;$/;"	v
notifystatus	api.c	/^void notifystatus(struct io_data *io_data, int device, struct cgpu_info *cgpu, bool isjson, __maybe_unused char group)$/;"	f	signature:(struct io_data *io_data, int device, struct cgpu_info *cgpu, bool isjson, __maybe_unused char group)
now	driver-knc.c	/^static struct timeval now;$/;"	v	typeref:struct:timeval	file:
ntime	driver-bab.c	/^	uint32_t ntime;$/;"	m	struct:bab_work_send	file:	access:public
ntime	driver-bitfury.h	/^	unsigned ntime;$/;"	m	struct:bitfury_payload	access:public
ntime	driver-blockerupter.h	/^	uint8_t ntime[4];$/;"	m	struct:blockerupter_response	access:public
ntime	driver-minion.c	/^	uint8_t ntime[DATA_SIZ];$/;"	m	struct:minion_que	file:	access:public
ntime	hf_protocol.h	/^	uint16_t ntime;                         \/\/ ntime offset, if ntime roll occurred, in LS 12 bits$/;"	m	struct:hf_candidate_nonce	access:public
ntime	hf_protocol_be.h	/^	uint16_t ntime;                         \/\/ ntime offset, if ntime roll occurred, in LS 12 bits$/;"	m	struct:hf_candidate_nonce	access:public
ntime	miner.h	/^	char		*ntime;$/;"	m	struct:work	access:public
ntime	miner.h	/^	char ntime[12];$/;"	m	struct:pool	access:public
ntime_clones	driver-spondoolies-sp10.h	/^	int              ntime_clones;$/;"	m	struct:__anon51	access:public
ntime_limit	driver-spondoolies-sp10-p.h	/^	uint8_t ntime_limit;$/;"	m	struct:__anon44	access:public
ntime_limit	driver-spondoolies-sp30-p.h	/^  uint8_t ntime_limit; \/\/ max ntime - should be 60$/;"	m	struct:__anon64	access:public
ntime_loops	hf_protocol.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_serial	access:public
ntime_loops	hf_protocol.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_usb	access:public
ntime_loops	hf_protocol_be.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_serial	access:public
ntime_loops	hf_protocol_be.h	/^	uint16_t ntime_loops;                   \/\/ How many times to roll timestamp, or 0$/;"	m	struct:hf_hash_usb	access:public
ntime_offset	driver-spondoolies-sp10-p.h	/^	uint8_t  ntime_offset;$/;"	m	struct:__anon45	access:public
ntime_offset	driver-spondoolies-sp10-p.h	/^	uint8_t ntime_offset;$/;"	m	struct:__anon44	access:public
ntime_offset	driver-spondoolies-sp30-p.h	/^  uint8_t  ntime_offset;$/;"	m	struct:__anon65	access:public
ntime_offset	hf_protocol.h	/^	uint16_t ntime_offset;                      \/\/ This value added to timestamp$/;"	m	struct:hf_group_data	access:public
ntime_offset	hf_protocol_be.h	/^	uint16_t ntime_offset;                      \/\/ This value added to timestamp$/;"	m	struct:hf_group_data	access:public
null_device_drv	cgminer.c	/^void null_device_drv(struct device_drv *drv)$/;"	f	signature:(struct device_drv *drv)
num	api-example.php	/^				$num = 1;$/;"	v
num	miner.php	/^				$num = 1;$/;"	v
num	miner.php	/^				foreach ($rigresults as $num => $result)$/;"	v
num	miner.php	/^		foreach ($fields as $num => $field)$/;"	v
num	miner.php	/^ foreach ($fields as $num => $fld)$/;"	v
num	miner.php	/^ foreach ($rigs as $num => $rig)$/;"	v
num2bit	driver-bitmain.c	/^static uint32_t num2bit(int num) {$/;"	f	file:	signature:(int num)
num_active_chips	A1-common.h	/^	int num_active_chips;$/;"	m	struct:A1_chain	access:public
num_altsetting	compat/libusb-1.0/libusb/libusb.h	/^	int num_altsetting;$/;"	m	struct:libusb_interface	access:public
num_buckets	compat/jansson-2.6/src/hashtable.c	/^static JSON_INLINE size_t num_buckets(hashtable_t *hashtable)$/;"	f	file:	signature:(hashtable_t *hashtable)
num_buckets	compat/jansson-2.6/src/hashtable.h	/^    size_t num_buckets;  \/* index to primes[] *\/$/;"	m	struct:hashtable	access:public
num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
num_chains	A1-common.h	/^	int num_chains;$/;"	m	struct:A1_board	access:public
num_chips	A1-common.h	/^	int num_chips;$/;"	m	struct:A1_chain	access:public
num_chips	driver-drillbit.c	/^	uint8_t num_chips;$/;"	m	struct:__anon6	file:	access:public
num_chips	driver-drillbit.h	/^  uint8_t num_chips;$/;"	m	struct:drillbit_info	access:public
num_configurations	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t num_configurations;$/;"	m	struct:libusb_device	access:public
num_cores	A1-common.h	/^	int num_cores;$/;"	m	struct:A1_chain	access:public
num_cores	A1-common.h	/^	int num_cores;$/;"	m	struct:A1_chip	access:public
num_elems	A1-common.h	/^	int num_elems;$/;"	m	struct:work_queue	access:public
num_endpoints	compat/libusb-1.0/libusb/os/darwin_usb.h	/^    uint8_t              num_endpoints;$/;"	m	struct:darwin_device_handle_priv::darwin_interface	access:public
num_iso_packets	compat/libusb-1.0/libusb/libusb.h	/^	int num_iso_packets;$/;"	m	struct:libusb_transfer	access:public
num_iso_packets	compat/libusb-1.0/libusb/libusbi.h	/^	int num_iso_packets;$/;"	m	struct:usbi_transfer	access:public
num_iso_packets	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  int num_iso_packets;$/;"	m	struct:darwin_transfer_priv	access:public
num_items	uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table	access:public
num_nonces	driver-drillbit.c	/^	uint8_t num_nonces;$/;"	m	struct:__anon2	file:	access:public
num_processors	cgminer.c	/^int num_processors;$/;"	v
num_retired	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	int num_retired;$/;"	m	struct:linux_transfer_priv	file:	access:public
num_sequence	driver-hashfast.h	/^	int num_sequence;                           \/\/ A power of 2. What the sequence number range is.$/;"	m	struct:hashfast_info	access:public
num_urbs	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	int num_urbs;$/;"	m	struct:linux_transfer_priv	file:	access:public
numascs	api.c	/^static int numascs(void)$/;"	f	file:	signature:(void)
number_of_packets	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int number_of_packets;$/;"	m	struct:usbfs_urb	access:public
numpgas	api.c	/^static int numpgas(void)$/;"	f	file:	signature:(void)
numports	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char numports;$/;"	m	struct:usbfs_hub_portinfo	access:public
object_key	compat/jansson-2.6/src/dump.c	/^struct object_key {$/;"	s	file:
object_key::key	compat/jansson-2.6/src/dump.c	/^    const char *key;$/;"	m	struct:object_key	file:	access:public
object_key::serial	compat/jansson-2.6/src/dump.c	/^    size_t serial;$/;"	m	struct:object_key	file:	access:public
object_key_compare_keys	compat/jansson-2.6/src/dump.c	/^static int object_key_compare_keys(const void *key1, const void *key2)$/;"	f	file:	signature:(const void *key1, const void *key2)
object_key_compare_serials	compat/jansson-2.6/src/dump.c	/^static int object_key_compare_serials(const void *key1, const void *key2)$/;"	f	file:	signature:(const void *key1, const void *key2)
objs	api-example.php	/^	$objs = explode('|', $line);$/;"	v
objs	miner.php	/^	$objs = explode('|', $line);$/;"	v
obsd_cancel_transfer	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_cancel_transfer(struct usbi_transfer *itransfer)$/;"	f	signature:(struct usbi_transfer *itransfer)
obsd_cancel_transfer	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_cancel_transfer(struct usbi_transfer *);$/;"	p	file:	signature:(struct usbi_transfer *)
obsd_claim_interface	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_claim_interface(struct libusb_device_handle *handle, int iface)$/;"	f	signature:(struct libusb_device_handle *handle, int iface)
obsd_claim_interface	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_claim_interface(struct libusb_device_handle *, int);$/;"	p	file:	signature:(struct libusb_device_handle *, int)
obsd_clear_halt	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_clear_halt(struct libusb_device_handle *handle, unsigned char endpoint)$/;"	f	signature:(struct libusb_device_handle *handle, unsigned char endpoint)
obsd_clear_halt	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_clear_halt(struct libusb_device_handle *, unsigned char);$/;"	p	file:	signature:(struct libusb_device_handle *, unsigned char)
obsd_clear_transfer_priv	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_clear_transfer_priv(struct usbi_transfer *itransfer)$/;"	f	signature:(struct usbi_transfer *itransfer)
obsd_clear_transfer_priv	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static void obsd_clear_transfer_priv(struct usbi_transfer *);$/;"	p	file:	signature:(struct usbi_transfer *)
obsd_clock_gettime	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_clock_gettime(int clkid, struct timespec *tp)$/;"	f	signature:(int clkid, struct timespec *tp)
obsd_clock_gettime	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_clock_gettime(int, struct timespec *);$/;"	p	file:	signature:(int, struct timespec *)
obsd_close	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_close(struct libusb_device_handle *handle)$/;"	f	signature:(struct libusb_device_handle *handle)
obsd_close	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static void obsd_close(struct libusb_device_handle *);$/;"	p	file:	signature:(struct libusb_device_handle *)
obsd_destroy_device	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_destroy_device(struct libusb_device *dev)$/;"	f	signature:(struct libusb_device *dev)
obsd_destroy_device	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static void obsd_destroy_device(struct libusb_device *);$/;"	p	file:	signature:(struct libusb_device *)
obsd_get_active_config_descriptor	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_get_active_config_descriptor(struct libusb_device *dev,$/;"	f	signature:(struct libusb_device *dev, unsigned char *buf, size_t len, int *host_endian)
obsd_get_active_config_descriptor	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_get_active_config_descriptor(struct libusb_device *,$/;"	p	file:	signature:(struct libusb_device *, unsigned char *, size_t, int *)
obsd_get_config_descriptor	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_get_config_descriptor(struct libusb_device *dev, uint8_t idx,$/;"	f	signature:(struct libusb_device *dev, uint8_t idx, unsigned char *buf, size_t len, int *host_endian)
obsd_get_config_descriptor	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_get_config_descriptor(struct libusb_device *, uint8_t,$/;"	p	file:	signature:(struct libusb_device *, uint8_t, unsigned char *, size_t, int *)
obsd_get_configuration	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_get_configuration(struct libusb_device_handle *handle, int *config)$/;"	f	signature:(struct libusb_device_handle *handle, int *config)
obsd_get_configuration	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_get_configuration(struct libusb_device_handle *, int *);$/;"	p	file:	signature:(struct libusb_device_handle *, int *)
obsd_get_device_descriptor	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_get_device_descriptor(struct libusb_device *dev, unsigned char *buf,$/;"	f	signature:(struct libusb_device *dev, unsigned char *buf, int *host_endian)
obsd_get_device_descriptor	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_get_device_descriptor(struct libusb_device *, unsigned char *,$/;"	p	file:	signature:(struct libusb_device *, unsigned char *, int *)
obsd_get_device_list	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_get_device_list(struct libusb_context * ctx,$/;"	f	signature:(struct libusb_context * ctx, struct discovered_devs **discdevs)
obsd_get_device_list	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_get_device_list(struct libusb_context *,$/;"	p	file:	signature:(struct libusb_context *, struct discovered_devs **)
obsd_handle_events	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_handle_events(struct libusb_context *ctx, struct pollfd *fds, nfds_t nfds,$/;"	f	signature:(struct libusb_context *ctx, struct pollfd *fds, nfds_t nfds, int num_ready)
obsd_handle_events	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_handle_events(struct libusb_context *ctx, struct pollfd *,$/;"	p	file:	signature:(struct libusb_context *ctx, struct pollfd *, nfds_t, int)
obsd_open	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_open(struct libusb_device_handle *handle)$/;"	f	signature:(struct libusb_device_handle *handle)
obsd_open	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_open(struct libusb_device_handle *);$/;"	p	file:	signature:(struct libusb_device_handle *)
obsd_release_interface	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_release_interface(struct libusb_device_handle *handle, int iface)$/;"	f	signature:(struct libusb_device_handle *handle, int iface)
obsd_release_interface	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_release_interface(struct libusb_device_handle *, int);$/;"	p	file:	signature:(struct libusb_device_handle *, int)
obsd_reset_device	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_reset_device(struct libusb_device_handle *handle)$/;"	f	signature:(struct libusb_device_handle *handle)
obsd_reset_device	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_reset_device(struct libusb_device_handle *);$/;"	p	file:	signature:(struct libusb_device_handle *)
obsd_set_configuration	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_set_configuration(struct libusb_device_handle *handle, int config)$/;"	f	signature:(struct libusb_device_handle *handle, int config)
obsd_set_configuration	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_set_configuration(struct libusb_device_handle *, int);$/;"	p	file:	signature:(struct libusb_device_handle *, int)
obsd_set_interface_altsetting	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_set_interface_altsetting(struct libusb_device_handle *handle, int iface,$/;"	f	signature:(struct libusb_device_handle *handle, int iface, int altsetting)
obsd_set_interface_altsetting	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_set_interface_altsetting(struct libusb_device_handle *, int,$/;"	p	file:	signature:(struct libusb_device_handle *, int, int)
obsd_submit_transfer	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^obsd_submit_transfer(struct usbi_transfer *itransfer)$/;"	f	signature:(struct usbi_transfer *itransfer)
obsd_submit_transfer	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^static int obsd_submit_transfer(struct usbi_transfer *);$/;"	p	file:	signature:(struct usbi_transfer *)
obuf	driver-minion.c	/^	uint8_t obuf[MINION_BUFSIZ];$/;"	m	struct:task_item	file:	access:public
offset	driver-knc.c	/^			int offset;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
offset_ntime	cgminer.c	/^static char *offset_ntime(const char *ntime, int noffset)$/;"	f	file:	signature:(const char *ntime, int noffset)
ok_nonces	driver-bab.c	/^	uint64_t ok_nonces;$/;"	m	struct:bab_info	file:	access:public
ok_nonces	driver-minion.c	/^	uint64_t ok_nonces;$/;"	m	struct:minion_info	file:	access:public
oknonce	driver-minion.c	/^static enum nonce_state oknonce(struct thr_info *thr, struct cgpu_info *minioncgpu, int chip, int core,$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *minioncgpu, int chip, int core, uint32_t task_id, uint32_t nonce, bool no_nonce, struct timeval *when, bool another, uint32_t task_id2, uint32_t nonce2)
oknonces	driver-bab.c	/^static void oknonces(struct thr_info *thr, struct cgpu_info *babcgpu, K_ITEM *ritem)$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *babcgpu, K_ITEM *ritem)
old_cgpu	driver-hashfast.h	/^	struct cgpu_info *old_cgpu  ;               \/\/ Points to old structure if hotplugged same device$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::cgpu_info	access:public
old_conf	driver-bab.c	/^	uint8_t old_conf[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
old_fast	driver-bab.c	/^	uint8_t old_fast[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
old_handlers	lib/sigprocmask.c	/^static volatile handler_t old_handlers[NSIG];$/;"	v	file:
old_hashes	driver-cointerra.h	/^	uint64_t old_hashes[16 * 2];$/;"	m	struct:cointerra_info	access:public
oldbuf	driver-bitfury.h	/^	unsigned int *oldbuf; \/\/ 17 vals per chip$/;"	m	struct:bitfury_info	access:public
oldest_nonce	driver-minion.c	/^static bool oldest_nonce(struct cgpu_info *minioncgpu, int *chip, int *core, uint32_t *task_id,$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, int *chip, int *core, uint32_t *task_id, uint32_t *nonce, bool *no_nonce, struct timeval *when, bool *another, uint32_t *task_id2, uint32_t *nonce2)
oldvalues	miner.php	/^	$oldvalues = $values;$/;"	v
oldvalues	miner.php	/^ $oldvalues = null;$/;"	v
one_byte_temp	miner.h	/^	bool one_byte_temp;$/;"	m	struct:modminer_fpga_state	access:public
one_sec_spondoolies_watchdog	driver-spondoolies-sp10.h	/^extern void one_sec_spondoolies_watchdog(int uptime);$/;"	p	signature:(int uptime)
one_sec_spondoolies_watchdog	driver-spondoolies-sp30.h	/^extern void one_sec_spondoolies_watchdog(int uptime);$/;"	p	signature:(int uptime)
one_usec	hf_protocol.h	/^	uint32_t one_usec:12;                       \/\/ How many LF clocks per usec.$/;"	m	struct:hf_config_data	access:public
one_usec	hf_protocol_be.h	/^	uint32_t one_usec:12;                       \/\/ How many LF clocks per usec.$/;"	m	struct:hf_config_data	access:public
onlylogin	miner.php	/^function onlylogin()$/;"	f
op_attach_kernel_driver	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_attach_kernel_driver(struct libusb_device_handle *handle,$/;"	f	file:	signature:(struct libusb_device_handle *handle, int interface)
op_cancel_transfer	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_cancel_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
op_claim_interface	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_claim_interface(struct libusb_device_handle *handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *handle, int iface)
op_clear_halt	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_clear_halt(struct libusb_device_handle *handle,$/;"	f	file:	signature:(struct libusb_device_handle *handle, unsigned char endpoint)
op_clear_transfer_priv	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static void op_clear_transfer_priv(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
op_clock_gettime	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_clock_gettime(int clk_id, struct timespec *tp)$/;"	f	file:	signature:(int clk_id, struct timespec *tp)
op_close	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static void op_close(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
op_destroy_device	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static void op_destroy_device(struct libusb_device *dev)$/;"	f	file:	signature:(struct libusb_device *dev)
op_detach_kernel_driver	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_detach_kernel_driver(struct libusb_device_handle *handle,$/;"	f	file:	signature:(struct libusb_device_handle *handle, int interface)
op_exit	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static void op_exit(void)$/;"	f	file:	signature:(void)
op_get_active_config_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_get_active_config_descriptor(struct libusb_device *dev,$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer, size_t len, int *host_endian)
op_get_config_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_get_config_descriptor(struct libusb_device *dev,$/;"	f	file:	signature:(struct libusb_device *dev, uint8_t config_index, unsigned char *buffer, size_t len, int *host_endian)
op_get_configuration	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_get_configuration(struct libusb_device_handle *handle,$/;"	f	file:	signature:(struct libusb_device_handle *handle, int *config)
op_get_device_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_get_device_descriptor(struct libusb_device *dev,$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer, int *host_endian)
op_get_timerfd_clockid	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static clockid_t op_get_timerfd_clockid(void)$/;"	f	file:	signature:(void)
op_handle_events	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int op_handle_events(struct libusb_context *ctx, struct pollfd *fds, POLL_NFDS_TYPE nfds, int num_ready) {$/;"	f	file:	signature:(struct libusb_context *ctx, struct pollfd *fds, POLL_NFDS_TYPE nfds, int num_ready)
op_handle_events	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_handle_events(struct libusb_context *ctx,$/;"	f	file:	signature:(struct libusb_context *ctx, struct pollfd *fds, POLL_NFDS_TYPE nfds, int num_ready)
op_init	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_init(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
op_kernel_driver_active	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_kernel_driver_active(struct libusb_device_handle *handle,$/;"	f	file:	signature:(struct libusb_device_handle *handle, int interface)
op_name	driver-hashfast.h	/^	char op_name[36];$/;"	m	struct:hashfast_info	access:public
op_nameframe	driver-hashfast.c	/^struct op_nameframe {$/;"	s	file:
op_nameframe::h	driver-hashfast.c	/^	struct hf_header h;$/;"	m	struct:op_nameframe	typeref:struct:op_nameframe::hf_header	file:	access:public
op_nameframe::name	driver-hashfast.c	/^	char name[32];$/;"	m	struct:op_nameframe	file:	access:public
op_open	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_open(struct libusb_device_handle *handle)$/;"	f	file:	signature:(struct libusb_device_handle *handle)
op_release_interface	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_release_interface(struct libusb_device_handle *handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *handle, int iface)
op_reset_device	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_reset_device(struct libusb_device_handle *handle)$/;"	f	file:	signature:(struct libusb_device_handle *handle)
op_set_configuration	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_set_configuration(struct libusb_device_handle *handle, int config)$/;"	f	file:	signature:(struct libusb_device_handle *handle, int config)
op_set_interface	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_set_interface(struct libusb_device_handle *handle, int iface,$/;"	f	file:	signature:(struct libusb_device_handle *handle, int iface, int altsetting)
op_submit_transfer	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int op_submit_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
open	compat/libusb-1.0/libusb/libusbi.h	/^	int (*open)(struct libusb_device_handle *handle);$/;"	m	struct:usbi_os_backend	access:public
open	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*open)(struct libusb_device_handle *dev_handle);$/;"	m	struct:windows_usb_api_backend	access:public
open_bitstream	fpgautils.c	/^FILE *open_bitstream(const char *dname, const char *filename)$/;"	f	signature:(const char *dname, const char *filename)
open_bitstream	fpgautils.h	/^extern FILE *open_bitstream(const char *dname, const char *filename);$/;"	p	signature:(const char *dname, const char *filename)
open_count	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  int                   open_count;$/;"	m	struct:darwin_device_priv	access:public
open_devs	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head open_devs;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
open_devs_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t open_devs_lock;$/;"	m	struct:libusb_context	access:public
openbsd_backend	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^const struct usbi_os_backend openbsd_backend = {$/;"	v	typeref:struct:usbi_os_backend
operation_code	hf_protocol.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_header	access:public
operation_code	hf_protocol.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_pll_config	access:public
operation_code	hf_protocol.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_usb_init_header	access:public
operation_code	hf_protocol_be.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_header	access:public
operation_code	hf_protocol_be.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_pll_config	access:public
operation_code	hf_protocol_be.h	/^	uint8_t  operation_code;$/;"	m	struct:hf_usb_init_header	access:public
operation_status	hf_protocol.h	/^	uint8_t  operation_status;                  \/\/ Reply status for OP_USB_INIT (0 = success)$/;"	m	struct:hf_usb_init_base	access:public
operation_status	hf_protocol_be.h	/^	uint8_t  operation_status;                  \/\/ Reply status for OP_USB_INIT (0 = success)$/;"	m	struct:hf_usb_init_base	access:public
opname_valid	driver-hashfast.h	/^	bool opname_valid;$/;"	m	struct:hashfast_info	access:public
opt_add_serial	cgminer.c	/^static char *opt_add_serial;$/;"	v	file:
opt_antrouter_options	cgminer.c	/^char *opt_antrouter_options = NULL;$/;"	v
opt_antrouter_volt	cgminer.c	/^char *opt_antrouter_volt = NULL;$/;"	v
opt_anu_freq	cgminer.c	/^float opt_anu_freq = 250;$/;"	v
opt_api_allow	cgminer.c	/^char *opt_api_allow = NULL;$/;"	v
opt_api_description	cgminer.c	/^char *opt_api_description = PACKAGE_STRING;$/;"	v
opt_api_groups	cgminer.c	/^char *opt_api_groups;$/;"	v
opt_api_host	cgminer.c	/^char *opt_api_host = API_LISTEN_ADDR;$/;"	v
opt_api_listen	cgminer.c	/^bool opt_api_listen;$/;"	v
opt_api_mcast	cgminer.c	/^bool opt_api_mcast;$/;"	v
opt_api_mcast_addr	cgminer.c	/^char *opt_api_mcast_addr = API_MCAST_ADDR;$/;"	v
opt_api_mcast_code	cgminer.c	/^char *opt_api_mcast_code = API_MCAST_CODE;$/;"	v
opt_api_mcast_des	cgminer.c	/^char *opt_api_mcast_des = "";$/;"	v
opt_api_mcast_port	cgminer.c	/^int opt_api_mcast_port = 4028;$/;"	v
opt_api_network	cgminer.c	/^bool opt_api_network;$/;"	v
opt_api_port	cgminer.c	/^int opt_api_port = 4028;$/;"	v
opt_argv0	ccan/opt/opt.c	/^const char *opt_argv0;$/;"	v
opt_au3_freq	cgminer.c	/^float opt_au3_freq = 225;$/;"	v
opt_au3_volt	cgminer.c	/^int opt_au3_volt = 750;$/;"	v
opt_autoengine	cgminer.c	/^bool opt_autoengine;$/;"	v
opt_autofan	cgminer.c	/^bool opt_autofan;$/;"	v
opt_avalon2_fan_fixed	driver-avalon2.c	/^enum avalon2_fan_fixed opt_avalon2_fan_fixed = FAN_AUTO;$/;"	v	typeref:enum:avalon2_fan_fixed
opt_avalon2_fan_max	driver-avalon2.c	/^int opt_avalon2_fan_max = AVA2_DEFAULT_FAN_MAX;$/;"	v
opt_avalon2_fan_min	driver-avalon2.c	/^int opt_avalon2_fan_min = AVA2_DEFAULT_FAN_MIN;$/;"	v
opt_avalon2_freq_max	driver-avalon2.c	/^int opt_avalon2_freq_max;$/;"	v
opt_avalon2_freq_min	driver-avalon2.c	/^int opt_avalon2_freq_min;$/;"	v
opt_avalon2_overheat	driver-avalon2.c	/^int opt_avalon2_overheat = AVALON2_TEMP_OVERHEAT;$/;"	v
opt_avalon2_polling_delay	driver-avalon2.c	/^int opt_avalon2_polling_delay = AVALON2_DEFAULT_POLLING_DELAY;$/;"	v
opt_avalon2_voltage_max	driver-avalon2.c	/^int opt_avalon2_voltage_max;$/;"	v
opt_avalon2_voltage_min	driver-avalon2.c	/^int opt_avalon2_voltage_min;$/;"	v
opt_avalon_auto	driver-avalon.c	/^bool opt_avalon_auto;$/;"	v
opt_avalon_fan_max	driver-avalon.c	/^int opt_avalon_fan_max = AVALON_DEFAULT_FAN_MAX_PWM;$/;"	v
opt_avalon_fan_min	driver-avalon.c	/^int opt_avalon_fan_min = AVALON_DEFAULT_FAN_MIN_PWM;$/;"	v
opt_avalon_freq_max	driver-avalon.c	/^int opt_avalon_freq_max = AVALON_MAX_FREQUENCY;$/;"	v
opt_avalon_freq_min	driver-avalon.c	/^int opt_avalon_freq_min = AVALON_MIN_FREQUENCY;$/;"	v
opt_avalon_options	cgminer.c	/^char *opt_avalon_options;$/;"	v
opt_avalon_overheat	driver-avalon.c	/^int opt_avalon_overheat = AVALON_TEMP_OVERHEAT;$/;"	v
opt_avalon_temp	driver-avalon.c	/^int opt_avalon_temp = AVALON_TEMP_TARGET;$/;"	v
opt_bab_options	cgminer.c	/^char *opt_bab_options = NULL;$/;"	v
opt_benchfile	cgminer.c	/^static char *opt_benchfile;$/;"	v	file:
opt_benchfile_display	cgminer.c	/^static bool opt_benchfile_display;$/;"	v	file:
opt_benchmark	cgminer.c	/^static bool opt_benchmark;$/;"	v	file:
opt_bet_clk	cgminer.c	/^int opt_bet_clk = 0;$/;"	v
opt_bfl_noncerange	cgminer.c	/^bool opt_bfl_noncerange;$/;"	v
opt_bflsc_overheat	driver-bflsc.c	/^int opt_bflsc_overheat = BFLSC_TEMP_OVERHEAT;$/;"	v
opt_bflsc_overheat	driver-bflsc.h	/^int opt_bflsc_overheat;$/;"	v
opt_bitburner_core_voltage	driver-avalon.c	/^int opt_bitburner_core_voltage = BITBURNER_DEFAULT_CORE_VOLTAGE;$/;"	v
opt_bitburner_fury_core_voltage	driver-avalon.c	/^int opt_bitburner_fury_core_voltage = BITBURNER_FURY_DEFAULT_CORE_VOLTAGE;$/;"	v
opt_bitburner_fury_options	cgminer.c	/^char *opt_bitburner_fury_options;$/;"	v
opt_bitmain_auto	driver-bitmain.c	/^bool opt_bitmain_auto;$/;"	v
opt_bitmain_checkall	driver-bitmain.c	/^bool opt_bitmain_checkall = false;$/;"	v
opt_bitmain_checkn2diff	driver-bitmain.c	/^bool opt_bitmain_checkn2diff = false;$/;"	v
opt_bitmain_dev	driver-bitmain.c	/^char opt_bitmain_dev[256] = {0};$/;"	v
opt_bitmain_dev_usb	driver-bitmain.c	/^bool opt_bitmain_dev_usb = true;$/;"	v
opt_bitmain_fan_max	driver-bitmain.c	/^int opt_bitmain_fan_max = BITMAIN_DEFAULT_FAN_MAX_PWM;$/;"	v
opt_bitmain_fan_min	driver-bitmain.c	/^int opt_bitmain_fan_min = BITMAIN_DEFAULT_FAN_MIN_PWM;$/;"	v
opt_bitmain_freq	cgminer.c	/^char *opt_bitmain_freq = NULL;$/;"	v
opt_bitmain_freq_max	driver-bitmain.c	/^int opt_bitmain_freq_max = BITMAIN_MAX_FREQUENCY;$/;"	v
opt_bitmain_freq_min	driver-bitmain.c	/^int opt_bitmain_freq_min = BITMAIN_MIN_FREQUENCY;$/;"	v
opt_bitmain_hwerror	driver-bitmain.c	/^bool opt_bitmain_hwerror = false;$/;"	v
opt_bitmain_nobeeper	driver-bitmain.c	/^bool opt_bitmain_nobeeper = false;$/;"	v
opt_bitmain_notempoverctrl	driver-bitmain.c	/^bool opt_bitmain_notempoverctrl = false;$/;"	v
opt_bitmain_options	cgminer.c	/^char *opt_bitmain_options = NULL;$/;"	v
opt_bitmain_overheat	driver-bitmain.c	/^int opt_bitmain_overheat = BITMAIN_TEMP_OVERHEAT;$/;"	v
opt_bitmain_temp	driver-bitmain.c	/^int opt_bitmain_temp = BITMAIN_TEMP_TARGET;$/;"	v
opt_bitmain_voltage	cgminer.c	/^char *opt_bitmain_voltage = NULL;$/;"	v
opt_bitmine_a1_options	cgminer.c	/^char *opt_bitmine_a1_options = NULL;$/;"	v
opt_bmsc_bandops	cgminer.c	/^char *opt_bmsc_bandops = NULL;$/;"	v
opt_bmsc_bootstart	cgminer.c	/^bool opt_bmsc_bootstart = false;$/;"	v
opt_bmsc_freq	cgminer.c	/^char *opt_bmsc_freq = NULL;$/;"	v
opt_bmsc_gray	cgminer.c	/^bool opt_bmsc_gray = false;$/;"	v
opt_bmsc_options	cgminer.c	/^char *opt_bmsc_options = NULL;$/;"	v
opt_bmsc_rdreg	cgminer.c	/^char *opt_bmsc_rdreg = NULL;$/;"	v
opt_bmsc_rdworktest	cgminer.c	/^bool opt_bmsc_rdworktest = false;$/;"	v
opt_bmsc_timing	cgminer.c	/^char *opt_bmsc_timing = NULL;$/;"	v
opt_bmsc_voltage	cgminer.c	/^char *opt_bmsc_voltage = NULL;$/;"	v
opt_btc_address	cgminer.c	/^static char *opt_btc_address;$/;"	v	file:
opt_btc_sig	cgminer.c	/^static char *opt_btc_sig;$/;"	v	file:
opt_bxf_bits	driver-bitfury.c	/^int opt_bxf_bits = 54;$/;"	v
opt_bxf_debug	driver-bitfury.c	/^int opt_bxf_debug;$/;"	v
opt_bxf_temp_target	driver-bitfury.c	/^int opt_bxf_temp_target = BXF_TEMP_TARGET \/ 10;$/;"	v
opt_bxm_bits	driver-bitfury.c	/^int opt_bxm_bits = 54;$/;"	v
opt_cmdline_table	cgminer.c	/^static struct opt_table opt_cmdline_table[] = {$/;"	v	typeref:struct:opt_table	file:
opt_compact	cgminer.c	/^bool opt_compact;$/;"	v
opt_config_table	cgminer.c	/^static struct opt_table opt_config_table[] = {$/;"	v	typeref:struct:opt_table	file:
opt_count	ccan/opt/opt.c	/^unsigned int opt_count, opt_num_short, opt_num_short_arg, opt_num_long;$/;"	v
opt_cta_load	driver-cointerra.h	/^int opt_cta_load;$/;"	v
opt_cutofftemp	cgminer.c	/^const int opt_cutofftemp = 95;$/;"	v
opt_debug	logging.c	/^bool opt_debug = false;$/;"	v
opt_delaynet	cgminer.c	/^bool opt_delaynet;$/;"	v
opt_disable_pool	cgminer.c	/^bool opt_disable_pool;$/;"	v
opt_display_devs	cgminer.c	/^static bool opt_display_devs;$/;"	v	file:
opt_drillbit_auto	cgminer.c	/^char *opt_drillbit_auto = NULL;$/;"	v
opt_drillbit_options	cgminer.c	/^char *opt_drillbit_options = NULL;$/;"	v
opt_expiry	cgminer.c	/^int opt_expiry = 120;$/;"	v
opt_fail_only	cgminer.c	/^bool opt_fail_only;$/;"	v
opt_fix_protocol	cgminer.c	/^static bool opt_fix_protocol;$/;"	v	file:
opt_free_table	ccan/opt/opt.c	/^void opt_free_table(void)$/;"	f	signature:(void)
opt_free_table	ccan/opt/opt.h	/^void opt_free_table(void);$/;"	p	signature:(void)
opt_hashratio_fan_max	driver-hashratio.c	/^static int opt_hashratio_fan_max = HRTO_DEFAULT_FAN_MAX;$/;"	v	file:
opt_hashratio_fan_min	driver-hashratio.c	/^static int opt_hashratio_fan_min = HRTO_DEFAULT_FAN_MIN;$/;"	v	file:
opt_hashratio_freq	driver-hashratio.h	/^char *opt_hashratio_freq;$/;"	v
opt_hfa_dfu_boot	driver-hashfast.c	/^bool opt_hfa_dfu_boot;$/;"	v
opt_hfa_dfu_boot	driver-hashfast.h	/^bool opt_hfa_dfu_boot;$/;"	v
opt_hfa_fail_drop	driver-hashfast.c	/^int opt_hfa_fail_drop = 10;$/;"	v
opt_hfa_fail_drop	driver-hashfast.h	/^int opt_hfa_fail_drop;$/;"	v
opt_hfa_fan_default	driver-hashfast.c	/^int opt_hfa_fan_default = HFA_FAN_DEFAULT;$/;"	v
opt_hfa_fan_default	driver-hashfast.h	/^int opt_hfa_fan_default;$/;"	v
opt_hfa_fan_max	driver-hashfast.c	/^int opt_hfa_fan_max = HFA_FAN_MAX;$/;"	v
opt_hfa_fan_max	driver-hashfast.h	/^int opt_hfa_fan_max;$/;"	v
opt_hfa_fan_min	driver-hashfast.c	/^int opt_hfa_fan_min = HFA_FAN_MIN;$/;"	v
opt_hfa_fan_min	driver-hashfast.h	/^int opt_hfa_fan_min;$/;"	v
opt_hfa_hash_clock	driver-hashfast.c	/^int opt_hfa_hash_clock = HFA_CLOCK_DEFAULT;$/;"	v
opt_hfa_hash_clock	driver-hashfast.h	/^int opt_hfa_hash_clock;$/;"	v
opt_hfa_name	driver-hashfast.c	/^char *opt_hfa_name;$/;"	v
opt_hfa_name	driver-hashfast.h	/^char *opt_hfa_name;$/;"	v
opt_hfa_noshed	driver-hashfast.c	/^bool opt_hfa_noshed;$/;"	v
opt_hfa_noshed	driver-hashfast.h	/^bool opt_hfa_noshed;$/;"	v
opt_hfa_ntime_roll	driver-hashfast.c	/^int opt_hfa_ntime_roll = 1;$/;"	v
opt_hfa_ntime_roll	driver-hashfast.h	/^int opt_hfa_ntime_roll;$/;"	v
opt_hfa_options	driver-hashfast.c	/^char *opt_hfa_options;$/;"	v
opt_hfa_options	driver-hashfast.h	/^char *opt_hfa_options;$/;"	v
opt_hfa_overheat	driver-hashfast.c	/^int opt_hfa_overheat = HFA_TEMP_OVERHEAT;$/;"	v
opt_hfa_overheat	driver-hashfast.h	/^int opt_hfa_overheat;$/;"	v
opt_hfa_pll_bypass	driver-hashfast.c	/^bool opt_hfa_pll_bypass;$/;"	v
opt_hfa_pll_bypass	driver-hashfast.h	/^bool opt_hfa_pll_bypass;$/;"	v
opt_hfa_target	driver-hashfast.c	/^int opt_hfa_target = HFA_TEMP_TARGET;$/;"	v
opt_hfa_target	driver-hashfast.h	/^int opt_hfa_target;$/;"	v
opt_hidden	ccan/opt/usage.c	/^const char opt_hidden[1];$/;"	v
opt_icarus_options	cgminer.c	/^char *opt_icarus_options = NULL;$/;"	v
opt_icarus_timing	cgminer.c	/^char *opt_icarus_timing = NULL;$/;"	v
opt_inc_intval	ccan/opt/helpers.c	/^char *opt_inc_intval(int *i)$/;"	f	signature:(int *i)
opt_inc_intval	ccan/opt/opt.h	/^char *opt_inc_intval(int *i);$/;"	p	signature:(int *i)
opt_invalid_argument	ccan/opt/opt.c	/^char *opt_invalid_argument(const char *arg)$/;"	f	signature:(const char *arg)
opt_invalid_argument	ccan/opt/opt.h	/^char *opt_invalid_argument(const char *arg);$/;"	p	signature:(const char *arg)
opt_kernel_path	cgminer.c	/^char *opt_kernel_path;$/;"	v
opt_klondike_options	cgminer.c	/^char *opt_klondike_options = NULL;$/;"	v
opt_knc_device_bus	driver-knc.c	/^int opt_knc_device_bus = -1;$/;"	v
opt_knc_device_idx	driver-knc.c	/^int opt_knc_device_idx = 0;$/;"	v
opt_log_interval	cgminer.c	/^int opt_log_interval = 5;$/;"	v
opt_log_level	logging.c	/^int opt_log_level = LOG_NOTICE;$/;"	v
opt_log_output	logging.c	/^bool opt_log_output = false;$/;"	v
opt_log_stderr	ccan/opt/opt.c	/^void opt_log_stderr(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
opt_log_stderr	ccan/opt/opt.h	/^void opt_log_stderr(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
opt_log_stderr_exit	ccan/opt/opt.c	/^void opt_log_stderr_exit(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
opt_log_stderr_exit	ccan/opt/opt.h	/^void opt_log_stderr_exit(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
opt_logfile_openflag	cgminer.c	/^char *opt_logfile_openflag = NULL;$/;"	v
opt_logfile_path	cgminer.c	/^char *opt_logfile_path = NULL;$/;"	v
opt_loginput	cgminer.c	/^bool opt_loginput;$/;"	v
opt_logwork_asicnum	cgminer.c	/^char *opt_logwork_asicnum = NULL;$/;"	v
opt_logwork_diff	cgminer.c	/^bool opt_logwork_diff = false;$/;"	v
opt_logwork_path	cgminer.c	/^char *opt_logwork_path = NULL;$/;"	v
opt_lowmem	cgminer.c	/^bool opt_lowmem;$/;"	v
opt_minion_chipreport	cgminer.c	/^int opt_minion_chipreport;$/;"	v
opt_minion_cores	cgminer.c	/^char *opt_minion_cores;$/;"	v
opt_minion_extra	cgminer.c	/^bool opt_minion_extra;$/;"	v
opt_minion_freq	cgminer.c	/^char *opt_minion_freq;$/;"	v
opt_minion_freqchange	cgminer.c	/^int opt_minion_freqchange = 1000;$/;"	v
opt_minion_freqpercent	cgminer.c	/^int opt_minion_freqpercent = 70;$/;"	v
opt_minion_idlecount	cgminer.c	/^bool opt_minion_idlecount;$/;"	v
opt_minion_ledcount	cgminer.c	/^int opt_minion_ledcount;$/;"	v
opt_minion_ledlimit	cgminer.c	/^int opt_minion_ledlimit = 98;$/;"	v
opt_minion_noautofreq	cgminer.c	/^bool opt_minion_noautofreq;$/;"	v
opt_minion_overheat	cgminer.c	/^bool opt_minion_overheat;$/;"	v
opt_minion_spidelay	cgminer.c	/^int opt_minion_spidelay;$/;"	v
opt_minion_spireset	cgminer.c	/^char *opt_minion_spireset;$/;"	v
opt_minion_spisleep	cgminer.c	/^int opt_minion_spisleep = 200;$/;"	v
opt_minion_spiusec	cgminer.c	/^int opt_minion_spiusec;$/;"	v
opt_minion_temp	cgminer.c	/^char *opt_minion_temp;$/;"	v
opt_nfu_bits	driver-bitfury.c	/^int opt_nfu_bits = 50;$/;"	v
opt_noadl	cgminer.c	/^bool opt_noadl;$/;"	v
opt_nogpu	cgminer.c	/^bool opt_nogpu;$/;"	v
opt_num_long	ccan/opt/opt.c	/^unsigned int opt_count, opt_num_short, opt_num_short_arg, opt_num_long;$/;"	v
opt_num_short	ccan/opt/opt.c	/^unsigned int opt_count, opt_num_short, opt_num_short_arg, opt_num_long;$/;"	v
opt_num_short_arg	ccan/opt/opt.c	/^unsigned int opt_count, opt_num_short, opt_num_short_arg, opt_num_long;$/;"	v
opt_osm_led_mode	driver-bitfury.c	/^int opt_osm_led_mode = 4;$/;"	v
opt_parse	ccan/opt/opt.c	/^bool opt_parse(int *argc, char *argv[], void (*errlog)(const char *fmt, ...))$/;"	f	signature:(int *argc, char *argv[], void (*errlog)(const char *fmt, ...))
opt_parse	ccan/opt/opt.h	/^bool opt_parse(int *argc, char *argv[], void (*errlog)(const char *fmt, ...));$/;"	p	signature:(int *argc, char *argv[], void (*errlog)(const char *fmt, ...))
opt_protocol	cgminer.c	/^bool opt_protocol;$/;"	v
opt_ps_load	driver-cointerra.c	/^int opt_ps_load;$/;"	v
opt_ps_load	driver-cointerra.h	/^int opt_ps_load;$/;"	v
opt_queue	cgminer.c	/^int opt_queue = 1;$/;"	v
opt_quiet	cgminer.c	/^bool opt_quiet;$/;"	v
opt_realquiet	cgminer.c	/^bool opt_realquiet;$/;"	v
opt_register_arg	ccan/opt/opt.h	167;"	d
opt_register_noarg	ccan/opt/opt.h	137;"	d
opt_register_table	ccan/opt/opt.c	/^void opt_register_table(const struct opt_table entry[], const char *desc)$/;"	f	signature:(const struct opt_table entry[], const char *desc)
opt_register_table	ccan/opt/opt.h	/^void opt_register_table(const struct opt_table *table, const char *desc);$/;"	p	signature:(const struct opt_table *table, const char *desc)
opt_restart	cgminer.c	/^bool opt_restart = true;$/;"	v
opt_rock_freq	cgminer.c	/^float opt_rock_freq = 270;$/;"	v
opt_rotate_period	cgminer.c	/^int opt_rotate_period;$/;"	v
opt_scantime	cgminer.c	/^int opt_scantime = -1;$/;"	v
opt_set_avalon2_fan	cgminer.c	/^static char *opt_set_avalon2_fan;$/;"	v	file:
opt_set_avalon2_freq	cgminer.c	/^static char *opt_set_avalon2_freq;$/;"	v	file:
opt_set_avalon2_voltage	cgminer.c	/^static char *opt_set_avalon2_voltage;$/;"	v	file:
opt_set_avalon_fan	cgminer.c	/^static char *opt_set_avalon_fan;$/;"	v	file:
opt_set_avalon_freq	cgminer.c	/^static char *opt_set_avalon_freq;$/;"	v	file:
opt_set_bool	ccan/opt/helpers.c	/^char *opt_set_bool(bool *b)$/;"	f	signature:(bool *b)
opt_set_bool	ccan/opt/opt.h	/^char *opt_set_bool(bool *b);$/;"	p	signature:(bool *b)
opt_set_bool_arg	ccan/opt/helpers.c	/^char *opt_set_bool_arg(const char *arg, bool *b)$/;"	f	signature:(const char *arg, bool *b)
opt_set_bool_arg	ccan/opt/opt.h	/^char *opt_set_bool_arg(const char *arg, bool *b);$/;"	p	signature:(const char *arg, bool *b)
opt_set_charp	ccan/opt/helpers.c	/^char *opt_set_charp(const char *arg, char **p)$/;"	f	signature:(const char *arg, char **p)
opt_set_charp	ccan/opt/opt.h	/^char *opt_set_charp(const char *arg, char **p);$/;"	p	signature:(const char *arg, char **p)
opt_set_floatval	ccan/opt/helpers.c	/^char *opt_set_floatval(const char *arg, float *f)$/;"	f	signature:(const char *arg, float *f)
opt_set_floatval	ccan/opt/opt.h	/^char *opt_set_floatval(const char *arg, float *f);$/;"	p	signature:(const char *arg, float *f)
opt_set_hfa_fan	cgminer.c	/^static char *opt_set_hfa_fan;$/;"	v	file:
opt_set_intval	ccan/opt/helpers.c	/^char *opt_set_intval(const char *arg, int *i)$/;"	f	signature:(const char *arg, int *i)
opt_set_intval	ccan/opt/opt.h	/^char *opt_set_intval(const char *arg, int *i);$/;"	p	signature:(const char *arg, int *i)
opt_set_invbool	ccan/opt/helpers.c	/^char *opt_set_invbool(bool *b)$/;"	f	signature:(bool *b)
opt_set_invbool	ccan/opt/opt.h	/^char *opt_set_invbool(bool *b);$/;"	p	signature:(bool *b)
opt_set_invbool_arg	ccan/opt/helpers.c	/^char *opt_set_invbool_arg(const char *arg, bool *b)$/;"	f	signature:(const char *arg, bool *b)
opt_set_invbool_arg	ccan/opt/opt.h	/^char *opt_set_invbool_arg(const char *arg, bool *b);$/;"	p	signature:(const char *arg, bool *b)
opt_set_longval	ccan/opt/helpers.c	/^char *opt_set_longval(const char *arg, long *l)$/;"	f	signature:(const char *arg, long *l)
opt_set_longval	ccan/opt/opt.h	/^char *opt_set_longval(const char *arg, long *l);$/;"	p	signature:(const char *arg, long *l)
opt_set_null	cgminer.c	/^static char *opt_set_null;$/;"	v	file:
opt_set_sched_start	cgminer.c	/^static char *opt_set_sched_start;$/;"	v	file:
opt_set_sched_stop	cgminer.c	/^static char *opt_set_sched_stop;$/;"	v	file:
opt_set_sharelog	cgminer.c	/^static char *opt_set_sharelog;$/;"	v	file:
opt_set_temp_cutoff	cgminer.c	/^static char __maybe_unused *opt_set_temp_cutoff;$/;"	v	file:
opt_set_uintval	ccan/opt/helpers.c	/^char *opt_set_uintval(const char *arg, unsigned int *ui)$/;"	f	signature:(const char *arg, unsigned int *ui)
opt_set_uintval	ccan/opt/opt.h	/^char *opt_set_uintval(const char *arg, unsigned int *ui);$/;"	p	signature:(const char *arg, unsigned int *ui)
opt_set_ulongval	ccan/opt/helpers.c	/^char *opt_set_ulongval(const char *arg, unsigned long *ul)$/;"	f	signature:(const char *arg, unsigned long *ul)
opt_set_ulongval	ccan/opt/opt.h	/^char *opt_set_ulongval(const char *arg, unsigned long *ul);$/;"	p	signature:(const char *arg, unsigned long *ul)
opt_shares	cgminer.c	/^static int opt_shares;$/;"	v	file:
opt_show_bool	ccan/opt/helpers.c	/^void opt_show_bool(char buf[OPT_SHOW_LEN], const bool *b)$/;"	f	signature:(char buf[OPT_SHOW_LEN], const bool *b)
opt_show_bool	ccan/opt/opt.h	/^void opt_show_bool(char buf[OPT_SHOW_LEN], const bool *b);$/;"	p	signature:(char buf[OPT_SHOW_LEN], const bool *b)
opt_show_charp	ccan/opt/helpers.c	/^void opt_show_charp(char buf[OPT_SHOW_LEN], char *const *p)$/;"	f	signature:(char buf[OPT_SHOW_LEN], char *const *p)
opt_show_charp	ccan/opt/opt.h	/^void opt_show_charp(char buf[OPT_SHOW_LEN], char *const *p);$/;"	p	signature:(char buf[OPT_SHOW_LEN], char *const *p)
opt_show_floatval	ccan/opt/helpers.c	/^void opt_show_floatval(char buf[OPT_SHOW_LEN], const float *f)$/;"	f	signature:(char buf[OPT_SHOW_LEN], const float *f)
opt_show_floatval	ccan/opt/opt.h	/^void opt_show_floatval(char buf[OPT_SHOW_LEN], const float *f);$/;"	p	signature:(char buf[OPT_SHOW_LEN], const float *f)
opt_show_intval	ccan/opt/helpers.c	/^void opt_show_intval(char buf[OPT_SHOW_LEN], const int *i)$/;"	f	signature:(char buf[OPT_SHOW_LEN], const int *i)
opt_show_intval	ccan/opt/opt.h	/^void opt_show_intval(char buf[OPT_SHOW_LEN], const int *i);$/;"	p	signature:(char buf[OPT_SHOW_LEN], const int *i)
opt_show_invbool	ccan/opt/helpers.c	/^void opt_show_invbool(char buf[OPT_SHOW_LEN], const bool *b)$/;"	f	signature:(char buf[OPT_SHOW_LEN], const bool *b)
opt_show_invbool	ccan/opt/opt.h	/^void opt_show_invbool(char buf[OPT_SHOW_LEN], const bool *b);$/;"	p	signature:(char buf[OPT_SHOW_LEN], const bool *b)
opt_show_longval	ccan/opt/helpers.c	/^void opt_show_longval(char buf[OPT_SHOW_LEN], const long *l)$/;"	f	signature:(char buf[OPT_SHOW_LEN], const long *l)
opt_show_longval	ccan/opt/opt.h	/^void opt_show_longval(char buf[OPT_SHOW_LEN], const long *l);$/;"	p	signature:(char buf[OPT_SHOW_LEN], const long *l)
opt_show_uintval	ccan/opt/helpers.c	/^void opt_show_uintval(char buf[OPT_SHOW_LEN], const unsigned int *ui)$/;"	f	signature:(char buf[OPT_SHOW_LEN], const unsigned int *ui)
opt_show_uintval	ccan/opt/opt.h	/^void opt_show_uintval(char buf[OPT_SHOW_LEN], const unsigned int *ui);$/;"	p	signature:(char buf[OPT_SHOW_LEN], const unsigned int *ui)
opt_show_ulongval	ccan/opt/helpers.c	/^void opt_show_ulongval(char buf[OPT_SHOW_LEN], const unsigned long *ul)$/;"	f	signature:(char buf[OPT_SHOW_LEN], const unsigned long *ul)
opt_show_ulongval	ccan/opt/opt.h	/^void opt_show_ulongval(char buf[OPT_SHOW_LEN], const unsigned long *ul);$/;"	p	signature:(char buf[OPT_SHOW_LEN], const unsigned long *ul)
opt_socks_proxy	cgminer.c	/^char *opt_socks_proxy = NULL;$/;"	v
opt_stderr_cmd	cgminer.c	/^	static char *opt_stderr_cmd = NULL;$/;"	v	file:
opt_submit_stale	cgminer.c	/^static bool opt_submit_stale = true;$/;"	v	file:
opt_suggest_diff	cgminer.c	/^int opt_suggest_diff;$/;"	v
opt_table	ccan/opt/opt.c	/^struct opt_table *opt_table;$/;"	v	typeref:struct:opt_table
opt_table	ccan/opt/opt.h	/^struct opt_table {$/;"	s
opt_table::__anon48::arg	ccan/opt/opt.h	/^		void *arg;$/;"	m	union:opt_table::__anon48	access:public
opt_table::__anon48::carg	ccan/opt/opt.h	/^		const void *carg;$/;"	m	union:opt_table::__anon48	access:public
opt_table::__anon48::tlen	ccan/opt/opt.h	/^		size_t tlen;$/;"	m	union:opt_table::__anon48	access:public
opt_table::cb	ccan/opt/opt.h	/^	char *(*cb)(void *arg); \/* OPT_NOARG *\/$/;"	m	struct:opt_table	access:public
opt_table::cb_arg	ccan/opt/opt.h	/^	char *(*cb_arg)(const char *optarg, void *arg); \/* OPT_HASARG *\/$/;"	m	struct:opt_table	access:public
opt_table::desc	ccan/opt/opt.h	/^	const char *desc;$/;"	m	struct:opt_table	access:public
opt_table::names	ccan/opt/opt.h	/^	const char *names; \/* pipe-separated names, --longopt or -s *\/$/;"	m	struct:opt_table	access:public
opt_table::show	ccan/opt/opt.h	/^	void (*show)(char buf[OPT_SHOW_LEN], const void *arg);$/;"	m	struct:opt_table	access:public
opt_table::type	ccan/opt/opt.h	/^	enum opt_type type;$/;"	m	struct:opt_table	typeref:enum:opt_table::opt_type	access:public
opt_table::u	ccan/opt/opt.h	/^	} u;$/;"	m	struct:opt_table	typeref:union:opt_table::__anon48	access:public
opt_time	cgminer.c	/^static const bool opt_time = true;$/;"	v	file:
opt_type	ccan/opt/opt.h	/^enum opt_type {$/;"	g
opt_usage	ccan/opt/opt.h	/^char *opt_usage(const char *argv0, const char *extra);$/;"	p	signature:(const char *argv0, const char *extra)
opt_usage	ccan/opt/usage.c	/^char *opt_usage(const char *argv0, const char *extra)$/;"	f	signature:(const char *argv0, const char *extra)
opt_usage_and_exit	ccan/opt/helpers.c	/^char *opt_usage_and_exit(const char *extra)$/;"	f	signature:(const char *extra)
opt_usage_and_exit	ccan/opt/opt.h	/^char *opt_usage_and_exit(const char *extra);$/;"	p	signature:(const char *extra)
opt_usb_list_all	cgminer.c	/^bool opt_usb_list_all;$/;"	v
opt_usb_select	cgminer.c	/^char *opt_usb_select = NULL;$/;"	v
opt_usbdump	cgminer.c	/^int opt_usbdump = -1;$/;"	v
opt_version_and_exit	ccan/opt/helpers.c	/^char *opt_version_and_exit(const char *version)$/;"	f	signature:(const char *version)
opt_version_and_exit	ccan/opt/opt.h	/^char *opt_version_and_exit(const char *version);$/;"	p	signature:(const char *version)
opt_version_path	cgminer.c	/^char *opt_version_path = NULL;$/;"	v
opt_verusage_and_exit	cgminer.c	/^static char *opt_verusage_and_exit(const char *extra)$/;"	f	file:	signature:(const char *extra)
opt_widescreen	cgminer.c	/^static bool opt_widescreen;$/;"	v	file:
opt_work_update	cgminer.c	/^bool opt_work_update;$/;"	v
opt_worktime	cgminer.c	/^bool opt_worktime;$/;"	v
optimal	driver-avalon.h	/^	bool optimal;$/;"	m	struct:avalon_info	access:public
optimal	driver-bitmain.h	/^	bool optimal;$/;"	m	struct:bitmain_info	access:public
option	hf_protocol.h	/^	uint8_t  option;$/;"	m	struct:hf_hash_serial	access:public
option	hf_protocol_be.h	/^	uint8_t  option;$/;"	m	struct:hf_hash_serial	access:public
option_offset	driver-antrouter.c	/^static int option_offset = -1;$/;"	v	file:
option_offset	driver-avalon.c	/^static int option_offset = -1;$/;"	v	file:
option_offset	driver-bitmain.c	/^static int option_offset = -1;$/;"	v	file:
option_offset	driver-bmsc.c	/^static int option_offset = -1;$/;"	v	file:
option_offset	driver-icarus.c	/^static int option_offset = -1;$/;"	v	file:
options	miner.php	/^ $options = array(	'intensity' => 'Intensity',$/;"	v
opts	miner.php	/^		$opts = explode('||', $fld, 2);$/;"	v
original_handle	compat/libusb-1.0/libusb/os/poll_windows.c	/^	HANDLE original_handle;$/;"	m	struct:__anon38	file:	access:public
os_priv	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned char os_priv$/;"	m	struct:libusb_device	access:public
os_priv	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned char os_priv$/;"	m	struct:libusb_device_handle	access:public
osc	driver-bab.c	/^	uint8_t osc[BAB_OSC];$/;"	m	struct:bab_info	file:	access:public
osc6_bits	driver-bitfury.h	/^	int osc6_bits;$/;"	m	struct:bitfury_info	access:public
osiz	driver-minion.c	/^	uint32_t osiz;$/;"	m	struct:task_item	file:	access:public
other	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^struct other {$/;"	s	file:
other::x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:other	file:	access:public
otherrow	miner.php	/^function otherrow($row)$/;"	f
othrow	miner.php	/^function othrow($row)$/;"	f
out	miner.php	/^ $out = trim(getparam('logout', true));$/;"	v
output	ccan/opt/test/run-checkopt.c	/^static char *output = NULL;$/;"	v	file:
output	ccan/opt/test/run-helpers.c	/^static char *output = NULL;$/;"	v	file:
overflow	driver-spondoolies-sp10.h	/^	int overflow;$/;"	m	struct:spond_adapter	access:public
overflow	driver-spondoolies-sp30.h	/^	int overflow;$/;"	m	struct:spond_adapter	access:public
overheat	driver-avalon.h	/^	bool overheat;$/;"	m	struct:avalon_info	access:public
overheat	driver-bflsc.h	/^	bool overheat;$/;"	m	struct:bflsc_dev	access:public
overheat	driver-bitmain.h	/^	bool overheat;$/;"	m	struct:bitmain_info	access:public
overheat	driver-hashfast.h	/^	int overheat;$/;"	m	struct:hashfast_info	access:public
overheat	driver-klondike.c	/^	bool overheat;$/;"	m	struct:jobque	file:	access:public
overheat	driver-minion.c	/^	bool overheat;$/;"	m	struct:minion_status	file:	access:public
overheated	miner.h	/^	bool overheated;$/;"	m	struct:modminer_fpga_state	access:public
overheats	driver-minion.c	/^	uint32_t overheats;$/;"	m	struct:minion_status	file:	access:public
overheattime	driver-minion.c	/^	double overheattime;$/;"	m	struct:minion_status	file:	access:public
overheattime	driver-modminer.c	/^static const double overheattime = 26.9;$/;"	v	file:
overlapped	compat/libusb-1.0/libusb/os/poll_windows.h	/^	OVERLAPPED* overlapped;			\/\/ what will report our I\/O status$/;"	m	struct:winfd	access:public
overlapped_to_winfd	compat/libusb-1.0/libusb/os/poll_windows.c	/^struct winfd overlapped_to_winfd(OVERLAPPED* overlapped)$/;"	f	signature:(OVERLAPPED* overlapped)
overlapped_to_winfd	compat/libusb-1.0/libusb/os/poll_windows.h	/^struct winfd overlapped_to_winfd(OVERLAPPED* overlapped);$/;"	p	signature:(OVERLAPPED* overlapped)
override_chip_num	A1-common.h	/^	int override_chip_num;$/;"	m	struct:A1_config_options	access:public
owork	driver-bitfury.h	/^	struct work **owork;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::work	access:public
p0	A1-desk-board-selector.c	/^	uint8_t p0;$/;"	m	struct:pcf8575_ctx	file:	access:public
p1	A1-desk-board-selector.c	/^	uint8_t p1;$/;"	m	struct:pcf8575_ctx	file:	access:public
pCancelIoEx	compat/libusb-1.0/libusb/os/poll_windows.c	/^static BOOL (__stdcall *pCancelIoEx)(HANDLE, LPOVERLAPPED) = NULL;$/;"	v	file:
p_count	driver-bflsc.c	148;"	d	file:
p_fields	driver-bflsc.c	150;"	d	file:
p_firstname	driver-bflsc.c	149;"	d	file:
p_items	driver-bflsc.c	91;"	d	file:
p_lf	driver-bflsc.c	151;"	d	file:
p_lines	driver-bflsc.c	90;"	d	file:
p_list	driver-minion.c	/^	K_STORE *p_list[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
pack	compat/jansson-2.6/src/pack_unpack.c	/^static json_t *pack(scanner_t *s, va_list *ap)$/;"	f	file:	signature:(scanner_t *s, va_list *ap)
pack	compat/jansson-2.6/src/pack_unpack.c	/^static json_t *pack(scanner_t *s, va_list *ap);$/;"	p	file:	signature:(scanner_t *s, va_list *ap)
pack_array	compat/jansson-2.6/src/pack_unpack.c	/^static json_t *pack_array(scanner_t *s, va_list *ap)$/;"	f	file:	signature:(scanner_t *s, va_list *ap)
pack_object	compat/jansson-2.6/src/pack_unpack.c	/^static json_t *pack_object(scanner_t *s, va_list *ap)$/;"	f	file:	signature:(scanner_t *s, va_list *ap)
packagename	cgminer.c	/^static char packagename[256];$/;"	v	file:
pad2	driver-klondike.c	/^	uint8_t pad2;$/;"	m	struct:klondike_cfg	file:	access:public
page	miner.php	/^ $page = $csp[0];$/;"	v
page	miner.php	/^ $page = 0;$/;"	v
pagebuttons	miner.php	/^function pagebuttons($rig, $pg)$/;"	f
pagename	miner.php	/^	foreach ($list as $pagename => $data)$/;"	v
pagesonly	miner.php	/^ $pagesonly = checklogin();$/;"	v
pair_t	compat/jansson-2.6/src/hashtable.c	/^typedef struct hashtable_pair pair_t;$/;"	t	typeref:struct:hashtable_pair	file:
params	api.c	/^	const enum code_parameters params;$/;"	m	struct:CODES	typeref:enum:CODES::code_parameters	file:	access:public
parent_dev	compat/libusb-1.0/libusb/os/windows_usb.h	/^	struct libusb_device *parent_dev;	\/\/ access to parent is required for usermode ops$/;"	m	struct:windows_device_priv	typeref:struct:windows_device_priv::libusb_device	access:public
parse_args	ccan/opt/test/utils.c	/^bool parse_args(int *argc, char ***argv, ...)$/;"	f	signature:(int *argc, char ***argv, ...)
parse_args	ccan/opt/test/utils.h	/^bool parse_args(int *argc, char ***argv, ...);$/;"	p	signature:(int *argc, char ***argv, ...)
parse_array	compat/jansson-2.6/src/load.c	/^static json_t *parse_array(lex_t *lex, size_t flags, json_error_t *error)$/;"	f	file:	signature:(lex_t *lex, size_t flags, json_error_t *error)
parse_bxf_hwerror	driver-bitfury.c	/^static void parse_bxf_hwerror(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)
parse_bxf_job	driver-bitfury.c	/^static void parse_bxf_job(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)
parse_bxf_needwork	driver-bitfury.c	/^static void parse_bxf_needwork(struct cgpu_info *bitfury, struct bitfury_info *info,$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)
parse_bxf_submit	driver-bitfury.c	/^static void parse_bxf_submit(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)
parse_bxf_temp	driver-bitfury.c	/^static void parse_bxf_temp(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)$/;"	f	file:	signature:(struct cgpu_info *bitfury, struct bitfury_info *info, char *buf)
parse_config	cgminer.c	/^static char *parse_config(json_t *config, bool fileconf)$/;"	f	file:	signature:(json_t *config, bool fileconf)
parse_configuration	compat/libusb-1.0/libusb/descriptor.c	/^static int parse_configuration(struct libusb_context *ctx,$/;"	f	file:	signature:(struct libusb_context *ctx, struct libusb_config_descriptor *config, unsigned char *buffer, int host_endian)
parse_diff	util.c	/^static bool parse_diff(struct pool *pool, json_t *val)$/;"	f	file:	signature:(struct pool *pool, json_t *val)
parse_endpoint	compat/libusb-1.0/libusb/descriptor.c	/^static int parse_endpoint(struct libusb_context *ctx,$/;"	f	file:	signature:(struct libusb_context *ctx, struct libusb_endpoint_descriptor *endpoint, unsigned char *buffer, int size, int host_endian)
parse_err	ccan/opt/parse.c	/^static int parse_err(void (*errlog)(const char *fmt, ...),$/;"	f	file:	signature:(void (*errlog)(const char *fmt, ...), const char *argv0, const char *arg, unsigned len, const char *problem)
parse_extranonce	util.c	/^static bool parse_extranonce(struct pool *pool, json_t *val)$/;"	f	file:	signature:(struct pool *pool, json_t *val)
parse_interface	compat/libusb-1.0/libusb/descriptor.c	/^static int parse_interface(libusb_context *ctx,$/;"	f	file:	signature:(libusb_context *ctx, struct libusb_interface *usb_interface, unsigned char *buffer, int size, int host_endian)
parse_json	compat/jansson-2.6/src/load.c	/^static json_t *parse_json(lex_t *lex, size_t flags, json_error_t *error)$/;"	f	file:	signature:(lex_t *lex, size_t flags, json_error_t *error)
parse_method	util.c	/^bool parse_method(struct pool *pool, char *s)$/;"	f	signature:(struct pool *pool, char *s)
parse_method	util.h	/^bool parse_method(struct pool *pool, char *s);$/;"	p	signature:(struct pool *pool, char *s)
parse_notify	util.c	/^static bool parse_notify(struct pool *pool, json_t *val)$/;"	f	file:	signature:(struct pool *pool, json_t *val)
parse_object	compat/jansson-2.6/src/load.c	/^static json_t *parse_object(lex_t *lex, size_t flags, json_error_t *error)$/;"	f	file:	signature:(lex_t *lex, size_t flags, json_error_t *error)
parse_one	ccan/opt/parse.c	/^int parse_one(int *argc, char *argv[], unsigned *offset,$/;"	f	signature:(int *argc, char *argv[], unsigned *offset, void (*errlog)(const char *fmt, ...))
parse_one	ccan/opt/private.h	/^int parse_one(int *argc, char *argv[], unsigned *offset,$/;"	p	signature:(int *argc, char *argv[], unsigned *offset, void (*errlog)(const char *fmt, ...))
parse_reconnect	util.c	/^static bool parse_reconnect(struct pool *pool, json_t *val)$/;"	f	file:	signature:(struct pool *pool, json_t *val)
parse_resp	driver-spondoolies-sp10.h	/^	int parse_resp;$/;"	m	struct:spond_adapter	access:public
parse_resp	driver-spondoolies-sp30.h	/^	int parse_resp;$/;"	m	struct:spond_adapter	access:public
parse_stratum_response	cgminer.c	/^static bool parse_stratum_response(struct pool *pool, char *s)$/;"	f	file:	signature:(struct pool *pool, char *s)
parse_value	compat/jansson-2.6/src/load.c	/^static json_t *parse_value(lex_t *lex, size_t flags, json_error_t *error)$/;"	f	file:	signature:(lex_t *lex, size_t flags, json_error_t *error)
parse_value	compat/jansson-2.6/src/load.c	/^static json_t *parse_value(lex_t *lex, size_t flags, json_error_t *error);$/;"	p	file:	signature:(lex_t *lex, size_t flags, json_error_t *error)
parsed_config_options	driver-SPI-bitmine-A1.c	/^static struct A1_config_options *parsed_config_options;$/;"	v	typeref:struct:A1_config_options	file:
parts	miner.php	/^				$parts = explode('.', $name, 2);$/;"	v
parts	miner.php	/^			$parts = explode(':', $rigs[$rig], 3);$/;"	v
parts	miner.php	/^		$parts = explode('.', $value, 2);$/;"	v
parts	miner.php	/^	$parts = explode(':', $rig, 3);$/;"	v
parts	miner.php	/^	$parts = explode(':', $rigs[$rig], 3);$/;"	v
parts	miner.php	/^	$parts = explode(':', $rigs[0], 3);$/;"	v
passert	driver-spondoolies-sp10-p.h	29;"	d
passert	driver-spondoolies-sp30-p.c	19;"	d	file:
path	compat/libusb-1.0/libusb/os/windows_usb.h	/^		char *path;						\/\/ each interface needs a device interface path,$/;"	m	struct:windows_device_priv::__anon30	access:public
path	compat/libusb-1.0/libusb/os/windows_usb.h	/^	char *path;							\/\/ device interface path$/;"	m	struct:windows_device_priv	access:public
pause	miner.h	/^	bool	pause;$/;"	m	struct:thr_info	access:public
payload	driver-bitfury.h	/^	struct bitfury_payload *payload;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::bitfury_payload	access:public
payload	usbtest.py	/^	payload = rmid + rdata2$/;"	v
payload2	usbtest.py	/^	payload2 = "ce92099c5a80bb81c52990d5c0924c625fd25a535640607d5a4bdf8174e2c8d500000000000000000000000080000000000000000b290c1a42313b4f21b5bcb8"$/;"	v
payloadData	driver-bflsc.h	/^	uint8_t payloadData[BFLSC_MAXPAYLOAD];$/;"	m	struct:DataForwardToChain	access:public
payloadData	driver-bflsc.h	/^	uint8_t payloadData[BFLSC_MAXPAYLOAD];$/;"	m	struct:SaveString	access:public
payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:DataForwardToChain	access:public
payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:QueueJobPackStructure	access:public
payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:QueueJobStructure	access:public
payloadSize	driver-bflsc.h	/^	uint8_t payloadSize;$/;"	m	struct:SaveString	access:public
pcf8575_ctx	A1-desk-board-selector.c	/^struct pcf8575_ctx {$/;"	s	file:
pcf8575_ctx::active_board	A1-desk-board-selector.c	/^	uint8_t active_board;$/;"	m	struct:pcf8575_ctx	file:	access:public
pcf8575_ctx::addr	A1-desk-board-selector.c	/^	uint8_t addr;$/;"	m	struct:pcf8575_ctx	file:	access:public
pcf8575_ctx::file	A1-desk-board-selector.c	/^	int file;$/;"	m	struct:pcf8575_ctx	file:	access:public
pcf8575_ctx::lock	A1-desk-board-selector.c	/^	pthread_mutex_t lock;$/;"	m	struct:pcf8575_ctx	file:	access:public
pcf8575_ctx::p0	A1-desk-board-selector.c	/^	uint8_t p0;$/;"	m	struct:pcf8575_ctx	file:	access:public
pcf8575_ctx::p1	A1-desk-board-selector.c	/^	uint8_t p1;$/;"	m	struct:pcf8575_ctx	file:	access:public
pcf8575_write	A1-desk-board-selector.c	/^static bool pcf8575_write(void)$/;"	f	file:	signature:(void)
pending_array	lib/sigprocmask.c	/^static volatile sig_atomic_t pending_array[NSIG] \/* = { 0 } *\/;$/;"	v	file:
perf_item	driver-minion.c	/^typedef struct perf_item {$/;"	s	file:
perf_item::elapsed	driver-minion.c	/^	double elapsed;$/;"	m	struct:perf_item	file:	access:public
perf_item::freq	driver-minion.c	/^	uint32_t freq;$/;"	m	struct:perf_item	file:	access:public
perf_item::ghs	driver-minion.c	/^	double ghs;$/;"	m	struct:perf_item	file:	access:public
perf_item::nonces	driver-minion.c	/^	uint64_t nonces;$/;"	m	struct:perf_item	file:	access:public
perf_item::when	driver-minion.c	/^	struct timeval when;$/;"	m	struct:perf_item	typeref:struct:perf_item::timeval	file:	access:public
pfree_list	driver-minion.c	/^	K_LIST *pfree_list;$/;"	m	struct:minion_info	file:	access:public
pg	miner.php	/^						$pg = $pglook;$/;"	v
pg	miner.php	/^				$pg = null;$/;"	v
pg	miner.php	/^	$pg = urlencode(trim(getparam('pg', true)));$/;"	v
pg	miner.php	/^function htmlhead($mcerr, $checkapi, $rig, $pg = null, $noscript = false)$/;"	v
pgacount	api.c	/^static void pgacount(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
pgadev	api.c	/^static void pgadev(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
pgadevice	api.c	/^static int pgadevice(int pgaid)$/;"	f	file:	signature:(int pgaid)
pgadisable	api.c	/^static void pgadisable(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
pgaenable	api.c	/^static void pgaenable(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
pgaidentify	api.c	/^static void pgaidentify(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
pgaset	api.c	/^static void pgaset(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
pgastatus	api.c	/^static void pgastatus(struct io_data *io_data, int pga, bool isjson, bool precom)$/;"	f	file:	signature:(struct io_data *io_data, int pga, bool isjson, bool precom)
phase_currents	hf_protocol.h	/^	uint16_t phase_currents[4];                 \/\/ Phase currents (0 if unavailable)$/;"	m	struct:hf_g1_die_data	access:public
phase_currents	hf_protocol_be.h	/^	uint16_t phase_currents[4];                 \/\/ Phase currents (0 if unavailable)$/;"	m	struct:hf_g1_die_data	access:public
php_pr	miner.php	/^function php_pr($cmd)$/;"	f
pin	driver-minion.c	/^	int pin;$/;"	m	struct:minion_select_pins	file:	access:public
pin	mcp2210.h	/^	uint8_t pin[9];$/;"	m	struct:gpio_pin	access:public
pipe	compat/libusb-1.0/libusb/os/openbsd_usb.c	/^	int pipe[2];				\/* for event notification *\/$/;"	m	struct:handle_priv	file:	access:public
pipe_bitmap	driver-cointerra.h	/^	unsigned char pipe_bitmap[128];$/;"	m	struct:cointerra_info	access:public
pipe_count	usbutils.h	/^	uint64_t pipe_count;$/;"	m	struct:cg_usb_info	access:public
pipe_number	compat/libusb-1.0/libusb/os/poll_windows.c	/^LONG pipe_number = 0;$/;"	v
pipefd	util.h	/^	int pipefd[2];$/;"	m	struct:cgsem	access:public
pipes_enabled	driver-cointerra.h	/^	uint8_t pipes_enabled[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
placebuttons	miner.php	/^ if ($placebuttons == 'bot' || $placebuttons == 'both')$/;"	v
placebuttons	miner.php	/^ if ($placebuttons == 'top' || $placebuttons == 'both')$/;"	v
placebuttons	miner.php	/^$placebuttons = 'top';$/;"	v
pll_bypass	hf_protocol.h	/^	uint8_t  pll_bypass:1;                  \/\/ Force PLL bypass, hash clock = ref clock$/;"	m	struct:hf_usb_init_header	access:public
pll_bypass	hf_protocol.h	/^	uint8_t  pll_bypass:1;$/;"	m	struct:hf_pll_config	access:public
pll_bypass	hf_protocol_be.h	/^	uint8_t  pll_bypass:1;                  \/\/ Force PLL bypass, hash clock = ref clock$/;"	m	struct:hf_usb_init_header	access:public
pll_bypass	hf_protocol_be.h	/^	uint8_t  pll_bypass:1;$/;"	m	struct:hf_pll_config	access:public
pll_divf	hf_protocol.h	/^	uint8_t  pll_divf;$/;"	m	struct:hf_pll_config	access:public
pll_divf	hf_protocol_be.h	/^	uint8_t  pll_divf;$/;"	m	struct:hf_pll_config	access:public
pll_divq	hf_protocol.h	/^	uint8_t  pll_divq:3;$/;"	m	struct:hf_pll_config	access:public
pll_divq	hf_protocol_be.h	/^	uint8_t  pll_divq:3;$/;"	m	struct:hf_pll_config	access:public
pll_divr	hf_protocol.h	/^	uint8_t  pll_divr:6;$/;"	m	struct:hf_pll_config	access:public
pll_divr	hf_protocol_be.h	/^	uint8_t  pll_divr:6;$/;"	m	struct:hf_pll_config	access:public
pll_fse	hf_protocol.h	/^	uint8_t  pll_fse:1;                     \/\/ Must always be 1$/;"	m	struct:hf_pll_config	access:public
pll_fse	hf_protocol_be.h	/^	uint8_t  pll_fse:1;                     \/\/ Must always be 1$/;"	m	struct:hf_pll_config	access:public
pll_locked	knc-asic.h	/^	int pll_locked;$/;"	m	struct:knc_die_info	access:public
pll_power_down	knc-asic.h	/^	int pll_power_down;$/;"	m	struct:knc_die_info	access:public
pll_range	hf_protocol.h	/^	uint8_t  pll_range:3;$/;"	m	struct:hf_pll_config	access:public
pll_range	hf_protocol_be.h	/^	uint8_t  pll_range:3;$/;"	m	struct:hf_pll_config	access:public
pll_reset	hf_protocol.h	/^	uint8_t  pll_reset:1;$/;"	m	struct:hf_pll_config	access:public
pll_reset	hf_protocol_be.h	/^	uint8_t  pll_reset:1;$/;"	m	struct:hf_pll_config	access:public
pll_reset_n	knc-asic.h	/^	int pll_reset_n;$/;"	m	struct:knc_die_info	access:public
poll_dbg	compat/libusb-1.0/libusb/os/poll_windows.c	53;"	d	file:
poll_dbg	compat/libusb-1.0/libusb/os/poll_windows.c	58;"	d	file:
poll_dbg	compat/libusb-1.0/libusb/os/poll_windows.c	60;"	d	file:
poll_fd	compat/libusb-1.0/libusb/os/poll_windows.c	/^struct winfd poll_fd[MAX_FDS];$/;"	v	typeref:struct:winfd
pollable_fd	compat/libusb-1.0/libusb/os/windows_usb.h	/^	struct winfd pollable_fd;$/;"	m	struct:windows_transfer_priv	typeref:struct:windows_transfer_priv::winfd	access:public
pollfd	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_pollfd pollfd;$/;"	m	struct:usbi_pollfd	typeref:struct:usbi_pollfd::libusb_pollfd	access:public
pollfd	compat/libusb-1.0/libusb/os/poll_windows.h	/^struct pollfd {$/;"	s
pollfd::events	compat/libusb-1.0/libusb/os/poll_windows.h	/^    short events;     \/* requested events *\/$/;"	m	struct:pollfd	access:public
pollfd::fd	compat/libusb-1.0/libusb/os/poll_windows.h	/^    int fd;           \/* file descriptor *\/$/;"	m	struct:pollfd	access:public
pollfd::revents	compat/libusb-1.0/libusb/os/poll_windows.h	/^    short revents;    \/* returned events *\/$/;"	m	struct:pollfd	access:public
pollfd_modify	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned int pollfd_modify;$/;"	m	struct:libusb_context	access:public
pollfd_modify_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t pollfd_modify_lock;$/;"	m	struct:libusb_context	access:public
pollfds	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head pollfds;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
pollfds_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t pollfds_lock;$/;"	m	struct:libusb_context	access:public
polling	driver-avalon2.c	/^static int polling(struct thr_info *thr, struct cgpu_info *avalon2, struct avalon2_info *info)$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *avalon2, struct avalon2_info *info)
polling	miner.h	/^	bool polling;$/;"	m	struct:cgpu_info	access:public
pool	driver-avalon2.h	/^	struct pool pool;$/;"	m	struct:avalon2_info	typeref:struct:avalon2_info::pool	access:public
pool	driver-blockerupter.h	/^	struct pool pool;$/;"	m	struct:blockerupter_info	typeref:struct:blockerupter_info::pool	access:public
pool	driver-hashratio.h	/^	struct pool pool;$/;"	m	struct:hashratio_info	typeref:struct:hashratio_info::pool	access:public
pool	miner.h	/^	struct pool	*pool;$/;"	m	struct:work	typeref:struct:work::pool	access:public
pool	miner.h	/^struct pool {$/;"	s
pool	miner.php	/^		$pool = current($values);$/;"	v
pool::accepted	miner.h	/^	int64_t accepted, rejected;$/;"	m	struct:pool	access:public
pool::bbversion	miner.h	/^	char bbversion[12];$/;"	m	struct:pool	access:public
pool::best_diff	miner.h	/^	uint64_t best_diff;$/;"	m	struct:pool	access:public
pool::blocking	miner.h	/^	bool blocking;$/;"	m	struct:pool	access:public
pool::cgminer_pool_stats	miner.h	/^	struct cgminer_pool_stats cgminer_pool_stats;$/;"	m	struct:pool	typeref:struct:pool::cgminer_pool_stats	access:public
pool::cgminer_stats	miner.h	/^	struct cgminer_stats cgminer_stats;$/;"	m	struct:pool	typeref:struct:pool::cgminer_stats	access:public
pool::coinbase	miner.h	/^	unsigned char *coinbase;$/;"	m	struct:pool	access:public
pool::coinbase_len	miner.h	/^	int coinbase_len;$/;"	m	struct:pool	access:public
pool::coinbasetxn	miner.h	/^	char *coinbasetxn;$/;"	m	struct:pool	access:public
pool::cr_cond	miner.h	/^	pthread_cond_t cr_cond;$/;"	m	struct:pool	access:public
pool::curlring	miner.h	/^	struct list_head curlring;$/;"	m	struct:pool	typeref:struct:pool::list_head	access:public
pool::curls	miner.h	/^	int curls;$/;"	m	struct:pool	access:public
pool::curtime	miner.h	/^	uint32_t curtime;$/;"	m	struct:pool	access:public
pool::data_lock	miner.h	/^	cglock_t data_lock;$/;"	m	struct:pool	access:public
pool::diff	miner.h	/^	char diff[8];$/;"	m	struct:pool	access:public
pool::diff1	miner.h	/^	int64_t diff1;$/;"	m	struct:pool	access:public
pool::diff_accepted	miner.h	/^	double diff_accepted;$/;"	m	struct:pool	access:public
pool::diff_rejected	miner.h	/^	double diff_rejected;$/;"	m	struct:pool	access:public
pool::diff_stale	miner.h	/^	double diff_stale;$/;"	m	struct:pool	access:public
pool::discarded_work	miner.h	/^	unsigned int discarded_work;$/;"	m	struct:pool	access:public
pool::enabled	miner.h	/^	enum pool_enable enabled;$/;"	m	struct:pool	typeref:enum:pool::pool_enable	access:public
pool::extranonce_subscribe	miner.h	/^	bool extranonce_subscribe;$/;"	m	struct:pool	access:public
pool::gbt_bits	miner.h	/^	uint32_t gbt_bits;$/;"	m	struct:pool	access:public
pool::gbt_curl	miner.h	/^	CURL *gbt_curl;$/;"	m	struct:pool	access:public
pool::gbt_curl_inuse	miner.h	/^	bool gbt_curl_inuse;$/;"	m	struct:pool	access:public
pool::gbt_expires	miner.h	/^	int gbt_expires;$/;"	m	struct:pool	access:public
pool::gbt_lock	miner.h	/^	cglock_t gbt_lock;$/;"	m	struct:pool	access:public
pool::gbt_solo	miner.h	/^	bool gbt_solo;$/;"	m	struct:pool	access:public
pool::gbt_target	miner.h	/^	unsigned char gbt_target[32];$/;"	m	struct:pool	access:public
pool::gbt_txns	miner.h	/^	int gbt_txns;$/;"	m	struct:pool	access:public
pool::gbt_version	miner.h	/^	uint32_t gbt_version;$/;"	m	struct:pool	access:public
pool::gbt_workid	miner.h	/^	char *gbt_workid;$/;"	m	struct:pool	access:public
pool::getfail_occasions	miner.h	/^	unsigned int getfail_occasions;$/;"	m	struct:pool	access:public
pool::getwork_q	miner.h	/^	struct thread_q *getwork_q;$/;"	m	struct:pool	typeref:struct:pool::thread_q	access:public
pool::getwork_requested	miner.h	/^	unsigned int getwork_requested;$/;"	m	struct:pool	access:public
pool::has_gbt	miner.h	/^	bool has_gbt;$/;"	m	struct:pool	access:public
pool::has_stratum	miner.h	/^	bool has_stratum;$/;"	m	struct:pool	access:public
pool::hdr_path	miner.h	/^	char *hdr_path;$/;"	m	struct:pool	access:public
pool::header_bin	miner.h	/^	unsigned char header_bin[128];$/;"	m	struct:pool	access:public
pool::height	miner.h	/^	int height;$/;"	m	struct:pool	access:public
pool::idle	miner.h	/^	bool idle;$/;"	m	struct:pool	access:public
pool::lagging	miner.h	/^	bool lagging;$/;"	m	struct:pool	access:public
pool::last_share_diff	miner.h	/^	double last_share_diff;$/;"	m	struct:pool	access:public
pool::last_share_time	miner.h	/^	time_t last_share_time;$/;"	m	struct:pool	access:public
pool::last_shares	miner.h	/^	int last_shares, shares;$/;"	m	struct:pool	access:public
pool::longpoll_thread	miner.h	/^	pthread_t longpoll_thread;$/;"	m	struct:pool	access:public
pool::longpollid	miner.h	/^	char *longpollid;$/;"	m	struct:pool	access:public
pool::lp_started	miner.h	/^	bool lp_started;$/;"	m	struct:pool	access:public
pool::lp_url	miner.h	/^	char *lp_url;$/;"	m	struct:pool	access:public
pool::merklebin	miner.h	/^	unsigned char merklebin[16 * 32];$/;"	m	struct:pool	access:public
pool::merkles	miner.h	/^	int merkles;$/;"	m	struct:pool	access:public
pool::n1_len	miner.h	/^	size_t n1_len;$/;"	m	struct:pool	access:public
pool::n2size	miner.h	/^	int n2size;$/;"	m	struct:pool	access:public
pool::nValue	miner.h	/^	int nValue;$/;"	m	struct:pool	access:public
pool::nbit	miner.h	/^	char nbit[12];$/;"	m	struct:pool	access:public
pool::nonce1	miner.h	/^	char *nonce1;$/;"	m	struct:pool	access:public
pool::nonce1bin	miner.h	/^	unsigned char *nonce1bin;$/;"	m	struct:pool	access:public
pool::nonce2	miner.h	/^	uint64_t nonce2;$/;"	m	struct:pool	access:public
pool::nonce2_offset	miner.h	/^	int nonce2_offset;$/;"	m	struct:pool	access:public
pool::ntime	miner.h	/^	char ntime[12];$/;"	m	struct:pool	access:public
pool::pool_lock	miner.h	/^	pthread_mutex_t pool_lock;$/;"	m	struct:pool	access:public
pool::pool_no	miner.h	/^	int pool_no;$/;"	m	struct:pool	access:public
pool::prev_block	miner.h	/^	char prev_block[32];$/;"	m	struct:pool	access:public
pool::prev_hash	miner.h	/^	char prev_hash[68];$/;"	m	struct:pool	access:public
pool::previousblockhash	miner.h	/^	unsigned char previousblockhash[32];$/;"	m	struct:pool	access:public
pool::prio	miner.h	/^	int prio;$/;"	m	struct:pool	access:public
pool::probed	miner.h	/^	bool probed;$/;"	m	struct:pool	access:public
pool::quota	miner.h	/^	int quota;$/;"	m	struct:pool	access:public
pool::quota_gcd	miner.h	/^	int quota_gcd;$/;"	m	struct:pool	access:public
pool::quota_used	miner.h	/^	int quota_used;$/;"	m	struct:pool	access:public
pool::rejected	miner.h	/^	int64_t accepted, rejected;$/;"	m	struct:pool	access:public
pool::remotefail_occasions	miner.h	/^	unsigned int remotefail_occasions;$/;"	m	struct:pool	access:public
pool::removed	miner.h	/^	bool removed;$/;"	m	struct:pool	access:public
pool::rpc_pass	miner.h	/^	char *rpc_user, *rpc_pass;$/;"	m	struct:pool	access:public
pool::rpc_proxy	miner.h	/^	char *rpc_proxy;$/;"	m	struct:pool	access:public
pool::rpc_proxytype	miner.h	/^	proxytypes_t rpc_proxytype;$/;"	m	struct:pool	access:public
pool::rpc_req	miner.h	/^	char *rpc_req;$/;"	m	struct:pool	access:public
pool::rpc_url	miner.h	/^	char *rpc_url;$/;"	m	struct:pool	access:public
pool::rpc_user	miner.h	/^	char *rpc_user, *rpc_pass;$/;"	m	struct:pool	access:public
pool::rpc_userpass	miner.h	/^	char *rpc_userpass;$/;"	m	struct:pool	access:public
pool::script_pubkey	miner.h	/^	unsigned char script_pubkey[25 + 3];$/;"	m	struct:pool	access:public
pool::scriptsig_base	miner.h	/^	unsigned char scriptsig_base[100];$/;"	m	struct:pool	access:public
pool::sdiff	miner.h	/^	double sdiff;$/;"	m	struct:pool	access:public
pool::seq_getfails	miner.h	/^	int seq_getfails;$/;"	m	struct:pool	access:public
pool::seq_rejects	miner.h	/^	int seq_rejects;$/;"	m	struct:pool	access:public
pool::sessionid	miner.h	/^	char *sessionid;$/;"	m	struct:pool	access:public
pool::shares	miner.h	/^	int last_shares, shares;$/;"	m	struct:pool	access:public
pool::sock	miner.h	/^	SOCKETTYPE sock;$/;"	m	struct:pool	access:public
pool::sockaddr_proxy_port	miner.h	/^	char *sockaddr_proxy_port;$/;"	m	struct:pool	access:public
pool::sockaddr_proxy_url	miner.h	/^	char *sockaddr_proxy_url;$/;"	m	struct:pool	access:public
pool::sockaddr_url	miner.h	/^	char *sockaddr_url; \/* stripped url used for sockaddr *\/$/;"	m	struct:pool	access:public
pool::sockbuf	miner.h	/^	char *sockbuf;$/;"	m	struct:pool	access:public
pool::sockbuf_size	miner.h	/^	size_t sockbuf_size;$/;"	m	struct:pool	access:public
pool::solved	miner.h	/^	int solved;$/;"	m	struct:pool	access:public
pool::sshares	miner.h	/^	int sshares; \/* stratum shares submitted waiting on response *\/$/;"	m	struct:pool	access:public
pool::stale_shares	miner.h	/^	unsigned int stale_shares;$/;"	m	struct:pool	access:public
pool::stratum_active	miner.h	/^	bool stratum_active;$/;"	m	struct:pool	access:public
pool::stratum_init	miner.h	/^	bool stratum_init;$/;"	m	struct:pool	access:public
pool::stratum_lock	miner.h	/^	pthread_mutex_t stratum_lock;$/;"	m	struct:pool	access:public
pool::stratum_notify	miner.h	/^	bool stratum_notify;$/;"	m	struct:pool	access:public
pool::stratum_port	miner.h	/^	char *stratum_port;$/;"	m	struct:pool	access:public
pool::stratum_q	miner.h	/^	struct thread_q *stratum_q;$/;"	m	struct:pool	typeref:struct:pool::thread_q	access:public
pool::stratum_rthread	miner.h	/^	pthread_t stratum_rthread;$/;"	m	struct:pool	access:public
pool::stratum_sthread	miner.h	/^	pthread_t stratum_sthread;$/;"	m	struct:pool	access:public
pool::stratum_url	miner.h	/^	char *stratum_url;$/;"	m	struct:pool	access:public
pool::submit_fail	miner.h	/^	bool submit_fail;$/;"	m	struct:pool	access:public
pool::submit_old	miner.h	/^	bool submit_old;$/;"	m	struct:pool	access:public
pool::submit_q	miner.h	/^	struct thread_q *submit_q;$/;"	m	struct:pool	typeref:struct:pool::thread_q	access:public
pool::swork	miner.h	/^	struct stratum_work swork;$/;"	m	struct:pool	typeref:struct:pool::stratum_work	access:public
pool::test_thread	miner.h	/^	pthread_t test_thread;$/;"	m	struct:pool	access:public
pool::testing	miner.h	/^	bool testing;$/;"	m	struct:pool	access:public
pool::transactions	miner.h	/^	int transactions;$/;"	m	struct:pool	access:public
pool::tv_idle	miner.h	/^	struct timeval tv_idle;$/;"	m	struct:pool	typeref:struct:pool::timeval	access:public
pool::tv_lastwork	miner.h	/^	struct timeval tv_lastwork;$/;"	m	struct:pool	typeref:struct:pool::timeval	access:public
pool::txn_data	miner.h	/^	char *txn_data;$/;"	m	struct:pool	access:public
pool::txn_hashes	miner.h	/^	unsigned char *txn_hashes;$/;"	m	struct:pool	access:public
pool::utility	miner.h	/^	double utility;$/;"	m	struct:pool	access:public
pool::works	miner.h	/^	int works;$/;"	m	struct:pool	access:public
pool_active	cgminer.c	/^static bool pool_active(struct pool *pool, bool pinging)$/;"	f	file:	signature:(struct pool *pool, bool pinging)
pool_died	cgminer.c	/^void pool_died(struct pool *pool)$/;"	f	signature:(struct pool *pool)
pool_died	miner.h	/^extern void pool_died(struct pool *pool);$/;"	p	signature:(struct pool *pool)
pool_enable	miner.h	/^enum pool_enable {$/;"	g
pool_localgen	cgminer.c	/^static bool pool_localgen(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
pool_localgen	cgminer.c	2700;"	d	file:
pool_lock	miner.h	/^	pthread_mutex_t pool_lock;$/;"	m	struct:pool	access:public
pool_no	driver-avalon2.h	/^	int pool_no;$/;"	m	struct:avalon2_info	access:public
pool_no	driver-hashratio.h	/^	int pool_no;$/;"	m	struct:hashratio_info	access:public
pool_no	miner.h	/^	int pool_no;$/;"	m	struct:pool	access:public
pool_resus	cgminer.c	/^static void pool_resus(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
pool_resus	cgminer.c	/^static void pool_resus(struct pool *pool);$/;"	p	file:	signature:(struct pool *pool)
pool_start_lp	cgminer.c	/^static void pool_start_lp(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
pool_strategy	cgminer.c	/^enum pool_strategy pool_strategy = POOL_FAILOVER;$/;"	v	typeref:enum:pool_strategy
pool_strategy	miner.h	/^enum pool_strategy {$/;"	g
pool_tclear	cgminer.c	/^bool pool_tclear(struct pool *pool, bool *var)$/;"	f	signature:(struct pool *pool, bool *var)
pool_tclear	miner.h	/^extern bool pool_tclear(struct pool *pool, bool *var);$/;"	p	signature:(struct pool *pool, bool *var)
pool_tset	cgminer.c	/^static bool pool_tset(struct pool *pool, bool *var)$/;"	f	file:	signature:(struct pool *pool, bool *var)
pool_unusable	cgminer.c	/^static bool pool_unusable(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
pool_unusable	cgminer.c	/^static bool pool_unusable(struct pool *pool);$/;"	p	file:	signature:(struct pool *pool)
pool_unworkable	cgminer.c	/^static bool pool_unworkable(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
poolcmd	miner.php	/^$poolcmd = array(	'Switch to'	=> 'switchpool',$/;"	v
pooldetails	api.c	/^static bool pooldetails(char *param, char **url, char **user, char **pass)$/;"	f	file:	signature:(char *param, char **url, char **user, char **pass)
poolinputs	miner.php	/^ if ($readonly === true || $poolinputs === false)$/;"	v
poolinputs	miner.php	/^$poolinputs = false;$/;"	v
poolpriority	api.c	/^static void poolpriority(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
poolquota	api.c	/^static void poolquota(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
pools	cgminer.c	/^struct pool **pools;$/;"	v	typeref:struct:pool
pools_active	cgminer.c	/^static bool pools_active = false;$/;"	v	file:
poolsext	miner.php	/^$poolsext = array($/;"	v
poolspage	miner.php	/^$poolspage = array($/;"	v
poolssum	miner.php	/^$poolssum = array($/;"	v
poolstatus	api.c	/^static void poolstatus(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
pop_curl_entry	cgminer.c	/^static struct curl_ent *pop_curl_entry(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
port	MCast.java	/^	private int port(String _port, String name)$/;"	m	class:MCast	file:	access:private	signature:(String _port, String name)
port	MCast.java	/^	static private int port = MCAST_PORT;$/;"	f	class:MCast	file:	access:private
port	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char port[127];	\/* port to device num mapping *\/$/;"	m	struct:usbfs_hub_portinfo	access:public
port	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t port;						\/\/ port number on the hub$/;"	m	struct:windows_device_priv	access:public
port	miner.php	/^					$port = $parts[1];$/;"	v
port	miner.php	/^					$port = '';$/;"	v
port	miner.php	/^			$port = $parts[1];$/;"	v
port	miner.php	/^			$port = '';$/;"	v
port	miner.php	/^	$port = $rigport;$/;"	v
port	miner.php	/^ $port = trim($port);$/;"	v
port	miner.php	/^$port = null;$/;"	v
pos	compat/jansson-2.6/src/load.c	/^    int pos;$/;"	m	struct:__anon19	file:	access:public
pos	compat/jansson-2.6/src/load.c	/^    size_t pos;$/;"	m	struct:__anon20	file:	access:public
pos	compat/jansson-2.6/src/load.c	/^    size_t pos;$/;"	m	struct:__anon21	file:	access:public
pos	compat/jansson-2.6/src/pack_unpack.c	/^    size_t pos;$/;"	m	struct:__anon14	file:	access:public
pos	compat/jansson-2.6/src/pack_unpack.c	/^    size_t pos;$/;"	m	struct:__anon15	file:	access:public
pos	miner.php	/^			$pos = strpos($field, '=');$/;"	v
position	compat/jansson-2.6/src/jansson.h	/^    int position;$/;"	m	struct:__anon28	access:public
position	compat/jansson-2.6/src/load.c	/^    size_t position;$/;"	m	struct:__anon16	file:	access:public
power_cycles	driver-minion.c	/^	uint64_t power_cycles;$/;"	m	struct:minion_info	file:	access:public
power_good	driver-avalon2.h	/^	int power_good[AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
power_temps	driver-cointerra.h	/^	uint16_t power_temps[2];$/;"	m	struct:cointerra_info	access:public
power_used	driver-cointerra.h	/^	uint16_t power_used;$/;"	m	struct:cointerra_info	access:public
power_voltage	driver-cointerra.h	/^	uint16_t power_voltage;$/;"	m	struct:cointerra_info	access:public
pr	miner.php	/^function pr(a,m){if(m!=null){if(!confirm(m+'?'))return}window.location='$here?ref=$autorefresh'+a}\\n";$/;"	f
preamble	hf_protocol.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_header	access:public
preamble	hf_protocol.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_usb_init_header	access:public
preamble	hf_protocol.h	/^	uint8_t  preamble;$/;"	m	struct:hf_pll_config	access:public
preamble	hf_protocol_be.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_header	access:public
preamble	hf_protocol_be.h	/^	uint8_t  preamble;                      \/\/ Always 0xaa$/;"	m	struct:hf_usb_init_header	access:public
preamble	hf_protocol_be.h	/^	uint8_t  preamble;$/;"	m	struct:hf_pll_config	access:public
prefix	driver-antrouter.c	/^	uint8_t prefix;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
prefix	driver-bmsc.c	/^	uint8_t prefix;$/;"	m	struct:BMSC_WORK	file:	access:public
prefix	driver-icarus.c	/^	uint8_t prefix;$/;"	m	struct:ICARUS_WORK	file:	access:public
prepare_clock	A1-board-selector.h	/^	bool (*prepare_clock)(int clock_khz);$/;"	m	struct:board_selector	access:public
prepare_work	miner.h	/^	bool (*prepare_work)(struct thr_info *, struct work *);$/;"	m	struct:device_drv	access:public
preprocess	miner.php	/^					$preprocess = $arg;$/;"	v
preprocess	miner.php	/^	$preprocess = null;$/;"	v
prev	api.c	/^	struct io_list *prev;$/;"	m	struct:io_list	typeref:struct:io_list::io_list	file:	access:public
prev	api.c	/^	struct lockline *prev;$/;"	m	struct:lockline	typeref:struct:lockline::lockline	file:	access:public
prev	compat/jansson-2.6/src/hashtable.h	/^    struct hashtable_list *prev;$/;"	m	struct:hashtable_list	typeref:struct:hashtable_list::hashtable_list	access:public
prev	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head *prev, *next;$/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
prev	driver-klondike.c	/^	struct klist *prev;$/;"	m	struct:klist	typeref:struct:klist::klist	file:	access:public
prev	elist.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::	access:public
prev	klist.h	/^	struct k_item *prev;$/;"	m	struct:k_item	typeref:struct:k_item::k_item	access:public
prev	miner.h	/^	struct api_data *prev;$/;"	m	struct:api_data	typeref:struct:api_data::api_data	access:public
prev	miner.php	/^		$prev = ($rig - 1) % count($rigs);$/;"	v
prev	miner.php	/^		$prev = null;$/;"	v
prev	miner.php	/^	$prev = null;$/;"	v
prev	usbutils.c	/^	struct usb_in_use_list *prev;$/;"	m	struct:usb_in_use_list	typeref:struct:usb_in_use_list::usb_in_use_list	file:	access:public
prev	uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
prev_block	cgminer.c	/^static char prev_block[12];$/;"	v	file:
prev_block	miner.h	/^	char prev_block[32];$/;"	m	struct:pool	access:public
prev_hash	miner.h	/^	char prev_hash[68];$/;"	m	struct:pool	access:public
prev_token	compat/jansson-2.6/src/pack_unpack.c	/^    token_t prev_token;$/;"	m	struct:__anon15	file:	access:public
prev_token	compat/jansson-2.6/src/pack_unpack.c	/^static void prev_token(scanner_t *s)$/;"	f	file:	signature:(scanner_t *s)
previousblockhash	miner.h	/^	unsigned char previousblockhash[32];$/;"	m	struct:pool	access:public
primary_thread	miner.h	/^	bool		primary_thread;$/;"	m	struct:thr_info	access:public
primes	compat/jansson-2.6/src/hashtable.c	/^static const size_t primes[] = {$/;"	v	file:
print_data	api.c	/^static struct api_data *print_data(struct io_data *io_data, struct api_data *root, bool isjson, bool precom)$/;"	f	file:	signature:(struct io_data *io_data, struct api_data *root, bool isjson, bool precom)
print_status	cgminer.c	/^static void print_status(int thr_id)$/;"	f	file:	signature:(int thr_id)
print_summary	cgminer.c	/^void print_summary(void)$/;"	f	signature:(void)
print_summary	miner.h	/^extern void print_summary(void);$/;"	p	signature:(void)
printf	ccan/opt/test/run-helpers.c	13;"	d	file:
prio	miner.h	/^	int prio;$/;"	m	struct:pool	access:public
priority_pool	cgminer.c	/^static struct pool *priority_pool(int choice)$/;"	f	file:	signature:(int choice)
priority_pool	cgminer.c	/^static struct pool *priority_pool(int choice);$/;"	p	file:	signature:(int choice)
privileged	api.c	/^void privileged(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
probe_pools	cgminer.c	/^static void probe_pools(void)$/;"	f	file:	signature:(void)
probed	miner.h	/^	bool probed;$/;"	m	struct:pool	access:public
proc	miner.php	/^	$proc = $ext[$section][$which];$/;"	v
process	API.java	/^	public void process(String cmd, InetAddress ip, int port) throws Exception$/;"	m	class:API	access:public	signature:(String cmd, InetAddress ip, int port)
process	miner.php	/^			$process = api($name, $cmd);$/;"	v
process	miner.php	/^	$process = api($rig, $cmd);$/;"	v
process	miner.php	/^function process($cmds, $rig)$/;"	f
process_history	driver-bab.c	/^static void process_history(struct cgpu_info *babcgpu, int chip, struct timeval *when, bool good, struct timeval *now)$/;"	f	file:	signature:(struct cgpu_info *babcgpu, int chip, struct timeval *when, bool good, struct timeval *now)
process_history	driver-icarus.c	/^static void process_history(struct cgpu_info *icarus, struct ICARUS_INFO *info, uint32_t nonce,$/;"	f	file:	signature:(struct cgpu_info *icarus, struct ICARUS_INFO *info, uint32_t nonce, uint64_t hash_count, struct timeval *elapsed, struct timeval *tv_start)
process_new_device	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int process_new_device (struct libusb_context *ctx, usb_device_t **device, UInt32 locationID) {$/;"	f	file:	signature:(struct libusb_context *ctx, usb_device_t **device, UInt32 locationID)
process_new_device	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int process_new_device (struct libusb_context *ctx, usb_device_t **device, UInt32 locationID);$/;"	p	file:	signature:(struct libusb_context *ctx, usb_device_t **device, UInt32 locationID)
process_nonce	driver-bab.c	/^static K_ITEM *process_nonce(struct thr_info *thr, struct cgpu_info *babcgpu, K_ITEM *ritem, uint32_t raw_nonce, K_ITEM *newest_witem)$/;"	f	file:	signature:(struct thr_info *thr, struct cgpu_info *babcgpu, K_ITEM *ritem, uint32_t raw_nonce, K_ITEM *newest_witem)
process_nonces	driver-bflsc.c	/^static void process_nonces(struct cgpu_info *bflsc, int dev, char *xlink, char *data, int count, char **fields, int *nonces)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev, char *xlink, char *data, int count, char **fields, int *nonces)
process_reply	driver-bab.c	/^	cgsem_t process_reply;$/;"	m	struct:bab_info	file:	access:public
process_results	driver-bflsc.c	/^static int process_results(struct cgpu_info *bflsc, int dev, char *pbuf, int *nonces, int *in_process)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev, char *pbuf, int *nonces, int *in_process)
processcompare	miner.php	/^function processcompare($which, $ext, $section, $res)$/;"	f
processcustompage	miner.php	/^function processcustompage($pagename, $sections, $sum, $ext, $namemap)$/;"	f
processext	miner.php	/^function processext($ext, $section, $res, &$fields)$/;"	f
processgpus	miner.php	/^function processgpus($rig)$/;"	f
processtime	driver-modminer.c	/^static const double processtime = 17.0;$/;"	v	file:
prod_string	usbutils.h	/^	char *prod_string;$/;"	m	struct:cg_usb_device	access:public
product	driver-bitfury.h	/^	char product[8];$/;"	m	struct:bitfury_info	access:public
product	driver-drillbit.c	/^	char product[8];$/;"	m	struct:__anon6	file:	access:public
product	driver-drillbit.h	/^  char product[8];$/;"	m	struct:drillbit_info	access:public
product	driver-klondike.c	/^	uint8_t product[7];$/;"	m	struct:klondike_id	file:	access:public
product_id	compat/libusb-1.0/libusb/hotplug.h	/^	int product_id;$/;"	m	struct:libusb_hotplug_callback	access:public
product_id	driver-icarus.c	/^	unsigned char product_id;$/;"	m	struct:rockminer_device_info	file:	access:public
progress	knc-asic.h	/^	uint32_t progress;$/;"	m	struct:knc_report	access:public
protocol	hf_protocol.h	/^	uint8_t  protocol:3;                    \/\/ Which protocol to use$/;"	m	struct:hf_usb_init_header	access:public
protocol	hf_protocol_be.h	/^	uint8_t  protocol:3;                    \/\/ Which protocol to use$/;"	m	struct:hf_usb_init_header	access:public
protocol_version	driver-drillbit.c	/^	uint8_t protocol_version;$/;"	m	struct:__anon6	file:	access:public
protocol_version	driver-drillbit.h	/^  uint8_t protocol_version;$/;"	m	struct:drillbit_info	access:public
protocol_version	driver-spondoolies-sp10-p.h	/^	uint8_t protocol_version;$/;"	m	struct:__anon46	access:public
protocol_version	driver-spondoolies-sp10-p.h	/^	uint8_t protocol_version;$/;"	m	struct:__anon47	access:public
protocol_version	driver-spondoolies-sp30-p.h	/^  uint8_t protocol_version;$/;"	m	struct:__anon66	access:public
protocol_version	driver-spondoolies-sp30-p.h	/^  uint8_t protocol_version;$/;"	m	struct:__anon67	access:public
protoext	miner.php	/^$protoext = array($/;"	v
protopage	miner.php	/^$protopage = array($/;"	v
protosum	miner.php	/^$protosum = array($/;"	v
prototypes	compat/jansson-2.6/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prototypes	compat/libusb-1.0/configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
proxynames	util.c	/^} proxynames[] = {$/;"	v	typeref:struct:__anon53	file:
proxytype	miner.h	/^extern const char *proxytype(proxytypes_t proxytype);$/;"	p	signature:(proxytypes_t proxytype)
proxytype	util.c	/^	proxytypes_t proxytype;$/;"	m	struct:__anon53	file:	access:public
proxytype	util.c	/^const char *proxytype(proxytypes_t proxytype)$/;"	f	signature:(proxytypes_t proxytype)
proxytypes_t	util.h	/^typedef curl_proxytype proxytypes_t;$/;"	t
proxytypes_t	util.h	/^typedef int proxytypes_t;$/;"	t
prs	miner.php	/^function prs(a,r){var c=a.substr(3);var z=c.split('|',2);var m=z[0].substr(0,1).toUpperCase()+z[0].substr(1)+' GPU '+z[1];prc(a+'&rig='+r,m)}$/;"	f
prs2	miner.php	/^function prs2(a,n,r){var v=document.getElementById('gi'+n).value;var c=a.substr(3);var z=c.split('|',2);var m='Set GPU '+z[1]+' '+z[0].substr(0,1).toUpperCase()+z[0].substr(1)+' to '+v;prc(a+','+v+'&rig='+r,m)}\\n";$/;"	f
prune_stratum_shares	cgminer.c	/^static void prune_stratum_shares(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
pth	miner.h	/^	pthread_t	pth;$/;"	m	struct:thr_info	access:public
ptr	api.c	/^	char *ptr;$/;"	m	struct:io_data	file:	access:public
pump_tachs	driver-cointerra.h	/^	uint16_t pump_tachs[CTA_PUMPS];$/;"	m	struct:cointerra_info	access:public
push_curl_entry	cgminer.c	/^static void push_curl_entry(struct curl_ent *ce, struct pool *pool)$/;"	f	file:	signature:(struct curl_ent *ce, struct pool *pool)
pwm_active_level	hf_protocol.h	/^	uint16_t pwm_active_level:1;                \/\/ Active level of PWM outputs, if used$/;"	m	struct:hf_config_data	access:public
pwm_active_level	hf_protocol_be.h	/^	uint16_t pwm_active_level:1;                \/\/ Active level of PWM outputs, if used$/;"	m	struct:hf_config_data	access:public
pwm_data	driver-avalon.h	/^	uint8_t pwm_data;$/;"	m	struct:avalon_result	access:public
pwm_period	hf_protocol.h	/^	uint16_t pwm_period;                        \/\/ Period of PWM outputs, in reference clock cycles$/;"	m	struct:hf_config_data	access:public
pwm_period	hf_protocol_be.h	/^	uint16_t pwm_period;                        \/\/ Period of PWM outputs, in reference clock cycles$/;"	m	struct:hf_config_data	access:public
pwm_phases	hf_protocol.h	/^	uint32_t pwm_phases:2;                      \/\/ phases - 1$/;"	m	struct:hf_config_data	access:public
pwm_phases	hf_protocol_be.h	/^	uint32_t pwm_phases:2;                      \/\/ phases - 1$/;"	m	struct:hf_config_data	access:public
pwm_pulse_period	hf_protocol.h	/^	uint16_t pwm_pulse_period;                  \/\/ Initial count, phase 0$/;"	m	struct:hf_config_data	access:public
pwm_pulse_period	hf_protocol_be.h	/^	uint16_t pwm_pulse_period;                  \/\/ Initial count, phase 0$/;"	m	struct:hf_config_data	access:public
q	miner.h	/^	struct list_head	q;$/;"	m	struct:thread_q	typeref:struct:thread_q::list_head	access:public
q	miner.h	/^	struct thread_q	*q;$/;"	m	struct:thr_info	typeref:struct:thr_info::thread_q	access:public
q_node	util.c	/^	struct list_head	q_node;$/;"	m	struct:tq_ent	typeref:struct:tq_ent::list_head	file:	access:public
qcond	driver-bitmain.h	/^	pthread_cond_t qcond;$/;"	m	struct:bitmain_info	access:public
qlock	driver-avalon.h	/^	pthread_mutex_t qlock;$/;"	m	struct:avalon_info	access:public
qlock	driver-bitmain.h	/^	pthread_mutex_t qlock;$/;"	m	struct:bitmain_info	access:public
qlock	miner.h	/^	pthread_rwlock_t qlock;$/;"	m	struct:cgpu_info	access:public
qsem	driver-avalon.h	/^	cgsem_t qsem;$/;"	m	struct:avalon_info	access:public
que_bands	driver-minion.c	/^	uint64_t que_bands[TIME_BANDS+1];$/;"	m	struct:minion_info	file:	access:public
que_fld_max	driver-bflsc.h	/^	int que_fld_max;$/;"	m	struct:bflsc_info	access:public
que_fld_min	driver-bflsc.h	/^	int que_fld_min;$/;"	m	struct:bflsc_info	access:public
que_full_enough	driver-bflsc.h	/^	int que_full_enough;$/;"	m	struct:bflsc_info	access:public
que_low	driver-bflsc.h	/^	int que_low;$/;"	m	struct:bflsc_info	access:public
que_max	driver-minion.c	/^	double que_max;$/;"	m	struct:minion_info	file:	access:public
que_min	driver-minion.c	/^	double que_min;$/;"	m	struct:minion_info	file:	access:public
que_noncecount	driver-bflsc.h	/^	int que_noncecount;$/;"	m	struct:bflsc_info	access:public
que_size	driver-bflsc.h	/^	int que_size;$/;"	m	struct:bflsc_info	access:public
que_time	driver-minion.c	/^	double que_time;$/;"	m	struct:minion_info	file:	access:public
que_watermark	driver-bflsc.h	/^	int que_watermark;$/;"	m	struct:bflsc_info	access:public
que_work	driver-minion.c	/^	uint64_t que_work;$/;"	m	struct:minion_info	file:	access:public
queue_full	miner.h	/^	bool (*queue_full)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
queued	miner.h	/^	int queued;$/;"	m	struct:cgpu_info	access:public
queued_count	miner.h	/^	unsigned int queued_count;$/;"	m	struct:cgpu_info	access:public
queued_work	miner.h	/^	struct work *queued_work;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::work	access:public
quework	driver-minion.c	/^	uint32_t quework;$/;"	m	struct:minion_status	file:	access:public
quit	logging.h	76;"	d
quit_restart_lock	api.c	/^static pthread_mutex_t quit_restart_lock;$/;"	v	file:
quit_thread	api.c	/^static void *quit_thread(__maybe_unused void *userdata)$/;"	f	file:	signature:(__maybe_unused void *userdata)
quitfrom	logging.h	104;"	d
quithere	logging.h	94;"	d
quota	miner.h	/^	int quota;$/;"	m	struct:pool	access:public
quota_gcd	miner.h	/^	int quota_gcd;$/;"	m	struct:pool	access:public
quota_used	miner.h	/^	int quota_used;$/;"	m	struct:pool	access:public
r	api-example.php	/^ $r = request($argv[1]);$/;"	v
r	api-example.php	/^ $r = request('summary');$/;"	v
raise	lib/sigprocmask.c	309;"	d	file:
rangesize	driver-klondike.c	/^	uint32_t rangesize;$/;"	m	struct:device_info	file:	access:public
ratio	miner.php	/^				$ratio = $alldata['Utility'] \/ $expected;$/;"	v
ratio	miner.php	/^				$ratio = $value \/ $expected;$/;"	v
raw_hashes	driver-hashfast.h	/^	uint64_t raw_hashes;$/;"	m	struct:hashfast_info	access:public
rawmemchr	lib/string.in.h	/^_GL_CXXALIASWARN (rawmemchr);$/;"	v
rawmemchr	lib/string.in.h	208;"	d
rbox_corr_values	driver-icarus.c	/^static int32_t rbox_corr_values[] = {0, 1, -1, -2, -4};$/;"	v	file:
rbox_corr_values	driver-icarus.c	/^static int32_t rbox_corr_values[] = {0, 1, -1, 2, -2, 3, -3, 4, -4};$/;"	v	file:
rbox_corr_values	driver-icarus.c	/^static int32_t rbox_corr_values[] = {0, 1, -1};$/;"	v	file:
rbuf	driver-bab.c	/^	uint8_t rbuf[BAB_MAXBUF];$/;"	m	struct:sitem	file:	access:public
rbuf	driver-minion.c	/^	uint8_t rbuf[MINION_BUFSIZ];$/;"	m	struct:task_item	file:	access:public
rc	compat/libusb-1.0/libusb/libusb.h	/^	const char *rc;$/;"	m	struct:libusb_version	access:public
rd_lock	miner.h	777;"	d
rd_unlock	miner.h	781;"	d
rd_unlock_noyield	miner.h	779;"	d
rdata2	usbtest.py	/^	rdata2  = block.decode('hex')[95:63:-1]$/;"	v
read	i2c-context.h	/^	bool (*read)(struct i2c_ctx *ctx, uint8_t reg, uint8_t *val);$/;"	m	struct:i2c_ctx	access:public
read_buffer	driver-knc.c	/^	int read_buffer;$/;"	m	struct:knc_state	file:	access:public
read_buffer_count	driver-knc.c	/^	int read_buffer_count;$/;"	m	struct:knc_state	file:	access:public
read_delay_count	usbutils.h	/^	uint64_t read_delay_count;$/;"	m	struct:cg_usb_info	access:public
read_string	compat/jansson-2.6/src/pack_unpack.c	/^static char *read_string(scanner_t *s, va_list *ap,$/;"	f	file:	signature:(scanner_t *s, va_list *ap, const char *purpose, int *ours)
read_thr	driver-avalon.h	/^	pthread_t read_thr;$/;"	m	struct:avalon_info	access:public
read_thr	driver-bitfury.h	/^	pthread_t read_thr;$/;"	m	struct:bitfury_info	access:public
read_thr	driver-bitmain.h	/^	pthread_t read_thr;$/;"	m	struct:bitmain_info	access:public
read_thr	driver-cointerra.h	/^	pthread_t read_thr;$/;"	m	struct:cointerra_info	access:public
read_thr	driver-hashfast.h	/^	pthread_t read_thr;$/;"	m	struct:hashfast_info	access:public
read_time	driver-antrouter.c	/^	int read_time;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
read_time	driver-bmsc.c	/^	int read_time;$/;"	m	struct:BMSC_INFO	file:	access:public
read_time	driver-icarus.c	/^	int read_time;$/;"	m	struct:ICARUS_INFO	file:	access:public
read_time_limit	driver-antrouter.c	/^	int read_time_limit;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
read_time_limit	driver-bmsc.c	/^	int read_time_limit;$/;"	m	struct:BMSC_INFO	file:	access:public
read_time_limit	driver-icarus.c	/^	int read_time_limit;$/;"	m	struct:ICARUS_INFO	file:	access:public
readonly	miner.php	/^			$readonly = true;$/;"	v
readonly	miner.php	/^		$readonly = true;$/;"	v
readonly	miner.php	/^	if ($cmd == 'pools' && $readonly === false)$/;"	v
readonly	miner.php	/^ $readonly = true;$/;"	v
readonly	miner.php	/^ if ($haderror == false && $readonly === false)$/;"	v
readonly	miner.php	/^ if ($rig !== null && $readonly === false)$/;"	v
readonly	miner.php	/^$readonly = false;$/;"	v
readsockline	api-example.php	/^function readsockline($socket)$/;"	f
readsockline	miner.php	/^function readsockline($socket)$/;"	f
ready	MCast.java	/^	static private boolean ready = false;$/;"	f	class:MCast	file:	access:private
ready	driver-klondike.c	/^	bool ready;$/;"	m	struct:klist	file:	access:public
ready_work	driver-minion.c	/^static void ready_work(struct cgpu_info *minioncgpu, struct work *work, bool rolled)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct work *work, bool rolled)
real	compat/jansson-2.6/src/load.c	/^        double real;$/;"	m	union:__anon17::__anon18	file:	access:public
realloc_strcat	util.c	/^void *realloc_strcat(char *ptr, char *s)$/;"	f	signature:(char *ptr, char *s)
realloc_strcat	util.h	/^void *realloc_strcat(char *ptr, char *s);$/;"	p	signature:(char *ptr, char *s)
realwork	driver-minion.c	/^	uint32_t realwork; \/\/ FIFO_STA$/;"	m	struct:minion_status	file:	access:public
reap_action	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	enum reap_action reap_action;$/;"	m	struct:linux_transfer_priv	typeref:enum:linux_transfer_priv::reap_action	file:	access:public
reap_action	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^enum reap_action {$/;"	g	file:
reap_curl	cgminer.c	/^static void reap_curl(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
reap_for_handle	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int reap_for_handle(struct libusb_device_handle *handle)$/;"	f	file:	signature:(struct libusb_device_handle *handle)
reap_status	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	enum libusb_transfer_status reap_status;$/;"	m	struct:linux_transfer_priv	typeref:enum:linux_transfer_priv::libusb_transfer_status	file:	access:public
rear_temp_bot	driver-spondoolies-sp10.h	/^	int rear_temp_bot;$/;"	m	struct:spond_adapter	access:public
rear_temp_bot	driver-spondoolies-sp30.h	/^	int rear_temp_bot;$/;"	m	struct:spond_adapter	access:public
rear_temp_top	driver-spondoolies-sp10.h	/^	int rear_temp_top;$/;"	m	struct:spond_adapter	access:public
rear_temp_top	driver-spondoolies-sp30.h	/^	int rear_temp_top;$/;"	m	struct:spond_adapter	access:public
reason	util.c	/^	char		*reason;$/;"	m	struct:header_info	file:	access:public
rebuild_nonce	cgminer.c	/^static void rebuild_nonce(struct work *work, uint32_t nonce)$/;"	f	file:	signature:(struct work *work, uint32_t nonce)
recalloc	util.h	145;"	d
recalloc_sock	util.c	/^static void recalloc_sock(struct pool *pool, size_t len)$/;"	f	file:	signature:(struct pool *pool, size_t len)
record_temp_fan	driver-avalon.c	/^static inline void record_temp_fan(struct cgpu_info *avalon, struct avalon_info *info,$/;"	f	file:	signature:(struct cgpu_info *avalon, struct avalon_info *info, struct avalon_result *ar)
record_temp_fan	driver-bitmain.c	/^static inline void record_temp_fan(struct bitmain_info *info, struct bitmain_rxstatus_data *bm, double *temp_avg)$/;"	f	file:	signature:(struct bitmain_info *info, struct bitmain_rxstatus_data *bm, double *temp_avg)
recruit_curl	cgminer.c	/^static void recruit_curl(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
recv_byte	util.c	/^static int recv_byte(int sockd)$/;"	f	file:	signature:(int sockd)
recv_line	util.c	/^char *recv_line(struct pool *pool)$/;"	f	signature:(struct pool *pool)
recv_line	util.h	/^char *recv_line(struct pool *pool);$/;"	p	signature:(struct pool *pool)
ref	miner.php	/^	$ref = trim(getparam('ref', true));$/;"	v
ref_clk_khz	A1-common.h	/^	int ref_clk_khz;$/;"	m	struct:A1_config_options	access:public
ref_frequency	driver-hashfast.c	/^	uint8_t ref_frequency;$/;"	m	struct:hf_settings_data	file:	access:public
ref_frequency	driver-hashfast.h	/^	int ref_frequency;                          \/\/ Reference clock rate$/;"	m	struct:hashfast_info	access:public
refcnt	compat/libusb-1.0/libusb/libusbi.h	/^	int refcnt;$/;"	m	struct:libusb_device	access:public
refcount	compat/jansson-2.6/src/jansson.h	/^    size_t refcount;$/;"	m	struct:json_t	access:public
refresh	miner.php	/^		$refresh = "&pg=$pg";$/;"	v
refresh	miner.php	/^		$refresh = '';$/;"	v
refresh	miner.php	/^	$refresh = "&rig=$rig";$/;"	v
refreshbuttons	miner.php	/^function refreshbuttons()$/;"	f
refreshmeta	miner.php	/^	$refreshmeta = "\\n<meta http-equiv='refresh' content='$autorefresh;url=$url'>";$/;"	v
refreshmeta	miner.php	/^	$refreshmeta = '';$/;"	v
reg	driver-minion.c	/^	uint8_t reg;$/;"	m	struct:minion_header	file:	access:public
reg_address	driver-bitmain.h	/^	uint8_t reg_address;$/;"	m	struct:bitmain_rxstatus_token	access:public
reg_address	driver-bitmain.h	/^	uint8_t reg_address;$/;"	m	struct:bitmain_txconfig_token	access:public
reg_char	lib/memchr.c	37;"	d	file:
reg_data	driver-bitmain.h	/^	uint8_t reg_data[4];$/;"	m	struct:bitmain_info	access:public
reg_data	driver-bitmain.h	/^	uint8_t reg_data[4];$/;"	m	struct:bitmain_txconfig_token	access:public
reg_prop	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const DWORD reg_prop;		\/\/ SPDRP registry key to use to retreive list$/;"	m	struct:driver_lookup	access:public
reg_value	driver-bitmain.h	/^	uint32_t reg_value;$/;"	m	struct:bitmain_rxstatus_data	access:public
regen_hash	cgminer.c	/^static void regen_hash(struct work *work)$/;"	f	file:	signature:(struct work *work)
register_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb.c	8;"	d	file:
register_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb_postargs.c	7;"	d	file:
register_callback	ccan/typesafe_cb/test/compile_fail-typesafe_cb_preargs.c	8;"	d	file:
register_callback	ccan/typesafe_cb/test/compile_ok-typesafe_cb-NULL.c	10;"	d	file:
register_callback	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	10;"	d	file:
register_callback	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	10;"	d	file:
register_callback_post	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	24;"	d	file:
register_callback_post	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	24;"	d	file:
register_callback_pre	ccan/typesafe_cb/test/compile_ok-typesafe_cb-undefined.c	17;"	d	file:
register_callback_pre	ccan/typesafe_cb/test/compile_ok-typesafe_cb-vars.c	17;"	d	file:
reinit_device	cgminer.c	/^void reinit_device(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
reinit_device	miner.h	/^	void (*reinit_device)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
reinit_device	miner.h	/^extern void reinit_device(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
reject_pool	cgminer.c	/^static void reject_pool(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
rejected	miner.h	/^	int rejected;$/;"	m	struct:cgpu_info	access:public
rejected	miner.h	/^	int64_t accepted, rejected;$/;"	m	struct:pool	access:public
rejected_inc	usbutils.c	/^static void rejected_inc(struct cgpu_info *cgpu, uint32_t mode)$/;"	f	file:	signature:(struct cgpu_info *cgpu, uint32_t mode)
release	A1-board-selector.h	/^	void (*release)(void);$/;"	m	struct:board_selector	access:public
release_cgpu	usbutils.c	/^static void release_cgpu(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
release_gbt_curl	cgminer.c	/^static inline void release_gbt_curl(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
release_interface	compat/libusb-1.0/libusb/libusbi.h	/^	int (*release_interface)(struct libusb_device_handle *handle, int interface_number);$/;"	m	struct:usbi_os_backend	access:public
release_interface	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*release_interface)(struct libusb_device_handle *dev_handle, int iface);$/;"	m	struct:windows_usb_api_backend	access:public
release_kitem	driver-klondike.c	/^static KLIST *release_kitem(struct cgpu_info *klncgpu, KLIST *kitem)$/;"	f	file:	signature:(struct cgpu_info *klncgpu, KLIST *kitem)
remotefail_occasions	miner.h	/^	unsigned int remotefail_occasions;$/;"	m	struct:pool	access:public
remove_in_use	usbutils.c	/^static void remove_in_use(uint8_t bus_number, uint8_t device_address)$/;"	f	file:	signature:(uint8_t bus_number, uint8_t device_address)
remove_pool	cgminer.c	/^void remove_pool(struct pool *pool)$/;"	f	signature:(struct pool *pool)
remove_pool	miner.h	/^extern void remove_pool(struct pool *pool);$/;"	p	signature:(struct pool *pool)
removed	miner.h	/^	bool removed;$/;"	m	struct:pool	access:public
removepool	api.c	/^static void removepool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
rep	miner.php	/^	$rep = '0';$/;"	v
rep	miner.php	/^ $rep = preg_replace('\/0*$\/', '', $num);$/;"	v
rep_soc	miner.php	/^ $rep_soc = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);$/;"	v
rep_soc	miner.php	/^ if ($rep_soc === false || $rep_soc == null)$/;"	v
replies_thr	driver-klondike.c	/^	struct thr_info replies_thr;$/;"	m	struct:klondike_info	typeref:struct:klondike_info::thr_info	file:	access:public
reply	driver-minion.c	/^	int reply;$/;"	m	struct:task_item	file:	access:public
reply_wait	driver-bab.c	/^	int reply_wait;$/;"	m	struct:bab_info	file:	access:public
reply_waits	driver-bab.c	/^	uint64_t reply_waits;$/;"	m	struct:bab_info	file:	access:public
report	MCast.java	/^	static private int report = MCAST_REPORT;$/;"	f	class:MCast	file:	access:private
report	driver-knc.c	/^	struct knc_report report;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::knc_report	file:	access:public
req	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOUSBDevRequest req;$/;"	m	struct:darwin_transfer_priv	access:public
req	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOUSBDevRequestTO req;$/;"	m	struct:darwin_transfer_priv	access:public
req	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} req;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT	typeref:struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31	access:public
req	driver-spondoolies-sp10-p.h	/^	minergate_do_job_req req[MAX_REQUESTS]; \/\/ array of requests$/;"	m	struct:__anon46	access:public
req	driver-spondoolies-sp30-p.h	/^  minergate_do_job_req_sp30 req[MAX_REQUESTS_SP30]; \/\/ array of requests$/;"	m	struct:__anon66	access:public
req_count	driver-spondoolies-sp10-p.h	/^	uint16_t req_count;$/;"	m	struct:__anon46	access:public
req_count	driver-spondoolies-sp30-p.h	/^  uint16_t req_count;$/;"	m	struct:__anon66	access:public
request	api-example.php	/^function request($cmd)$/;"	f
request	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  request;$/;"	m	struct:__anon37	access:public
request	driver-bab.c	/^	int request;$/;"	m	struct:__anon60	file:	access:public
request	driver-minion.c	/^	int request;$/;"	m	struct:__anon49	file:	access:public
request_count	compat/libusb-1.0/libusb/os/windows_usb.c	/^volatile LONG request_count[2] = {0, 1};	\/\/ last one must be > 0$/;"	v
request_id	driver-spondoolies-sp10-p.h	/^	uint8_t request_id;$/;"	m	struct:__anon46	access:public
request_id	driver-spondoolies-sp10-p.h	/^	uint8_t request_id;$/;"	m	struct:__anon47	access:public
request_id	driver-spondoolies-sp30-p.h	/^  uint8_t request_id;$/;"	m	struct:__anon66	access:public
request_id	driver-spondoolies-sp30-p.h	/^  uint8_t request_id;$/;"	m	struct:__anon67	access:public
request_length	driver-knc.c	/^			int request_length;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
request_type	compat/libusb-1.0/libusb/os/windows_usb.h	/^  UCHAR  request_type;$/;"	m	struct:__anon37	access:public
requested	driver-cointerra.h	/^	int requested;$/;"	m	struct:cointerra_info	access:public
requester_id	driver-spondoolies-sp10-p.h	/^	uint8_t requester_id;$/;"	m	struct:__anon46	access:public
requester_id	driver-spondoolies-sp10-p.h	/^	uint8_t requester_id;$/;"	m	struct:__anon47	access:public
requester_id	driver-spondoolies-sp30-p.h	/^  uint8_t requester_id;$/;"	m	struct:__anon66	access:public
requester_id	driver-spondoolies-sp30-p.h	/^  uint8_t requester_id;$/;"	m	struct:__anon67	access:public
res	api-example.php	/^ $res = socket_connect($socket, $addr, $port);$/;"	v
res	driver-spondoolies-sp10-p.h	/^	uint8_t  res;            \/\/ 0 = done, 1 = overflow, 2 = dropped bist$/;"	m	struct:__anon45	access:public
res	driver-spondoolies-sp30-p.h	/^  uint8_t res; \/\/ 0 = done, 1 = overflow, 2 = dropped bist$/;"	m	struct:__anon65	access:public
res	miner.php	/^		$res = $res2;$/;"	v
res	miner.php	/^		$res = array('' => $res2);$/;"	v
res	miner.php	/^ $res = '';$/;"	v
res	miner.php	/^ $res = processcompare('where', $ext, $section, $res);$/;"	v
res	miner.php	/^ $res = socket_bind($rep_soc, $listname, $mcastlistport);$/;"	v
res	miner.php	/^ $res = socket_connect($socket, $addr, $port);$/;"	v
res2	miner.php	/^		$res2 = array();$/;"	v
res_err_count	driver-minion.c	/^	int res_err_count[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
res_item	driver-minion.c	/^typedef struct res_item {$/;"	s	file:
res_item::another	driver-minion.c	/^	bool another;$/;"	m	struct:res_item	file:	access:public
res_item::chip	driver-minion.c	/^	int chip;$/;"	m	struct:res_item	file:	access:public
res_item::core	driver-minion.c	/^	int core;$/;"	m	struct:res_item	file:	access:public
res_item::no_nonce	driver-minion.c	/^	bool no_nonce;$/;"	m	struct:res_item	file:	access:public
res_item::nonce	driver-minion.c	/^	uint32_t nonce;$/;"	m	struct:res_item	file:	access:public
res_item::nonce2	driver-minion.c	/^	uint32_t nonce2;$/;"	m	struct:res_item	file:	access:public
res_item::task_id	driver-minion.c	/^	uint32_t task_id;$/;"	m	struct:res_item	file:	access:public
res_item::task_id2	driver-minion.c	/^	uint32_t task_id2;$/;"	m	struct:res_item	file:	access:public
res_item::when	driver-minion.c	/^	struct timeval when;$/;"	m	struct:res_item	typeref:struct:res_item::timeval	file:	access:public
res_list	driver-bab.c	/^	K_STORE *res_list;$/;"	m	struct:bab_info	file:	access:public
res_reply_head	usbutils.c	/^struct resource_reply *res_reply_head = NULL;$/;"	v	typeref:struct:resource_reply
res_spi_errors	driver-minion.c	/^	uint64_t res_spi_errors[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
res_thr	driver-bab.c	/^	struct thr_info res_thr;$/;"	m	struct:bab_info	typeref:struct:bab_info::thr_info	file:	access:public
res_thr	driver-minion.c	/^	struct thr_info res_thr;$/;"	m	struct:minion_info	typeref:struct:minion_info::thr_info	file:	access:public
res_work_head	usbutils.c	/^struct resource_work *res_work_head = NULL;$/;"	v	typeref:struct:resource_work
reserved	driver-minion.c	/^	uint8_t reserved[2];$/;"	m	struct:minion_que	file:	access:public
reserved1	driver-bitmain.h	/^	uint8_t reserved1            :3;$/;"	m	struct:bitmain_rxstatus_data	access:public
reserved1	driver-bitmain.h	/^	uint8_t reserved1            :6;$/;"	m	struct:bitmain_rxstatus_token	access:public
reserved1	driver-bitmain.h	/^	uint8_t reserved1            :6;$/;"	m	struct:bitmain_txconfig_token	access:public
reserved1	driver-bitmain.h	/^	uint8_t reserved1            :7;$/;"	m	struct:bitmain_txtask_token	access:public
reserved2	driver-bitmain.h	/^	uint8_t reserved2;$/;"	m	struct:bitmain_txconfig_token	access:public
reserved2	driver-bitmain.h	/^	uint8_t reserved2[3];$/;"	m	struct:bitmain_rxstatus_token	access:public
reset	A1-board-selector.h	/^	bool (*reset)(void);$/;"	m	struct:board_selector	access:public
reset	ccan/opt/test/run-checkopt.c	/^static void reset(void)$/;"	f	file:	signature:(void)
reset	driver-avalon.h	/^	bool reset;$/;"	m	struct:avalon_info	access:public
reset	driver-avalon.h	/^	uint8_t reset		:1;$/;"	m	struct:avalon_task	access:public
reset	driver-bitmain.h	/^	bool reset;$/;"	m	struct:bitmain_info	access:public
reset	driver-bitmain.h	/^	uint8_t reset                :1;$/;"	m	struct:bitmain_txconfig_token	access:public
reset2_count	driver-minion.c	/^	int reset2_count[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
reset2_mark	driver-minion.c	/^	K_ITEM *reset2_mark[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
reset2_time	driver-minion.c	/^	int reset2_time[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
reset_all	A1-board-selector.h	/^	bool (*reset_all)(void);$/;"	m	struct:board_selector	access:public
reset_count	driver-minion.c	/^	int reset_count[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
reset_device	compat/libusb-1.0/libusb/libusbi.h	/^	int (*reset_device)(struct libusb_device_handle *handle);$/;"	m	struct:usbi_os_backend	access:public
reset_device	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*reset_device)(struct libusb_device_handle *dev_handle);$/;"	m	struct:windows_usb_api_backend	access:public
reset_mark	driver-minion.c	/^	K_ITEM *reset_mark[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
reset_mg_queue	driver-spondoolies-sp10.h	/^	int reset_mg_queue;  \/\/ 2=reset, 1=fast send, 0=nada$/;"	m	struct:spond_adapter	access:public
reset_mg_queue	driver-spondoolies-sp30.h	/^	int reset_mg_queue;  \/\/ 3=reset, 2=fast send 1 job, 1=fast send 10 jobs, 0=nada$/;"	m	struct:spond_adapter	access:public
reset_options	ccan/opt/test/run-helpers.c	/^static void reset_options(void)$/;"	f	file:	signature:(void)
reset_options	ccan/opt/test/run-iter.c	/^static void reset_options(void)$/;"	f	file:	signature:(void)
reset_options	ccan/opt/test/run-usage.c	/^static void reset_options(void)$/;"	f	file:	signature:(void)
reset_options	ccan/opt/test/run.c	/^static void reset_options(void)$/;"	f	file:	signature:(void)
reset_overlapped	compat/libusb-1.0/libusb/os/poll_windows.c	/^void reset_overlapped(OVERLAPPED *overlapped)$/;"	f	signature:(OVERLAPPED *overlapped)
reset_sem	driver-cointerra.h	/^	cgsem_t reset_sem;$/;"	m	struct:cointerra_info	access:public
reset_time	driver-minion.c	/^	int reset_time[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
resets	driver-hashfast.h	/^	int resets;$/;"	m	struct:hashfast_info	access:public
resource1	usbutils.c	/^	void *resource1;$/;"	m	struct:usb_busdev	file:	access:public
resource2	usbutils.c	/^	void *resource2;$/;"	m	struct:usb_busdev	file:	access:public
resource_lock	usbutils.c	/^static bool resource_lock(const char *dname, uint8_t bus_number, uint8_t device_address)$/;"	f	file:	signature:(const char *dname, uint8_t bus_number, uint8_t device_address)
resource_process	usbutils.c	/^static void resource_process()$/;"	f	file:
resource_reply	usbutils.c	/^struct resource_reply {$/;"	s	file:
resource_reply::bus_number	usbutils.c	/^	uint8_t bus_number;$/;"	m	struct:resource_reply	file:	access:public
resource_reply::device_address	usbutils.c	/^	uint8_t device_address;$/;"	m	struct:resource_reply	file:	access:public
resource_reply::got	usbutils.c	/^	bool got;$/;"	m	struct:resource_reply	file:	access:public
resource_reply::next	usbutils.c	/^	struct resource_reply *next;$/;"	m	struct:resource_reply	typeref:struct:resource_reply::resource_reply	file:	access:public
resource_unlock	usbutils.c	/^static void resource_unlock(const char *dname, uint8_t bus_number, uint8_t device_address)$/;"	f	file:	signature:(const char *dname, uint8_t bus_number, uint8_t device_address)
resource_work	usbutils.c	/^struct resource_work {$/;"	s	file:
resource_work::bus_number	usbutils.c	/^	uint8_t bus_number;$/;"	m	struct:resource_work	file:	access:public
resource_work::device_address	usbutils.c	/^	uint8_t device_address;$/;"	m	struct:resource_work	file:	access:public
resource_work::dname	usbutils.c	/^	const char *dname;$/;"	m	struct:resource_work	file:	access:public
resource_work::lock	usbutils.c	/^	bool lock;$/;"	m	struct:resource_work	file:	access:public
resource_work::next	usbutils.c	/^	struct resource_work *next;$/;"	m	struct:resource_work	typeref:struct:resource_work::resource_work	file:	access:public
resp_hdr_cb	util.c	/^static size_t resp_hdr_cb(void *ptr, size_t size, size_t nmemb, void *user_data)$/;"	f	file:	signature:(void *ptr, size_t size, size_t nmemb, void *user_data)
response	api-example.py	/^response = json.loads(response)$/;"	v
response	api-example.py	/^response = linesplit(s)$/;"	v
response	api-example.py	/^response = response.replace('\\x00','')$/;"	v
response_info	driver-knc.c	/^		} response_info[MAX_SPI_RESPONSES];$/;"	m	struct:knc_state::knc_spi_buffer	typeref:struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
response_length	driver-knc.c	/^			int response_length;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	file:	access:public
responses	driver-knc.c	/^		int responses;$/;"	m	struct:knc_state::knc_spi_buffer	file:	access:public
resr1	driver-spondoolies-sp10-p.h	/^	uint8_t resr1;$/;"	m	struct:__anon44	access:public
resr1	driver-spondoolies-sp30-p.h	/^  uint8_t resr1;$/;"	m	struct:__anon64	access:public
resr2	driver-spondoolies-sp30-p.h	/^  uint8_t resr2;$/;"	m	struct:__anon64	access:public
resrv1	driver-spondoolies-sp10-p.h	/^	uint8_t  resrv1;$/;"	m	struct:__anon45	access:public
resrv2	driver-spondoolies-sp10-p.h	/^	uint8_t  resrv2;$/;"	m	struct:__anon45	access:public
resrv2	driver-spondoolies-sp30-p.h	/^  uint8_t resrv2; $/;"	m	struct:__anon65	access:public
restart_cond	cgminer.c	/^pthread_cond_t restart_cond;$/;"	v
restart_lock	cgminer.c	/^pthread_mutex_t restart_lock;$/;"	v
restart_stratum	util.c	/^bool restart_stratum(struct pool *pool)$/;"	f	signature:(struct pool *pool)
restart_stratum	util.h	/^bool restart_stratum(struct pool *pool);$/;"	p	signature:(struct pool *pool)
restart_thread	api.c	/^static void *restart_thread(__maybe_unused void *userdata)$/;"	f	file:	signature:(__maybe_unused void *userdata)
restart_thread	cgminer.c	/^static void *restart_thread(void __maybe_unused *arg)$/;"	f	file:	signature:(void __maybe_unused *arg)
restart_threads	cgminer.c	/^static void restart_threads(void)$/;"	f	file:	signature:(void)
restart_threads	cgminer.c	/^static void restart_threads(void);$/;"	p	file:	signature:(void)
restart_tv_start	cgminer.c	/^static struct timeval restart_tv_start, update_tv_start;$/;"	v	typeref:struct:timeval	file:
restart_wait	cgminer.c	/^int restart_wait(struct thr_info *thr, unsigned int mstime)$/;"	f	signature:(struct thr_info *thr, unsigned int mstime)
restart_wait	miner.h	/^extern int restart_wait(struct thr_info *thr, unsigned int mstime);$/;"	p	signature:(struct thr_info *thr, unsigned int mstime)
restorework	driver-minion.c	/^static void restorework(struct minion_info *minioninfo, int chip, K_ITEM *item)$/;"	f	file:	signature:(struct minion_info *minioninfo, int chip, K_ITEM *item)
result	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  IOReturn result;$/;"	m	struct:darwin_msg_async_io_complete	access:public
result_id	driver-bflsc.h	/^	uint64_t result_id; \/\/ counter when results were last checked$/;"	m	struct:bflsc_dev	access:public
result_interrupts	driver-minion.c	/^	uint64_t result_interrupts;$/;"	m	struct:minion_info	file:	access:public
result_size	driver-bflsc.h	/^	uint64_t result_size[QUE_MAX_RESULTS+2];$/;"	m	struct:bflsc_info	access:public
results	miner.h	/^	int results;$/;"	m	struct:cgpu_info	access:public
results	miner.php	/^ $results = array();$/;"	v
results_sleep_time	driver-bflsc.h	/^	unsigned int results_sleep_time;$/;"	m	struct:bflsc_info	access:public
results_thr	driver-bflsc.h	/^	struct thr_info results_thr;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::thr_info	access:public
ret	miner.php	/^					$ret = sprintf("%dday$days$b%02dh$b%02dm$b%02ds", $value, $h, $m, $s);$/;"	v
ret	miner.php	/^					$ret = sprintf("%dh$b%02dm$b%02ds", $h, $m, $s);$/;"	v
ret	miner.php	/^				$ret = '&nbsp;';$/;"	v
ret	miner.php	/^				$ret = 'Never';$/;"	v
ret	miner.php	/^				$ret = date('H:i:s d-M', $value);$/;"	v
ret	miner.php	/^				$ret = date('H:i:s', $value);$/;"	v
ret	miner.php	/^				$ret = sprintf("%dm$b%02ds", $m, $s);$/;"	v
ret	miner.php	/^			$ret = $s.'s';$/;"	v
ret	miner.php	/^			$ret = 'Never';$/;"	v
ret	miner.php	/^			$ret = 'None';$/;"	v
ret	miner.php	/^			$ret = ($value - $when) . 's';$/;"	v
ret	miner.php	/^			$ret = date('H:i:s', $value);$/;"	v
ret	miner.php	/^			$ret = number_format((float)$value * 100.0, 2) . '%';$/;"	v
ret	miner.php	/^			$ret = number_format((float)$value * 100.0, 3) . '%';$/;"	v
ret	miner.php	/^			$ret = number_format((float)$value);$/;"	v
ret	miner.php	/^			$ret = number_format((float)$value, 2) . '%';$/;"	v
ret	miner.php	/^			$ret = number_format((float)$value, 2);$/;"	v
ret	miner.php	/^		$ret = $value.'&deg;C';$/;"	v
ret	miner.php	/^		$ret = date($dfmt, $value);$/;"	v
ret	miner.php	/^		$ret = number_format($value, 2).'\/m';$/;"	v
ret	miner.php	/^		$ret = number_format((float)$parts[0]).$dec;$/;"	v
ret	miner.php	/^	$ret = $b;$/;"	v
ret	miner.php	/^	$ret = $value;$/;"	v
retries	miner.php	/^ $retries = $mcastretries;$/;"	v
retry_err_count	usbutils.h	/^	uint64_t retry_err_count;$/;"	m	struct:cg_usb_info	access:public
return_via	driver-antrouter.h	13;"	d
retval	A1-board-selector-CCD.c	/^uint8_t retval = 0;$/;"	v
rev	driver-icarus.c	/^static void rev(unsigned char *s, size_t l)$/;"	f	file:	signature:(unsigned char *s, size_t l)
rev	miner.h	/^extern void rev(unsigned char *s, size_t l);$/;"	p	signature:(unsigned char *s, size_t l)
rev	util.c	/^void rev(unsigned char *s, size_t l)$/;"	f	signature:(unsigned char *s, size_t l)
rev8	driver-avalon2.c	/^static inline uint8_t rev8(uint8_t d)$/;"	f	file:	signature:(uint8_t d)
rev8	driver-hashratio.c	/^static inline uint8_t rev8(uint8_t d)$/;"	f	file:	signature:(uint8_t d)
revents	compat/libusb-1.0/libusb/os/poll_windows.h	/^    short revents;    \/* returned events *\/$/;"	m	struct:pollfd	access:public
revert	miner.php	/^function revert($str)$/;"	f
revision	driver-hashfast.c	/^	uint8_t revision;$/;"	m	struct:hf_settings_data	file:	access:public
rfree_list	driver-bab.c	/^	K_LIST *rfree_list;$/;"	m	struct:bab_info	file:	access:public
rfree_list	driver-minion.c	/^	K_LIST *rfree_list;$/;"	m	struct:minion_info	file:	access:public
rg	miner.php	/^		$rg = " Rig $rig";$/;"	v
rg	miner.php	/^	$rg = '';$/;"	v
ri	miner.php	/^					$ri = array('' => 1) + $showhead;$/;"	v
ri	miner.php	/^					$ri = array('Rig' => 1) + $showhead;$/;"	v
ri	miner.php	/^	$ri = '&nbsp;';$/;"	v
ri	miner.php	/^	$ri = riginput($rig, $rigname, $usebuttons);$/;"	v
rig	miner.php	/^					$rig = "$ip:$rp";$/;"	v
rig	miner.php	/^					$rig = "$ip:$rp:$mdes";$/;"	v
rig	miner.php	/^		foreach ($res as $rig => $result)$/;"	v
rig	miner.php	/^	$rig = trim(getparam('rig', true));$/;"	v
rig	miner.php	/^	foreach ($res as $rig => $result)$/;"	v
rig	miner.php	/^ foreach ($anss as $rig => $ans)$/;"	v
rig	miner.php	/^ foreach ($res as $rig => $result)$/;"	v
rig	miner.php	/^ foreach ($results[$name1] as $rig => $result)$/;"	v
rigbutton	miner.php	/^function rigbutton($rig, $rigname, $when, $row, $usebuttons)$/;"	f
rigbuttons	miner.php	/^$rigbuttons = true;$/;"	v
riginput	miner.php	/^function riginput($rig, $rigname, $usebuttons)$/;"	f
rigips	miner.php	/^$rigips = array();$/;"	v
rigipsecurity	miner.php	/^$rigipsecurity = true;$/;"	v
rigname	miner.php	/^						$rigname = intval($ip[3]);$/;"	v
rigname	miner.php	/^						$rigname = intval($ip[3], 16);$/;"	v
rigname	miner.php	/^		$rigname = $parts[2];$/;"	v
rigname	miner.php	/^ $rigname = rigname($rig, $rigname);$/;"	v
rigname	miner.php	/^function rigname($rig, $rigname)$/;"	f
rignames	miner.php	/^$rignames = false;$/;"	v
rigport	miner.php	/^$rigport = 4028;$/;"	v
rigresults	miner.php	/^			$rigresults = processext($ext, $section, $results[$sectionmap[$section]], $fields);$/;"	v
rigs	miner.php	/^ $rigs = array();$/;"	v
rigs	miner.php	/^$rigs = array('127.0.0.1:4028');$/;"	v
rigtotals	miner.php	/^$rigtotals = true;$/;"	v
ritem	driver-bab.c	/^typedef struct ritem {$/;"	s	file:
ritem::chip	driver-bab.c	/^	int chip;$/;"	m	struct:ritem	file:	access:public
ritem::nonce	driver-bab.c	/^	uint32_t nonce[BAB_REPLY_NONCES];$/;"	m	struct:ritem	file:	access:public
ritem::nonces	driver-bab.c	/^	int nonces;$/;"	m	struct:ritem	file:	access:public
ritem::not_first_reply	driver-bab.c	/^	bool not_first_reply;$/;"	m	struct:ritem	file:	access:public
ritem::when	driver-bab.c	/^	struct timeval when;$/;"	m	struct:ritem	typeref:struct:ritem::timeval	file:	access:public
rlock	driver-hashfast.h	/^	pthread_mutex_t rlock;$/;"	m	struct:hashfast_info	access:public
rmdev	driver-icarus.c	/^	ROCKMINER_DEVICE_INFO rmdev;$/;"	m	struct:ICARUS_INFO	file:	access:public
rmid	usbtest.py	/^	rmid    = midstate.decode('hex')[::-1]$/;"	v
rn	miner.php	/^ $rn = 0;$/;"	v
rnonce_list	driver-minion.c	/^	K_STORE *rnonce_list;$/;"	m	struct:minion_info	file:	access:public
rock_detect_one	driver-icarus.c	/^static struct cgpu_info *rock_detect_one(struct libusb_device *dev, struct usb_find_devices *found)$/;"	f	file:	signature:(struct libusb_device *dev, struct usb_find_devices *found)
rock_flush	driver-icarus.c	/^static void rock_flush(struct cgpu_info *icarus)$/;"	f	file:	signature:(struct cgpu_info *icarus)
rock_init	driver-icarus.c	/^	char rock_init[64];$/;"	m	struct:ICARUS_INFO	file:	access:public
rock_init_last_received_task_complete_time	driver-icarus.c	/^static void rock_init_last_received_task_complete_time(struct ICARUS_INFO *info)$/;"	f	file:	signature:(struct ICARUS_INFO *info)
rock_scanwork	driver-icarus.c	/^static int64_t rock_scanwork(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
rock_scanwork	driver-icarus.c	/^static int64_t rock_scanwork(struct thr_info *thr);$/;"	p	file:	signature:(struct thr_info *thr)
rock_send_task	driver-icarus.c	/^void rock_send_task(unsigned char chip_no, unsigned int current_task_id, struct thr_info *thr)$/;"	f	signature:(unsigned char chip_no, unsigned int current_task_id, struct thr_info *thr)
rock_statline_before	driver-icarus.c	/^static void rock_statline_before(char *buf, size_t bufsiz, struct cgpu_info *cgpu)$/;"	f	file:	signature:(char *buf, size_t bufsiz, struct cgpu_info *cgpu)
rockminer_chip_info	driver-icarus.c	/^typedef struct rockminer_chip_info {$/;"	s	file:
rockminer_chip_info::error_cnt	driver-icarus.c	/^	int error_cnt;$/;"	m	struct:rockminer_chip_info	file:	access:public
rockminer_chip_info::freq	driver-icarus.c	/^	unsigned char freq;$/;"	m	struct:rockminer_chip_info	file:	access:public
rockminer_chip_info::last_received_task_complete_time	driver-icarus.c	/^	time_t last_received_task_complete_time;$/;"	m	struct:rockminer_chip_info	file:	access:public
rockminer_device_info	driver-icarus.c	/^typedef struct rockminer_device_info {$/;"	s	file:
rockminer_device_info::chip	driver-icarus.c	/^	ROCKMINER_CHIP_INFO chip[MAX_CHIP_NUM];$/;"	m	struct:rockminer_device_info	file:	access:public
rockminer_device_info::chip_max	driver-icarus.c	/^	unsigned char chip_max;$/;"	m	struct:rockminer_device_info	file:	access:public
rockminer_device_info::def_frq	driver-icarus.c	/^	float def_frq;$/;"	m	struct:rockminer_device_info	file:	access:public
rockminer_device_info::detect_chip_no	driver-icarus.c	/^	unsigned char detect_chip_no;$/;"	m	struct:rockminer_device_info	file:	access:public
rockminer_device_info::dev_detect_time	driver-icarus.c	/^	time_t dev_detect_time;$/;"	m	struct:rockminer_device_info	file:	access:public
rockminer_device_info::max_frq	driver-icarus.c	/^	float max_frq;$/;"	m	struct:rockminer_device_info	file:	access:public
rockminer_device_info::min_frq	driver-icarus.c	/^	float min_frq;$/;"	m	struct:rockminer_device_info	file:	access:public
rockminer_device_info::product_id	driver-icarus.c	/^	unsigned char product_id;$/;"	m	struct:rockminer_device_info	file:	access:public
roh	miner.php	/^ $roh = trim(getparam('roh', true));$/;"	v
roll_work	cgminer.c	/^void roll_work(struct work *work)$/;"	f	signature:(struct work *work)
roll_work	miner.h	/^extern void roll_work(struct work *work);$/;"	p	signature:(struct work *work)
rolled	driver-bab.c	/^	bool rolled;$/;"	m	struct:witem	file:	access:public
rolled	driver-minion.c	/^	bool rolled;$/;"	m	struct:work_item	file:	access:public
rolling	driver-blockerupter.h	/^	int rolling;$/;"	m	struct:blockerupter_info	access:public
rolling	miner.h	/^	double rolling;$/;"	m	struct:cgpu_info	access:public
rolling1	cgminer.c	/^double rolling1, rolling5, rolling15;$/;"	v
rolling1	miner.h	/^	double rolling1;$/;"	m	struct:cgpu_info	access:public
rolling15	cgminer.c	/^double rolling1, rolling5, rolling15;$/;"	v
rolling15	miner.h	/^	double rolling15;$/;"	m	struct:cgpu_info	access:public
rolling5	cgminer.c	/^double rolling1, rolling5, rolling15;$/;"	v
rolling5	miner.h	/^	double rolling5;$/;"	m	struct:cgpu_info	access:public
rolls	miner.h	/^	int		rolls;$/;"	m	struct:work	access:public
rolltime	miner.h	/^	int		rolltime;$/;"	m	struct:work	access:public
rolltime	miner.h	/^	uint32_t rolltime;$/;"	m	struct:cgminer_pool_stats	access:public
rolltime	util.c	/^	int		rolltime;$/;"	m	struct:header_info	file:	access:public
root	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USB_ROOT_HUB_NAME_FIXED root;$/;"	m	union:USB_HUB_NAME_FIXED::__anon34	access:public
rotate_tv	cgminer.c	/^static struct timeval rotate_tv;$/;"	v	typeref:struct:timeval	file:
rowkey	miner.php	/^		foreach ($interim as $rowkey => $row)$/;"	v
rownum	miner.php	/^ $rownum = 0;$/;"	v
rownum	miner.php	/^$rownum = 0;$/;"	v
rp	miner.php	/^				$rp = intval($ans[2]);$/;"	v
rpc_pass	miner.h	/^	char *rpc_user, *rpc_pass;$/;"	m	struct:pool	access:public
rpc_proxy	miner.h	/^	char *rpc_proxy;$/;"	m	struct:pool	access:public
rpc_proxytype	miner.h	/^	proxytypes_t rpc_proxytype;$/;"	m	struct:pool	access:public
rpc_req	miner.h	/^	char *rpc_req;$/;"	m	struct:pool	access:public
rpc_url	miner.h	/^	char *rpc_url;$/;"	m	struct:pool	access:public
rpc_user	miner.h	/^	char *rpc_user, *rpc_pass;$/;"	m	struct:pool	access:public
rpc_userpass	miner.h	/^	char *rpc_userpass;$/;"	m	struct:pool	access:public
rpl_raise	lib/sigprocmask.c	/^rpl_raise (int sig)$/;"	f	signature:(int sig)
rpl_signal	lib/sigprocmask.c	/^rpl_signal (int sig, handler_t handler)$/;"	f	signature:(int sig, handler_t handler)
rsiz	driver-minion.c	/^	uint32_t rsiz;$/;"	m	struct:task_item	file:	access:public
rsp	driver-spondoolies-sp10-p.h	/^	minergate_do_job_rsp rsp[MAX_RESPONDS]; \/\/ array of responce$/;"	m	struct:__anon47	access:public
rsp	driver-spondoolies-sp30-p.h	/^  minergate_do_job_rsp_sp30 rsp[MAX_RESPONDS_SP30]; \/\/ array of responces$/;"	m	struct:__anon67	access:public
rsp_count	driver-spondoolies-sp10-p.h	/^	uint16_t rsp_count;$/;"	m	struct:__anon47	access:public
rsp_count	driver-spondoolies-sp30-p.h	/^  uint16_t rsp_count;$/;"	m	struct:__anon67	access:public
run	MCast.java	/^	public void run() \/\/ listen$/;"	m	class:MCast	access:public	signature:()
running_work	miner.h	/^	struct work running_work;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::work	access:public
rut	miner.php	/^ $rut = trim(getparam('rut', true));$/;"	v
rw	compat/libusb-1.0/libusb/os/poll_windows.h	/^	enum rw_type rw;				\/\/ I\/O transfer direction: read *XOR* write (NOT BOTH)$/;"	m	struct:winfd	typeref:enum:winfd::rw_type	access:public
rw	miner.php	/^		$rw = '<td>No GPU count returned: '.$warnfont;$/;"	v
rw_type	compat/libusb-1.0/libusb/os/poll_windows.h	/^enum rw_type {$/;"	g
rw_unlock	miner.h	778;"	d
rwlock	util.h	/^	pthread_rwlock_t rwlock;$/;"	m	struct:cglock	access:public
rwlock_destroy	miner.h	/^static inline void rwlock_destroy(pthread_rwlock_t *lock)$/;"	f	signature:(pthread_rwlock_t *lock)
rwlock_init	miner.h	784;"	d
rx_body_crc	driver-hashfast.h	/^	uint64_t rx_body_crc;                       \/\/ Data CRCs$/;"	m	struct:hf_long_statistics	access:public
rx_body_crc	hf_protocol.h	/^	uint8_t rx_body_crc;                        \/\/ Data CRC error's$/;"	m	struct:hf_statistics	access:public
rx_body_crc	hf_protocol_be.h	/^	uint8_t rx_body_crc;                        \/\/ Data CRC error's$/;"	m	struct:hf_statistics	access:public
rx_body_timeouts	driver-hashfast.h	/^	uint64_t rx_body_timeouts;                  \/\/ Data timeouts$/;"	m	struct:hf_long_statistics	access:public
rx_body_timeouts	hf_protocol.h	/^	uint8_t rx_body_timeouts;                   \/\/ Data timeouts$/;"	m	struct:hf_statistics	access:public
rx_body_timeouts	hf_protocol_be.h	/^	uint8_t rx_body_timeouts;                   \/\/ Data timeouts$/;"	m	struct:hf_statistics	access:public
rx_data_timeout	hf_protocol.h	/^	uint8_t  rx_data_timeout:7;                 \/\/ Data timeout in char times \/ 16$/;"	m	struct:hf_config_data	access:public
rx_data_timeout	hf_protocol_be.h	/^	uint8_t  rx_data_timeout:7;                 \/\/ Data timeout in char times \/ 16$/;"	m	struct:hf_config_data	access:public
rx_header_crc	driver-hashfast.h	/^	uint64_t rx_header_crc;                     \/\/ Header CRCs$/;"	m	struct:hf_long_statistics	access:public
rx_header_crc	hf_protocol.h	/^	uint8_t rx_header_crc;                      \/\/ Header CRC error's$/;"	m	struct:hf_statistics	access:public
rx_header_crc	hf_protocol_be.h	/^	uint8_t rx_header_crc;                      \/\/ Header CRC error's$/;"	m	struct:hf_statistics	access:public
rx_header_timeout	hf_protocol.h	/^	uint8_t  rx_header_timeout:7;               \/\/ Header timeout in char times$/;"	m	struct:hf_config_data	access:public
rx_header_timeout	hf_protocol_be.h	/^	uint8_t  rx_header_timeout:7;               \/\/ Header timeout in char times$/;"	m	struct:hf_config_data	access:public
rx_header_timeouts	driver-hashfast.h	/^	uint64_t rx_header_timeouts;                \/\/ Header timeouts$/;"	m	struct:hf_long_statistics	access:public
rx_header_timeouts	hf_protocol.h	/^	uint8_t rx_header_timeouts;                 \/\/ Header timeouts$/;"	m	struct:hf_statistics	access:public
rx_header_timeouts	hf_protocol_be.h	/^	uint8_t rx_header_timeouts;                 \/\/ Header timeouts$/;"	m	struct:hf_statistics	access:public
rx_ignore_data_crc	hf_protocol.h	/^	uint8_t  rx_ignore_data_crc:1;              \/\/ Ignore rx data crc's (diagnostic)$/;"	m	struct:hf_config_data	access:public
rx_ignore_data_crc	hf_protocol_be.h	/^	uint8_t  rx_ignore_data_crc:1;              \/\/ Ignore rx data crc's (diagnostic)$/;"	m	struct:hf_config_data	access:public
rx_ignore_header_crc	hf_protocol.h	/^	uint8_t  rx_ignore_header_crc:1;            \/\/ Ignore rx header crc's (diagnostic)$/;"	m	struct:hf_config_data	access:public
rx_ignore_header_crc	hf_protocol_be.h	/^	uint8_t  rx_ignore_header_crc:1;            \/\/ Ignore rx header crc's (diagnostic)$/;"	m	struct:hf_config_data	access:public
rxbuf	driver-knc.c	/^		uint8_t rxbuf[MAX_SPI_SIZE];$/;"	m	struct:knc_state::knc_spi_buffer	file:	access:public
s	api-example.py	/^s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)$/;"	v
s	miner.h	/^	const char *s;$/;"	m	struct:strategies	access:public
s	miner.php	/^		$s = $value % 60;$/;"	v
sa_handler_t	lib/sig-handler.h	/^typedef void (*sa_handler_t) (int);$/;"	t
safe_closehandle	compat/libusb-1.0/libusb/os/windows_usb.h	60;"	d
safe_free	compat/libusb-1.0/libusb/os/windows_usb.h	59;"	d
safe_min	compat/libusb-1.0/libusb/os/windows_usb.h	61;"	d
safe_sprintf	compat/libusb-1.0/libusb/os/windows_usb.h	70;"	d
safe_strcat	compat/libusb-1.0/libusb/os/windows_usb.h	66;"	d
safe_strcmp	compat/libusb-1.0/libusb/os/windows_usb.h	67;"	d
safe_strcp	compat/libusb-1.0/libusb/os/windows_usb.h	62;"	d
safe_strcpy	compat/libusb-1.0/libusb/os/windows_usb.h	64;"	d
safe_strlen	compat/libusb-1.0/libusb/os/windows_usb.h	69;"	d
safe_strncat	compat/libusb-1.0/libusb/os/windows_usb.h	65;"	d
safe_strncmp	compat/libusb-1.0/libusb/os/windows_usb.h	68;"	d
safe_unref_device	compat/libusb-1.0/libusb/os/windows_usb.h	71;"	d
sanitize_path	compat/libusb-1.0/libusb/os/windows_usb.c	/^static char* sanitize_path(const char* path)$/;"	f	file:	signature:(const char* path)
save_and_jump	ccan/opt/test/run-checkopt.c	/^static void save_and_jump(int ecode, const char *fmt, ...)$/;"	f	file:	signature:(int ecode, const char *fmt, ...)
save_and_jump	ccan/opt/test/run-checkopt.c	/^static void save_and_jump(int ecode, const char *fmt, ...);$/;"	p	file:	signature:(int ecode, const char *fmt, ...)
save_err_output	ccan/opt/test/utils.c	/^void save_err_output(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
save_err_output	ccan/opt/test/utils.h	/^void save_err_output(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
saved_fprintf	ccan/opt/test/run-helpers.c	/^static int saved_fprintf(FILE *ignored, const char *fmt, ...)$/;"	f	file:	signature:(FILE *ignored, const char *fmt, ...)
saved_fprintf	ccan/opt/test/run-helpers.c	/^static int saved_fprintf(FILE *ignored, const char *fmt, ...);$/;"	p	file:	signature:(FILE *ignored, const char *fmt, ...)
saved_malloc	ccan/opt/test/run-helpers.c	/^static void *saved_malloc(size_t size)$/;"	f	file:	signature:(size_t size)
saved_malloc	ccan/opt/test/run-helpers.c	/^static void *saved_malloc(size_t size);$/;"	p	file:	signature:(size_t size)
saved_nonces	driver-bitfury.h	/^	double saved_nonces;$/;"	m	struct:bitfury_info	access:public
saved_printf	ccan/opt/test/run-helpers.c	/^static int saved_printf(const char *fmt, ...)$/;"	f	file:	signature:(const char *fmt, ...)
saved_printf	ccan/opt/test/run-helpers.c	/^static int saved_printf(const char *fmt, ...);$/;"	p	file:	signature:(const char *fmt, ...)
saved_text	compat/jansson-2.6/src/load.c	/^    strbuffer_t saved_text;$/;"	m	struct:__anon17	file:	access:public
saved_vprintf	ccan/opt/test/run-checkopt.c	/^static int saved_vprintf(const char *fmt, va_list ap)$/;"	f	file:	signature:(const char *fmt, va_list ap)
saved_vprintf	ccan/opt/test/run-helpers.c	/^static int saved_vprintf(const char *fmt, va_list ap)$/;"	f	file:	signature:(const char *fmt, va_list ap)
saved_vprintf	ccan/opt/test/run-helpers.c	/^static int saved_vprintf(const char *fmt, va_list ap);$/;"	p	file:	signature:(const char *fmt, va_list ap)
sbitem	api.c	/^typedef struct sbitem {$/;"	s	file:
sbitem::buf	api.c	/^	char *buf;$/;"	m	struct:sbitem	file:	access:public
sbitem::siz	api.c	/^	size_t siz;$/;"	m	struct:sbitem	file:	access:public
sbitem::tot	api.c	/^	size_t tot;$/;"	m	struct:sbitem	file:	access:public
sc_count	driver-bflsc.h	/^	int sc_count;$/;"	m	struct:bflsc_info	access:public
sc_devs	driver-bflsc.h	/^	struct bflsc_dev *sc_devs;$/;"	m	struct:bflsc_info	typeref:struct:bflsc_info::bflsc_dev	access:public
scan_adjust	driver-knc.c	/^	int scan_adjust;$/;"	m	struct:knc_state	file:	access:public
scan_devices	cgminer.c	/^struct list_head scan_devices;$/;"	v	typeref:struct:list_head
scan_sleep_time	driver-bflsc.h	/^	unsigned int scan_sleep_time;$/;"	m	struct:bflsc_info	access:public
scan_work	driver-bab.c	/^	cgsem_t scan_work;$/;"	m	struct:bab_info	file:	access:public
scan_work	driver-minion.c	/^	cgsem_t scan_work;$/;"	m	struct:minion_info	file:	access:public
scanhash	miner.h	/^	int64_t (*scanhash)(struct thr_info *, struct work *, int64_t);$/;"	m	struct:device_drv	access:public
scanner_init	compat/jansson-2.6/src/pack_unpack.c	/^static void scanner_init(scanner_t *s, json_error_t *error,$/;"	f	file:	signature:(scanner_t *s, json_error_t *error, size_t flags, const char *fmt)
scanner_t	compat/jansson-2.6/src/pack_unpack.c	/^} scanner_t;$/;"	t	typeref:struct:__anon15	file:
scanwork	miner.h	/^	int64_t (*scanwork)(struct thr_info *);$/;"	m	struct:device_drv	access:public
sched_paused	cgminer.c	/^bool sched_paused;$/;"	v
schedstart	cgminer.c	/^struct schedtime schedstart;$/;"	v	typeref:struct:schedtime
schedstop	cgminer.c	/^struct schedtime schedstop;$/;"	v	typeref:struct:schedtime
schedtime	cgminer.c	/^struct schedtime {$/;"	s	file:
schedtime::enable	cgminer.c	/^	bool enable;$/;"	m	struct:schedtime	file:	access:public
schedtime::tm	cgminer.c	/^	struct tm tm;$/;"	m	struct:schedtime	typeref:struct:schedtime::tm	file:	access:public
script_pubkey	miner.h	/^	unsigned char script_pubkey[25 + 3];$/;"	m	struct:pool	access:public
scriptsig_base	miner.h	/^	unsigned char scriptsig_base[100];$/;"	m	struct:pool	access:public
scriptsig_header	cgminer.c	/^static const char scriptsig_header[] = "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff";$/;"	v	file:
scriptsig_header_bin	cgminer.c	/^static unsigned char scriptsig_header_bin[41];$/;"	v	file:
sdbd	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
sdiff	miner.h	/^	double		sdiff;$/;"	m	struct:work	access:public
sdiff	miner.h	/^	double sdiff;$/;"	m	struct:pool	access:public
search_difficulty	hf_protocol.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_serial	access:public
search_difficulty	hf_protocol.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_usb	access:public
search_difficulty	hf_protocol_be.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_serial	access:public
search_difficulty	hf_protocol_be.h	/^	uint8_t  search_difficulty;             \/\/ Search difficulty to use, # of '0' digits required$/;"	m	struct:hf_hash_usb	access:public
sec	miner.php	/^					foreach ($result as $sec => $row)$/;"	v
sec	miner.php	/^			foreach ($result as $sec => $row)$/;"	v
sec	miner.php	/^	foreach ($csp[$ext] as $sec => $types)$/;"	v
sec	miner.php	/^	foreach ($csp[$page] as $sec => $fields)$/;"	v
sec	miner.php	/^	foreach ($result as $sec => $row)$/;"	v
sec	miner.php	/^ foreach ($result as $sec => $row)$/;"	v
secmatch	miner.php	/^function secmatch($section, $field)$/;"	f
secname	miner.php	/^						$secname = preg_replace('\/\\d\/', '', $sec);$/;"	v
secname	miner.php	/^				$secname = preg_replace('\/\\d\/', '', $sec);$/;"	v
secname	miner.php	/^		$secname = preg_replace('\/\\d\/', '', $sec);$/;"	v
secname	miner.php	/^	$secname = preg_replace('\/\\d\/', '', $sec);$/;"	v
second_check	driver-minion.c	/^static bool second_check = true;$/;"	v	file:
second_run	driver-bitfury.h	/^	bool *second_run;$/;"	m	struct:bitfury_info	access:public
section	miner.php	/^		$section = $sectionname;$/;"	v
section	miner.php	/^	foreach ($sections as $section => $fields)$/;"	v
section	miner.php	/^ $section = '';$/;"	v
section	miner.php	/^ foreach ($results as $section => $res)$/;"	v
section	miner.php	/^ foreach ($sections as $section => $fields)$/;"	v
section	miner.php	/^ foreach ($sum as $section => $fields)$/;"	v
section	miner.php	/^ if ($class == '' && $section == 'total')$/;"	v
section	miner.php	/^ if (($section == 'DEVS' || $section == 'EDEVS')$/;"	v
sectionmap	miner.php	/^$sectionmap = array($/;"	v
sectionname	miner.php	/^			$sectionname = preg_replace('\/\\d\/', '', $name);$/;"	v
sectionname	miner.php	/^	$sectionname = preg_replace('\/\\d\/', '', $item);$/;"	v
seek_to_next_config	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int seek_to_next_config(struct libusb_context *ctx, int fd,$/;"	f	file:	signature:(struct libusb_context *ctx, int fd, int host_endian)
select	A1-board-selector.h	/^	bool (*select)(uint8_t chain);$/;"	m	struct:board_selector	access:public
select_balanced	cgminer.c	/^static struct pool *select_balanced(struct pool *cp)$/;"	f	file:	signature:(struct pool *cp)
select_close	fpgautils.h	80;"	d
select_longpoll_pool	cgminer.c	/^static struct pool *select_longpoll_pool(struct pool *cp)$/;"	f	file:	signature:(struct pool *cp)
select_open	fpgautils.h	48;"	d
select_open_purge	fpgautils.h	51;"	d
select_pool	cgminer.c	/^static inline struct pool *select_pool(bool lagging)$/;"	f	file:	signature:(bool lagging)
select_read	fpgautils.h	59;"	d
select_read_full	fpgautils.h	78;"	d
select_read_til	fpgautils.h	63;"	d
select_read_wait	fpgautils.h	67;"	d
select_read_wait_both	fpgautils.h	75;"	d
select_read_wait_til	fpgautils.h	71;"	d
select_write	fpgautils.h	54;"	d
select_write_full	fpgautils.h	57;"	d
selective_yield	util.c	/^int (*selective_yield)(void) = &no_yield;$/;"	v
selective_yield	util.h	/^int (*selective_yield)(void);$/;"	v
sem	miner.h	/^	cgsem_t		sem;$/;"	m	struct:thr_info	access:public
semtimedop	miner.h	232;"	d
semun	usbutils.c	/^union semun {$/;"	u	file:
semun::__buf	usbutils.c	/^	struct seminfo *__buf;$/;"	m	union:semun	typeref:struct:semun::seminfo	file:	access:public
semun::array	usbutils.c	/^	unsigned short *array;$/;"	m	union:semun	file:	access:public
semun::buf	usbutils.c	/^	struct semid_ds *buf;$/;"	m	union:semun	typeref:struct:semun::semid_ds	file:	access:public
semun::val	usbutils.c	/^	int val;$/;"	m	union:semun	file:	access:public
sendMCast	MCast.java	/^	public void sendMCast()$/;"	m	class:MCast	access:public	signature:()
send_buffer	driver-knc.c	/^	int send_buffer;$/;"	m	struct:knc_state	file:	access:public
send_buffer_count	driver-knc.c	/^	int send_buffer_count;$/;"	m	struct:knc_state	file:	access:public
send_count	driver-bab.c	/^	uint64_t send_count;$/;"	m	struct:bab_info	file:	access:public
send_delay	driver-avalon.h	/^	int send_delay;$/;"	m	struct:avalon_info	access:public
send_full_space	driver-bitmain.h	/^	int send_full_space;$/;"	m	struct:bitmain_info	access:public
send_max	driver-bab.c	/^	double send_max;$/;"	m	struct:bab_info	file:	access:public
send_min	driver-bab.c	/^	double send_min;$/;"	m	struct:bab_info	file:	access:public
send_minergate_pkt	driver-spondoolies-sp10.c	/^static void send_minergate_pkt(const minergate_req_packet* mp_req, minergate_rsp_packet* mp_rsp,$/;"	f	file:	signature:(const minergate_req_packet* mp_req, minergate_rsp_packet* mp_rsp, int socket_fd)
send_minergate_pkt	driver-spondoolies-sp30.c	/^static void send_minergate_pkt(const minergate_req_packet_sp30* mp_req, minergate_rsp_packet_sp30* mp_rsp,$/;"	f	file:	signature:(const minergate_req_packet_sp30* mp_req, minergate_rsp_packet_sp30* mp_rsp, int socket_fd)
send_pong	util.c	/^static bool send_pong(struct pool *pool, json_t *val)$/;"	f	file:	signature:(struct pool *pool, json_t *val)
send_recv_ds	driver-bflsc.c	/^static int send_recv_ds(struct cgpu_info *bflsc, int dev, int *stage, bool *sent, int *amount, char *send1, int send1_len, enum usb_cmds send1_cmd,  enum usb_cmds recv1_cmd, char *send2, int send2_len, enum usb_cmds send2_cmd, enum usb_cmds recv2_cmd, char *recv, int recv_siz)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev, int *stage, bool *sent, int *amount, char *send1, int send1_len, enum usb_cmds send1_cmd, enum usb_cmds recv1_cmd, char *send2, int send2_len, enum usb_cmds send2_cmd, enum usb_cmds recv2_cmd, char *recv, int recv_siz)
send_recv_ss	driver-bflsc.c	/^static int send_recv_ss(struct cgpu_info *bflsc, int dev, bool *sent, int *amount, char *send, int send_len, enum usb_cmds send_cmd, char *recv, int recv_siz, enum usb_cmds recv_cmd, bool read_ok)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev, bool *sent, int *amount, char *send, int send_len, enum usb_cmds send_cmd, char *recv, int recv_siz, enum usb_cmds recv_cmd, bool read_ok)
send_result	api.c	/^static void send_result(struct io_data *io_data, SOCKETTYPE c, bool isjson)$/;"	f	file:	signature:(struct io_data *io_data, SOCKETTYPE c, bool isjson)
send_ret	util.c	/^enum send_ret {$/;"	g	file:
send_status_on_core_idle	hf_protocol.h	/^	uint16_t send_status_on_core_idle:1;        \/\/ Schedule status whenever core goes idle$/;"	m	struct:hf_config_data	access:public
send_status_on_core_idle	hf_protocol_be.h	/^	uint16_t send_status_on_core_idle:1;        \/\/ Schedule status whenever core goes idle$/;"	m	struct:hf_config_data	access:public
send_status_on_pending_empty	hf_protocol.h	/^	uint16_t send_status_on_pending_empty:1;    \/\/ Schedule status whenever core pending goes idle$/;"	m	struct:hf_config_data	access:public
send_status_on_pending_empty	hf_protocol_be.h	/^	uint16_t send_status_on_pending_empty:1;    \/\/ Schedule status whenever core pending goes idle$/;"	m	struct:hf_config_data	access:public
send_total	driver-bab.c	/^	double send_total;$/;"	m	struct:bab_info	file:	access:public
send_version	util.c	/^static bool send_version(struct pool *pool, json_t *val)$/;"	f	file:	signature:(struct pool *pool, json_t *val)
sendlock	driver-cointerra.h	/^	pthread_mutex_t sendlock;$/;"	m	struct:cointerra_info	access:public
sent	driver-minion.c	/^	struct timeval sent;$/;"	m	struct:work_item	typeref:struct:work_item::timeval	file:	access:public
seq	usbutils.c	/^	int seq;$/;"	m	struct:cg_usb_stats_details	file:	access:public
seq_getfails	miner.h	/^	int seq_getfails;$/;"	m	struct:pool	access:public
seq_rejects	miner.h	/^	int seq_rejects;$/;"	m	struct:pool	access:public
sequence	hf_protocol.h	/^	uint16_t sequence;                      \/\/ Sequence number from corresponding OP_HASH$/;"	m	struct:hf_candidate_nonce	access:public
sequence	hf_protocol_be.h	/^	uint16_t sequence;                      \/\/ Sequence number from corresponding OP_HASH$/;"	m	struct:hf_candidate_nonce	access:public
sequence_head	hf_protocol.h	/^	uint16_t sequence_head;                     \/\/ The latest, internal, active sequence #$/;"	m	struct:hf_gwq_data	access:public
sequence_head	hf_protocol_be.h	/^	uint16_t sequence_head;                     \/\/ The latest, internal, active sequence #$/;"	m	struct:hf_gwq_data	access:public
sequence_modulus	hf_protocol.h	/^	uint16_t sequence_modulus;                  \/\/ Sequence numbers are to be modulo this$/;"	m	struct:hf_usb_init_base	access:public
sequence_modulus	hf_protocol_be.h	/^	uint16_t sequence_modulus;                  \/\/ Sequence numbers are to be modulo this$/;"	m	struct:hf_usb_init_base	access:public
sequence_tail	hf_protocol.h	/^	uint16_t sequence_tail;                     \/\/ The latest, internal, inactive sequence #$/;"	m	struct:hf_gwq_data	access:public
sequence_tail	hf_protocol_be.h	/^	uint16_t sequence_tail;                     \/\/ The latest, internal, inactive sequence #$/;"	m	struct:hf_gwq_data	access:public
ser	usbtest.py	/^ser = serial.Serial(sys.argv[1], 115200, serial.EIGHTBITS, serial.PARITY_NONE, serial.STOPBITS_ONE, 10, False, False, 5, False, None)$/;"	v
ser_number	util.c	/^int ser_number(unsigned char *s, int32_t val)$/;"	f	signature:(unsigned char *s, int32_t val)
ser_number	util.h	/^int ser_number(unsigned char *s, int32_t val);$/;"	p	signature:(unsigned char *s, int32_t val)
ser_string	util.c	/^unsigned char *ser_string(char *s, int *slen)$/;"	f	signature:(char *s, int *slen)
ser_string	util.h	/^unsigned char *ser_string(char *s, int *slen);$/;"	p	signature:(char *s, int *slen)
serial	compat/jansson-2.6/src/dump.c	/^    size_t serial;$/;"	m	struct:object_key	file:	access:public
serial	compat/jansson-2.6/src/hashtable.h	/^    size_t serial;$/;"	m	struct:hashtable_pair	access:public
serial	compat/jansson-2.6/src/jansson_private.h	/^    size_t serial;$/;"	m	struct:__anon22	access:public
serial	driver-bitfury.h	/^	uint32_t serial;$/;"	m	struct:bitfury_info	access:public
serial	driver-cointerra.h	/^	uint32_t serial;$/;"	m	struct:cointerra_info	access:public
serial	driver-drillbit.c	/^	uint32_t serial;$/;"	m	struct:__anon6	file:	access:public
serial	driver-drillbit.h	/^  uint32_t serial;$/;"	m	struct:drillbit_info	access:public
serial	driver-klondike.c	/^	uint8_t serial[4];$/;"	m	struct:klondike_id	file:	access:public
serial	usbtest.py	/^import serial$/;"	i
serial_autodetect_devserial	fpgautils.c	/^int serial_autodetect_devserial(__maybe_unused detectone_func_t detectone, __maybe_unused const char*prodname)$/;"	f	signature:(__maybe_unused detectone_func_t detectone, __maybe_unused const char*prodname)
serial_autodetect_devserial	fpgautils.h	/^extern int serial_autodetect_devserial(detectone_func_t, const char *prodname);$/;"	p	signature:(detectone_func_t, const char *prodname)
serial_autodetect_udev	fpgautils.c	/^int serial_autodetect_udev(__maybe_unused detectone_func_t detectone, __maybe_unused const char*prodname)$/;"	f	signature:(__maybe_unused detectone_func_t detectone, __maybe_unused const char*prodname)
serial_autodetect_udev	fpgautils.c	/^int serial_autodetect_udev(detectone_func_t detectone, const char*prodname)$/;"	f	signature:(detectone_func_t detectone, const char*prodname)
serial_autodetect_udev	fpgautils.h	/^extern int serial_autodetect_udev(detectone_func_t, const char *prodname);$/;"	p	signature:(detectone_func_t, const char *prodname)
serial_close	driver-antrouter.c	/^int serial_close(const int fd)$/;"	f	signature:(const int fd)
serial_close	fpgautils.h	35;"	d
serial_detect	fpgautils.h	24;"	d
serial_detect_auto	fpgautils.h	22;"	d
serial_detect_fauto	fpgautils.h	20;"	d
serial_number	driver-hashfast.h	/^	uint32_t serial_number;                     \/\/ db->serial_number if it exists$/;"	m	struct:hashfast_info	access:public
serial_number	hf_protocol.h	/^	uint32_t serial_number;                     \/\/ Board serial number$/;"	m	struct:hf_usb_init_base	access:public
serial_number	hf_protocol_be.h	/^	uint32_t serial_number;                     \/\/ Board serial number$/;"	m	struct:hf_usb_init_base	access:public
serial_open	driver-antrouter.c	/^int serial_open(const char *devpath, unsigned long baud, float timeout, bool purge)$/;"	f	signature:(const char *devpath, unsigned long baud, float timeout, bool purge)
serial_open	fpgautils.c	/^int serial_open(const char *devpath, unsigned long baud, signed short timeout, bool purge)$/;"	f	signature:(const char *devpath, unsigned long baud, signed short timeout, bool purge)
serial_open	fpgautils.h	/^extern int serial_open(const char *devpath, unsigned long baud, signed short timeout, bool purge);$/;"	p	signature:(const char *devpath, unsigned long baud, signed short timeout, bool purge)
serial_read	driver-antrouter.h	74;"	d
serial_read	fpgautils.h	31;"	d
serial_read_line	fpgautils.h	33;"	d
serial_string	usbutils.h	/^	char *serial_string;$/;"	m	struct:cg_usb_device	access:public
serialise_autotune_request	driver-drillbit.c	/^static void serialise_autotune_request(char *buf, AutoTuneRequest *aq)$/;"	f	file:	signature:(char *buf, AutoTuneRequest *aq)
serialise_autotune_request	driver-drillbit.c	/^static void serialise_autotune_request(char *buf, AutoTuneRequest *aq);$/;"	p	file:	signature:(char *buf, AutoTuneRequest *aq)
serialise_board_configV3	driver-drillbit.c	/^static void serialise_board_configV3(char *buf, BoardConfigV3 *bc)$/;"	f	file:	signature:(char *buf, BoardConfigV3 *bc)
serialise_board_configV3	driver-drillbit.c	/^static void serialise_board_configV3(char *buf, BoardConfigV3 *boardconfig);$/;"	p	file:	signature:(char *buf, BoardConfigV3 *boardconfig)
serialise_board_configV4	driver-drillbit.c	/^static void serialise_board_configV4(char *buf, BoardConfig *bc)$/;"	f	file:	signature:(char *buf, BoardConfig *bc)
serialise_board_configV4	driver-drillbit.c	/^static void serialise_board_configV4(char *buf, BoardConfig *boardconfig);$/;"	p	file:	signature:(char *buf, BoardConfig *boardconfig)
serialise_work_request	driver-drillbit.c	/^static void serialise_work_request(char *buf, uint16_t chip_id, const struct work *work)$/;"	f	file:	signature:(char *buf, uint16_t chip_id, const struct work *work)
serialise_work_request	driver-drillbit.c	/^static void serialise_work_request(char *buf, uint16_t chip_id, const struct work *wr);$/;"	p	file:	signature:(char *buf, uint16_t chip_id, const struct work *wr)
ses	miner.php	/^$ses = 'rutroh';$/;"	v
session_data	compat/libusb-1.0/libusb/libusbi.h	/^	unsigned long session_data;$/;"	m	struct:libusb_device	access:public
sessionid	miner.h	/^	char *sessionid;$/;"	m	struct:pool	access:public
set_addr	MCast.java	/^	public void set_addr(String _addr)$/;"	m	class:MCast	access:public	signature:(String _addr)
set_antrouter_options	cgminer.c	/^static char *set_antrouter_options(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_antrouter_volt	cgminer.c	/^static char *set_antrouter_volt(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_anu_freq	driver-antrouter.c	/^static bool set_anu_freq(struct cgpu_info *antrouter, struct ANTROUTER_INFO *info, uint8_t * reg_data)$/;"	f	file:	signature:(struct cgpu_info *antrouter, struct ANTROUTER_INFO *info, uint8_t * reg_data)
set_anu_freq	driver-icarus.c	/^static bool set_anu_freq(struct cgpu_info *icarus, struct ICARUS_INFO *info, uint16_t anu_freq_hex)$/;"	f	file:	signature:(struct cgpu_info *icarus, struct ICARUS_INFO *info, uint16_t anu_freq_hex)
set_anu_volt	driver-antrouter.c	/^static void set_anu_volt(struct cgpu_info *antrouter)$/;"	f	file:	signature:(struct cgpu_info *antrouter)
set_anu_volt	driver-icarus.c	/^static void set_anu_volt(struct cgpu_info *icarus)$/;"	f	file:	signature:(struct cgpu_info *icarus)
set_avalon2_fan	driver-avalon2.c	/^char *set_avalon2_fan(char *arg)$/;"	f	signature:(char *arg)
set_avalon2_fan	driver-avalon2.h	/^extern char *set_avalon2_fan(char *arg);$/;"	p	signature:(char *arg)
set_avalon2_fixed_speed	driver-avalon2.c	/^char *set_avalon2_fixed_speed(enum avalon2_fan_fixed *f)$/;"	f	signature:(enum avalon2_fan_fixed *f)
set_avalon2_fixed_speed	driver-avalon2.h	/^extern char *set_avalon2_fixed_speed(enum avalon2_fan_fixed *f);$/;"	p	signature:(enum avalon2_fan_fixed *f)
set_avalon2_freq	driver-avalon2.c	/^char *set_avalon2_freq(char *arg)$/;"	f	signature:(char *arg)
set_avalon2_freq	driver-avalon2.h	/^extern char *set_avalon2_freq(char *arg);$/;"	p	signature:(char *arg)
set_avalon2_voltage	driver-avalon2.c	/^char *set_avalon2_voltage(char *arg)$/;"	f	signature:(char *arg)
set_avalon2_voltage	driver-avalon2.h	/^extern char *set_avalon2_voltage(char *arg);$/;"	p	signature:(char *arg)
set_avalon_fan	driver-avalon.c	/^char *set_avalon_fan(char *arg)$/;"	f	signature:(char *arg)
set_avalon_fan	driver-avalon.h	/^extern char *set_avalon_fan(char *arg);$/;"	p	signature:(char *arg)
set_avalon_freq	driver-avalon.c	/^char *set_avalon_freq(char *arg)$/;"	f	signature:(char *arg)
set_avalon_freq	driver-avalon.h	/^extern char *set_avalon_freq(char *arg);$/;"	p	signature:(char *arg)
set_balance	cgminer.c	/^static char *set_balance(enum pool_strategy *strategy)$/;"	f	file:	signature:(enum pool_strategy *strategy)
set_benchmark_work	cgminer.c	/^static void set_benchmark_work(struct cgpu_info *cgpu, struct work *work)$/;"	f	file:	signature:(struct cgpu_info *cgpu, struct work *work)
set_bitmain_dev	driver-bitmain.c	/^char *set_bitmain_dev(char *arg)$/;"	f	signature:(char *arg)
set_bitmain_dev	driver-bitmain.h	/^extern char *set_bitmain_dev(char *arg);$/;"	p	signature:(char *arg)
set_bitmain_fan	driver-bitmain.c	/^char *set_bitmain_fan(char *arg)$/;"	f	signature:(char *arg)
set_bitmain_fan	driver-bitmain.h	/^extern char *set_bitmain_fan(char *arg);$/;"	p	signature:(char *arg)
set_bitmain_freq	cgminer.c	/^static char *set_bitmain_freq(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_bitmain_freq	driver-bitmain.c	/^char *set_bitmain_freq(char *arg)$/;"	f	signature:(char *arg)
set_bitmain_options	cgminer.c	/^static char *set_bitmain_options(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_bitmain_voltage	cgminer.c	/^static char *set_bitmain_voltage(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_blockdiff	cgminer.c	/^static void set_blockdiff(const struct work *work)$/;"	f	file:	signature:(const struct work *work)
set_bmsc_bandops	cgminer.c	/^static char *set_bmsc_bandops(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_bmsc_freq	cgminer.c	/^static char *set_bmsc_freq(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_bmsc_options	cgminer.c	/^static char *set_bmsc_options(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_bmsc_rdreg	cgminer.c	/^static char *set_bmsc_rdreg(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_bmsc_timing	cgminer.c	/^static char *set_bmsc_timing(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_bmsc_voltage	cgminer.c	/^static char *set_bmsc_voltage(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_code	MCast.java	/^	public void set_code(String _code)$/;"	m	class:MCast	access:public	signature:(String _code)
set_composite_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int set_composite_interface(struct libusb_context* ctx, struct libusb_device* dev,$/;"	f	file:	signature:(struct libusb_context* ctx, struct libusb_device* dev, char* dev_interface_path, char* device_id, uint8_t api)
set_configuration	compat/libusb-1.0/libusb/libusbi.h	/^	int (*set_configuration)(struct libusb_device_handle *handle, int config);$/;"	m	struct:usbi_os_backend	access:public
set_curblock	cgminer.c	/^static void set_curblock(char *hexstr, unsigned char *bedata)$/;"	f	file:	signature:(char *hexstr, unsigned char *bedata)
set_default_config	cgminer.c	/^static char *set_default_config(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_device	miner.h	/^	char *(*set_device)(struct cgpu_info *, char *option, char *setting, char *replybuf);$/;"	m	struct:device_drv	access:public
set_error	compat/jansson-2.6/src/pack_unpack.c	/^static void set_error(scanner_t *s, const char *source, const char *fmt, ...)$/;"	f	file:	signature:(scanner_t *s, const char *source, const char *fmt, ...)
set_float_100_to_250	cgminer.c	/^static char *set_float_100_to_250(const char *arg, float *i)$/;"	f	file:	signature:(const char *arg, float *i)
set_float_125_to_500	cgminer.c	/^static char *set_float_125_to_500(const char *arg, float *i)$/;"	f	file:	signature:(const char *arg, float *i)
set_freq	driver-minion.c	/^static void set_freq(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip, int freq)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, struct minion_info *minioninfo, int chip, int freq)
set_frequency	driver-avalon2.h	/^	int set_frequency;$/;"	m	struct:avalon2_info	access:public
set_hashratio_fan	driver-hashratio.c	/^char *set_hashratio_fan(char *arg)$/;"	f	signature:(char *arg)
set_hashratio_fan	driver-hashratio.h	/^extern char *set_hashratio_fan(char *arg);$/;"	p	signature:(char *arg)
set_hashratio_freq	driver-hashratio.c	/^char *set_hashratio_freq(char *arg)$/;"	f	signature:(char *arg)
set_hashratio_freq	driver-hashratio.h	/^extern char *set_hashratio_freq(char *arg);$/;"	p	signature:(char *arg)
set_hfa_fan	driver-hashfast.c	/^char *set_hfa_fan(char *arg)$/;"	f	signature:(char *arg)
set_hfa_fan	driver-hashfast.h	/^char *set_hfa_fan(char *arg);$/;"	p	signature:(char *arg)
set_highprio	cgminer.c	/^static void set_highprio(void)$/;"	f	file:	signature:(void)
set_int_0_to_10	cgminer.c	/^static char *set_int_0_to_10(const char *arg, int *i)$/;"	f	file:	signature:(const char *arg, int *i)
set_int_0_to_100	cgminer.c	/^static char *set_int_0_to_100(const char *arg, int *i)$/;"	f	file:	signature:(const char *arg, int *i)
set_int_0_to_200	cgminer.c	/^static char *set_int_0_to_200(const char *arg, int *i)$/;"	f	file:	signature:(const char *arg, int *i)
set_int_0_to_255	cgminer.c	/^static char *set_int_0_to_255(const char *arg, int *i)$/;"	f	file:	signature:(const char *arg, int *i)
set_int_0_to_4	cgminer.c	/^static char __maybe_unused *set_int_0_to_4(const char *arg, int *i)$/;"	f	file:	signature:(const char *arg, int *i)
set_int_0_to_9999	cgminer.c	/^static char *set_int_0_to_9999(const char *arg, int *i)$/;"	f	file:	signature:(const char *arg, int *i)
set_int_1_to_10	cgminer.c	/^static char *set_int_1_to_10(const char *arg, int *i)$/;"	f	file:	signature:(const char *arg, int *i)
set_int_1_to_65535	cgminer.c	/^static char *set_int_1_to_65535(const char *arg, int *i)$/;"	f	file:	signature:(const char *arg, int *i)
set_int_32_to_63	cgminer.c	/^static char *set_int_32_to_63(const char *arg, int *i)$/;"	f	file:	signature:(const char *arg, int *i)
set_int_range	cgminer.c	/^char *set_int_range(const char *arg, int *i, int min, int max)$/;"	f	signature:(const char *arg, int *i, int min, int max)
set_interface_altsetting	compat/libusb-1.0/libusb/libusbi.h	/^	int (*set_interface_altsetting)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
set_interface_altsetting	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*set_interface_altsetting)(struct libusb_device_handle *dev_handle, int iface, int altsetting);$/;"	m	struct:windows_usb_api_backend	access:public
set_loadbalance	cgminer.c	/^static char *set_loadbalance(enum pool_strategy *strategy)$/;"	f	file:	signature:(enum pool_strategy *strategy)
set_logfile_openflag	cgminer.c	/^static char *set_logfile_openflag(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_logfile_path	cgminer.c	/^static char *set_logfile_path(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_logwork_asicnum	cgminer.c	/^static char *set_logwork_asicnum(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_logwork_path	cgminer.c	/^static char *set_logwork_path(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_lowprio	cgminer.c	/^static void set_lowprio(void)$/;"	f	file:	signature:(void)
set_nettime	util.c	/^static void set_nettime(void)$/;"	f	file:	signature:(void)
set_null	cgminer.c	/^static char *set_null(const char __maybe_unused *arg)$/;"	f	file:	signature:(const char __maybe_unused *arg)
set_options	cgminer.c	/^static void set_options(void)$/;"	f	file:	signature:(void)
set_pass	cgminer.c	/^static char *set_pass(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_pin	driver-minion.c	/^static void set_pin(struct minion_info *minioninfo, int pin, bool on)$/;"	f	file:	signature:(struct minion_info *minioninfo, int pin, bool on)
set_pll_config	driver-SPI-bitmine-A1.c	/^static bool set_pll_config(struct A1_chain *a1, int chip_id,$/;"	f	file:	signature:(struct A1_chain *a1, int chip_id, int ref_clock_khz, int sys_clock_khz)
set_port	MCast.java	/^	public void set_port(String _port)$/;"	m	class:MCast	access:public	signature:(String _port)
set_quota	cgminer.c	/^static char *set_quota(char *arg)$/;"	f	file:	signature:(char *arg)
set_report	MCast.java	/^	public void set_report(String _report)$/;"	m	class:MCast	access:public	signature:(String _report)
set_rotate	cgminer.c	/^static char *set_rotate(const char *arg, char __maybe_unused *i)$/;"	f	file:	signature:(const char *arg, char __maybe_unused *i)
set_rr	cgminer.c	/^static char *set_rr(enum pool_strategy *strategy)$/;"	f	file:	signature:(enum pool_strategy *strategy)
set_sched_start	cgminer.c	/^static char *set_sched_start(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_sched_stop	cgminer.c	/^static char *set_sched_stop(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_schedtime	cgminer.c	/^static char *set_schedtime(const char *arg, struct schedtime *st)$/;"	f	file:	signature:(const char *arg, struct schedtime *st)
set_sharelog	cgminer.c	/^static char* set_sharelog(char *arg)$/;"	f	file:	signature:(char *arg)
set_some_value	ccan/typesafe_cb/test/compile_fail-cast_if_type-promotable.c	8;"	d	file:
set_some_value	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast.c	9;"	d	file:
set_some_value	ccan/typesafe_cb/test/run.c	14;"	d	file:
set_target	cgminer.c	/^void set_target(unsigned char *dest_target, double diff)$/;"	f	signature:(unsigned char *dest_target, double diff)
set_target	miner.h	/^extern void set_target(unsigned char *dest_target, double diff);$/;"	p	signature:(unsigned char *dest_target, double diff)
set_temp_cutoff	cgminer.c	/^char *set_temp_cutoff(char *arg)$/;"	f	signature:(char *arg)
set_timing_mode	driver-antrouter.c	/^static void set_timing_mode(int this_option_offset, struct cgpu_info *antrouter, float readtimeout)$/;"	f	file:	signature:(int this_option_offset, struct cgpu_info *antrouter, float readtimeout)
set_timing_mode	driver-bmsc.c	/^static void set_timing_mode(int this_option_offset, struct cgpu_info *bmsc, float readtimeout)$/;"	f	file:	signature:(int this_option_offset, struct cgpu_info *bmsc, float readtimeout)
set_timing_mode	driver-icarus.c	/^static void set_timing_mode(int this_option_offset, struct cgpu_info *icarus)$/;"	f	file:	signature:(int this_option_offset, struct cgpu_info *icarus)
set_url	cgminer.c	/^static char *set_url(char *arg)$/;"	f	file:	signature:(char *arg)
set_usb	cgminer.c	/^static void set_usb(void)$/;"	f	file:	signature:(void)
set_user	cgminer.c	/^static char *set_user(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_userpass	cgminer.c	/^static char *set_userpass(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_version_path	cgminer.c	/^static char *set_version_path(const char *arg)$/;"	f	file:	signature:(const char *arg)
set_voltage	driver-avalon2.h	/^	int set_voltage;$/;"	m	struct:avalon2_info	access:public
set_wait	MCast.java	/^	public void set_wait(String _wait4)$/;"	m	class:MCast	access:public	signature:(String _wait4)
set_wiper	A1-trimpot-mcp4x.h	/^	bool (*set_wiper)(struct mcp4x *me, uint8_t id, uint16_t w);$/;"	m	struct:mcp4x	access:public
set_work	driver-SPI-bitmine-A1.c	/^static bool set_work(struct A1_chain *a1, uint8_t chip_id, struct work *work,$/;"	f	file:	signature:(struct A1_chain *a1, uint8_t chip_id, struct work *work, uint8_t queue_states)
set_work_ntime	cgminer.c	/^void set_work_ntime(struct work *work, int ntime)$/;"	f	signature:(struct work *work, int ntime)
set_work_ntime	miner.h	/^extern void set_work_ntime(struct work *work, int ntime);$/;"	p	signature:(struct work *work, int ntime)
setconfig	api.c	/^static void setconfig(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
setgetdes	usbutils.c	/^static bool setgetdes(ssize_t count, libusb_device *dev, struct libusb_device_handle *handle, struct libusb_config_descriptor **config, int cd, char **buf, size_t *off, size_t *len)$/;"	f	file:	signature:(ssize_t count, libusb_device *dev, struct libusb_device_handle *handle, struct libusb_config_descriptor **config, int cd, char **buf, size_t *off, size_t *len)
setled	driver-minion.c	/^	bool setled[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
setpriority	compat.h	/^static inline int setpriority(__maybe_unused int which, __maybe_unused int who, __maybe_unused int prio)$/;"	f	signature:(__maybe_unused int which, __maybe_unused int who, __maybe_unused int prio)
settings	driver-drillbit.c	/^static config_setting *settings;$/;"	v	file:
setup_gbt_solo	cgminer.c	/^static bool setup_gbt_solo(CURL *curl, struct pool *pool)$/;"	f	file:	signature:(CURL *curl, struct pool *pool)
setup_gbt_solo	cgminer.c	/^static bool setup_gbt_solo(CURL __maybe_unused *curl, struct pool __maybe_unused *pool)$/;"	f	file:	signature:(CURL __maybe_unused *curl, struct pool __maybe_unused *pool)
setup_groups	api.c	/^static void setup_groups()$/;"	f	file:
setup_ipaccess	api.c	/^static void setup_ipaccess()$/;"	f	file:
setup_stratum_socket	util.c	/^static bool setup_stratum_socket(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
setup_url	cgminer.c	/^static void setup_url(struct pool *pool, char *arg)$/;"	f	file:	signature:(struct pool *pool, char *arg)
severity	api.c	/^	const enum code_severity severity;$/;"	m	struct:CODES	typeref:enum:CODES::code_severity	file:	access:public
sfree_list	driver-bab.c	/^	K_LIST *sfree_list;$/;"	m	struct:bab_info	file:	access:public
sha256	sha2.c	/^void sha256(const unsigned char *message, unsigned int len, unsigned char *digest)$/;"	f	signature:(const unsigned char *message, unsigned int len, unsigned char *digest)
sha256	sha2.h	/^void sha256(const unsigned char *message, unsigned int len,$/;"	p	signature:(const unsigned char *message, unsigned int len, unsigned char *digest)
sha256_ctx	sha2.h	/^} sha256_ctx;$/;"	t	typeref:struct:__anon62
sha256_final	sha2.c	/^void sha256_final(sha256_ctx *ctx, unsigned char *digest)$/;"	f	signature:(sha256_ctx *ctx, unsigned char *digest)
sha256_final	sha2.h	/^void sha256_final(sha256_ctx *ctx, unsigned char *digest);$/;"	p	signature:(sha256_ctx *ctx, unsigned char *digest)
sha256_func	miner.h	/^typedef bool (*sha256_func)(struct thr_info*, const unsigned char *pmidstate,$/;"	t
sha256_h0	sha2.c	/^uint32_t sha256_h0[8] =$/;"	v
sha256_init	sha2.c	/^void sha256_init(sha256_ctx *ctx)$/;"	f	signature:(sha256_ctx *ctx)
sha256_init	sha2.h	/^void sha256_init(sha256_ctx * ctx);$/;"	p	signature:(sha256_ctx * ctx)
sha256_k	sha2.c	/^uint32_t sha256_k[64] =$/;"	v
sha256_prehash	driver-avalon2.c	/^static void sha256_prehash(const unsigned char *message, unsigned int len, unsigned char *digest)$/;"	f	file:	signature:(const unsigned char *message, unsigned int len, unsigned char *digest)
sha256_transf	sha2.c	/^void sha256_transf(sha256_ctx *ctx, const unsigned char *message,$/;"	f	signature:(sha256_ctx *ctx, const unsigned char *message, unsigned int block_nb)
sha256_update	sha2.c	/^void sha256_update(sha256_ctx *ctx, const unsigned char *message,$/;"	f	signature:(sha256_ctx *ctx, const unsigned char *message, unsigned int len)
sha256_update	sha2.h	/^void sha256_update(sha256_ctx *ctx, const unsigned char *message,$/;"	p	signature:(sha256_ctx *ctx, const unsigned char *message, unsigned int len)
share_diff	cgminer.c	/^uint64_t share_diff(const struct work *work)$/;"	f	signature:(const struct work *work)
share_diff	miner.h	/^	uint64_t	share_diff;$/;"	m	struct:work	access:public
share_diff	miner.h	/^extern uint64_t share_diff(const struct work *work);$/;"	p	signature:(const struct work *work)
share_hashes	driver-cointerra.h	/^	uint64_t share_hashes;$/;"	m	struct:cointerra_info	access:public
share_ndiff	cgminer.c	/^uint64_t share_ndiff(const struct work *work)$/;"	f	signature:(const struct work *work)
share_ndiff	miner.h	/^extern uint64_t share_ndiff(const struct work *work);$/;"	p	signature:(const struct work *work)
share_result	cgminer.c	/^share_result(json_t *val, json_t *res, json_t *err, const struct work *work,$/;"	f	file:	signature:(json_t *val, json_t *res, json_t *err, const struct work *work, char *hashshow, bool resubmit, char *worktime)
share_work_tdiff	cgminer.c	/^int share_work_tdiff(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
share_work_tdiff	miner.h	/^extern int share_work_tdiff(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
shared_strategy	cgminer.c	/^static bool shared_strategy(void)$/;"	f	file:	signature:(void)
sharelog	cgminer.c	/^static void sharelog(const char*disposition, const struct work*work)$/;"	f	file:	signature:(const char*disposition, const struct work*work)
sharelog_file	cgminer.c	/^static FILE *sharelog_file = NULL;$/;"	v	file:
sharelog_lock	cgminer.c	/^static pthread_mutex_t sharelog_lock;$/;"	v	file:
shares	driver-knc.c	/^	uint32_t shares;$/;"	m	struct:knc_core_state	file:	access:public
shares	driver-knc.c	/^	uint64_t shares;		\/* diff1 shares reported by hardware *\/$/;"	m	struct:knc_state	file:	access:public
shares	miner.h	/^	int last_shares, shares;$/;"	m	struct:pool	access:public
shares	miner.h	/^	uint32_t shares;$/;"	m	struct:modminer_fpga_state	access:public
shares_last_hw	miner.h	/^	uint32_t shares_last_hw;$/;"	m	struct:modminer_fpga_state	access:public
shares_to_good	miner.h	/^	uint32_t shares_to_good;$/;"	m	struct:modminer_fpga_state	access:public
shed_count	driver-hashfast.h	/^	uint16_t shed_count;                        \/\/ Dynamic copy of #cores device has shed for thermal control$/;"	m	struct:hashfast_info	access:public
shed_count	hf_protocol.h	/^	uint16_t shed_count;                        \/\/ # of cores have been shedded for thermal control$/;"	m	struct:hf_gwq_data	access:public
shed_count	hf_protocol_be.h	/^	uint16_t shed_count;                        \/\/ # of cores have been shedded for thermal control$/;"	m	struct:hf_gwq_data	access:public
shed_supported	hf_protocol.h	/^	uint8_t  shed_supported:1;              \/\/ Host supports gwq status shed_count$/;"	m	struct:hf_usb_init_header	access:public
shed_supported	hf_protocol_be.h	/^	uint8_t  shed_supported:1;              \/\/ Host supports gwq status shed_count$/;"	m	struct:hf_usb_init_header	access:public
short_table	ccan/opt/test/utils.c	/^struct opt_table short_table[] = {$/;"	v	typeref:struct:opt_table
should_roll	cgminer.c	/^static inline bool should_roll(struct work *work)$/;"	f	file:	signature:(struct work *work)
should_run	cgminer.c	/^static bool should_run(void)$/;"	f	file:	signature:(void)
show	ccan/opt/opt.h	/^	void (*show)(char buf[OPT_SHOW_LEN], const void *arg);$/;"	m	struct:opt_table	access:public
show_arg	ccan/opt/test/utils.c	/^void show_arg(char buf[OPT_SHOW_LEN], const char *arg)$/;"	f	signature:(char buf[OPT_SHOW_LEN], const char *arg)
show_arg	ccan/opt/test/utils.h	/^void show_arg(char buf[OPT_SHOW_LEN], const char *arg);$/;"	p	signature:(char buf[OPT_SHOW_LEN], const char *arg)
show_hash	cgminer.c	/^static void show_hash(struct work *work, char *hashshow)$/;"	f	file:	signature:(struct work *work, char *hashshow)
show_locks	api.c	/^void show_locks()$/;"	f
show_message	util.c	/^static bool show_message(struct pool *pool, json_t *val)$/;"	f	file:	signature:(struct pool *pool, json_t *val)
showcustompage	miner.php	/^function showcustompage($pagename, $systempage = false)$/;"	f
showdatetime	miner.php	/^function showdatetime()$/;"	f
showfields	miner.php	/^			$showfields = array();$/;"	v
showhead	miner.php	/^			$showhead = array();$/;"	v
showhead	miner.php	/^function showhead($cmd, $values, $justnames = false)$/;"	f
showndate	miner.php	/^	$showndate = true;$/;"	v
showndate	miner.php	/^$showndate = false;$/;"	v
shownsomething	miner.php	/^				$shownsomething = true;$/;"	v
shownsomething	miner.php	/^			$shownsomething = false;$/;"	v
shownsomething	miner.php	/^			$shownsomething = true;$/;"	v
shownsomething	miner.php	/^ $shownsomething = false;$/;"	v
showpoolinputs	miner.php	/^function showpoolinputs($rig, $ans)$/;"	f
showrigs	miner.php	/^function showrigs($anss, $headname, $rigname)$/;"	f
showtotal	miner.php	/^function showtotal($total, $when, $oldvalues)$/;"	f
shutdown	driver-bflsc.h	/^	bool shutdown;$/;"	m	struct:bflsc_info	access:public
shutdown	miner.h	/^	bool shutdown;$/;"	m	struct:cgpu_info	access:public
sick	miner.h	/^	struct timeval sick;$/;"	m	struct:thr_info	typeref:struct:thr_info::timeval	access:public
sigaction	lib/sigaction.c	/^sigaction (int sig, const struct sigaction *restrict act,$/;"	f	signature:(int sig, const struct sigaction *restrict act, struct sigaction *restrict oact)
sigaction_handler	lib/sigaction.c	/^sigaction_handler (int sig)$/;"	f	file:	signature:(int sig)
sigaddset	lib/sigprocmask.c	/^sigaddset (sigset_t *set, int sig)$/;"	f	signature:(sigset_t *set, int sig)
sigdelset	lib/sigprocmask.c	/^sigdelset (sigset_t *set, int sig)$/;"	f	signature:(sigset_t *set, int sig)
sigemptyset	lib/sigprocmask.c	/^sigemptyset (sigset_t *set)$/;"	f	signature:(sigset_t *set)
sigfillset	lib/sigprocmask.c	/^sigfillset (sigset_t *set)$/;"	f	signature:(sigset_t *set)
sighandler	cgminer.c	/^static void sighandler(int __maybe_unused sig)$/;"	f	file:	signature:(int __maybe_unused sig)
sigismember	lib/sigprocmask.c	/^sigismember (const sigset_t *set, int sig)$/;"	f	signature:(const sigset_t *set, int sig)
signal	lib/sigprocmask.c	35;"	d	file:
signal	lib/sigprocmask.c	83;"	d	file:
signal_work_update	cgminer.c	/^static void signal_work_update(void)$/;"	f	file:	signature:(void)
signature	driver-bflsc.h	/^	uint8_t signature;$/;"	m	struct:QueueJobPackStructure	access:public
signature	uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
signr	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int signr;$/;"	m	struct:usbfs_urb	access:public
sigpending	lib/sigprocmask.c	/^sigpending (sigset_t *set)$/;"	f	signature:(sigset_t *set)
sigprocmask	lib/sigprocmask.c	/^sigprocmask (int operation, const sigset_t *set, sigset_t *old_set)$/;"	f	signature:(int operation, const sigset_t *set, sigset_t *old_set)
simplelog	logging.h	46;"	d
singlerigsum	miner.php	/^$singlerigsum = array($/;"	v
sitem	driver-bab.c	/^typedef struct sitem {$/;"	s	file:
sitem::bank_off	driver-bab.c	/^	uint32_t bank_off[BAB_MAXBANKS+2];$/;"	m	struct:sitem	file:	access:public
sitem::chip_off	driver-bab.c	/^	uint32_t chip_off[BAB_MAXCHIPS+1];$/;"	m	struct:sitem	file:	access:public
sitem::rbuf	driver-bab.c	/^	uint8_t rbuf[BAB_MAXBUF];$/;"	m	struct:sitem	file:	access:public
sitem::siz	driver-bab.c	/^	uint32_t siz;$/;"	m	struct:sitem	file:	access:public
sitem::wbuf	driver-bab.c	/^	uint8_t wbuf[BAB_MAXBUF];$/;"	m	struct:sitem	file:	access:public
sitem::witems	driver-bab.c	/^	K_ITEM *witems[BAB_MAXCHIPS];$/;"	m	struct:sitem	file:	access:public
sitem::work_start	driver-bab.c	/^	struct timeval work_start;$/;"	m	struct:sitem	typeref:struct:sitem::timeval	file:	access:public
siz	api.c	/^	size_t siz;$/;"	m	struct:io_data	file:	access:public
siz	api.c	/^	size_t siz;$/;"	m	struct:sbitem	file:	access:public
siz	driver-bab.c	/^	uint32_t siz;$/;"	m	struct:sitem	file:	access:public
siz	driver-minion.c	/^	uint8_t siz[2];$/;"	m	struct:minion_header	file:	access:public
siz	klist.h	/^	size_t siz;		\/\/ item data size$/;"	m	struct:k_list	access:public
size	compat/jansson-2.6/src/hashtable.h	/^    size_t size;$/;"	m	struct:hashtable	access:public
size	compat/jansson-2.6/src/jansson_private.h	/^    size_t size;$/;"	m	struct:__anon23	access:public
size	compat/jansson-2.6/src/strbuffer.h	/^    size_t size;     \/* bytes allocated *\/$/;"	m	struct:__anon29	access:public
size	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  UInt32 size;$/;"	m	struct:darwin_msg_async_io_complete	access:public
size	driver-knc.c	/^		int size;$/;"	m	struct:knc_state::knc_spi_buffer	file:	access:public
size	usbutils.h	/^	uint16_t size;$/;"	m	struct:usb_epinfo	access:public
sizeof	driver-antrouter.c	/^ASSERT1(sizeof(uint32_t) == 4);$/;"	p	file:
sizeof	driver-avalon.h	/^ASSERT1(sizeof(uint32_t) == 4);$/;"	p	signature:(uint32_t)
sizeof	driver-avalon2.c	/^ASSERT1(sizeof(uint32_t) == 4);$/;"	p	file:
sizeof	driver-bitmain.h	/^ASSERT1(sizeof(uint32_t) == 4);$/;"	p	signature:(uint32_t)
sizeof	driver-bmsc.c	/^ASSERT1(sizeof(uint32_t) == 4);$/;"	p	file:
sizeof	driver-icarus.c	/^ASSERT1(sizeof(uint32_t) == 4);$/;"	p	file:
skipfirst	miner.php	/^		$skipfirst = false;$/;"	v
skipfirst	miner.php	/^ $skipfirst = true;$/;"	v
slavecount	driver-klondike.c	/^	uint8_t slavecount;$/;"	m	struct:klondike_status	file:	access:public
sleep	compat.h	/^static inline int sleep(unsigned int secs)$/;"	f	signature:(unsigned int secs)
sleep_ms	miner.h	/^	unsigned int sleep_ms;$/;"	m	struct:cgpu_info	access:public
slot	driver-knc.c	/^		int slot;$/;"	m	struct:knc_core_state::__anon54	file:	access:public
slot	driver-knc.c	/^		int slot;$/;"	m	struct:knc_core_state::__anon55	file:	access:public
slot	knc-asic.h	/^		int slot;$/;"	m	struct:knc_report::__anon59	access:public
slow	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char slow;$/;"	m	struct:usbfs_connectinfo	access:public
snl	compat/libusb-1.0/libusb/os/linux_netlink.c	/^struct sockaddr_nl snl = { .nl_family=AF_NETLINK, .nl_groups=KERNEL };$/;"	v	typeref:struct:sockaddr_nl
snprintf	compat/jansson-2.6/src/jansson_private.h	89;"	d
sock	api.c	/^	bool sock;$/;"	m	struct:io_data	file:	access:public
sock	miner.h	/^	SOCKETTYPE sock;$/;"	m	struct:pool	access:public
sock_blocks	util.h	/^	static inline bool sock_blocks(void)$/;"	f	signature:(void)
sock_connecting	util.c	/^static bool sock_connecting(void)$/;"	f	file:	signature:(void)
sock_full	util.c	/^bool sock_full(struct pool *pool)$/;"	f	signature:(struct pool *pool)
sock_full	util.h	/^bool sock_full(struct pool *pool);$/;"	p	signature:(struct pool *pool)
sock_io_new	api.c	668;"	d	file:
sock_timeout	util.h	/^	static inline bool sock_timeout(void)$/;"	f	signature:(void)
sockaddr_proxy_port	miner.h	/^	char *sockaddr_proxy_port;$/;"	m	struct:pool	access:public
sockaddr_proxy_url	miner.h	/^	char *sockaddr_proxy_url;$/;"	m	struct:pool	access:public
sockaddr_url	miner.h	/^	char *sockaddr_url; \/* stripped url used for sockaddr *\/$/;"	m	struct:pool	access:public
sockbuf	miner.h	/^	char *sockbuf;$/;"	m	struct:pool	access:public
sockbuf_size	miner.h	/^	size_t sockbuf_size;$/;"	m	struct:pool	access:public
socket	API.java	/^	static private Socket socket = null;$/;"	f	class:API	file:	access:private
socket	api-example.php	/^ $socket = getsock('127.0.0.1', 4028);$/;"	v
socket	api-example.php	/^ $socket = null;$/;"	v
socket	api-example.php	/^ $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);$/;"	v
socket	api-example.php	/^ if ($socket === false || $socket === null)$/;"	v
socket	api-example.py	/^import socket$/;"	i
socket	miner.php	/^ $socket = getsock($rig, $miner, $port);$/;"	v
socket	miner.php	/^ $socket = null;$/;"	v
socket	miner.php	/^ $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);$/;"	v
socket	miner.php	/^ if ($socket === false || $socket === null)$/;"	v
socket_fd	driver-spondoolies-sp10.h	/^	int socket_fd;$/;"	m	struct:spond_adapter	access:public
socket_fd	driver-spondoolies-sp30.h	/^	int socket_fd;$/;"	m	struct:spond_adapter	access:public
socket_full	util.c	/^static bool socket_full(struct pool *pool, int wait)$/;"	f	file:	signature:(struct pool *pool, int wait)
sockrcvtimeoutsec	miner.php	/^$sockrcvtimeoutsec = 40;$/;"	v
socks4_negotiate	util.c	/^static bool socks4_negotiate(struct pool *pool, int sockd, bool socks4a)$/;"	f	file:	signature:(struct pool *pool, int sockd, bool socks4a)
socks5_negotiate	util.c	/^static bool socks5_negotiate(struct pool *pool, int sockd)$/;"	f	file:	signature:(struct pool *pool, int sockd)
socksndtimeoutsec	miner.php	/^$socksndtimeoutsec = 10;$/;"	v
solved	miner.h	/^	int solved;$/;"	m	struct:pool	access:public
source	compat/jansson-2.6/src/jansson.h	/^    char source[JSON_ERROR_SOURCE_LENGTH];$/;"	m	struct:__anon28	access:public
sp10_drv	driver-spondoolies-sp10.c	/^struct device_drv sp10_drv = {$/;"	v	typeref:struct:device_drv
sp30_drv	driver-spondoolies-sp30.c	/^struct device_drv sp30_drv = {$/;"	v	typeref:struct:device_drv
space	usbutils.c	/^static const char *space = " ";$/;"	v	file:
spare	hf_protocol.h	/^	uint16_t spare;$/;"	m	struct:hf_g1_die_data	access:public
spare	hf_protocol.h	/^	uint16_t spare;$/;"	m	struct:hf_gwq_data	access:public
spare	hf_protocol.h	/^	uint16_t spare;$/;"	m	struct:hf_usb_init_options	access:public
spare	hf_protocol.h	/^	uint8_t spare;$/;"	m	struct:hf_statistics	access:public
spare	hf_protocol_be.h	/^	uint16_t spare;$/;"	m	struct:hf_g1_die_data	access:public
spare	hf_protocol_be.h	/^	uint16_t spare;$/;"	m	struct:hf_gwq_data	access:public
spare	hf_protocol_be.h	/^	uint16_t spare;$/;"	m	struct:hf_usb_init_options	access:public
spare	hf_protocol_be.h	/^	uint8_t spare;$/;"	m	struct:hf_statistics	access:public
spare1	hf_protocol.h	/^	uint8_t  spare1:1;                      \/\/ Must always be 0$/;"	m	struct:hf_pll_config	access:public
spare1	hf_protocol.h	/^	uint8_t  spare1;$/;"	m	struct:hf_usb_init_header	access:public
spare1	hf_protocol_be.h	/^	uint8_t  spare1:1;                      \/\/ Must always be 0$/;"	m	struct:hf_pll_config	access:public
spare1	hf_protocol_be.h	/^	uint8_t  spare1;$/;"	m	struct:hf_usb_init_header	access:public
spare3	hf_protocol.h	/^	uint8_t  spare3[3];$/;"	m	struct:hf_hash_serial	access:public
spare3	hf_protocol_be.h	/^	uint8_t  spare3[3];$/;"	m	struct:hf_hash_serial	access:public
spec_nscheck	util.c	/^static void spec_nscheck(struct timespec *ts)$/;"	f	file:	signature:(struct timespec *ts)
speed	compat/libusb-1.0/libusb/libusbi.h	/^	enum libusb_speed speed;$/;"	m	struct:libusb_device	typeref:enum:libusb_device::libusb_speed	access:public
speed	knc-transport-spi.c	/^	uint32_t speed;$/;"	m	struct:spidev_context	file:	access:public
speed	spi-context.h	/^	uint32_t speed;$/;"	m	struct:spi_config	access:public
speed_hz	driver-bab.c	/^	uint32_t speed_hz;$/;"	m	struct:bab_info	file:	access:public
speed_next_work	driver-antrouter.c	/^	bool speed_next_work;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
speed_next_work	driver-bmsc.c	/^	bool speed_next_work;$/;"	m	struct:BMSC_INFO	file:	access:public
speed_next_work	driver-icarus.c	/^	bool speed_next_work;$/;"	m	struct:ICARUS_INFO	file:	access:public
spi	driver-SPI-bitmine-A1.c	/^static struct spi_ctx *spi;$/;"	v	typeref:struct:spi_ctx	file:
spi_add_break	libbitfury.c	/^void spi_add_break(struct bitfury_info *info)$/;"	f	signature:(struct bitfury_info *info)
spi_add_break	libbitfury.h	/^void spi_add_break(struct bitfury_info *info);$/;"	p	signature:(struct bitfury_info *info)
spi_add_buf	libbitfury.c	/^void spi_add_buf(struct bitfury_info *info, const void *buf, const int sz)$/;"	f	signature:(struct bitfury_info *info, const void *buf, const int sz)
spi_add_buf	libbitfury.h	/^void spi_add_buf(struct bitfury_info *info, const void *buf, const int sz);$/;"	p	signature:(struct bitfury_info *info, const void *buf, const int sz)
spi_add_buf_reverse	libbitfury.c	/^static void spi_add_buf_reverse(struct bitfury_info *info, const char *buf, const int sz)$/;"	f	file:	signature:(struct bitfury_info *info, const char *buf, const int sz)
spi_add_data	libbitfury.c	/^void spi_add_data(struct bitfury_info *info, uint16_t addr, const void *buf, int len)$/;"	f	signature:(struct bitfury_info *info, uint16_t addr, const void *buf, int len)
spi_add_data	libbitfury.h	/^void spi_add_data(struct bitfury_info *info, uint16_t addr, const void *buf, int len);$/;"	p	signature:(struct bitfury_info *info, uint16_t addr, const void *buf, int len)
spi_add_fasync	libbitfury.c	/^void spi_add_fasync(struct bitfury_info *info, int n)$/;"	f	signature:(struct bitfury_info *info, int n)
spi_add_fasync	libbitfury.h	/^void spi_add_fasync(struct bitfury_info *info, int n);$/;"	p	signature:(struct bitfury_info *info, int n)
spi_buffer	driver-knc.c	/^	} spi_buffer[KNC_SPI_BUFFERS];$/;"	m	struct:knc_state	typeref:struct:knc_state::knc_spi_buffer	file:	access:public
spi_clear_buf	libbitfury.c	/^void spi_clear_buf(struct bitfury_info *info)$/;"	f	signature:(struct bitfury_info *info)
spi_clear_buf	libbitfury.h	/^void spi_clear_buf(struct bitfury_info *info);$/;"	p	signature:(struct bitfury_info *info)
spi_clk_khz	A1-common.h	/^	int spi_clk_khz;$/;"	m	struct:A1_config_options	access:public
spi_config	spi-context.h	/^struct spi_config {$/;"	s
spi_config::bits	spi-context.h	/^	uint8_t bits;$/;"	m	struct:spi_config	access:public
spi_config::bus	spi-context.h	/^	int bus;$/;"	m	struct:spi_config	access:public
spi_config::cs_line	spi-context.h	/^	int cs_line;$/;"	m	struct:spi_config	access:public
spi_config::delay	spi-context.h	/^	uint16_t delay;$/;"	m	struct:spi_config	access:public
spi_config::mode	spi-context.h	/^	uint8_t mode;$/;"	m	struct:spi_config	access:public
spi_config::speed	spi-context.h	/^	uint32_t speed;$/;"	m	struct:spi_config	access:public
spi_config_reg	libbitfury.c	/^void spi_config_reg(struct bitfury_info *info, int cfgreg, int ena)$/;"	f	signature:(struct bitfury_info *info, int cfgreg, int ena)
spi_config_reg	libbitfury.h	/^void spi_config_reg(struct bitfury_info *info, int cfgreg, int ena);$/;"	p	signature:(struct bitfury_info *info, int cfgreg, int ena)
spi_ctx	A1-common.h	/^	struct spi_ctx *spi_ctx;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::spi_ctx	access:public
spi_ctx	spi-context.h	/^struct spi_ctx {$/;"	s
spi_ctx::config	spi-context.h	/^	struct spi_config config;$/;"	m	struct:spi_ctx	typeref:struct:spi_ctx::spi_config	access:public
spi_ctx::fd	spi-context.h	/^	int fd;$/;"	m	struct:spi_ctx	access:public
spi_errors	driver-minion.c	/^	uint64_t spi_errors;$/;"	m	struct:minion_info	file:	access:public
spi_exit	spi-context.c	/^extern void spi_exit(struct spi_ctx *ctx)$/;"	f	signature:(struct spi_ctx *ctx)
spi_exit	spi-context.h	/^extern void spi_exit(struct spi_ctx *ctx);$/;"	p	signature:(struct spi_ctx *ctx)
spi_init	spi-context.c	/^struct spi_ctx *spi_init(struct spi_config *config)$/;"	f	signature:(struct spi_config *config)
spi_init	spi-context.h	/^extern struct spi_ctx *spi_init(struct spi_config *config);$/;"	p	signature:(struct spi_config *config)
spi_list	driver-bab.c	/^	K_STORE *spi_list;$/;"	m	struct:bab_info	file:	access:public
spi_lock	driver-minion.c	/^	pthread_mutex_t spi_lock;$/;"	m	struct:minion_info	file:	access:public
spi_qcond	driver-knc.c	/^	pthread_cond_t spi_qcond;	\/* SPI queue change wakeup *\/$/;"	m	struct:knc_state	file:	access:public
spi_qlock	driver-knc.c	/^	pthread_mutex_t spi_qlock;	\/* SPI queue status lock *\/$/;"	m	struct:knc_state	file:	access:public
spi_reply	driver-bab.c	/^	cgsem_t spi_reply;$/;"	m	struct:bab_info	file:	access:public
spi_reset	libbitfury.c	/^bool spi_reset(struct cgpu_info *bitfury, struct bitfury_info *info)$/;"	f	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
spi_reset	libbitfury.h	/^bool spi_reset(struct cgpu_info *bitfury, struct bitfury_info *info);$/;"	p	signature:(struct cgpu_info *bitfury, struct bitfury_info *info)
spi_reset_count	driver-minion.c	/^	int spi_reset_count;$/;"	m	struct:minion_info	file:	access:public
spi_reset_io	driver-minion.c	/^	bool spi_reset_io;$/;"	m	struct:minion_info	file:	access:public
spi_resets	driver-minion.c	/^	uint64_t spi_resets;$/;"	m	struct:minion_info	file:	access:public
spi_rx	A1-common.h	/^	uint8_t spi_rx[MAX_CMD_LENGTH];$/;"	m	struct:A1_chain	access:public
spi_send_conf	libbitfury.c	/^void spi_send_conf(struct bitfury_info *info)$/;"	f	signature:(struct bitfury_info *info)
spi_send_conf	libbitfury.h	/^void spi_send_conf(struct bitfury_info *info);$/;"	p	signature:(struct bitfury_info *info)
spi_send_init	libbitfury.c	/^void spi_send_init(struct bitfury_info *info)$/;"	f	signature:(struct bitfury_info *info)
spi_send_init	libbitfury.h	/^void spi_send_init(struct bitfury_info *info);$/;"	p	signature:(struct bitfury_info *info)
spi_sent	driver-bab.c	/^	K_STORE *spi_sent;$/;"	m	struct:bab_info	file:	access:public
spi_set_freq	libbitfury.c	/^void spi_set_freq(struct bitfury_info *info)$/;"	f	signature:(struct bitfury_info *info)
spi_set_freq	libbitfury.h	/^void spi_set_freq(struct bitfury_info *info);$/;"	p	signature:(struct bitfury_info *info)
spi_thr	driver-bab.c	/^	struct thr_info spi_thr;$/;"	m	struct:bab_info	typeref:struct:bab_info::thr_info	file:	access:public
spi_thr	driver-knc.c	/^	struct thr_info spi_thr;	\/* SPI I\/O thread *\/$/;"	m	struct:knc_state	typeref:struct:knc_state::thr_info	file:	access:public
spi_transfer	spi-context.c	/^extern bool spi_transfer(struct spi_ctx *ctx, uint8_t *txbuf,$/;"	f	signature:(struct spi_ctx *ctx, uint8_t *txbuf, uint8_t *rxbuf, int len)
spi_transfer	spi-context.h	/^extern bool spi_transfer(struct spi_ctx *ctx, uint8_t *txbuf,$/;"	p	signature:(struct spi_ctx *ctx, uint8_t *txbuf, uint8_t *rxbuf, int len)
spi_tx	A1-common.h	/^	uint8_t spi_tx[MAX_CMD_LENGTH];$/;"	m	struct:A1_chain	access:public
spi_txrx	driver-bitfury.h	/^	bool (*spi_txrx)(struct cgpu_info *, struct bitfury_info *info);$/;"	m	struct:bitfury_info	access:public
spi_work	driver-bab.c	/^	cgsem_t spi_work;$/;"	m	struct:bab_info	file:	access:public
spibuf	driver-bitfury.h	/^	char spibuf[SPIBUF_SIZE];$/;"	m	struct:bitfury_info	access:public
spibufsz	driver-bitfury.h	/^	unsigned int spibufsz;$/;"	m	struct:bitfury_info	access:public
spichk	driver-bab.c	/^	uint32_t spichk;$/;"	m	struct:bab_work_reply	file:	access:public
spidev_context	knc-transport-spi.c	/^struct spidev_context {$/;"	s	file:
spidev_context::bits	knc-transport-spi.c	/^	uint8_t bits;$/;"	m	struct:spidev_context	file:	access:public
spidev_context::delay	knc-transport-spi.c	/^	uint16_t delay;$/;"	m	struct:spidev_context	file:	access:public
spidev_context::fd	knc-transport-spi.c	/^	int fd;$/;"	m	struct:spidev_context	file:	access:public
spidev_context::mode	knc-transport-spi.c	/^	uint8_t mode;$/;"	m	struct:spidev_context	file:	access:public
spidev_context::speed	knc-transport-spi.c	/^	uint32_t speed;$/;"	m	struct:spidev_context	file:	access:public
spifd	driver-bab.c	/^	int spifd;$/;"	m	struct:bab_info	file:	access:public
spifd	driver-minion.c	/^	int spifd;$/;"	m	struct:minion_info	file:	access:public
spimode	mcp2210.h	/^	unsigned int bitrate, icsv, acsv, cstdd, ldbtcsd, sdbd, bpst, spimode;$/;"	m	struct:mcp_settings	access:public
spir_thr	driver-minion.c	/^	struct thr_info spir_thr;$/;"	m	struct:minion_info	typeref:struct:minion_info::thr_info	file:	access:public
spiw_thr	driver-minion.c	/^	struct thr_info spiw_thr;$/;"	m	struct:minion_info	typeref:struct:minion_info::thr_info	file:	access:public
spond_adapter	driver-spondoolies-sp10.h	/^struct spond_adapter {$/;"	s
spond_adapter	driver-spondoolies-sp30.h	/^struct spond_adapter {$/;"	s
spond_adapter::adapter_state	driver-spondoolies-sp10.h	/^	ADAPTER_STATE adapter_state;$/;"	m	struct:spond_adapter	access:public
spond_adapter::adapter_state	driver-spondoolies-sp30.h	/^	ADAPTER_STATE adapter_state;$/;"	m	struct:spond_adapter	access:public
spond_adapter::bad	driver-spondoolies-sp10.h	/^	int bad;$/;"	m	struct:spond_adapter	access:public
spond_adapter::bad	driver-spondoolies-sp30.h	/^	int bad;$/;"	m	struct:spond_adapter	access:public
spond_adapter::cgpu	driver-spondoolies-sp10.h	/^	void *cgpu;$/;"	m	struct:spond_adapter	access:public
spond_adapter::cgpu	driver-spondoolies-sp30.h	/^	void *cgpu;$/;"	m	struct:spond_adapter	access:public
spond_adapter::current_job_id	driver-spondoolies-sp10.h	/^	int current_job_id;$/;"	m	struct:spond_adapter	access:public
spond_adapter::current_job_id	driver-spondoolies-sp30.h	/^	int current_job_id;$/;"	m	struct:spond_adapter	access:public
spond_adapter::empty	driver-spondoolies-sp10.h	/^	int empty;$/;"	m	struct:spond_adapter	access:public
spond_adapter::empty	driver-spondoolies-sp30.h	/^	int empty;$/;"	m	struct:spond_adapter	access:public
spond_adapter::front_temp	driver-spondoolies-sp10.h	/^	int front_temp;$/;"	m	struct:spond_adapter	access:public
spond_adapter::front_temp	driver-spondoolies-sp30.h	/^	int front_temp;$/;"	m	struct:spond_adapter	access:public
spond_adapter::good	driver-spondoolies-sp10.h	/^	int good;$/;"	m	struct:spond_adapter	access:public
spond_adapter::good	driver-spondoolies-sp30.h	/^	int good;$/;"	m	struct:spond_adapter	access:public
spond_adapter::last_stats	driver-spondoolies-sp10.h	/^	time_t last_stats;$/;"	m	struct:spond_adapter	access:public
spond_adapter::last_stats	driver-spondoolies-sp30.h	/^	time_t last_stats;$/;"	m	struct:spond_adapter	access:public
spond_adapter::lock	driver-spondoolies-sp10.h	/^	pthread_mutex_t lock;$/;"	m	struct:spond_adapter	access:public
spond_adapter::lock	driver-spondoolies-sp30.h	/^	pthread_mutex_t lock;$/;"	m	struct:spond_adapter	access:public
spond_adapter::mp_last_rsp	driver-spondoolies-sp10.h	/^	minergate_rsp_packet* mp_last_rsp;$/;"	m	struct:spond_adapter	access:public
spond_adapter::mp_last_rsp	driver-spondoolies-sp30.h	/^	minergate_rsp_packet_sp30* mp_last_rsp;$/;"	m	struct:spond_adapter	access:public
spond_adapter::mp_next_req	driver-spondoolies-sp10.h	/^	minergate_req_packet* mp_next_req;$/;"	m	struct:spond_adapter	access:public
spond_adapter::mp_next_req	driver-spondoolies-sp30.h	/^	minergate_req_packet_sp30* mp_next_req;$/;"	m	struct:spond_adapter	access:public
spond_adapter::my_jobs	driver-spondoolies-sp10.h	/^	spond_driver_work my_jobs[MAX_JOBS_IN_MINERGATE];$/;"	m	struct:spond_adapter	access:public
spond_adapter::my_jobs	driver-spondoolies-sp30.h	/^	spond_driver_work_sp30 my_jobs[MAX_JOBS_PENDING_IN_MINERGATE_SP30];$/;"	m	struct:spond_adapter	access:public
spond_adapter::overflow	driver-spondoolies-sp10.h	/^	int overflow;$/;"	m	struct:spond_adapter	access:public
spond_adapter::overflow	driver-spondoolies-sp30.h	/^	int overflow;$/;"	m	struct:spond_adapter	access:public
spond_adapter::parse_resp	driver-spondoolies-sp10.h	/^	int parse_resp;$/;"	m	struct:spond_adapter	access:public
spond_adapter::parse_resp	driver-spondoolies-sp30.h	/^	int parse_resp;$/;"	m	struct:spond_adapter	access:public
spond_adapter::rear_temp_bot	driver-spondoolies-sp10.h	/^	int rear_temp_bot;$/;"	m	struct:spond_adapter	access:public
spond_adapter::rear_temp_bot	driver-spondoolies-sp30.h	/^	int rear_temp_bot;$/;"	m	struct:spond_adapter	access:public
spond_adapter::rear_temp_top	driver-spondoolies-sp10.h	/^	int rear_temp_top;$/;"	m	struct:spond_adapter	access:public
spond_adapter::rear_temp_top	driver-spondoolies-sp30.h	/^	int rear_temp_top;$/;"	m	struct:spond_adapter	access:public
spond_adapter::reset_mg_queue	driver-spondoolies-sp10.h	/^	int reset_mg_queue;  \/\/ 2=reset, 1=fast send, 0=nada$/;"	m	struct:spond_adapter	access:public
spond_adapter::reset_mg_queue	driver-spondoolies-sp30.h	/^	int reset_mg_queue;  \/\/ 3=reset, 2=fast send 1 job, 1=fast send 10 jobs, 0=nada$/;"	m	struct:spond_adapter	access:public
spond_adapter::socket_fd	driver-spondoolies-sp10.h	/^	int socket_fd;$/;"	m	struct:spond_adapter	access:public
spond_adapter::socket_fd	driver-spondoolies-sp30.h	/^	int socket_fd;$/;"	m	struct:spond_adapter	access:public
spond_adapter::temp_rate	driver-spondoolies-sp10.h	/^	int temp_rate;$/;"	m	struct:spond_adapter	access:public
spond_adapter::temp_rate	driver-spondoolies-sp30.h	/^	int temp_rate;$/;"	m	struct:spond_adapter	access:public
spond_adapter::wins	driver-spondoolies-sp10.h	/^	int wins;$/;"	m	struct:spond_adapter	access:public
spond_adapter::wins	driver-spondoolies-sp30.h	/^	int wins;$/;"	m	struct:spond_adapter	access:public
spond_adapter::works_in_driver	driver-spondoolies-sp10.h	/^	int works_in_driver;$/;"	m	struct:spond_adapter	access:public
spond_adapter::works_in_driver	driver-spondoolies-sp30.h	/^	int works_in_driver;$/;"	m	struct:spond_adapter	access:public
spond_adapter::works_in_minergate_and_pending_tx	driver-spondoolies-sp10.h	/^	int works_in_minergate_and_pending_tx;$/;"	m	struct:spond_adapter	access:public
spond_adapter::works_in_minergate_and_pending_tx	driver-spondoolies-sp30.h	/^	int works_in_minergate_and_pending_tx;$/;"	m	struct:spond_adapter	access:public
spond_adapter::works_pending_tx	driver-spondoolies-sp10.h	/^	int works_pending_tx;$/;"	m	struct:spond_adapter	access:public
spond_adapter::works_pending_tx	driver-spondoolies-sp30.h	/^	int works_pending_tx;$/;"	m	struct:spond_adapter	access:public
spond_do_scaling	driver-spondoolies-sp10.h	/^int spond_do_scaling(struct spond_adapter *a);$/;"	p	signature:(struct spond_adapter *a)
spond_do_scaling	driver-spondoolies-sp30.h	/^int spond_do_scaling(struct spond_adapter *a);$/;"	p	signature:(struct spond_adapter *a)
spond_driver_work	driver-spondoolies-sp10.h	/^} spond_driver_work;$/;"	t	typeref:struct:__anon51
spond_driver_work_sp30	driver-spondoolies-sp30.h	/^} spond_driver_work_sp30;$/;"	t	typeref:struct:__anon13
spond_flush_work	driver-spondoolies-sp10.c	/^static void spond_flush_work(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
spond_flush_work_sp30	driver-spondoolies-sp30.c	/^static void spond_flush_work_sp30(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
spond_one_sec_timer_scaling	driver-spondoolies-sp10.h	/^int spond_one_sec_timer_scaling(struct spond_adapter *a, int t);$/;"	p	signature:(struct spond_adapter *a, int t)
spond_one_sec_timer_scaling	driver-spondoolies-sp30.h	/^int spond_one_sec_timer_scaling(struct spond_adapter *a, int t);$/;"	p	signature:(struct spond_adapter *a, int t)
spond_poll_stats	driver-spondoolies-sp10.c	/^static void spond_poll_stats(struct cgpu_info *spond, struct spond_adapter *a)$/;"	f	file:	signature:(struct cgpu_info *spond, struct spond_adapter *a)
spond_poll_stats	driver-spondoolies-sp30.c	/^static void spond_poll_stats(struct cgpu_info *spond, struct spond_adapter *a)$/;"	f	file:	signature:(struct cgpu_info *spond, struct spond_adapter *a)
spond_scanhash	driver-spondoolies-sp10.c	/^static int64_t spond_scanhash(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
spond_scanhash_sp30	driver-spondoolies-sp30.c	/^static int64_t spond_scanhash_sp30(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
spond_work_state	driver-spondoolies-sp10.h	/^typedef enum spond_work_state {$/;"	g
spond_work_state	driver-spondoolies-sp30.h	/^typedef enum spond_work_state {$/;"	g
spondoolies_api_stats	driver-spondoolies-sp10.c	/^static struct api_data *spondoolies_api_stats(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
spondoolies_api_stats_sp30	driver-spondoolies-sp30.c	/^static struct api_data *spondoolies_api_stats_sp30(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
spondoolies_detect	driver-spondoolies-sp10.c	/^static void spondoolies_detect(__maybe_unused bool hotplug)$/;"	f	file:	signature:(__maybe_unused bool hotplug)
spondoolies_detect_sp30	driver-spondoolies-sp30.c	/^static void spondoolies_detect_sp30(__maybe_unused bool hotplug)$/;"	f	file:	signature:(__maybe_unused bool hotplug)
spondoolies_flush_queue	driver-spondoolies-sp10.c	/^static bool spondoolies_flush_queue(struct spond_adapter* a, bool flush_queue)$/;"	f	file:	signature:(struct spond_adapter* a, bool flush_queue)
spondoolies_flush_queue	driver-spondoolies-sp30.c	/^static bool spondoolies_flush_queue(struct spond_adapter* a, bool flush_queue)$/;"	f	file:	signature:(struct spond_adapter* a, bool flush_queue)
spondoolies_prepare	driver-spondoolies-sp10.c	/^static bool spondoolies_prepare(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
spondoolies_prepare_sp30	driver-spondoolies-sp30.c	/^static bool spondoolies_prepare_sp30(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
spondoolies_queue_full	driver-spondoolies-sp10.c	/^static bool spondoolies_queue_full(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
spondoolies_queue_full_sp30	driver-spondoolies-sp30.c	/^static bool spondoolies_queue_full_sp30(struct cgpu_info *cgpu)$/;"	f	file:	signature:(struct cgpu_info *cgpu)
spondoolies_shutdown	driver-spondoolies-sp10.c	/^static void spondoolies_shutdown(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
spondoolies_shutdown_sp30	driver-spondoolies-sp30.c	/^static void spondoolies_shutdown_sp30(__maybe_unused struct thr_info *thr)$/;"	f	file:	signature:(__maybe_unused struct thr_info *thr)
src_p	api.c	2771;"	d	file:
ss	miner.php	/^function ss($a, $b)$/;"	f
ss_usb_cap	compat/libusb-1.0/libusb/libusb.h	/^	struct libusb_ss_usb_device_capability_descriptor *ss_usb_cap;$/;"	m	struct:libusb_bos_descriptor	typeref:struct:libusb_bos_descriptor::libusb_ss_usb_device_capability_descriptor	access:public
sshare_lock	cgminer.c	/^static pthread_mutex_t sshare_lock;$/;"	v	file:
sshare_sent	cgminer.c	/^	time_t sshare_sent;$/;"	m	struct:stratum_share	file:	access:public
sshare_time	cgminer.c	/^	time_t sshare_time;$/;"	m	struct:stratum_share	file:	access:public
sshares	miner.h	/^	int sshares; \/* stratum shares submitted waiting on response *\/$/;"	m	struct:pool	access:public
ssize_t	compat/libusb-1.0/libusb/libusb.h	/^  typedef __int64 ssize_t;$/;"	t
ssize_t	compat/libusb-1.0/libusb/libusb.h	/^  typedef int ssize_t;$/;"	t
ssize_t	compat/libusb-1.0/libusb/libusb.h	32;"	d
sta	miner.php	/^	$sta = $list['STATUS']['STATUS'];$/;"	v
sta_api	driver-minion.c	5264;"	d	file:
sta_lock	driver-minion.c	/^	pthread_mutex_t sta_lock;$/;"	m	struct:minion_info	file:	access:public
stage_work	cgminer.c	4200;"	d	file:
staged_rollable	cgminer.c	/^static int staged_rollable;$/;"	v	file:
staged_work	cgminer.c	/^struct work *staged_work = NULL;$/;"	v	typeref:struct:work
stale	driver-minion.c	/^	bool stale; \/\/ if stale, don't decrement que\/chipwork when discarded$/;"	m	struct:work_item	file:	access:public
stale	miner.h	/^	bool		stale;$/;"	m	struct:work	access:public
stale_shares	miner.h	/^	unsigned int stale_shares;$/;"	m	struct:pool	access:public
stale_work	cgminer.c	/^static bool stale_work(struct work *work, bool share)$/;"	f	file:	signature:(struct work *work, bool share)
stale_work	cgminer.c	/^static bool stale_work(struct work *work, bool share);$/;"	p	file:	signature:(struct work *work, bool share)
stales	A1-common.h	/^	int stales;$/;"	m	struct:A1_chip	access:public
start	MCast.java	/^	static private Date start = null;$/;"	f	class:MCast	file:	access:private
start	compat/jansson-2.6/src/pack_unpack.c	/^    const char *start;$/;"	m	struct:__anon15	file:	access:public
start	driver-antrouter.c	/^	bool start;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
start	driver-bmsc.c	/^	bool start;$/;"	m	struct:BMSC_INFO	file:	access:public
start_frame	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int start_frame;$/;"	m	struct:usbfs_urb	access:public
start_time	driver-blockerupter.h	/^	struct timeval start_time;$/;"	m	struct:blockerupter_info	typeref:struct:blockerupter_info::timeval	access:public
start_time	driver-spondoolies-sp10.h	/^	time_t           start_time;$/;"	m	struct:__anon51	access:public
start_time	driver-spondoolies-sp30.h	/^	time_t           start_time;$/;"	m	struct:__anon13	access:public
starting_nonce	hf_protocol.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_serial	access:public
starting_nonce	hf_protocol.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_usb	access:public
starting_nonce	hf_protocol_be.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_serial	access:public
starting_nonce	hf_protocol_be.h	/^	uint32_t starting_nonce;                \/\/ Usually set to 0$/;"	m	struct:hf_hash_usb	access:public
startup	driver-knc.c	/^	int startup;$/;"	m	struct:knc_state	file:	access:public
stas	miner.php	/^ $stas = array('S' => 'Success', 'W' => 'Warning', 'I' => 'Informational', 'E' => 'Error', 'F' => 'Fatal');$/;"	v
stat	api.c	/^	struct lockstat *stat;$/;"	m	struct:lockline	typeref:struct:lockline::lockstat	file:	access:public
stat_diagnostic	hf_protocol.h	/^	uint8_t  stat_diagnostic:1;                 \/\/ Never set this$/;"	m	struct:hf_config_data	access:public
stat_diagnostic	hf_protocol_be.h	/^	uint8_t  stat_diagnostic:1;                 \/\/ Never set this$/;"	m	struct:hf_config_data	access:public
stat_lock	driver-bflsc.h	/^	pthread_rwlock_t stat_lock;$/;"	m	struct:bflsc_info	access:public
stat_lock	driver-klondike.c	/^	pthread_rwlock_t stat_lock;$/;"	m	struct:klondike_info	file:	access:public
state	compat/jansson-2.6/src/load.c	/^    int state;$/;"	m	struct:__anon16	file:	access:public
state	driver-drillbit.h	/^  enum drillbit_chip_state state;$/;"	m	struct:drillbit_chip_info	typeref:enum:drillbit_chip_info::drillbit_chip_state	access:public
state	driver-klondike.c	/^	uint8_t state;$/;"	m	struct:klondike_status	file:	access:public
state	driver-knc.c	/^		} state;$/;"	m	struct:knc_state::knc_spi_buffer	typeref:enum:knc_state::knc_spi_buffer::__anon56	file:	access:public
state	driver-spondoolies-sp10.h	/^	SPONDWORK_STATE  state;$/;"	m	struct:__anon51	access:public
state	driver-spondoolies-sp30.h	/^	SPONDWORK_STATE  state;$/;"	m	struct:__anon13	access:public
state	knc-asic.h	/^	int state;$/;"	m	struct:knc_report	access:public
stats	usbutils.c	/^static void stats(struct cgpu_info *cgpu, struct timeval *tv_start, struct timeval *tv_finish, int err, int mode, enum usb_cmds cmd, int seq, int timeout)$/;"	f	file:	signature:(struct cgpu_info *cgpu, struct timeval *tv_start, struct timeval *tv_finish, int err, int mode, enum usb_cmds cmd, int seq, int timeout)
stats1	driver-hashfast.h	/^	struct hf_long_usb_stats1 stats1;$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_long_usb_stats1	access:public
stats_initialised	usbutils.c	/^static bool stats_initialised = false;$/;"	v	file:
stats_interval	hf_protocol.h	/^	uint8_t  stats_interval:7;                  \/\/ Minimum interval to report statistics (seconds)$/;"	m	struct:hf_config_data	access:public
stats_interval	hf_protocol_be.h	/^	uint8_t  stats_interval:7;                  \/\/ Minimum interval to report statistics (seconds)$/;"	m	struct:hf_config_data	access:public
stats_lock	cgminer.c	/^pthread_mutex_t stats_lock;$/;"	v
stats_overrun	driver-hashfast.h	/^	uint64_t stats_overrun;                     \/\/ Overrun in statistics reporting$/;"	m	struct:hf_long_statistics	access:public
stats_overrun	hf_protocol.h	/^	uint8_t stats_overrun;                      \/\/ Overrun in statistics reporting$/;"	m	struct:hf_statistics	access:public
stats_overrun	hf_protocol_be.h	/^	uint8_t stats_overrun;                      \/\/ Overrun in statistics reporting$/;"	m	struct:hf_statistics	access:public
statspage	miner.php	/^$statspage = array($/;"	v
statssum	miner.php	/^$statssum = array($/;"	v
status	compat/libusb-1.0/libusb/libusb.h	/^	enum libusb_transfer_status status;$/;"	m	struct:libusb_iso_packet_descriptor	typeref:enum:libusb_iso_packet_descriptor::libusb_transfer_status	access:public
status	compat/libusb-1.0/libusb/libusb.h	/^	enum libusb_transfer_status status;$/;"	m	struct:libusb_transfer	typeref:enum:libusb_transfer::libusb_transfer_status	access:public
status	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int status;$/;"	m	struct:usbfs_urb	access:public
status	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int status;$/;"	m	struct:usbfs_iso_packet_desc	access:public
status	driver-klondike.c	/^	KLIST *status;$/;"	m	struct:klondike_info	file:	access:public
status	driver-minion.c	/^	uint8_t status[DATA_SIZ];$/;"	m	struct:minion_result	file:	access:public
status	miner.h	/^	enum alive status;$/;"	m	struct:cgpu_info	typeref:enum:cgpu_info::alive	access:public
status	miner.php	/^					$status = null;$/;"	v
status	miner.php	/^			$status = $result[$name1b];$/;"	v
status	miner.php	/^	$status = null;$/;"	v
status2str	api.c	/^static const char *status2str(enum alive status)$/;"	f	file:	signature:(enum alive status)
status_batch_delay	hf_protocol.h	/^	uint8_t  status_batch_delay;                \/\/ Batching delay, time to wait before sending status$/;"	m	struct:hf_config_data	access:public
status_batch_delay	hf_protocol_be.h	/^	uint8_t  status_batch_delay;                \/\/ Batching delay, time to wait before sending status$/;"	m	struct:hf_config_data	access:public
status_period	hf_protocol.h	/^	uint16_t status_period:11;                  \/\/ Periodic status time, msec$/;"	m	struct:hf_config_data	access:public
status_period	hf_protocol_be.h	/^	uint16_t status_period:11;                  \/\/ Periodic status time, msec$/;"	m	struct:hf_config_data	access:public
statusline	cgminer.c	/^static char statusline[256];$/;"	v	file:
statuswin	cgminer.c	/^WINDOW *mainwin, *statuswin, *logwin;$/;"	v
statusy	cgminer.c	/^static int statusy;$/;"	v	file:
stgd_lock	cgminer.c	/^static pthread_mutex_t *stgd_lock;$/;"	v	file:
stpcpy	lib/string.in.h	/^_GL_CXXALIASWARN (stpcpy);$/;"	v
stpcpy	lib/string.in.h	226;"	d
stpncpy	lib/string.in.h	/^_GL_CXXALIASWARN (stpncpy);$/;"	v
stpncpy	lib/string.in.h	238;"	d
stpncpy	lib/string.in.h	239;"	d
stpncpy	lib/string.in.h	261;"	d
str	compat/libusb-1.0/libusb/os/windows_usb.c	/^	char* str;$/;"	m	struct:htab_entry	file:	access:public
str_text	util.c	/^void *str_text(char *ptr)$/;"	f	signature:(char *ptr)
str_text	util.h	/^void *str_text(char *ptr);$/;"	p	signature:(char *ptr)
strategies	cgminer.c	/^struct strategies strategies[] = {$/;"	v	typeref:struct:strategies
strategies	miner.h	/^struct strategies {$/;"	s
strategies::s	miner.h	/^	const char *s;$/;"	m	struct:strategies	access:public
stratum	miner.h	/^	bool		stratum;$/;"	m	struct:work	access:public
stratum_active	miner.h	/^	bool stratum_active;$/;"	m	struct:pool	access:public
stratum_init	miner.h	/^	bool stratum_init;$/;"	m	struct:pool	access:public
stratum_lock	miner.h	/^	pthread_mutex_t stratum_lock;$/;"	m	struct:pool	access:public
stratum_notify	miner.h	/^	bool stratum_notify;$/;"	m	struct:pool	access:public
stratum_port	miner.h	/^	char *stratum_port;$/;"	m	struct:pool	access:public
stratum_q	miner.h	/^	struct thread_q *stratum_q;$/;"	m	struct:pool	typeref:struct:pool::thread_q	access:public
stratum_resumed	cgminer.c	/^void stratum_resumed(struct pool *pool)$/;"	f	signature:(struct pool *pool)
stratum_resumed	miner.h	/^extern void stratum_resumed(struct pool *pool);$/;"	p	signature:(struct pool *pool)
stratum_rthread	cgminer.c	/^static void *stratum_rthread(void *userdata)$/;"	f	file:	signature:(void *userdata)
stratum_rthread	miner.h	/^	pthread_t stratum_rthread;$/;"	m	struct:pool	access:public
stratum_send	util.c	/^bool stratum_send(struct pool *pool, char *s, ssize_t len)$/;"	f	signature:(struct pool *pool, char *s, ssize_t len)
stratum_send	util.h	/^bool stratum_send(struct pool *pool, char *s, ssize_t len);$/;"	p	signature:(struct pool *pool, char *s, ssize_t len)
stratum_share	cgminer.c	/^struct stratum_share {$/;"	s	file:
stratum_share::block	cgminer.c	/^	bool block;$/;"	m	struct:stratum_share	file:	access:public
stratum_share::hh	cgminer.c	/^	UT_hash_handle hh;$/;"	m	struct:stratum_share	file:	access:public
stratum_share::id	cgminer.c	/^	int id;$/;"	m	struct:stratum_share	file:	access:public
stratum_share::sshare_sent	cgminer.c	/^	time_t sshare_sent;$/;"	m	struct:stratum_share	file:	access:public
stratum_share::sshare_time	cgminer.c	/^	time_t sshare_time;$/;"	m	struct:stratum_share	file:	access:public
stratum_share::work	cgminer.c	/^	struct work *work;$/;"	m	struct:stratum_share	typeref:struct:stratum_share::work	file:	access:public
stratum_share_result	cgminer.c	/^static void stratum_share_result(json_t *val, json_t *res_val, json_t *err_val,$/;"	f	file:	signature:(json_t *val, json_t *res_val, json_t *err_val, struct stratum_share *sshare)
stratum_shares	cgminer.c	/^static struct stratum_share *stratum_shares = NULL;$/;"	v	typeref:struct:stratum_share	file:
stratum_sthread	cgminer.c	/^static void *stratum_sthread(void *userdata)$/;"	f	file:	signature:(void *userdata)
stratum_sthread	miner.h	/^	pthread_t stratum_sthread;$/;"	m	struct:pool	access:public
stratum_url	miner.h	/^	char *stratum_url;$/;"	m	struct:pool	access:public
stratum_url	util.c	/^	char		*stratum_url;$/;"	m	struct:header_info	file:	access:public
stratum_work	miner.h	/^struct stratum_work {$/;"	s
stratum_work::clean	miner.h	/^	bool clean;$/;"	m	struct:stratum_work	access:public
stratum_work::diff	miner.h	/^	double diff;$/;"	m	struct:stratum_work	access:public
stratum_work::job_id	miner.h	/^	char *job_id;$/;"	m	struct:stratum_work	access:public
stratum_work::merkle_bin	miner.h	/^	unsigned char **merkle_bin;$/;"	m	struct:stratum_work	access:public
stratum_works	cgminer.c	/^static bool stratum_works(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
strbuffer_append	compat/jansson-2.6/src/strbuffer.c	/^int strbuffer_append(strbuffer_t *strbuff, const char *string)$/;"	f	signature:(strbuffer_t *strbuff, const char *string)
strbuffer_append	compat/jansson-2.6/src/strbuffer.h	/^int strbuffer_append(strbuffer_t *strbuff, const char *string);$/;"	p	signature:(strbuffer_t *strbuff, const char *string)
strbuffer_append_byte	compat/jansson-2.6/src/strbuffer.c	/^int strbuffer_append_byte(strbuffer_t *strbuff, char byte)$/;"	f	signature:(strbuffer_t *strbuff, char byte)
strbuffer_append_byte	compat/jansson-2.6/src/strbuffer.h	/^int strbuffer_append_byte(strbuffer_t *strbuff, char byte);$/;"	p	signature:(strbuffer_t *strbuff, char byte)
strbuffer_append_bytes	compat/jansson-2.6/src/strbuffer.c	/^int strbuffer_append_bytes(strbuffer_t *strbuff, const char *data, size_t size)$/;"	f	signature:(strbuffer_t *strbuff, const char *data, size_t size)
strbuffer_append_bytes	compat/jansson-2.6/src/strbuffer.h	/^int strbuffer_append_bytes(strbuffer_t *strbuff, const char *data, size_t size);$/;"	p	signature:(strbuffer_t *strbuff, const char *data, size_t size)
strbuffer_clear	compat/jansson-2.6/src/strbuffer.c	/^void strbuffer_clear(strbuffer_t *strbuff)$/;"	f	signature:(strbuffer_t *strbuff)
strbuffer_clear	compat/jansson-2.6/src/strbuffer.h	/^void strbuffer_clear(strbuffer_t *strbuff);$/;"	p	signature:(strbuffer_t *strbuff)
strbuffer_close	compat/jansson-2.6/src/strbuffer.c	/^void strbuffer_close(strbuffer_t *strbuff)$/;"	f	signature:(strbuffer_t *strbuff)
strbuffer_close	compat/jansson-2.6/src/strbuffer.h	/^void strbuffer_close(strbuffer_t *strbuff);$/;"	p	signature:(strbuffer_t *strbuff)
strbuffer_init	compat/jansson-2.6/src/strbuffer.c	/^int strbuffer_init(strbuffer_t *strbuff)$/;"	f	signature:(strbuffer_t *strbuff)
strbuffer_init	compat/jansson-2.6/src/strbuffer.h	/^int strbuffer_init(strbuffer_t *strbuff);$/;"	p	signature:(strbuffer_t *strbuff)
strbuffer_pop	compat/jansson-2.6/src/strbuffer.c	/^char strbuffer_pop(strbuffer_t *strbuff)$/;"	f	signature:(strbuffer_t *strbuff)
strbuffer_pop	compat/jansson-2.6/src/strbuffer.h	/^char strbuffer_pop(strbuffer_t *strbuff);$/;"	p	signature:(strbuffer_t *strbuff)
strbuffer_steal_value	compat/jansson-2.6/src/strbuffer.c	/^char *strbuffer_steal_value(strbuffer_t *strbuff)$/;"	f	signature:(strbuffer_t *strbuff)
strbuffer_steal_value	compat/jansson-2.6/src/strbuffer.h	/^char *strbuffer_steal_value(strbuffer_t *strbuff);$/;"	p	signature:(strbuffer_t *strbuff)
strbuffer_t	compat/jansson-2.6/src/strbuffer.h	/^} strbuffer_t;$/;"	t	typeref:struct:__anon29
strbuffer_value	compat/jansson-2.6/src/strbuffer.c	/^const char *strbuffer_value(const strbuffer_t *strbuff)$/;"	f	signature:(const strbuffer_t *strbuff)
strbuffer_value	compat/jansson-2.6/src/strbuffer.h	/^const char *strbuffer_value(const strbuffer_t *strbuff);$/;"	p	signature:(const strbuffer_t *strbuff)
strbufs	api.c	/^static K_LIST *strbufs;$/;"	v	file:
strcasestr	lib/string.in.h	/^_GL_CXXALIASWARN (strcasestr);$/;"	v
strcasestr	lib/string.in.h	577;"	d
strcasestr	lib/string.in.h	611;"	d
strchr	lib/string.in.h	271;"	d
strchrnul	lib/string.in.h	/^_GL_CXXALIASWARN (strchrnul);$/;"	v
strchrnul	lib/string.in.h	282;"	d
strchrnul	lib/string.in.h	310;"	d
strcspn	lib/string.in.h	428;"	d
strdup	lib/string.in.h	/^_GL_CXXALIASWARN (strdup);$/;"	v
strdup	lib/string.in.h	321;"	d
strdup	lib/string.in.h	322;"	d
strdup	lib/string.in.h	329;"	d
strdup	lib/string.in.h	338;"	d
stream	compat/jansson-2.6/src/load.c	/^    stream_t stream;$/;"	m	struct:__anon17	file:	access:public
stream_get	compat/jansson-2.6/src/load.c	/^static int stream_get(stream_t *stream, json_error_t *error)$/;"	f	file:	signature:(stream_t *stream, json_error_t *error)
stream_init	compat/jansson-2.6/src/load.c	/^stream_init(stream_t *stream, get_func get, void *data)$/;"	f	file:	signature:(stream_t *stream, get_func get, void *data)
stream_t	compat/jansson-2.6/src/load.c	/^} stream_t;$/;"	t	typeref:struct:__anon16	file:
stream_to_lex	compat/jansson-2.6/src/load.c	72;"	d	file:
stream_unget	compat/jansson-2.6/src/load.c	/^static void stream_unget(stream_t *stream, int c)$/;"	f	file:	signature:(stream_t *stream, int c)
strerror	lib/string.in.h	/^_GL_CXXALIASWARN (strerror);$/;"	v
strerror	lib/string.in.h	895;"	d
strerror	lib/string.in.h	896;"	d
strerror	lib/string.in.h	905;"	d
strerror_r	lib/string.in.h	/^_GL_CXXALIASWARN (strerror_r);$/;"	v
strerror_r	lib/string.in.h	916;"	d
strerror_r	lib/string.in.h	917;"	d
strerror_r	lib/string.in.h	933;"	d
string	compat/jansson-2.6/src/load.c	/^        char *string;$/;"	m	union:__anon17::__anon18	file:	access:public
string	miner.h	/^	char *string;$/;"	m	struct:string_elist	access:public
string_data_t	compat/jansson-2.6/src/load.c	/^} string_data_t;$/;"	t	typeref:struct:__anon19	file:
string_elist	miner.h	/^struct string_elist {$/;"	s
string_elist::free_me	miner.h	/^	bool free_me;$/;"	m	struct:string_elist	access:public
string_elist::list	miner.h	/^	struct list_head list;$/;"	m	struct:string_elist	typeref:struct:string_elist::list_head	access:public
string_elist::string	miner.h	/^	char *string;$/;"	m	struct:string_elist	access:public
string_elist_add	miner.h	/^static inline void string_elist_add(const char *s, struct list_head *head)$/;"	f	signature:(const char *s, struct list_head *head)
string_elist_del	miner.h	/^static inline void string_elist_del(struct string_elist *item)$/;"	f	signature:(struct string_elist *item)
string_get	compat/jansson-2.6/src/load.c	/^static int string_get(void *data)$/;"	f	file:	signature:(void *data)
strncat	lib/string.in.h	/^_GL_CXXALIASWARN (strncat);$/;"	v
strncat	lib/string.in.h	349;"	d
strncat	lib/string.in.h	350;"	d
strncat	lib/string.in.h	360;"	d
strndup	lib/string.in.h	/^_GL_CXXALIASWARN (strndup);$/;"	v
strndup	lib/string.in.h	371;"	d
strndup	lib/string.in.h	372;"	d
strndup	lib/string.in.h	386;"	d
strnlen	lib/string.in.h	/^_GL_CXXALIASWARN (strnlen);$/;"	v
strnlen	lib/string.in.h	399;"	d
strnlen	lib/string.in.h	400;"	d
strnlen	lib/string.in.h	416;"	d
strpbrk	lib/string.in.h	/^_GL_CXXALIASWARN (strpbrk);$/;"	v
strpbrk	lib/string.in.h	461;"	d
strpbrk	lib/string.in.h	467;"	d
strrchr	lib/string.in.h	487;"	d
strsep	lib/string.in.h	/^_GL_CXXALIASWARN (strsep);$/;"	v
strsep	lib/string.in.h	520;"	d
strsep	lib/string.in.h	526;"	d
strsignal	lib/string.in.h	/^_GL_CXXALIASWARN (strsignal);$/;"	v
strsignal	lib/string.in.h	943;"	d
strsignal	lib/string.in.h	957;"	d
strspn	lib/string.in.h	477;"	d
strstr	lib/string.in.h	/^_GL_CXXALIASWARN (strstr);$/;"	v
strstr	lib/string.in.h	536;"	d
strstr	lib/string.in.h	563;"	d
strtok_r	lib/string.in.h	/^_GL_CXXALIASWARN (strtok_r);$/;"	v
strtok_r	lib/string.in.h	646;"	d
strtok_r	lib/string.in.h	647;"	d
strtok_r	lib/string.in.h	658;"	d
strtok_r	lib/string.in.h	677;"	d
strverscmp	lib/string.in.h	/^_GL_CXXALIASWARN (strverscmp);$/;"	v
strverscmp	lib/string.in.h	972;"	d
stt	miner.php	/^	$stt = microtime(true);$/;"	v
sub_ident	usbutils.h	/^enum sub_ident {$/;"	g
subid	miner.h	/^	int		subid;$/;"	m	struct:work	access:public
submit_bulk_transfer	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int submit_bulk_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
submit_bulk_transfer	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int submit_bulk_transfer(struct usbi_transfer *itransfer,$/;"	f	file:	signature:(struct usbi_transfer *itransfer, unsigned char urb_type)
submit_bulk_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int submit_bulk_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
submit_bulk_transfer	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*submit_bulk_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
submit_control_transfer	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int submit_control_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
submit_control_transfer	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int submit_control_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
submit_control_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int submit_control_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
submit_control_transfer	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*submit_control_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
submit_fail	miner.h	/^	bool submit_fail;$/;"	m	struct:pool	access:public
submit_iso_transfer	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int submit_iso_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
submit_iso_transfer	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int submit_iso_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
submit_iso_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int submit_iso_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
submit_iso_transfer	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*submit_iso_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
submit_noffset_nonce	cgminer.c	/^bool submit_noffset_nonce(struct thr_info *thr, struct work *work_in, uint32_t nonce,$/;"	f	signature:(struct thr_info *thr, struct work *work_in, uint32_t nonce, int noffset)
submit_noffset_nonce	miner.h	/^extern bool submit_noffset_nonce(struct thr_info *thr, struct work *work, uint32_t nonce, int noffset);$/;"	p	signature:(struct thr_info *thr, struct work *work, uint32_t nonce, int noffset)
submit_noffset_nonce	miner.h	/^extern bool submit_noffset_nonce(struct thr_info *thr, struct work *work, uint32_t nonce,$/;"	p	signature:(struct thr_info *thr, struct work *work, uint32_t nonce, int noffset)
submit_nonce	cgminer.c	/^bool submit_nonce(struct thr_info *thr, struct work *work, uint32_t nonce)$/;"	f	signature:(struct thr_info *thr, struct work *work, uint32_t nonce)
submit_nonce	miner.h	/^extern bool submit_nonce(struct thr_info *thr, struct work *work, uint32_t nonce);$/;"	p	signature:(struct thr_info *thr, struct work *work, uint32_t nonce)
submit_nonce2_nonce	cgminer.c	/^bool submit_nonce2_nonce(struct thr_info *thr, struct pool *pool, struct pool *real_pool,$/;"	f	signature:(struct thr_info *thr, struct pool *pool, struct pool *real_pool, uint32_t nonce2, uint32_t nonce)
submit_nonce2_nonce	miner.h	/^bool submit_nonce2_nonce(struct thr_info *thr, struct pool *pool, struct pool *real_pool,$/;"	p	signature:(struct thr_info *thr, struct pool *pool, struct pool *real_pool, uint32_t nonce2, uint32_t nonce)
submit_nonce_1	cgminer.c	/^bool submit_nonce_1(struct thr_info *thr, struct work *work, uint32_t nonce, int * nofull)$/;"	f	signature:(struct thr_info *thr, struct work *work, uint32_t nonce, int * nofull)
submit_nonce_1	miner.h	/^extern bool submit_nonce_1(struct thr_info *thr, struct work *work, uint32_t nonce, int * nofull);$/;"	p	signature:(struct thr_info *thr, struct work *work, uint32_t nonce, int * nofull)
submit_nonce_2	cgminer.c	/^void submit_nonce_2(struct work *work)$/;"	f	signature:(struct work *work)
submit_nonce_2	miner.h	/^extern void submit_nonce_2(struct work *work);$/;"	p	signature:(struct work *work)
submit_nonce_direct	cgminer.c	/^bool submit_nonce_direct(struct thr_info *thr, struct work *work, uint32_t nonce)$/;"	f	signature:(struct thr_info *thr, struct work *work, uint32_t nonce)
submit_nonce_direct	miner.h	/^extern bool submit_nonce_direct(struct thr_info *thr, struct work *work, uint32_t nonce);$/;"	p	signature:(struct thr_info *thr, struct work *work, uint32_t nonce)
submit_old	miner.h	/^	bool submit_old;$/;"	m	struct:pool	access:public
submit_q	miner.h	/^	struct thread_q *submit_q;$/;"	m	struct:pool	typeref:struct:pool::thread_q	access:public
submit_tested_work	cgminer.c	/^bool submit_tested_work(struct thr_info *thr, struct work *work)$/;"	f	signature:(struct thr_info *thr, struct work *work)
submit_tested_work	miner.h	/^extern bool submit_tested_work(struct thr_info *thr, struct work *work);$/;"	p	signature:(struct thr_info *thr, struct work *work)
submit_transfer	compat/libusb-1.0/libusb/libusbi.h	/^	int (*submit_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:usbi_os_backend	access:public
submit_upstream_work	cgminer.c	/^static bool submit_upstream_work(struct work *work, CURL *curl, bool resubmit)$/;"	f	file:	signature:(struct work *work, CURL *curl, bool resubmit)
submit_work_async	cgminer.c	/^static void submit_work_async(struct work *work)$/;"	f	file:	signature:(struct work *work)
submit_work_thread	cgminer.c	/^static void *submit_work_thread(void *userdata)$/;"	f	file:	signature:(void *userdata)
submit_work_thread	cgminer.c	/^static void *submit_work_thread(void __maybe_unused *userdata)$/;"	f	file:	signature:(void __maybe_unused *userdata)
submits	driver-bitfury.h	/^	int *submits; \/\/ Submitted responses$/;"	m	struct:bitfury_info	access:public
subname	miner.php	/^			$subname = preg_replace('\/[0-9]\/', '', $name);$/;"	v
subsection	miner.php	/^				$subsection = $section1.'+'.$section2;$/;"	v
subsection	miner.php	/^			$subsection = $section1.'+'.$section2;$/;"	v
subtable_of	ccan/opt/private.h	9;"	d
subtables	ccan/opt/test/utils.c	/^struct opt_table subtables[] = {$/;"	v	typeref:struct:opt_table
subtime	util.c	/^void subtime(struct timeval *a, struct timeval *b)$/;"	f	signature:(struct timeval *a, struct timeval *b)
subtime	util.h	/^void subtime(struct timeval *a, struct timeval *b);$/;"	p	signature:(struct timeval *a, struct timeval *b)
success_auto	driver-drillbit.h	/^  uint32_t success_auto;$/;"	m	struct:drillbit_chip_info	access:public
success_count	driver-drillbit.h	/^  uint32_t success_count;$/;"	m	struct:drillbit_chip_info	access:public
success_more	miner.h	/^	uint32_t success_more;$/;"	m	struct:modminer_fpga_state	access:public
successful_connect	util.c	/^bool successful_connect = false;$/;"	v
suffix_string	api.c	/^static void suffix_string(uint64_t val, char *buf, size_t bufsiz, int sigdigits)$/;"	f	file:	signature:(uint64_t val, char *buf, size_t bufsiz, int sigdigits)
suffix_string	cgminer.c	/^static void suffix_string(uint64_t val, char *buf, size_t bufsiz, int sigdigits)$/;"	f	file:	signature:(uint64_t val, char *buf, size_t bufsiz, int sigdigits)
sum	miner.php	/^	$sum = array();$/;"	v
sum	miner.php	/^ $sum = $csp[1];$/;"	v
sumTi	driver-antrouter.c	/^	double sumTi;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
sumTi	driver-bmsc.c	/^	double sumTi;$/;"	m	struct:BMSC_HISTORY	file:	access:public
sumTi	driver-icarus.c	/^	double sumTi;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
sumXi	driver-antrouter.c	/^	double sumXi;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
sumXi	driver-bmsc.c	/^	double sumXi;$/;"	m	struct:BMSC_HISTORY	file:	access:public
sumXi	driver-icarus.c	/^	double sumXi;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
sumXi2	driver-antrouter.c	/^	double sumXi2;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
sumXi2	driver-bmsc.c	/^	double sumXi2;$/;"	m	struct:BMSC_HISTORY	file:	access:public
sumXi2	driver-icarus.c	/^	double sumXi2;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
sumXiTi	driver-antrouter.c	/^	double sumXiTi;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
sumXiTi	driver-bmsc.c	/^	double sumXiTi;$/;"	m	struct:BMSC_HISTORY	file:	access:public
sumXiTi	driver-icarus.c	/^	double sumXiTi;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
summary	api.c	/^static void summary(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
summary	driver-minion.c	/^	IOSTAT summary;$/;"	m	struct:minion_info	file:	access:public
supports_flag_bulk_continuation	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int supports_flag_bulk_continuation = -1;$/;"	v	file:
supports_flag_zero_packet	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int supports_flag_zero_packet = -1;$/;"	v	file:
supports_resume	cgminer.c	/^static bool supports_resume(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
suseconds_t	compat.h	/^typedef long suseconds_t;$/;"	t
suspend_stratum	util.c	/^void suspend_stratum(struct pool *pool)$/;"	f	signature:(struct pool *pool)
suspend_stratum	util.h	/^void suspend_stratum(struct pool *pool);$/;"	p	signature:(struct pool *pool)
swab256	miner.h	/^static inline void swab256(void *dest_p, const void *src_p)$/;"	f	signature:(void *dest_p, const void *src_p)
swab32	miner.h	/^static inline uint32_t swab32(uint32_t v)$/;"	f	signature:(uint32_t v)
swap256	miner.h	/^static inline void swap256(void *dest_p, const void *src_p)$/;"	f	signature:(void *dest_p, const void *src_p)
swap32tobe	driver-spondoolies-sp10.c	47;"	d	file:
swap32tobe	driver-spondoolies-sp10.c	52;"	d	file:
swap32tobe	driver-spondoolies-sp30.c	47;"	d	file:
swap32tobe	driver-spondoolies-sp30.c	52;"	d	file:
swap32tole	driver-spondoolies-sp10.c	49;"	d	file:
swap32tole	driver-spondoolies-sp10.c	54;"	d	file:
swap32tole	driver-spondoolies-sp30.c	49;"	d	file:
swap32tole	driver-spondoolies-sp30.c	54;"	d	file:
swap32yes	driver-spondoolies-sp10.c	/^static inline void swap32yes(void *out, const void *in, size_t sz)$/;"	f	file:	signature:(void *out, const void *in, size_t sz)
swap32yes	driver-spondoolies-sp30.c	/^static inline void swap32yes(void *out, const void *in, size_t sz)$/;"	f	file:	signature:(void *out, const void *in, size_t sz)
switch_logsize	cgminer.c	/^static void switch_logsize(bool __maybe_unused newdevs)$/;"	f	file:	signature:(bool __maybe_unused newdevs)
switch_pools	cgminer.c	/^void switch_pools(struct pool *selected)$/;"	f	signature:(struct pool *selected)
switch_pools	miner.h	/^extern void switch_pools(struct pool *selected);$/;"	p	signature:(struct pool *selected)
switch_status	cgminer.c	/^static bool switch_status;$/;"	v	file:
switchpool	api.c	/^static void switchpool(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, char *param, bool isjson, __maybe_unused char group)
swork	miner.h	/^	struct stratum_work swork;$/;"	m	struct:pool	typeref:struct:pool::stratum_work	access:public
swork_id	cgminer.c	/^int swork_id;$/;"	v
sys	api-example.py	/^import sys$/;"	i
sys	usbtest.py	/^import sys$/;"	i
sys_chip_sta	driver-minion.c	/^static void sys_chip_sta(struct cgpu_info *minioncgpu, int chip)$/;"	f	file:	signature:(struct cgpu_info *minioncgpu, int chip)
sys_clk_khz	A1-common.h	/^	int sys_clk_khz;$/;"	m	struct:A1_config_options	access:public
sys_pages	miner.php	/^$sys_pages = array($/;"	v
sys_path	compat/libusb-1.0/libusb/os/darwin_usb.h	/^  char                  sys_path[21];$/;"	m	struct:darwin_device_priv	access:public
sysfs_can_relate_devices	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int sysfs_can_relate_devices = 0;$/;"	v	file:
sysfs_dir	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^	char *sysfs_dir;$/;"	m	struct:linux_device_priv	file:	access:public
sysfs_get_active_config	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int sysfs_get_active_config(struct libusb_device *dev, int *config)$/;"	f	file:	signature:(struct libusb_device *dev, int *config)
sysfs_get_active_config_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int sysfs_get_active_config_descriptor(struct libusb_device *dev,$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer, size_t len)
sysfs_get_device_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int sysfs_get_device_descriptor(struct libusb_device *dev,$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer)
sysfs_get_device_list	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int sysfs_get_device_list(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
sysfs_has_descriptors	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int sysfs_has_descriptors = 0;$/;"	v	file:
sysfs_has_file	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int sysfs_has_file(const char *dirname, const char *filename)$/;"	f	file:	signature:(const char *dirname, const char *filename)
sysfs_scan_device	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int sysfs_scan_device(struct libusb_context *ctx, const char *devname)$/;"	f	file:	signature:(struct libusb_context *ctx, const char *devname)
syspage	miner.php	/^$syspage = array($/;"	v
syssum	miner.php	/^$syssum = array($/;"	v
systempage	miner.php	/^function getcsp($name, $systempage = false)$/;"	v
systempage	miner.php	/^function showcustompage($pagename, $systempage = false)$/;"	v
table	compat/jansson-2.6/src/jansson_private.h	/^    json_t **table;$/;"	m	struct:__anon23	access:public
tablebegin	miner.php	/^$tablebegin = '<tr><td><table border=1 cellpadding=5 cellspacing=0>';$/;"	v
tableend	miner.php	/^$tableend = '<\/table><\/td><\/tr>';$/;"	v
tacho	hf_protocol.h	/^	uint16_t tacho;                             \/\/ See documentation$/;"	m	struct:hf_g1_die_data	access:public
tacho	hf_protocol_be.h	/^	uint16_t tacho;                             \/\/ See documentation$/;"	m	struct:hf_g1_die_data	access:public
tail	klist.h	/^	struct k_item *tail;$/;"	m	struct:k_list	typeref:struct:k_list::k_item	access:public
tail	uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle	access:public
tail_join	api.c	/^static void tail_join(struct io_data *io_data, bool isjson)$/;"	f	file:	signature:(struct io_data *io_data, bool isjson)
tailsprintf	miner.h	1497;"	d
take_any	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^static void take_any(struct any *any)$/;"	f	file:	signature:(struct any *any)
take_any	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^static void take_any(struct any *any)$/;"	f	file:	signature:(struct any *any)
take_queued_work_bymidstate	cgminer.c	/^struct work *take_queued_work_bymidstate(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)$/;"	f	signature:(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)
take_queued_work_bymidstate	miner.h	/^extern struct work *take_queued_work_bymidstate(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen);$/;"	p	signature:(struct cgpu_info *cgpu, char *midstate, size_t midstatelen, char *data, int offset, size_t datalen)
take_work_by_id	driver-cointerra.c	/^static struct work *take_work_by_id(struct cgpu_info *cgpu, uint16_t id)$/;"	f	file:	signature:(struct cgpu_info *cgpu, uint16_t id)
target	miner.h	/^	unsigned char	target[32];$/;"	m	struct:work	access:public
target_freq	driver-hashratio.h	/^	uint8_t target_freq[HRTO_DEFAULT_MINERS];$/;"	m	struct:hashratio_info	access:public
task_id	driver-minion.c	/^	uint32_t task_id;$/;"	m	struct:res_item	file:	access:public
task_id	driver-minion.c	/^	uint32_t task_id;$/;"	m	struct:task_item	file:	access:public
task_id	driver-minion.c	/^	uint32_t task_id;$/;"	m	struct:work_item	file:	access:public
task_id	driver-minion.c	/^	uint8_t task_id[2];$/;"	m	struct:minion_que	file:	access:public
task_id2	driver-minion.c	/^	uint32_t task_id2;$/;"	m	struct:res_item	file:	access:public
task_item	driver-minion.c	/^typedef struct task_item {$/;"	s	file:
task_item::address	driver-minion.c	/^	uint8_t address;$/;"	m	struct:task_item	file:	access:public
task_item::chip	driver-minion.c	/^	uint8_t chip;$/;"	m	struct:task_item	file:	access:public
task_item::ioseq	driver-minion.c	/^	uint64_t ioseq;$/;"	m	struct:task_item	file:	access:public
task_item::obuf	driver-minion.c	/^	uint8_t obuf[MINION_BUFSIZ];$/;"	m	struct:task_item	file:	access:public
task_item::osiz	driver-minion.c	/^	uint32_t osiz;$/;"	m	struct:task_item	file:	access:public
task_item::rbuf	driver-minion.c	/^	uint8_t rbuf[MINION_BUFSIZ];$/;"	m	struct:task_item	file:	access:public
task_item::reply	driver-minion.c	/^	int reply;$/;"	m	struct:task_item	file:	access:public
task_item::rsiz	driver-minion.c	/^	uint32_t rsiz;$/;"	m	struct:task_item	file:	access:public
task_item::task_id	driver-minion.c	/^	uint32_t task_id;$/;"	m	struct:task_item	file:	access:public
task_item::tid	driver-minion.c	/^	uint64_t tid;$/;"	m	struct:task_item	file:	access:public
task_item::urgent	driver-minion.c	/^	bool urgent;$/;"	m	struct:task_item	file:	access:public
task_item::wbuf	driver-minion.c	/^	uint8_t wbuf[MINION_BUFSIZ];$/;"	m	struct:task_item	file:	access:public
task_item::witem	driver-minion.c	/^	K_ITEM *witem;$/;"	m	struct:task_item	file:	access:public
task_item::work	driver-minion.c	/^	struct work *work;$/;"	m	struct:task_item	typeref:struct:task_item::work	file:	access:public
task_item::work_state	driver-minion.c	/^	uint8_t work_state;$/;"	m	struct:task_item	file:	access:public
task_item::write	driver-minion.c	/^	bool write;$/;"	m	struct:task_item	file:	access:public
task_item::wsiz	driver-minion.c	/^	uint32_t wsiz;$/;"	m	struct:task_item	file:	access:public
task_list	driver-minion.c	/^	K_STORE *task_list;$/;"	m	struct:minion_info	file:	access:public
task_no	driver-icarus.c	/^	unsigned int task_no ;$/;"	m	struct:nonce_data	file:	access:public
task_ready	driver-minion.c	/^	cgsem_t task_ready;$/;"	m	struct:minion_info	file:	access:public
tasks_failed	driver-minion.c	/^	uint64_t tasks_failed[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
tasks_recovered	driver-minion.c	/^	uint64_t tasks_recovered[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
tbl	uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table	access:public
tdiff	util.c	/^double tdiff(struct timeval *end, struct timeval *start)$/;"	f	signature:(struct timeval *end, struct timeval *start)
tdiff	util.h	/^double tdiff(struct timeval *end, struct timeval *start);$/;"	p	signature:(struct timeval *end, struct timeval *start)
temp	A1-common.h	/^	uint8_t temp;$/;"	m	struct:A1_chain	access:public
temp	driver-avalon2.h	/^	int temp[2 * AVA2_DEFAULT_MODULARS];$/;"	m	struct:avalon2_info	access:public
temp	driver-bitmain.h	/^	int temp[BITMAIN_MAX_TEMP_NUM];$/;"	m	struct:bitmain_info	access:public
temp	driver-bitmain.h	/^	uint8_t temp[BITMAIN_MAX_TEMP_NUM];$/;"	m	struct:bitmain_rxstatus_data	access:public
temp	driver-drillbit.h	/^  uint16_t temp;$/;"	m	struct:drillbit_info	access:public
temp	driver-hashfast.h	/^	double temp;$/;"	m	struct:hf_die_data	access:public
temp	driver-hashratio.h	/^	int     temp;$/;"	m	struct:hashratio_info	access:public
temp	driver-klondike.c	/^	uint8_t temp;$/;"	m	struct:klondike_status	file:	access:public
temp	driver-minion.c	/^	uint16_t temp;$/;"	m	struct:minion_status	file:	access:public
temp	miner.h	/^	double temp;$/;"	m	struct:cgpu_info	access:public
temp0	driver-avalon.h	/^	int temp0;$/;"	m	struct:avalon_info	access:public
temp0	driver-avalon.h	/^	uint8_t temp0;$/;"	m	struct:avalon_result	access:public
temp1	driver-avalon.h	/^	int temp1;$/;"	m	struct:avalon_info	access:public
temp1	driver-avalon.h	/^	uint8_t temp1;$/;"	m	struct:avalon_result	access:public
temp1	driver-bflsc.h	/^	float temp1;$/;"	m	struct:bflsc_dev	access:public
temp1_5min_av	driver-bflsc.h	/^	float temp1_5min_av; \/\/ TODO:$/;"	m	struct:bflsc_dev	access:public
temp1_max	driver-bflsc.h	/^	float temp1_max;$/;"	m	struct:bflsc_dev	access:public
temp1_max_time	driver-bflsc.h	/^	time_t temp1_max_time;$/;"	m	struct:bflsc_dev	access:public
temp2	driver-avalon.h	/^	int temp2;$/;"	m	struct:avalon_info	access:public
temp2	driver-avalon.h	/^	uint8_t temp2;$/;"	m	struct:avalon_result	access:public
temp2	driver-bflsc.h	/^	float temp2;$/;"	m	struct:bflsc_dev	access:public
temp2_5min_av	driver-bflsc.h	/^	float temp2_5min_av; \/\/ TODO:$/;"	m	struct:bflsc_dev	access:public
temp2_max	driver-bflsc.h	/^	float temp2_max;$/;"	m	struct:bflsc_dev	access:public
temp2_max_time	driver-bflsc.h	/^	time_t temp2_max_time;$/;"	m	struct:bflsc_dev	access:public
temp_avg	driver-bitmain.h	/^	int temp_avg;$/;"	m	struct:bitmain_info	access:public
temp_cutoff_str	cgminer.c	/^static char *temp_cutoff_str = NULL;$/;"	v	file:
temp_drop	driver-avalon.c	/^static void temp_drop(struct avalon_info *info, int temp)$/;"	f	file:	signature:(struct avalon_info *info, int temp)
temp_exist	driver-bitmain.h	/^	uint32_t temp_exist;$/;"	m	struct:bitmain_rxstatus_data	access:public
temp_history_count	driver-avalon.h	/^	int temp_history_count;$/;"	m	struct:avalon_info	access:public
temp_history_count	driver-bitmain.h	/^	int temp_history_count;$/;"	m	struct:bitmain_info	access:public
temp_history_count	driver-hashratio.h	/^	int temp_history_count;$/;"	m	struct:hashratio_info	access:public
temp_history_index	driver-avalon.h	/^	int temp_history_index;$/;"	m	struct:avalon_info	access:public
temp_history_index	driver-bitmain.h	/^	int temp_history_index;$/;"	m	struct:bitmain_info	access:public
temp_history_index	driver-hashratio.h	/^	int temp_history_index;$/;"	m	struct:hashratio_info	access:public
temp_max	driver-avalon2.h	/^	int temp_max;$/;"	m	struct:avalon2_info	access:public
temp_max	driver-bitmain.h	/^	int temp_max;$/;"	m	struct:bitmain_info	access:public
temp_max	driver-hashratio.h	/^	int temp_max;$/;"	m	struct:hashratio_info	access:public
temp_num	driver-bitmain.h	/^	int temp_num;$/;"	m	struct:bitmain_info	access:public
temp_num	driver-bitmain.h	/^	uint8_t temp_num;$/;"	m	struct:bitmain_rxstatus_data	access:public
temp_old	driver-avalon.h	/^	int temp_old;$/;"	m	struct:avalon_info	access:public
temp_old	driver-bitmain.h	/^	int temp_old;$/;"	m	struct:bitmain_info	access:public
temp_old	driver-hashratio.h	/^	int temp_old;$/;"	m	struct:hashratio_info	access:public
temp_over_ctrl	driver-bitmain.h	/^	uint8_t temp_over_ctrl       :1;$/;"	m	struct:bitmain_txconfig_token	access:public
temp_rate	driver-spondoolies-sp10.h	/^	int temp_rate;$/;"	m	struct:spond_adapter	access:public
temp_rate	driver-spondoolies-sp30.h	/^	int temp_rate;$/;"	m	struct:spond_adapter	access:public
temp_rise	driver-avalon.c	/^static void temp_rise(struct avalon_info *info, int temp)$/;"	f	file:	signature:(struct avalon_info *info, int temp)
temp_str	driver-minion.c	/^static const char *temp_str(uint16_t temp)$/;"	f	file:	signature:(uint16_t temp)
temp_sum	driver-avalon.h	/^	int temp_sum;$/;"	m	struct:avalon_info	access:public
temp_sum	driver-bitmain.h	/^	int temp_sum;$/;"	m	struct:bitmain_info	access:public
temp_sum	driver-hashratio.h	/^	int temp_sum;$/;"	m	struct:hashratio_info	access:public
temp_target	driver-bitfury.h	/^	int temp_target;$/;"	m	struct:bitfury_info	access:public
temp_updates	driver-hashfast.h	/^	int temp_updates;$/;"	m	struct:hashfast_info	access:public
tempcritical	driver-klondike.c	/^	uint8_t tempcritical;$/;"	m	struct:klondike_cfg	file:	access:public
temperature	hf_protocol.h	/^	uint16_t temperature;                       \/\/ Regulator temp sensor$/;"	m	struct:hf_g1_die_data	access:public
temperature	hf_protocol_be.h	/^	uint16_t temperature;                       \/\/ Regulator temp sensor$/;"	m	struct:hf_g1_die_data	access:public
tempsent	driver-minion.c	/^	uint32_t tempsent;$/;"	m	struct:minion_status	file:	access:public
temptarget	driver-klondike.c	/^	uint8_t temptarget;$/;"	m	struct:klondike_cfg	file:	access:public
termhandler	cgminer.c	/^struct sigaction termhandler, inthandler;$/;"	v	typeref:struct:sigaction
termios_debug	fpgautils.c	/^void termios_debug(const char *devpath, struct termios *my_termios, const char *msg)$/;"	f	signature:(const char *devpath, struct termios *my_termios, const char *msg)
test	miner.php	/^				$test = $alldata['Fan Percent'];$/;"	v
test_arg	ccan/opt/test/utils.c	/^char *test_arg(const char *optarg, const char *arg)$/;"	f	signature:(const char *optarg, const char *arg)
test_arg	ccan/opt/test/utils.h	/^char *test_arg(const char *optarg, const char *arg);$/;"	p	signature:(const char *optarg, const char *arg)
test_cb_called	ccan/opt/test/utils.c	/^unsigned int test_cb_called;$/;"	v
test_noarg	ccan/opt/test/utils.c	/^char *test_noarg(void *arg)$/;"	f	signature:(void *arg)
test_noarg	ccan/opt/test/utils.h	/^char *test_noarg(void *arg);$/;"	p	signature:(void *arg)
test_nonce	cgminer.c	/^bool test_nonce(struct work *work, uint32_t nonce)$/;"	f	signature:(struct work *work, uint32_t nonce)
test_nonce	miner.h	/^extern bool test_nonce(struct work *work, uint32_t nonce);$/;"	p	signature:(struct work *work, uint32_t nonce)
test_nonce_diff	cgminer.c	/^bool test_nonce_diff(struct work *work, uint32_t nonce, double diff)$/;"	f	signature:(struct work *work, uint32_t nonce, double diff)
test_nonce_diff	miner.h	/^extern bool test_nonce_diff(struct work *work, uint32_t nonce, double diff);$/;"	p	signature:(struct work *work, uint32_t nonce, double diff)
test_pool_thread	cgminer.c	/^static void *test_pool_thread(void *arg)$/;"	f	file:	signature:(void *arg)
test_thread	miner.h	/^	pthread_t test_thread;$/;"	m	struct:pool	access:public
test_work_current	cgminer.c	/^static bool test_work_current(struct work *work)$/;"	f	file:	signature:(struct work *work)
tested_nonces	driver-bab.c	/^	uint64_t tested_nonces;$/;"	m	struct:bab_info	file:	access:public
tested_nonces	driver-minion.c	/^	uint64_t tested_nonces;$/;"	m	struct:minion_info	file:	access:public
testing	miner.h	/^	bool testing;$/;"	m	struct:pool	access:public
text	compat/jansson-2.6/src/jansson.h	/^    char text[JSON_ERROR_TEXT_LENGTH];$/;"	m	struct:__anon28	access:public
text	miner.php	/^ foreach ($inps as $text => $name)$/;"	v
text_print_status	cgminer.c	/^static void text_print_status(int thr_id)$/;"	f	file:	signature:(int thr_id)
tfree_list	driver-minion.c	/^	K_LIST *tfree_list;$/;"	m	struct:minion_info	file:	access:public
thr	driver-avalon.h	/^	struct thr_info *thr;$/;"	m	struct:avalon_info	typeref:struct:avalon_info::thr_info	access:public
thr	driver-bitfury.h	/^	struct thr_info *thr;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::thr_info	access:public
thr	driver-bitmain.h	/^	struct thr_info *thr;$/;"	m	struct:bitmain_info	typeref:struct:bitmain_info::thr_info	access:public
thr	driver-cointerra.h	/^	struct thr_info *thr;$/;"	m	struct:cointerra_info	typeref:struct:cointerra_info::thr_info	access:public
thr	driver-minion.c	/^	struct thr_info *thr;$/;"	m	struct:minion_info	typeref:struct:minion_info::thr_info	file:	access:public
thr	miner.h	/^	struct thr_info	*thr;$/;"	m	struct:work	typeref:struct:work::thr_info	access:public
thr	miner.h	/^	struct thr_info **thr;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::thr_info	access:public
thr_id	miner.h	/^	int		thr_id;$/;"	m	struct:work	access:public
thr_info	miner.h	/^struct thr_info {$/;"	s
thr_info::cgpu	miner.h	/^	struct cgpu_info *cgpu;$/;"	m	struct:thr_info	typeref:struct:thr_info::cgpu_info	access:public
thr_info::cgpu_data	miner.h	/^	void *cgpu_data;$/;"	m	struct:thr_info	access:public
thr_info::device_thread	miner.h	/^	int		device_thread;$/;"	m	struct:thr_info	access:public
thr_info::getwork	miner.h	/^	bool	getwork;$/;"	m	struct:thr_info	access:public
thr_info::id	miner.h	/^	int		id;$/;"	m	struct:thr_info	access:public
thr_info::last	miner.h	/^	struct timeval last;$/;"	m	struct:thr_info	typeref:struct:thr_info::timeval	access:public
thr_info::pause	miner.h	/^	bool	pause;$/;"	m	struct:thr_info	access:public
thr_info::primary_thread	miner.h	/^	bool		primary_thread;$/;"	m	struct:thr_info	access:public
thr_info::pth	miner.h	/^	pthread_t	pth;$/;"	m	struct:thr_info	access:public
thr_info::q	miner.h	/^	struct thread_q	*q;$/;"	m	struct:thr_info	typeref:struct:thr_info::thread_q	access:public
thr_info::sem	miner.h	/^	cgsem_t		sem;$/;"	m	struct:thr_info	access:public
thr_info::sick	miner.h	/^	struct timeval sick;$/;"	m	struct:thr_info	typeref:struct:thr_info::timeval	access:public
thr_info::work_restart	miner.h	/^	bool	work_restart;$/;"	m	struct:thr_info	access:public
thr_info::work_update	miner.h	/^	bool	work_update;$/;"	m	struct:thr_info	access:public
thr_info_cancel	util.c	/^void thr_info_cancel(struct thr_info *thr)$/;"	f	signature:(struct thr_info *thr)
thr_info_cancel	util.h	/^void thr_info_cancel(struct thr_info *thr);$/;"	p	signature:(struct thr_info *thr)
thr_info_create	util.c	/^int thr_info_create(struct thr_info *thr, pthread_attr_t *attr, void *(*start) (void *), void *arg)$/;"	f	signature:(struct thr_info *thr, pthread_attr_t *attr, void *(*start) (void *), void *arg)
thr_info_create	util.h	/^int thr_info_create(struct thr_info *thr, pthread_attr_t *attr, void *(*start) (void *), void *arg);$/;"	p	signature:(struct thr_info *thr, pthread_attr_t *attr, void *(*start) (void *), void *arg)
thread_enable	miner.h	/^	void (*thread_enable)(struct thr_info *);$/;"	m	struct:device_drv	access:public
thread_fail_init_count	miner.h	/^	int thread_fail_init_count;$/;"	m	struct:cgpu_info	access:public
thread_fail_queue_count	miner.h	/^	int thread_fail_queue_count;$/;"	m	struct:cgpu_info	access:public
thread_id	compat/libusb-1.0/libusb/os/poll_windows.c	/^	DWORD thread_id;$/;"	m	struct:__anon38	file:	access:public
thread_init	miner.h	/^	bool (*thread_init)(struct thr_info *);$/;"	m	struct:device_drv	access:public
thread_prepare	miner.h	/^	bool (*thread_prepare)(struct thr_info *);$/;"	m	struct:device_drv	access:public
thread_q	miner.h	/^struct thread_q {$/;"	s
thread_q::cond	miner.h	/^	pthread_cond_t		cond;$/;"	m	struct:thread_q	access:public
thread_q::frozen	miner.h	/^	bool frozen;$/;"	m	struct:thread_q	access:public
thread_q::mutex	miner.h	/^	pthread_mutex_t		mutex;$/;"	m	struct:thread_q	access:public
thread_q::q	miner.h	/^	struct list_head	q;$/;"	m	struct:thread_q	typeref:struct:thread_q::list_head	access:public
thread_reportin	cgminer.c	/^static void thread_reportin(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
thread_reportout	cgminer.c	/^static void thread_reportout(struct thr_info *thr)$/;"	f	file:	signature:(struct thr_info *thr)
thread_shutdown	miner.h	/^	void (*thread_shutdown)(struct thr_info *);$/;"	m	struct:device_drv	access:public
thread_zero_hash_count	miner.h	/^	int thread_zero_hash_count;$/;"	m	struct:cgpu_info	access:public
threads	miner.h	/^	int threads;$/;"	m	struct:cgpu_info	access:public
tid	compat/libusb-1.0/libusb/os/threads_windows.h	/^	DWORD            tid;$/;"	m	struct:usbi_cond_perthread	access:public
tid	driver-minion.c	/^	uint64_t tid;$/;"	m	struct:task_item	file:	access:public
tidyup	api.c	/^static void tidyup(__maybe_unused void *arg)$/;"	f	file:	signature:(__maybe_unused void *arg)
time_bands	driver-minion.c	/^static double time_bands[] = { 0.1, 0.5, 1.0, 2.0, 4.0, 8.0, 16.0, 32.0 };$/;"	v	file:
time_before	cgminer.c	/^static bool time_before(struct tm *tm1, struct tm *tm2)$/;"	f	file:	signature:(struct tm *tm1, struct tm *tm2)
time_less	util.c	/^bool time_less(struct timeval *a, struct timeval *b)$/;"	f	signature:(struct timeval *a, struct timeval *b)
time_less	util.h	/^bool time_less(struct timeval *a, struct timeval *b);$/;"	p	signature:(struct timeval *a, struct timeval *b)
time_more	util.c	/^bool time_more(struct timeval *a, struct timeval *b)$/;"	f	signature:(struct timeval *a, struct timeval *b)
time_more	util.h	/^bool time_more(struct timeval *a, struct timeval *b);$/;"	p	signature:(struct timeval *a, struct timeval *b)
timelimit	noncedup.c	/^	int timelimit;$/;"	m	struct:dupdata	file:	access:public
timeout	compat/libusb-1.0/libusb/libusb.h	/^	unsigned int timeout;$/;"	m	struct:libusb_transfer	access:public
timeout	compat/libusb-1.0/libusb/libusbi.h	/^	struct timeval timeout;$/;"	m	struct:usbi_transfer	typeref:struct:usbi_transfer::timeval	access:public
timeout	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint32_t timeout;	\/* in milliseconds *\/$/;"	m	struct:usbfs_ctrltransfer	access:public
timeout	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int timeout;	\/* in milliseconds *\/$/;"	m	struct:usbfs_bulktransfer	access:public
timeout	driver-antrouter.c	/^	int timeout;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
timeout	driver-avalon.h	/^	int timeout;$/;"	m	struct:avalon_info	access:public
timeout	driver-avalon.h	/^	uint8_t timeout;$/;"	m	struct:avalon_result	access:public
timeout	driver-bitmain.h	/^	int timeout;$/;"	m	struct:bitmain_info	access:public
timeout	driver-bmsc.c	/^	int timeout;$/;"	m	struct:BMSC_INFO	file:	access:public
timeout	driver-icarus.c	/^	int timeout;$/;"	m	struct:ICARUS_INFO	file:	access:public
timeout	driver-knc.c	/^	struct timeval timeout;$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::timeval	file:	access:public
timeout	usbutils.h	/^	unsigned int timeout;$/;"	m	struct:usb_find_devices	access:public
timeout_count	driver-drillbit.h	/^  uint32_t timeout_count;$/;"	m	struct:drillbit_chip_info	access:public
timeout_data	driver-avalon.h	/^	uint8_t timeout_data;$/;"	m	struct:avalon_task	access:public
timeout_data	driver-bitmain.h	/^	uint8_t timeout_data;$/;"	m	struct:bitmain_txconfig_token	access:public
timeout_eft	driver-bitmain.h	/^	uint8_t timeout_eft          :1;$/;"	m	struct:bitmain_txconfig_token	access:public
timeout_fail	miner.h	/^	uint32_t timeout_fail;$/;"	m	struct:modminer_fpga_state	access:public
timer_eft	driver-avalon.h	/^	uint8_t timer_eft	:1;$/;"	m	struct:avalon_task	access:public
timer_elapsed_us	driver-antrouter.h	/^long timer_elapsed_us(const struct timeval *tvp_timer, const struct timeval *tvp_now)$/;"	f	signature:(const struct timeval *tvp_timer, const struct timeval *tvp_now)
timer_mutex	compat/libusb-1.0/libusb/os/windows_usb.c	/^HANDLE timer_mutex = NULL;$/;"	v
timer_remaining_us	driver-antrouter.h	/^long timer_remaining_us(const struct timeval *tvp_timer, const struct timeval *tvp_now)$/;"	f	signature:(const struct timeval *tvp_timer, const struct timeval *tvp_now)
timer_request	compat/libusb-1.0/libusb/os/windows_usb.c	/^HANDLE timer_request[2] = { NULL, NULL };$/;"	v
timer_response	compat/libusb-1.0/libusb/os/windows_usb.c	/^HANDLE timer_response = NULL;$/;"	v
timer_set_delay	driver-antrouter.h	21;"	d
timer_set_now	driver-antrouter.c	/^void (*timer_set_now)(struct timeval *tv) = _now_is_not_set;$/;"	v
timer_thread	compat/libusb-1.0/libusb/os/windows_usb.c	/^HANDLE timer_thread = NULL;$/;"	v
timer_tp	compat/libusb-1.0/libusb/os/windows_usb.c	/^struct timespec timer_tp;$/;"	v	typeref:struct:timespec
timeradd	miner.h	104;"	d
timeraddspec	util.c	/^void timeraddspec(struct timespec *a, const struct timespec *b)$/;"	f	signature:(struct timespec *a, const struct timespec *b)
timeraddspec	util.h	/^void timeraddspec(struct timespec *a, const struct timespec *b);$/;"	p	signature:(struct timespec *a, const struct timespec *b)
timerfd	compat/libusb-1.0/libusb/libusbi.h	/^	int timerfd;$/;"	m	struct:libusb_context	access:public
timersub	compat/libusb-1.0/libusb/os/poll_windows.h	107;"	d
timersub	driver-antrouter.h	62;"	d
timersub	miner.h	93;"	d
timersubspec	util.c	/^static void __maybe_unused timersubspec(struct timespec *a, const struct timespec *b)$/;"	f	file:	signature:(struct timespec *a, const struct timespec *b)
times_received	miner.h	/^	uint64_t times_received;$/;"	m	struct:cgminer_pool_stats	access:public
times_sent	miner.h	/^	uint64_t times_sent;$/;"	m	struct:cgminer_pool_stats	access:public
timespec	compat/libusb-1.0/libusb/os/threads_windows.h	/^struct timespec {$/;"	s
timespec::tv_nsec	compat/libusb-1.0/libusb/os/threads_windows.h	/^		long tv_nsec;$/;"	m	struct:timespec	access:public
timespec::tv_sec	compat/libusb-1.0/libusb/os/threads_windows.h	/^		long tv_sec;$/;"	m	struct:timespec	access:public
timespec_to_ms	util.c	/^static int __maybe_unused timespec_to_ms(struct timespec *ts)$/;"	f	file:	signature:(struct timespec *ts)
timespec_to_val	util.c	/^void timespec_to_val(struct timeval *val, const struct timespec *spec)$/;"	f	signature:(struct timeval *val, const struct timespec *spec)
timespec_to_val	util.h	/^void timespec_to_val(struct timeval *val, const struct timespec *spec);$/;"	p	signature:(struct timeval *val, const struct timespec *spec)
timestamp	driver-spondoolies-sp10-p.h	/^	uint32_t timestamp;$/;"	m	struct:__anon44	access:public
timestamp	driver-spondoolies-sp30-p.h	/^  uint32_t timestamp;$/;"	m	struct:__anon64	access:public
timestamp	hf_protocol.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_serial	access:public
timestamp	hf_protocol.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_usb	access:public
timestamp	hf_protocol_be.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_serial	access:public
timestamp	hf_protocol_be.h	/^	uint32_t timestamp;                     \/\/ From block header$/;"	m	struct:hf_hash_usb	access:public
timeval_to_spec	util.c	/^void timeval_to_spec(struct timespec *spec, const struct timeval *val)$/;"	f	signature:(struct timespec *spec, const struct timeval *val)
timeval_to_spec	util.h	/^void timeval_to_spec(struct timespec *spec, const struct timeval *val);$/;"	p	signature:(struct timespec *spec, const struct timeval *val)
timeval_to_us	driver-antrouter.h	/^long timeval_to_us(const struct timeval *tvp)$/;"	f	signature:(const struct timeval *tvp)
timing_mode	driver-antrouter.c	/^	enum timing_mode timing_mode;$/;"	m	struct:ANTROUTER_INFO	typeref:enum:ANTROUTER_INFO::timing_mode	file:	access:public
timing_mode	driver-antrouter.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	g	file:
timing_mode	driver-bmsc.c	/^	enum timing_mode timing_mode;$/;"	m	struct:BMSC_INFO	typeref:enum:BMSC_INFO::timing_mode	file:	access:public
timing_mode	driver-bmsc.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	g	file:
timing_mode	driver-icarus.c	/^	enum timing_mode timing_mode;$/;"	m	struct:ICARUS_INFO	typeref:enum:ICARUS_INFO::timing_mode	file:	access:public
timing_mode	driver-icarus.c	/^enum timing_mode { MODE_DEFAULT, MODE_SHORT, MODE_LONG, MODE_VALUE };$/;"	g	file:
timing_mode_str	driver-antrouter.c	/^static const char *timing_mode_str(enum timing_mode timing_mode)$/;"	f	file:	signature:(enum timing_mode timing_mode)
timing_mode_str	driver-bmsc.c	/^static const char *timing_mode_str(enum timing_mode timing_mode)$/;"	f	file:	signature:(enum timing_mode timing_mode)
timing_mode_str	driver-icarus.c	/^static const char *timing_mode_str(enum timing_mode timing_mode)$/;"	f	file:	signature:(enum timing_mode timing_mode)
tiospeed	fpgautils.c	/^int tiospeed(speed_t speed)$/;"	f	signature:(speed_t speed)
tiospeed_t	driver-antrouter.c	/^speed_t tiospeed_t(int baud)$/;"	f	signature:(int baud)
title	miner.php	/^$title = 'Mine';$/;"	v
tlen	ccan/opt/opt.h	/^		size_t tlen;$/;"	m	union:opt_table::__anon48	access:public
tm	cgminer.c	/^	struct tm tm;$/;"	m	struct:schedtime	typeref:struct:schedtime::tm	file:	access:public
tmo_count	usbutils.h	/^	uint64_t tmo_count;$/;"	m	struct:cg_usb_info	access:public
to_locale	compat/jansson-2.6/src/strconv.c	/^static void to_locale(strbuffer_t *strbuffer)$/;"	f	file:	signature:(strbuffer_t *strbuffer)
tohigh	driver-minion.c	/^	bool tohigh;$/;"	m	struct:minion_status	file:	access:public
token	compat/jansson-2.6/src/load.c	/^    int token;$/;"	m	struct:__anon17	file:	access:public
token	compat/jansson-2.6/src/pack_unpack.c	/^    char token;$/;"	m	struct:__anon14	file:	access:public
token	compat/jansson-2.6/src/pack_unpack.c	/^    token_t token;$/;"	m	struct:__anon15	file:	access:public
token	compat/jansson-2.6/src/pack_unpack.c	34;"	d	file:
token_t	compat/jansson-2.6/src/pack_unpack.c	/^} token_t;$/;"	t	typeref:struct:__anon14	file:
token_type	driver-bitmain.h	/^	uint8_t token_type;$/;"	m	struct:bitmain_packet_head	access:public
token_type	driver-bitmain.h	/^	uint8_t token_type;$/;"	m	struct:bitmain_rxstatus_token	access:public
token_type	driver-bitmain.h	/^	uint8_t token_type;$/;"	m	struct:bitmain_txconfig_token	access:public
token_type	driver-bitmain.h	/^	uint8_t token_type;$/;"	m	struct:bitmain_txtask_token	access:public
tolines	driver-bflsc.c	/^static bool tolines(struct cgpu_info *bflsc, int dev, char *buf, int *lines, char ***items, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev, char *buf, int *lines, char ***items, enum usb_cmds cmd)
tot	api.c	/^	size_t tot;$/;"	m	struct:sbitem	file:	access:public
tot	miner.php	/^	$tot = 0;$/;"	v
tot_calc_hashes	driver-cointerra.h	/^	uint64_t tot_calc_hashes;$/;"	m	struct:cointerra_info	access:public
tot_core_hashes	driver-cointerra.h	/^	uint64_t tot_core_hashes[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
tot_flushed_hashes	driver-cointerra.h	/^	uint64_t tot_flushed_hashes;$/;"	m	struct:cointerra_info	access:public
tot_hashes	driver-cointerra.h	/^	uint64_t tot_hashes;$/;"	m	struct:cointerra_info	access:public
tot_hw_errors	driver-cointerra.h	/^	uint16_t tot_hw_errors[CTA_CORES];$/;"	m	struct:cointerra_info	access:public
tot_len	sha2.h	/^    unsigned int tot_len;$/;"	m	struct:__anon62	access:public
tot_reset_hashes	driver-cointerra.h	/^	uint64_t tot_reset_hashes;$/;"	m	struct:cointerra_info	access:public
tot_share_hashes	driver-cointerra.h	/^	uint64_t tot_share_hashes;$/;"	m	struct:cointerra_info	access:public
tot_underruns	driver-cointerra.h	/^	int tot_underruns;$/;"	m	struct:cointerra_info	access:public
total	klist.h	/^	int total;		\/\/ total allocated$/;"	m	struct:k_list	access:public
total	miner.php	/^					$total = customset($showfields, $sum, $section, $num, true, $result, $total, $cf);$/;"	v
total	miner.php	/^				$total = array();$/;"	v
total	miner.php	/^ $total = array();$/;"	v
total_accepted	cgminer.c	/^int64_t total_accepted, total_rejected, total_diff1;$/;"	v
total_bytes	driver-minion.c	/^	uint64_t total_bytes; \/\/ ioctl() bytes$/;"	m	struct:iostat	file:	access:public
total_control_threads	cgminer.c	/^static int total_control_threads;$/;"	v	file:
total_count	usbutils.c	/^static int total_count = 0;$/;"	v	file:
total_delay	driver-minion.c	/^	double total_delay; \/\/ total elapsed ioctl()$/;"	m	struct:iostat	file:	access:public
total_delay	usbutils.c	/^	double total_delay;$/;"	m	struct:cg_usb_stats_item	file:	access:public
total_devices	cgminer.c	/^int total_devices;$/;"	v
total_diff1	cgminer.c	/^int64_t total_accepted, total_rejected, total_diff1;$/;"	v
total_diff_accepted	cgminer.c	/^double total_diff_accepted, total_diff_rejected, total_diff_stale;$/;"	v
total_diff_rejected	cgminer.c	/^double total_diff_accepted, total_diff_rejected, total_diff_stale;$/;"	v
total_diff_stale	cgminer.c	/^double total_diff_accepted, total_diff_rejected, total_diff_stale;$/;"	v
total_disabled	driver-bab.c	/^	int total_disabled;$/;"	m	struct:bab_info	file:	access:public
total_discarded	cgminer.c	/^int64_t total_getworks, total_stale, total_discarded;$/;"	v
total_dlock	driver-minion.c	/^	double total_dlock;$/;"	m	struct:iostat	file:	access:public
total_dlwait	driver-minion.c	/^	double total_dlwait;$/;"	m	struct:iostat	file:	access:public
total_getworks	cgminer.c	/^int64_t total_getworks, total_stale, total_discarded;$/;"	v
total_go	cgminer.c	/^unsigned int total_go, total_ro;$/;"	v
total_ioc	driver-minion.c	/^	uint64_t total_ioc; \/\/ SPI_IOC_MESSAGE(x)$/;"	m	struct:iostat	file:	access:public
total_limit	usbutils.c	/^static int total_limit = 999999;$/;"	v	file:
total_links	driver-bab.c	/^	uint64_t total_links;$/;"	m	struct:bab_info	file:	access:public
total_mhashes	miner.h	/^	double total_mhashes;$/;"	m	struct:cgpu_info	access:public
total_mhashes_done	cgminer.c	/^double total_mhashes_done;$/;"	v
total_nonce_num	driver-bitmain.h	/^	uint64_t total_nonce_num;$/;"	m	struct:bitmain_info	access:public
total_nonce_num	driver-bitmain.h	/^	uint64_t total_nonce_num;$/;"	m	struct:bitmain_rxnonce_data	access:public
total_nonces	driver-bitfury.h	/^	int total_nonces;$/;"	m	struct:bitfury_info	access:public
total_over	usbutils.h	/^	uint64_t total_over;$/;"	m	struct:cg_usb_tmo	access:public
total_passes	cgminer.c	/^static int total_urls, total_users, total_passes, total_userpasses;$/;"	v	file:
total_pools	cgminer.c	/^int total_pools, enabled_pools;$/;"	v
total_proc_links	driver-bab.c	/^	uint64_t total_proc_links;$/;"	m	struct:bab_info	file:	access:public
total_read_delay	usbutils.h	/^	double total_read_delay;$/;"	m	struct:cg_usb_info	access:public
total_rejected	cgminer.c	/^int64_t total_accepted, total_rejected, total_diff1;$/;"	v
total_ro	cgminer.c	/^unsigned int total_go, total_ro;$/;"	v
total_rolling	cgminer.c	/^double total_rolling;$/;"	v
total_secs	cgminer.c	/^double total_secs = 1.0;$/;"	v
total_staged	cgminer.c	/^static int total_staged(void)$/;"	f	file:	signature:(void)
total_stale	cgminer.c	/^int64_t total_getworks, total_stale, total_discarded;$/;"	v
total_tests	driver-bab.c	/^	uint64_t total_tests;$/;"	m	struct:bab_info	file:	access:public
total_tmo	usbutils.h	/^	uint64_t total_tmo;$/;"	m	struct:cg_usb_tmo	access:public
total_tv_end	cgminer.c	/^static struct timeval total_tv_start, total_tv_end;$/;"	v	typeref:struct:	file:
total_tv_start	cgminer.c	/^static struct timeval total_tv_start, total_tv_end;$/;"	v	typeref:struct:timeval	file:
total_urls	cgminer.c	/^static int total_urls, total_users, total_passes, total_userpasses;$/;"	v	file:
total_userpasses	cgminer.c	/^static int total_urls, total_users, total_passes, total_userpasses;$/;"	v	file:
total_users	cgminer.c	/^static int total_urls, total_users, total_passes, total_userpasses;$/;"	v	file:
total_work	cgminer.c	/^static uint32_t total_work;$/;"	v	file:
total_work_inc	cgminer.c	/^static int total_work_inc(void)$/;"	f	file:	signature:(void)
total_work_links	driver-bab.c	/^	uint64_t total_work_links;$/;"	m	struct:bab_info	file:	access:public
total_write_delay	usbutils.h	/^	double total_write_delay;$/;"	m	struct:cg_usb_info	access:public
totalhashcount	driver-klondike.c	/^	uint64_t totalhashcount;$/;"	m	struct:device_info	file:	access:public
totclass	miner.php	/^ $totclass = 'tot';$/;"	v
tq_ent	util.c	/^struct tq_ent {$/;"	s	file:
tq_ent::data	util.c	/^	void			*data;$/;"	m	struct:tq_ent	file:	access:public
tq_ent::q_node	util.c	/^	struct list_head	q_node;$/;"	m	struct:tq_ent	typeref:struct:tq_ent::list_head	file:	access:public
tq_free	miner.h	/^extern void tq_free(struct thread_q *tq);$/;"	p	signature:(struct thread_q *tq)
tq_free	util.c	/^void tq_free(struct thread_q *tq)$/;"	f	signature:(struct thread_q *tq)
tq_freeze	miner.h	/^extern void tq_freeze(struct thread_q *tq);$/;"	p	signature:(struct thread_q *tq)
tq_freeze	util.c	/^void tq_freeze(struct thread_q *tq)$/;"	f	signature:(struct thread_q *tq)
tq_freezethaw	util.c	/^static void tq_freezethaw(struct thread_q *tq, bool frozen)$/;"	f	file:	signature:(struct thread_q *tq, bool frozen)
tq_new	miner.h	/^extern struct thread_q *tq_new(void);$/;"	p	signature:(void)
tq_new	util.c	/^struct thread_q *tq_new(void)$/;"	f	signature:(void)
tq_pop	miner.h	/^extern void *tq_pop(struct thread_q *tq, const struct timespec *abstime);$/;"	p	signature:(struct thread_q *tq, const struct timespec *abstime)
tq_pop	util.c	/^void *tq_pop(struct thread_q *tq, const struct timespec *abstime)$/;"	f	signature:(struct thread_q *tq, const struct timespec *abstime)
tq_push	miner.h	/^extern bool tq_push(struct thread_q *tq, void *data);$/;"	p	signature:(struct thread_q *tq, void *data)
tq_push	util.c	/^bool tq_push(struct thread_q *tq, void *data)$/;"	f	signature:(struct thread_q *tq, void *data)
tq_thaw	miner.h	/^extern void tq_thaw(struct thread_q *tq);$/;"	p	signature:(struct thread_q *tq)
tq_thaw	util.c	/^void tq_thaw(struct thread_q *tq)$/;"	f	signature:(struct thread_q *tq)
transactions	miner.h	/^	int transactions;$/;"	m	struct:pool	access:public
transfer	driver-antrouter.c	1094;"	d	file:
transfer	driver-bmsc.c	352;"	d	file:
transfer	driver-icarus.c	450;"	d	file:
transfer	usbutils.c	/^	struct libusb_transfer *transfer;$/;"	m	struct:usb_transfer	typeref:struct:usb_transfer::libusb_transfer	file:	access:public
transfer_callback	usbutils.c	/^static void LIBUSB_CALL transfer_callback(struct libusb_transfer *transfer)$/;"	f	file:	signature:(struct libusb_transfer *transfer)
transfer_priv_size	compat/libusb-1.0/libusb/libusbi.h	/^	size_t transfer_priv_size;$/;"	m	struct:usbi_os_backend	access:public
transfer_stamp	driver-knc.c	/^	int transfer_stamp;$/;"	m	struct:knc_core_state	file:	access:public
transferred	compat/libusb-1.0/libusb/libusbi.h	/^	int transferred;$/;"	m	struct:usbi_transfer	access:public
treply_list	driver-minion.c	/^	K_STORE *treply_list;$/;"	m	struct:minion_info	file:	access:public
trf_delay	driver-bab.c	/^	uint64_t trf_delay;$/;"	m	struct:bab_info	file:	access:public
tried_two_byte_temp	miner.h	/^	bool tried_two_byte_temp;$/;"	m	struct:modminer_fpga_state	access:public
tries	api.c	/^	uint64_t tries;$/;"	m	struct:lockinfo	file:	access:public
trim	api-example.c	/^static char *trim(char *str)$/;"	f	file:	signature:(char *str)
trim	hf_protocol.h	/^	uint32_t trim:4;                            \/\/ Trim value for temperature measurements$/;"	m	struct:hf_config_data	access:public
trim	hf_protocol_be.h	/^	uint32_t trim:4;                            \/\/ Trim value for temperature measurements$/;"	m	struct:hf_config_data	access:public
trimpot	A1-common.h	/^	struct mcp4x *trimpot;$/;"	m	struct:A1_chain	typeref:struct:A1_chain::mcp4x	access:public
true	compat/libusb-1.0/libusb/os/windows_usb.h	38;"	d
truediffone	cgminer.c	/^static const double truediffone = 26959535291011309493156476344723991336010898738574164086137773096960.0;$/;"	v	file:
tsd	driver-minion.c	/^	double tsd; \/\/ total doing one extra cgtime() each time$/;"	m	struct:iostat	file:	access:public
tsince_restart	cgminer.c	/^double tsince_restart(void)$/;"	f	signature:(void)
tsince_restart	miner.h	/^extern double tsince_restart(void);$/;"	p	signature:(void)
tsince_update	cgminer.c	/^double tsince_update(void)$/;"	f	signature:(void)
tsince_update	miner.h	/^extern double tsince_update(void);$/;"	p	signature:(void)
tt	usbutils.h	/^	bool tt; \/\/ Enable the transaction translator$/;"	m	struct:cg_usb_device	access:public
tune_down	driver-bab.c	/^	double tune_down;$/;"	m	struct:bab_info	file:	access:public
tune_up	driver-bab.c	/^	double tune_up;$/;"	m	struct:bab_info	file:	access:public
tv	api.c	/^	struct timeval tv;$/;"	m	struct:lockstat	typeref:struct:lockstat::timeval	file:	access:public
tv	miner.h	/^	struct timeval tv;$/;"	m	struct:curl_ent	typeref:struct:curl_ent::timeval	access:public
tv_cloned	miner.h	/^	struct timeval	tv_cloned;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
tv_getwork	miner.h	/^	struct timeval	tv_getwork;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
tv_getwork_reply	miner.h	/^	struct timeval	tv_getwork_reply;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
tv_hashmeter	cgminer.c	/^static struct timeval tv_hashmeter;$/;"	v	typeref:struct:timeval	file:
tv_idle	miner.h	/^	struct timeval tv_idle;$/;"	m	struct:pool	typeref:struct:pool::timeval	access:public
tv_inter_char_default	fpgautils.c	/^const struct timeval tv_inter_char_default = { 0, 1000 };$/;"	v	typeref:struct:timeval
tv_last_nonce_received	driver-klondike.c	/^	struct timeval tv_last_nonce_received;$/;"	m	struct:klondike_info	typeref:struct:klondike_info::timeval	file:	access:public
tv_lastchipinfo	driver-drillbit.h	/^  struct timeval tv_lastchipinfo;$/;"	m	struct:drillbit_info	typeref:struct:drillbit_info::timeval	access:public
tv_lasttemp	driver-drillbit.h	/^  struct timeval tv_lasttemp;$/;"	m	struct:drillbit_info	typeref:struct:drillbit_info::timeval	access:public
tv_lastwork	miner.h	/^	struct timeval tv_lastwork;$/;"	m	struct:pool	typeref:struct:pool::timeval	access:public
tv_nsec	compat/libusb-1.0/libusb/os/threads_windows.h	/^		long tv_nsec;$/;"	m	struct:timespec	access:public
tv_sec	compat/libusb-1.0/libusb/os/threads_windows.h	/^		long tv_sec;$/;"	m	struct:timespec	access:public
tv_sort	cgminer.c	/^static int tv_sort(struct work *worka, struct work *workb)$/;"	f	file:	signature:(struct work *worka, struct work *workb)
tv_staged	miner.h	/^	struct timeval	tv_staged;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
tv_stamp	miner.h	/^	struct timeval	tv_stamp;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
tv_start	driver-bitfury.h	/^	struct timeval tv_start;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::timeval	access:public
tv_start	driver-drillbit.h	/^  struct timeval tv_start;$/;"	m	struct:drillbit_chip_info	typeref:struct:drillbit_chip_info::timeval	access:public
tv_timeout_default	fpgautils.c	/^const struct timeval tv_timeout_default = { 0, 100000 };$/;"	v	typeref:struct:timeval
tv_to_ms	driver-bitforce.c	62;"	d	file:
tv_when	driver-klondike.c	/^	struct timeval tv_when;$/;"	m	struct:klist	typeref:struct:klist::timeval	file:	access:public
tv_work_found	miner.h	/^	struct timeval	tv_work_found;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
tv_work_start	miner.h	/^	struct timeval	tv_work_start;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
tv_workstart	miner.h	/^	struct timeval tv_workstart;$/;"	m	struct:modminer_fpga_state	typeref:struct:modminer_fpga_state::timeval	access:public
two_way_long_needle	lib/str-two-way.h	/^two_way_long_needle (const unsigned char *haystack, size_t haystack_len,$/;"	f	signature:(const unsigned char *haystack, size_t haystack_len, const unsigned char *needle, size_t needle_len)
two_way_short_needle	lib/str-two-way.h	/^two_way_short_needle (const unsigned char *haystack, size_t haystack_len,$/;"	f	signature:(const unsigned char *haystack, size_t haystack_len, const unsigned char *needle, size_t needle_len)
txbuf	driver-knc.c	/^		uint8_t txbuf[MAX_SPI_SIZE];$/;"	m	struct:knc_state::knc_spi_buffer	file:	access:public
txn_data	miner.h	/^	char *txn_data;$/;"	m	struct:pool	access:public
txn_hashes	miner.h	/^	unsigned char *txn_hashes;$/;"	m	struct:pool	access:public
typ	api.c	/^	enum cglock_typ typ;$/;"	m	struct:lockinfo	typeref:enum:lockinfo::cglock_typ	file:	access:public
type	ccan/opt/opt.h	/^	enum opt_type type;$/;"	m	struct:opt_table	typeref:enum:opt_table::opt_type	access:public
type	compat/jansson-2.6/src/jansson.h	/^    json_type type;$/;"	m	struct:json_t	access:public
type	compat/libusb-1.0/libusb/libusb.h	/^	unsigned char type;$/;"	m	struct:libusb_transfer	access:public
type	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char type;$/;"	m	struct:usbfs_urb	access:public
type	driver-avalon2.h	/^	uint8_t type;$/;"	m	struct:avalon2_pkg	access:public
type	driver-hashratio.h	/^	uint8_t type;$/;"	m	struct:hashratio_pkg	access:public
type	driver-knc.c	/^			} type;$/;"	m	struct:knc_state::knc_spi_buffer::knc_spi_response	typeref:enum:knc_state::knc_spi_buffer::knc_spi_response::__anon57	file:	access:public
type	miner.h	/^	enum api_data_type type;$/;"	m	struct:api_data	typeref:enum:api_data::api_data_type	access:public
type_name	compat/jansson-2.6/src/pack_unpack.c	47;"	d	file:
type_names	compat/jansson-2.6/src/pack_unpack.c	/^static const char * const type_names[] = {$/;"	v	file:
typesafe_cb	ccan/typesafe_cb/typesafe_cb.h	85;"	d
typesafe_cb_cast	ccan/typesafe_cb/typesafe_cb.h	31;"	d
typesafe_cb_cast	ccan/typesafe_cb/typesafe_cb.h	37;"	d
typesafe_cb_cast3	ccan/typesafe_cb/typesafe_cb.h	60;"	d
typesafe_cb_postargs	ccan/typesafe_cb/typesafe_cb.h	129;"	d
typesafe_cb_preargs	ccan/typesafe_cb/typesafe_cb.h	107;"	d
u	ccan/opt/opt.h	/^	} u;$/;"	m	struct:opt_table	typeref:union:opt_table::__anon48	access:public
u	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} u;$/;"	m	struct:USB_HUB_NAME_FIXED	typeref:union:USB_HUB_NAME_FIXED::__anon34	access:public
u	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} u;$/;"	m	struct:USB_NODE_INFORMATION	typeref:union:USB_NODE_INFORMATION::__anon35	access:public
u16array_from_msg	driver-cointerra.c	/^static void u16array_from_msg(uint16_t *u16, int entries, int var, char *buf)$/;"	f	file:	signature:(uint16_t *u16, int entries, int var, char *buf)
u3	driver-icarus.c	/^	bool u3;$/;"	m	struct:ICARUS_INFO	file:	access:public
u3freqtable	driver-icarus.c	/^} u3freqtable[] = {$/;"	v	typeref:struct:__anon11
u8_from_msg	driver-cointerra.c	/^static uint8_t u8_from_msg(char *buf, int msg)$/;"	f	file:	signature:(char *buf, int msg)
u8array_from_msg	driver-cointerra.c	/^static void u8array_from_msg(uint8_t *u8, int entries, int var, char *buf)$/;"	f	file:	signature:(uint8_t *u8, int entries, int var, char *buf)
u8tou32	driver-minion.c	307;"	d	file:
uart_rx_bad_dma	hf_protocol.h	/^	uint16_t uart_rx_bad_dma;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_bad_dma	hf_protocol_be.h	/^	uint16_t uart_rx_bad_dma;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_bad_hcrc	hf_protocol.h	/^	uint16_t uart_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_bad_hcrc	hf_protocol_be.h	/^	uint16_t uart_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_buffers_full	hf_protocol.h	/^	uint16_t uart_rx_buffers_full;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_buffers_full	hf_protocol_be.h	/^	uint16_t uart_rx_buffers_full;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_data_done	hf_protocol.h	/^	uint16_t uart_rx_data_done;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_data_done	hf_protocol_be.h	/^	uint16_t uart_rx_data_done;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_header_done	hf_protocol.h	/^	uint16_t uart_rx_header_done;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_header_done	hf_protocol_be.h	/^	uint16_t uart_rx_header_done;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_missed_preamble_ints	hf_protocol.h	/^	uint16_t uart_rx_missed_preamble_ints;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_missed_preamble_ints	hf_protocol_be.h	/^	uint16_t uart_rx_missed_preamble_ints;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_preamble_ints	hf_protocol.h	/^	uint16_t uart_rx_preamble_ints;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_preamble_ints	hf_protocol_be.h	/^	uint16_t uart_rx_preamble_ints;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_short_dma	hf_protocol.h	/^	uint16_t uart_rx_short_dma;$/;"	m	struct:hf_usb_stats1	access:public
uart_rx_short_dma	hf_protocol_be.h	/^	uint16_t uart_rx_short_dma;$/;"	m	struct:hf_usb_stats1	access:public
uart_tx_interrupts	hf_protocol.h	/^	uint16_t uart_tx_interrupts;$/;"	m	struct:hf_usb_stats1	access:public
uart_tx_interrupts	hf_protocol_be.h	/^	uint16_t uart_tx_interrupts;$/;"	m	struct:hf_usb_stats1	access:public
uart_tx_queue_dma	hf_protocol.h	/^	uint16_t uart_tx_queue_dma;$/;"	m	struct:hf_usb_stats1	access:public
uart_tx_queue_dma	hf_protocol_be.h	/^	uint16_t uart_tx_queue_dma;$/;"	m	struct:hf_usb_stats1	access:public
udev_ctx	compat/libusb-1.0/libusb/os/linux_udev.c	/^static struct udev *udev_ctx = NULL;$/;"	v	typeref:struct:udev	file:
udev_device_info	compat/libusb-1.0/libusb/os/linux_udev.c	/^static int udev_device_info(struct libusb_context *ctx, int detached,$/;"	f	file:	signature:(struct libusb_context *ctx, int detached, struct udev_device *udev_dev, uint8_t *busnum, uint8_t *devaddr, const char **sys_name)
udev_hotplug_event	compat/libusb-1.0/libusb/os/linux_udev.c	/^static void udev_hotplug_event(void)$/;"	f	file:	signature:(void)
udev_hotplug_event	compat/libusb-1.0/libusb/os/linux_udev.c	/^static void udev_hotplug_event(void);$/;"	p	file:	signature:(void)
udev_monitor	compat/libusb-1.0/libusb/os/linux_udev.c	/^static struct udev_monitor *udev_monitor = NULL;$/;"	v	typeref:struct:udev_monitor	file:
udev_monitor_fd	compat/libusb-1.0/libusb/os/linux_udev.c	/^static int udev_monitor_fd = -1;$/;"	v	file:
uint	compat.h	/^typedef unsigned int uint;$/;"	t
uint16_t	compat/libusb-1.0/libusb/libusb.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	lib/stdint.in.h	126;"	d
uint16_t	lib/stdint.in.h	130;"	d
uint32_t	compat/libusb-1.0/libusb/libusb.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	lib/stdint.in.h	133;"	d
uint32_t	lib/stdint.in.h	137;"	d
uint32_t	uthash.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	lib/stdint.in.h	172;"	d
uint64_t	lib/stdint.in.h	174;"	d
uint64_t	lib/stdint.in.h	177;"	d
uint64_t	lib/stdint.in.h	179;"	d
uint64_t	lib/stdint.in.h	182;"	d
uint64_t	lib/stdint.in.h	184;"	d
uint8_t	compat/libusb-1.0/libusb/libusb.h	/^typedef unsigned __int8   uint8_t;$/;"	t
uint8_t	lib/stdint.in.h	119;"	d
uint8_t	lib/stdint.in.h	123;"	d
uint8_t	uthash.h	/^typedef unsigned char uint8_t;$/;"	t
uint_fast16_t	lib/stdint.in.h	235;"	d
uint_fast16_t	lib/stdint.in.h	249;"	d
uint_fast32_t	lib/stdint.in.h	237;"	d
uint_fast32_t	lib/stdint.in.h	251;"	d
uint_fast64_t	lib/stdint.in.h	239;"	d
uint_fast64_t	lib/stdint.in.h	256;"	d
uint_fast8_t	lib/stdint.in.h	233;"	d
uint_fast8_t	lib/stdint.in.h	247;"	d
uint_least16_t	lib/stdint.in.h	204;"	d
uint_least16_t	lib/stdint.in.h	212;"	d
uint_least32_t	lib/stdint.in.h	206;"	d
uint_least32_t	lib/stdint.in.h	214;"	d
uint_least64_t	lib/stdint.in.h	208;"	d
uint_least64_t	lib/stdint.in.h	219;"	d
uint_least8_t	lib/stdint.in.h	202;"	d
uint_least8_t	lib/stdint.in.h	210;"	d
uintmax_t	lib/stdint.in.h	284;"	d
uintmax_t	lib/stdint.in.h	287;"	d
uintmax_t	lib/stdint.in.h	289;"	d
uintmax_t	lib/stdint.in.h	292;"	d
uintptr_t	lib/stdint.in.h	262;"	d
uintptr_t	lib/stdint.in.h	266;"	d
ulong	compat.h	/^typedef unsigned long int ulong;$/;"	t
underruns	driver-cointerra.h	/^	uint16_t underruns;$/;"	m	struct:cointerra_info	access:public
uninitialised_var	miner.h	220;"	d
unique_id	miner.h	/^	char *unique_id;$/;"	m	struct:cgpu_info	access:public
unlikely	miner.h	209;"	d
unlikely	miner.h	212;"	d
unlikely	miner.h	215;"	d
unlock_board_selector	A1-desk-board-selector.c	/^void unlock_board_selector(void)$/;"	f	signature:(void)
unlock_curses	cgminer.c	/^static inline void unlock_curses(void)$/;"	f	file:	signature:(void)
unlocks	api.c	/^	uint64_t unlocks;$/;"	m	struct:lockinfo	file:	access:public
unpack	compat/jansson-2.6/src/pack_unpack.c	/^static int unpack(scanner_t *s, json_t *root, va_list *ap)$/;"	f	file:	signature:(scanner_t *s, json_t *root, va_list *ap)
unpack	compat/jansson-2.6/src/pack_unpack.c	/^static int unpack(scanner_t *s, json_t *root, va_list *ap);$/;"	p	file:	signature:(scanner_t *s, json_t *root, va_list *ap)
unpack_array	compat/jansson-2.6/src/pack_unpack.c	/^static int unpack_array(scanner_t *s, json_t *root, va_list *ap)$/;"	f	file:	signature:(scanner_t *s, json_t *root, va_list *ap)
unpack_object	compat/jansson-2.6/src/pack_unpack.c	/^static int unpack_object(scanner_t *s, json_t *root, va_list *ap)$/;"	f	file:	signature:(scanner_t *s, json_t *root, va_list *ap)
unpack_value_starters	compat/jansson-2.6/src/pack_unpack.c	/^static const char unpack_value_starters[] = "{[siIbfFOon";$/;"	v	file:
unqueued_work	miner.h	/^	struct work *unqueued_work;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::work	access:public
unsec	usbutils.c	/^static LPSECURITY_ATTRIBUTES unsec(LPSECURITY_ATTRIBUTES sec)$/;"	f	file:	signature:(LPSECURITY_ATTRIBUTES sec)
unsupported_abort_control	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_abort_control(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
unsupported_abort_transfers	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_abort_transfers(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
unsupported_claim_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_claim_interface(struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
unsupported_clear_halt	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_clear_halt(struct libusb_device_handle *dev_handle, unsigned char endpoint) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, unsigned char endpoint)
unsupported_close	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void unsupported_close(struct libusb_device_handle *dev_handle) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
unsupported_copy_transfer_data	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_copy_transfer_data(struct usbi_transfer *itransfer, uint32_t io_size) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer, uint32_t io_size)
unsupported_exit	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_exit(void) {$/;"	f	file:	signature:(void)
unsupported_init	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_init(struct libusb_context *ctx) {$/;"	f	file:	signature:(struct libusb_context *ctx)
unsupported_open	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_open(struct libusb_device_handle *dev_handle) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
unsupported_release_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_release_interface(struct libusb_device_handle *dev_handle, int iface) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
unsupported_reset_device	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_reset_device(struct libusb_device_handle *dev_handle) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
unsupported_set_interface_altsetting	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_set_interface_altsetting(struct libusb_device_handle *dev_handle, int iface, int altsetting) {$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface, int altsetting)
unsupported_submit_bulk_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_submit_bulk_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
unsupported_submit_control_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_submit_control_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
unsupported_submit_iso_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int unsupported_submit_iso_transfer(struct usbi_transfer *itransfer) {$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
untested_nonces	driver-bab.c	/^	uint64_t untested_nonces;$/;"	m	struct:bab_info	file:	access:public
untested_nonces	driver-minion.c	/^	uint64_t untested_nonces;$/;"	m	struct:minion_info	file:	access:public
unused	driver-antrouter.c	/^	uint8_t unused[ANTROUTER_UNUSED_SIZE];$/;"	m	struct:ANTROUTER_WORK	file:	access:public
unused	driver-bmsc.c	/^	uint8_t unused[BMSC_UNUSED_SIZE];$/;"	m	struct:BMSC_WORK	file:	access:public
unused	driver-icarus.c	/^	uint8_t unused[ANT_UNUSED_SIZE];$/;"	m	struct:ICARUS_WORK	file:	access:public
update_count	driver-bflsc.h	/^	uint32_t update_count;$/;"	m	struct:bflsc_info	access:public
update_gbt	cgminer.c	/^static void update_gbt(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
update_gbt_solo	cgminer.c	/^static void update_gbt_solo(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
update_tv_start	cgminer.c	/^static struct timeval restart_tv_start, update_tv_start;$/;"	v	typeref:struct:	file:
update_usb_stats	usbutils.c	/^void update_usb_stats(__maybe_unused struct cgpu_info *cgpu)$/;"	f	signature:(__maybe_unused struct cgpu_info *cgpu)
update_usb_stats	usbutils.h	/^void update_usb_stats(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
update_work	miner.h	/^	void (*update_work)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
update_work_stats	cgminer.c	/^static void update_work_stats(struct thr_info *thr, struct work *work)$/;"	f	file:	signature:(struct thr_info *thr, struct work *work)
upload_buffer	util.c	/^struct upload_buffer {$/;"	s	file:
upload_buffer::buf	util.c	/^	const void	*buf;$/;"	m	struct:upload_buffer	file:	access:public
upload_buffer::len	util.c	/^	size_t		len;$/;"	m	struct:upload_buffer	file:	access:public
upload_data_cb	util.c	/^static size_t upload_data_cb(void *ptr, size_t size, size_t nmemb,$/;"	f	file:	signature:(void *ptr, size_t size, size_t nmemb, void *user_data)
upperize	compat/libusb-1.0/libusb/os/windows_usb.h	/^static inline void upperize(char* str) {$/;"	f	signature:(char* str)
uptime	driver-cointerra.h	/^	uint32_t uptime;$/;"	m	struct:cointerra_info	access:public
urbs	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^		struct usbfs_urb *urbs;$/;"	m	union:linux_transfer_priv::__anon39	typeref:struct:linux_transfer_priv::__anon39::usbfs_urb	file:	access:public
urgent	driver-minion.c	/^	bool urgent;$/;"	m	struct:task_item	file:	access:public
urgent	driver-minion.c	/^	bool urgent;$/;"	m	struct:work_item	file:	access:public
url	miner.php	/^	$url = "$here?ref=$autorefresh$extraparams";$/;"	v
usAge	MCast.java	/^	static public void usAge()$/;"	m	class:MCast	access:public	signature:()
us_tdiff	util.c	/^double us_tdiff(struct timeval *end, struct timeval *start)$/;"	f	signature:(struct timeval *end, struct timeval *start)
us_tdiff	util.h	/^double us_tdiff(struct timeval *end, struct timeval *start);$/;"	p	signature:(struct timeval *end, struct timeval *start)
us_to_timespec	util.c	/^void us_to_timespec(struct timespec *spec, int64_t us)$/;"	f	signature:(struct timespec *spec, int64_t us)
us_to_timespec	util.h	/^void us_to_timespec(struct timespec *spec, int64_t us);$/;"	p	signature:(struct timespec *spec, int64_t us)
us_to_timeval	util.c	/^void us_to_timeval(struct timeval *val, int64_t us)$/;"	f	signature:(struct timeval *val, int64_t us)
us_to_timeval	util.h	/^void us_to_timeval(struct timeval *val, int64_t us);$/;"	p	signature:(struct timeval *val, int64_t us)
usb11	usbutils.h	/^	bool usb11; \/\/ USB 1.1 flag for convenience$/;"	m	struct:cg_usb_device	access:public
usb11_cgt	usbutils.c	/^static cgtimer_t usb11_cgt;$/;"	v	file:
usb_2_0_ext_cap	compat/libusb-1.0/libusb/libusb.h	/^	struct libusb_usb_2_0_device_capability_descriptor *usb_2_0_ext_cap;$/;"	m	struct:libusb_bos_descriptor	typeref:struct:libusb_bos_descriptor::libusb_usb_2_0_device_capability_descriptor	access:public
usb_all	usbutils.c	/^void usb_all(int level)$/;"	f	signature:(int level)
usb_all	usbutils.h	/^void usb_all(int level);$/;"	p	signature:(int level)
usb_alloc_cgpu	usbutils.c	/^struct cgpu_info *usb_alloc_cgpu(struct device_drv *drv, int threads)$/;"	f	signature:(struct device_drv *drv, int threads)
usb_alloc_cgpu	usbutils.h	/^struct cgpu_info *usb_alloc_cgpu(struct device_drv *drv, int threads);$/;"	p	signature:(struct device_drv *drv, int threads)
usb_api_backend	compat/libusb-1.0/libusb/os/windows_usb.c	/^const struct windows_usb_api_backend usb_api_backend[USB_API_MAX] = {$/;"	v	typeref:struct:windows_usb_api_backend
usb_applog	usbutils.c	/^void usb_applog(struct cgpu_info *cgpu, enum usb_cmds cmd, char *msg, int amount, int err)$/;"	f	signature:(struct cgpu_info *cgpu, enum usb_cmds cmd, char *msg, int amount, int err)
usb_applog	usbutils.h	/^void usb_applog(struct cgpu_info *cgpu, enum usb_cmds cmd, char *msg, int amount, int err);$/;"	p	signature:(struct cgpu_info *cgpu, enum usb_cmds cmd, char *msg, int amount, int err)
usb_buffer_clear	usbutils.c	/^void usb_buffer_clear(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
usb_buffer_clear	usbutils.h	/^void usb_buffer_clear(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
usb_buffer_size	usbutils.c	/^uint32_t usb_buffer_size(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
usb_buffer_size	usbutils.h	/^uint32_t usb_buffer_size(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
usb_busdev	usbutils.c	/^static struct usb_busdev {$/;"	s	file:
usb_busdev::bus_number	usbutils.c	/^	int bus_number;$/;"	m	struct:usb_busdev	file:	access:public
usb_busdev::device_address	usbutils.c	/^	int device_address;$/;"	m	struct:usb_busdev	file:	access:public
usb_busdev::fd	usbutils.c	/^	int fd;$/;"	m	struct:usb_busdev	file:	access:public
usb_busdev::resource1	usbutils.c	/^	void *resource1;$/;"	m	struct:usb_busdev	file:	access:public
usb_busdev::resource2	usbutils.c	/^	void *resource2;$/;"	m	struct:usb_busdev	file:	access:public
usb_check	usbutils.c	/^static struct usb_find_devices *usb_check(__maybe_unused struct device_drv *drv, __maybe_unused struct libusb_device *dev)$/;"	f	file:	signature:(__maybe_unused struct device_drv *drv, __maybe_unused struct libusb_device *dev)
usb_check_device	usbutils.c	/^static bool usb_check_device(struct device_drv *drv, struct libusb_device *dev, struct usb_find_devices *look)$/;"	f	file:	signature:(struct device_drv *drv, struct libusb_device *dev, struct usb_find_devices *look)
usb_check_each	usbutils.c	/^static struct usb_find_devices *usb_check_each(int drvnum, struct device_drv *drv, struct libusb_device *dev)$/;"	f	file:	signature:(int drvnum, struct device_drv *drv, struct libusb_device *dev)
usb_cleanup	usbutils.c	/^void usb_cleanup(void)$/;"	f	signature:(void)
usb_cleanup	usbutils.h	/^void usb_cleanup();$/;"	p	signature:()
usb_cmd	driver-hashfast.c	/^	enum usb_cmds usb_cmd;$/;"	m	struct:hfa_cmd	typeref:enum:hfa_cmd::usb_cmds	file:	access:public
usb_cmdname	usbutils.c	/^const char *usb_cmdname(enum usb_cmds cmd)$/;"	f	signature:(enum usb_cmds cmd)
usb_cmdname	usbutils.h	/^const char *usb_cmdname(enum usb_cmds cmd);$/;"	p	signature:(enum usb_cmds cmd)
usb_cmds	usbutils.h	/^enum usb_cmds {$/;"	g
usb_commands	usbutils.c	/^char *usb_commands[] = {$/;"	v
usb_control_transfer	usbutils.c	/^static int usb_control_transfer(struct cgpu_info *cgpu, libusb_device_handle *dev_handle, uint8_t bmRequestType,$/;"	f	file:	signature:(struct cgpu_info *cgpu, libusb_device_handle *dev_handle, uint8_t bmRequestType, uint8_t bRequest, uint16_t wValue, uint16_t wIndex, unsigned char *buffer, uint16_t wLength, unsigned int timeout)
usb_copy_cgpu	usbutils.c	/^struct cgpu_info *usb_copy_cgpu(struct cgpu_info *orig)$/;"	f	signature:(struct cgpu_info *orig)
usb_copy_cgpu	usbutils.h	/^struct cgpu_info *usb_copy_cgpu(struct cgpu_info *orig);$/;"	p	signature:(struct cgpu_info *orig)
usb_descriptor_header	compat/libusb-1.0/libusb/libusbi.h	/^struct usb_descriptor_header {$/;"	s
usb_descriptor_header::bDescriptorType	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:usb_descriptor_header	access:public
usb_descriptor_header::bLength	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t  bLength;$/;"	m	struct:usb_descriptor_header	access:public
usb_detect	usbutils.h	506;"	d
usb_detect_one	usbutils.h	507;"	d
usb_device_t	compat/libusb-1.0/libusb/os/darwin_usb.h	100;"	d
usb_device_t	compat/libusb-1.0/libusb/os/darwin_usb.h	106;"	d
usb_device_t	compat/libusb-1.0/libusb/os/darwin_usb.h	112;"	d
usb_device_t	compat/libusb-1.0/libusb/os/darwin_usb.h	76;"	d
usb_device_t	compat/libusb-1.0/libusb/os/darwin_usb.h	82;"	d
usb_device_t	compat/libusb-1.0/libusb/os/darwin_usb.h	88;"	d
usb_device_t	compat/libusb-1.0/libusb/os/darwin_usb.h	94;"	d
usb_devs	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head usb_devs;$/;"	m	struct:libusb_context	typeref:struct:libusb_context::list_head	access:public
usb_devs_lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t usb_devs_lock;$/;"	m	struct:libusb_context	access:public
usb_epinfo	usbutils.h	/^struct usb_epinfo {$/;"	s
usb_epinfo::att	usbutils.h	/^	uint8_t att;$/;"	m	struct:usb_epinfo	access:public
usb_epinfo::ep	usbutils.h	/^	unsigned char ep;$/;"	m	struct:usb_epinfo	access:public
usb_epinfo::found	usbutils.h	/^	bool found;$/;"	m	struct:usb_epinfo	access:public
usb_epinfo::size	usbutils.h	/^	uint16_t size;$/;"	m	struct:usb_epinfo	access:public
usb_epinfo::wMaxPacketSize	usbutils.h	/^	uint16_t wMaxPacketSize;$/;"	m	struct:usb_epinfo	access:public
usb_find_devices	usbutils.h	/^struct usb_find_devices {$/;"	s
usb_find_devices::config	usbutils.h	/^	int config;$/;"	m	struct:usb_find_devices	access:public
usb_find_devices::drv	usbutils.h	/^	int drv;$/;"	m	struct:usb_find_devices	access:public
usb_find_devices::iManufacturer	usbutils.h	/^	char *iManufacturer;$/;"	m	struct:usb_find_devices	access:public
usb_find_devices::iProduct	usbutils.h	/^	char *iProduct;$/;"	m	struct:usb_find_devices	access:public
usb_find_devices::idProduct	usbutils.h	/^	uint16_t idProduct;$/;"	m	struct:usb_find_devices	access:public
usb_find_devices::idVendor	usbutils.h	/^	uint16_t idVendor;$/;"	m	struct:usb_find_devices	access:public
usb_find_devices::ident	usbutils.h	/^	enum sub_ident ident;$/;"	m	struct:usb_find_devices	typeref:enum:usb_find_devices::sub_ident	access:public
usb_find_devices::intinfo_count	usbutils.h	/^	int intinfo_count;$/;"	m	struct:usb_find_devices	access:public
usb_find_devices::intinfos	usbutils.h	/^	struct usb_intinfo *intinfos;$/;"	m	struct:usb_find_devices	typeref:struct:usb_find_devices::usb_intinfo	access:public
usb_find_devices::latency	usbutils.h	/^	uint16_t latency;$/;"	m	struct:usb_find_devices	access:public
usb_find_devices::name	usbutils.h	/^	const char *name;$/;"	m	struct:usb_find_devices	access:public
usb_find_devices::timeout	usbutils.h	/^	unsigned int timeout;$/;"	m	struct:usb_find_devices	access:public
usb_free_cgpu	usbutils.c	/^struct cgpu_info *usb_free_cgpu(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
usb_free_cgpu	usbutils.h	/^struct cgpu_info *usb_free_cgpu(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
usb_ftdi_cts	usbutils.c	/^int usb_ftdi_cts(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
usb_ftdi_cts	usbutils.h	/^int usb_ftdi_cts(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
usb_ftdi_set_latency	usbutils.h	517;"	d
usb_full	usbutils.c	/^static void usb_full(ssize_t *count, libusb_device *dev, char **buf, size_t *off, size_t *len, int level)$/;"	f	file:	signature:(ssize_t *count, libusb_device *dev, char **buf, size_t *off, size_t *len, int level)
usb_get_next_device	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static usb_device_t **usb_get_next_device (io_iterator_t deviceIterator, UInt32 *locationp) {$/;"	f	file:	signature:(io_iterator_t deviceIterator, UInt32 *locationp)
usb_ident	usbutils.c	/^enum sub_ident usb_ident(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
usb_ident	usbutils.h	/^enum sub_ident usb_ident(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
usb_in_use_list	usbutils.c	/^struct usb_in_use_list {$/;"	s	file:
usb_in_use_list::in_use	usbutils.c	/^	struct usb_busdev in_use;$/;"	m	struct:usb_in_use_list	typeref:struct:usb_in_use_list::usb_busdev	file:	access:public
usb_in_use_list::next	usbutils.c	/^	struct usb_in_use_list *next;$/;"	m	struct:usb_in_use_list	typeref:struct:usb_in_use_list::usb_in_use_list	file:	access:public
usb_in_use_list::prev	usbutils.c	/^	struct usb_in_use_list *prev;$/;"	m	struct:usb_in_use_list	typeref:struct:usb_in_use_list::usb_in_use_list	file:	access:public
usb_init	usbutils.c	/^bool usb_init(struct cgpu_info *cgpu, struct libusb_device *dev, struct usb_find_devices *found_match)$/;"	f	signature:(struct cgpu_info *cgpu, struct libusb_device *dev, struct usb_find_devices *found_match)
usb_init	usbutils.h	/^bool usb_init(struct cgpu_info *cgpu, struct libusb_device *dev, struct usb_find_devices *found);$/;"	p	signature:(struct cgpu_info *cgpu, struct libusb_device *dev, struct usb_find_devices *found)
usb_init_base	driver-hashfast.h	/^	struct hf_usb_init_base usb_init_base;      \/\/ USB Base information from USB_INIT$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::hf_usb_init_base	access:public
usb_initialise	usbutils.c	/^void usb_initialise(void)$/;"	f	signature:(void)
usb_initialise	usbutils.h	/^void usb_initialise();$/;"	p	signature:()
usb_interface	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} usb_interface[USB_MAXINTERFACES];$/;"	m	struct:windows_device_priv	typeref:struct:windows_device_priv::__anon30	access:public
usb_interface	usbutils.h	521;"	d
usb_interface_t	compat/libusb-1.0/libusb/os/darwin_usb.h	33;"	d
usb_interface_t	compat/libusb-1.0/libusb/os/darwin_usb.h	39;"	d
usb_interface_t	compat/libusb-1.0/libusb/os/darwin_usb.h	45;"	d
usb_interface_t	compat/libusb-1.0/libusb/os/darwin_usb.h	51;"	d
usb_interface_t	compat/libusb-1.0/libusb/os/darwin_usb.h	57;"	d
usb_interface_t	compat/libusb-1.0/libusb/os/darwin_usb.h	63;"	d
usb_intinfo	usbutils.h	/^struct usb_intinfo {$/;"	s
usb_intinfo::ctrl_transfer	usbutils.h	/^	int ctrl_transfer;$/;"	m	struct:usb_intinfo	access:public
usb_intinfo::epinfo_count	usbutils.h	/^	int epinfo_count;$/;"	m	struct:usb_intinfo	access:public
usb_intinfo::epinfos	usbutils.h	/^	struct usb_epinfo *epinfos;$/;"	m	struct:usb_intinfo	typeref:struct:usb_intinfo::usb_epinfo	access:public
usb_intinfo::interface	usbutils.h	/^	int interface;$/;"	m	struct:usb_intinfo	access:public
usb_list	usbutils.c	/^void usb_list(void)$/;"	f	signature:(void)
usb_list	usbutils.h	/^void usb_list(void);$/;"	p	signature:(void)
usb_nodev	usbutils.c	/^void usb_nodev(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
usb_nodev	usbutils.h	/^void usb_nodev(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
usb_perform_transfer	usbutils.c	/^usb_perform_transfer(struct cgpu_info *cgpu, struct cg_usb_device *usbdev, int intinfo,$/;"	f	file:	signature:(struct cgpu_info *cgpu, struct cg_usb_device *usbdev, int intinfo, int epinfo, unsigned char *data, int length, int *transferred, unsigned int timeout, __maybe_unused int mode, enum usb_cmds cmd, __maybe_unused int seq, bool cancellable, bool tt)
usb_poll_thread	cgminer.c	/^static pthread_t usb_poll_thread;$/;"	v	file:
usb_polling	cgminer.c	/^static bool usb_polling;$/;"	v	file:
usb_read	usbutils.h	529;"	d
usb_read_cancellable	usbutils.h	532;"	d
usb_read_ep	usbutils.h	565;"	d
usb_read_ep_timeout	usbutils.h	580;"	d
usb_read_fixed_size	driver-drillbit.c	/^static bool usb_read_fixed_size(struct cgpu_info *drillbit, void *result, size_t result_size, int timeout, enum usb_cmds command_name) {$/;"	f	file:	signature:(struct cgpu_info *drillbit, void *result, size_t result_size, int timeout, enum usb_cmds command_name)
usb_read_ii	usbutils.h	535;"	d
usb_read_ii_once	usbutils.h	541;"	d
usb_read_ii_once_timeout	usbutils.h	550;"	d
usb_read_ii_timeout	usbutils.h	574;"	d
usb_read_ii_timeout_cancellable	usbutils.h	577;"	d
usb_read_nl	usbutils.h	553;"	d
usb_read_nl_timeout	usbutils.h	556;"	d
usb_read_ok	usbutils.h	559;"	d
usb_read_ok_timeout	usbutils.h	562;"	d
usb_read_once	usbutils.h	538;"	d
usb_read_once_timeout	usbutils.h	544;"	d
usb_read_once_timeout_cancellable	usbutils.h	547;"	d
usb_read_simple_response	driver-drillbit.c	/^static bool usb_read_simple_response(struct cgpu_info *drillbit, char command, enum usb_cmds command_name) {$/;"	f	file:	signature:(struct cgpu_info *drillbit, char command, enum usb_cmds command_name)
usb_read_simple_response	driver-drillbit.c	/^static bool usb_read_simple_response(struct cgpu_info *drillbit, char command, enum usb_cmds command_name);$/;"	p	file:	signature:(struct cgpu_info *drillbit, char command, enum usb_cmds command_name)
usb_read_timeout	usbutils.h	568;"	d
usb_read_timeout_cancellable	usbutils.h	571;"	d
usb_reset	usbutils.c	/^void usb_reset(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
usb_reset	usbutils.h	/^void usb_reset(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
usb_resource_sem	cgminer.c	/^cgsem_t usb_resource_sem;$/;"	v
usb_resource_thread	usbutils.c	/^void *usb_resource_thread(void __maybe_unused *userdata)$/;"	f	signature:(void __maybe_unused *userdata)
usb_resource_thread	usbutils.h	/^void *usb_resource_thread(void *userdata);$/;"	p	signature:(void *userdata)
usb_rx_bad_hcrc	driver-hashfast.h	/^	uint64_t usb_rx_bad_hcrc;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_rx_bad_hcrc	hf_protocol.h	/^	uint16_t usb_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1	access:public
usb_rx_bad_hcrc	hf_protocol_be.h	/^	uint16_t usb_rx_bad_hcrc;$/;"	m	struct:hf_usb_stats1	access:public
usb_rx_preambles	driver-hashfast.h	/^	uint64_t usb_rx_preambles;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_rx_preambles	hf_protocol.h	/^	uint16_t usb_rx_preambles;$/;"	m	struct:hf_usb_stats1	access:public
usb_rx_preambles	hf_protocol_be.h	/^	uint16_t usb_rx_preambles;$/;"	m	struct:hf_usb_stats1	access:public
usb_rx_receive_byte_errors	driver-hashfast.h	/^	uint64_t usb_rx_receive_byte_errors;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_rx_receive_byte_errors	hf_protocol.h	/^	uint16_t usb_rx_receive_byte_errors;$/;"	m	struct:hf_usb_stats1	access:public
usb_rx_receive_byte_errors	hf_protocol_be.h	/^	uint16_t usb_rx_receive_byte_errors;$/;"	m	struct:hf_usb_stats1	access:public
usb_send_simple_command	driver-drillbit.c	/^static bool usb_send_simple_command(struct cgpu_info *drillbit, char command, enum usb_cmds command_name) {$/;"	f	file:	signature:(struct cgpu_info *drillbit, char command, enum usb_cmds command_name)
usb_set_dev_start	usbutils.c	/^void usb_set_dev_start(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
usb_set_dev_start	usbutils.h	/^void usb_set_dev_start(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
usb_setup_device_iterator	compat/libusb-1.0/libusb/os/darwin_usb.c	/^static int usb_setup_device_iterator (io_iterator_t *deviceIterator, UInt32 location) {$/;"	f	file:	signature:(io_iterator_t *deviceIterator, UInt32 location)
usb_stats	usbutils.c	/^static struct cg_usb_stats *usb_stats = NULL;$/;"	v	typeref:struct:cg_usb_stats	file:
usb_submit_transfer	usbutils.c	/^static int usb_submit_transfer(struct usb_transfer *ut, struct libusb_transfer *transfer,$/;"	f	file:	signature:(struct usb_transfer *ut, struct libusb_transfer *transfer, bool cancellable, bool tt)
usb_tmo	usbutils.h	/^	struct cg_usb_tmo usb_tmo[USB_TMOS];$/;"	m	struct:cg_usb_info	typeref:struct:cg_usb_info::cg_usb_tmo	access:public
usb_transfer	usbutils.c	/^struct usb_transfer {$/;"	s	file:
usb_transfer	usbutils.h	598;"	d
usb_transfer::cancellable	usbutils.c	/^	bool cancellable;$/;"	m	struct:usb_transfer	file:	access:public
usb_transfer::cgsem	usbutils.c	/^	cgsem_t cgsem;$/;"	m	struct:usb_transfer	file:	access:public
usb_transfer::list	usbutils.c	/^	struct list_head list;$/;"	m	struct:usb_transfer	typeref:struct:usb_transfer::list_head	file:	access:public
usb_transfer::transfer	usbutils.c	/^	struct libusb_transfer *transfer;$/;"	m	struct:usb_transfer	typeref:struct:usb_transfer::libusb_transfer	file:	access:public
usb_transfer_data	usbutils.h	601;"	d
usb_transfer_read	usbutils.h	604;"	d
usb_transfer_toerr	usbutils.c	/^static int usb_transfer_toerr(int ret)$/;"	f	file:	signature:(int ret)
usb_tx_attempts	driver-hashfast.h	/^	uint64_t usb_tx_attempts;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_tx_attempts	hf_protocol.h	/^	uint16_t usb_tx_attempts;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_attempts	hf_protocol_be.h	/^	uint16_t usb_tx_attempts;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_disconnected	driver-hashfast.h	/^	uint64_t usb_tx_disconnected;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_tx_disconnected	hf_protocol.h	/^	uint16_t usb_tx_disconnected;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_disconnected	hf_protocol_be.h	/^	uint16_t usb_tx_disconnected;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_endpointstalled	driver-hashfast.h	/^	uint64_t usb_tx_endpointstalled;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_tx_endpointstalled	hf_protocol.h	/^	uint16_t usb_tx_endpointstalled;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_endpointstalled	hf_protocol_be.h	/^	uint16_t usb_tx_endpointstalled;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_incompletes	driver-hashfast.h	/^	uint64_t usb_tx_incompletes;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_tx_incompletes	hf_protocol.h	/^	uint16_t usb_tx_incompletes;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_incompletes	hf_protocol_be.h	/^	uint16_t usb_tx_incompletes;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_packets	driver-hashfast.h	/^	uint64_t usb_tx_packets;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_tx_packets	hf_protocol.h	/^	uint16_t usb_tx_packets;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_packets	hf_protocol_be.h	/^	uint16_t usb_tx_packets;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_suspended	driver-hashfast.h	/^	uint64_t usb_tx_suspended;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_tx_suspended	hf_protocol.h	/^	uint16_t usb_tx_suspended;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_suspended	hf_protocol_be.h	/^	uint16_t usb_tx_suspended;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_timeouts	driver-hashfast.h	/^	uint64_t usb_tx_timeouts;$/;"	m	struct:hf_long_usb_stats1	access:public
usb_tx_timeouts	hf_protocol.h	/^	uint16_t usb_tx_timeouts;$/;"	m	struct:hf_usb_stats1	access:public
usb_tx_timeouts	hf_protocol_be.h	/^	uint16_t usb_tx_timeouts;$/;"	m	struct:hf_usb_stats1	access:public
usb_type	usbutils.h	/^	enum usb_types usb_type;$/;"	m	struct:cg_usb_device	typeref:enum:cg_usb_device::usb_types	access:public
usb_types	usbutils.h	/^enum usb_types {$/;"	g
usb_uninit	usbutils.c	/^void usb_uninit(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
usb_uninit	usbutils.h	/^void usb_uninit(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
usb_write	usbutils.h	583;"	d
usb_write_ep	usbutils.h	589;"	d
usb_write_ep_timeout	usbutils.h	595;"	d
usb_write_ii	usbutils.h	586;"	d
usb_write_timeout	usbutils.h	592;"	d
usbdev	miner.h	/^	struct cg_usb_device *usbdev;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::cg_usb_device	access:public
usbdev_names	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int usbdev_names = 0;$/;"	v	file:
usbfs_bulktransfer	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^struct usbfs_bulktransfer {$/;"	s
usbfs_bulktransfer::data	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *data;$/;"	m	struct:usbfs_bulktransfer	access:public
usbfs_bulktransfer::ep	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int ep;$/;"	m	struct:usbfs_bulktransfer	access:public
usbfs_bulktransfer::len	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int len;$/;"	m	struct:usbfs_bulktransfer	access:public
usbfs_bulktransfer::timeout	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int timeout;	\/* in milliseconds *\/$/;"	m	struct:usbfs_bulktransfer	access:public
usbfs_connectinfo	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^struct usbfs_connectinfo {$/;"	s
usbfs_connectinfo::devnum	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int devnum;$/;"	m	struct:usbfs_connectinfo	access:public
usbfs_connectinfo::slow	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char slow;$/;"	m	struct:usbfs_connectinfo	access:public
usbfs_ctrltransfer	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^struct usbfs_ctrltransfer {$/;"	s
usbfs_ctrltransfer::bRequest	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint8_t  bRequest;$/;"	m	struct:usbfs_ctrltransfer	access:public
usbfs_ctrltransfer::bmRequestType	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint8_t  bmRequestType;$/;"	m	struct:usbfs_ctrltransfer	access:public
usbfs_ctrltransfer::data	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *data;$/;"	m	struct:usbfs_ctrltransfer	access:public
usbfs_ctrltransfer::timeout	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint32_t timeout;	\/* in milliseconds *\/$/;"	m	struct:usbfs_ctrltransfer	access:public
usbfs_ctrltransfer::wIndex	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint16_t wIndex;$/;"	m	struct:usbfs_ctrltransfer	access:public
usbfs_ctrltransfer::wLength	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint16_t wLength;$/;"	m	struct:usbfs_ctrltransfer	access:public
usbfs_ctrltransfer::wValue	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint16_t wValue;$/;"	m	struct:usbfs_ctrltransfer	access:public
usbfs_get_active_config	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int usbfs_get_active_config(struct libusb_device *dev, int fd)$/;"	f	file:	signature:(struct libusb_device *dev, int fd)
usbfs_get_active_config_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int usbfs_get_active_config_descriptor(struct libusb_device *dev,$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer, size_t len)
usbfs_get_device_descriptor	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int usbfs_get_device_descriptor(struct libusb_device *dev,$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer)
usbfs_get_device_list	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int usbfs_get_device_list(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
usbfs_getdriver	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^struct usbfs_getdriver {$/;"	s
usbfs_getdriver::driver	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	char driver[USBFS_MAXDRIVERNAME + 1];$/;"	m	struct:usbfs_getdriver	access:public
usbfs_getdriver::interface	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int interface;$/;"	m	struct:usbfs_getdriver	access:public
usbfs_hub_portinfo	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^struct usbfs_hub_portinfo {$/;"	s
usbfs_hub_portinfo::numports	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char numports;$/;"	m	struct:usbfs_hub_portinfo	access:public
usbfs_hub_portinfo::port	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char port[127];	\/* port to device num mapping *\/$/;"	m	struct:usbfs_hub_portinfo	access:public
usbfs_ioctl	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^struct usbfs_ioctl {$/;"	s
usbfs_ioctl::data	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *data;	\/* param buffer (in, or out) *\/$/;"	m	struct:usbfs_ioctl	access:public
usbfs_ioctl::ifno	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int ifno;	\/* interface 0..N ; negative numbers reserved *\/$/;"	m	struct:usbfs_ioctl	access:public
usbfs_ioctl::ioctl_code	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int ioctl_code;	\/* MUST encode size + direction of data so the$/;"	m	struct:usbfs_ioctl	access:public
usbfs_iso_packet_desc	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^struct usbfs_iso_packet_desc {$/;"	s
usbfs_iso_packet_desc::actual_length	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int actual_length;$/;"	m	struct:usbfs_iso_packet_desc	access:public
usbfs_iso_packet_desc::length	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int length;$/;"	m	struct:usbfs_iso_packet_desc	access:public
usbfs_iso_packet_desc::status	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int status;$/;"	m	struct:usbfs_iso_packet_desc	access:public
usbfs_path	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^const char *usbfs_path = NULL;$/;"	v
usbfs_scan_busdir	compat/libusb-1.0/libusb/os/linux_usbfs.c	/^static int usbfs_scan_busdir(struct libusb_context *ctx, uint8_t busnum)$/;"	f	file:	signature:(struct libusb_context *ctx, uint8_t busnum)
usbfs_setinterface	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^struct usbfs_setinterface {$/;"	s
usbfs_setinterface::altsetting	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int altsetting;$/;"	m	struct:usbfs_setinterface	access:public
usbfs_setinterface::interface	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int interface;$/;"	m	struct:usbfs_setinterface	access:public
usbfs_urb	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^struct usbfs_urb {$/;"	s
usbfs_urb::actual_length	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int actual_length;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::buffer	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *buffer;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::buffer_length	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int buffer_length;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::endpoint	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char endpoint;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::error_count	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int error_count;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::flags	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int flags;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::iso_frame_desc	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	struct usbfs_iso_packet_desc iso_frame_desc[0];$/;"	m	struct:usbfs_urb	typeref:struct:usbfs_urb::usbfs_iso_packet_desc	access:public
usbfs_urb::number_of_packets	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int number_of_packets;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::signr	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned int signr;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::start_frame	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int start_frame;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::status	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	int status;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::type	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	unsigned char type;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb::usercontext	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *usercontext;$/;"	m	struct:usbfs_urb	access:public
usbfs_urb_type	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^enum usbfs_urb_type {$/;"	g
usbi_add_pollfd	compat/libusb-1.0/libusb/io.c	/^int usbi_add_pollfd(struct libusb_context *ctx, int fd, short events)$/;"	f	signature:(struct libusb_context *ctx, int fd, short events)
usbi_add_pollfd	compat/libusb-1.0/libusb/libusbi.h	/^int usbi_add_pollfd(struct libusb_context *ctx, int fd, short events);$/;"	p	signature:(struct libusb_context *ctx, int fd, short events)
usbi_alloc_device	compat/libusb-1.0/libusb/core.c	/^struct libusb_device *usbi_alloc_device(struct libusb_context *ctx,$/;"	f	signature:(struct libusb_context *ctx, unsigned long session_id)
usbi_alloc_device	compat/libusb-1.0/libusb/libusbi.h	/^struct libusb_device *usbi_alloc_device(struct libusb_context *ctx,$/;"	p	signature:(struct libusb_context *ctx, unsigned long session_id)
usbi_backend	compat/libusb-1.0/libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &darwin_backend;$/;"	v
usbi_backend	compat/libusb-1.0/libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &linux_usbfs_backend;$/;"	v
usbi_backend	compat/libusb-1.0/libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &openbsd_backend;$/;"	v
usbi_backend	compat/libusb-1.0/libusb/core.c	/^const struct usbi_os_backend * const usbi_backend = &windows_backend;$/;"	v
usbi_close	compat/libusb-1.0/libusb/os/poll_posix.h	6;"	d
usbi_close	compat/libusb-1.0/libusb/os/poll_windows.c	/^int usbi_close(int fd)$/;"	f	signature:(int fd)
usbi_close	compat/libusb-1.0/libusb/os/poll_windows.h	/^int usbi_close(int fd);$/;"	p	signature:(int fd)
usbi_cond_broadcast	compat/libusb-1.0/libusb/os/threads_posix.h	42;"	d
usbi_cond_broadcast	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_cond_broadcast(usbi_cond_t *cond) {$/;"	f	signature:(usbi_cond_t *cond)
usbi_cond_broadcast	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_cond_broadcast(usbi_cond_t *cond);$/;"	p	signature:(usbi_cond_t *cond)
usbi_cond_destroy	compat/libusb-1.0/libusb/os/threads_posix.h	43;"	d
usbi_cond_destroy	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_cond_destroy(usbi_cond_t *cond) {$/;"	f	signature:(usbi_cond_t *cond)
usbi_cond_destroy	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_cond_destroy(usbi_cond_t *cond);$/;"	p	signature:(usbi_cond_t *cond)
usbi_cond_init	compat/libusb-1.0/libusb/os/threads_posix.h	39;"	d
usbi_cond_init	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_cond_init(usbi_cond_t *cond,$/;"	f	signature:(usbi_cond_t *cond, const usbi_condattr_t *attr)
usbi_cond_init	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_cond_init(usbi_cond_t *cond,$/;"	p	signature:(usbi_cond_t *cond, const usbi_condattr_t *attr)
usbi_cond_intwait	compat/libusb-1.0/libusb/os/threads_windows.c	/^static int __inline usbi_cond_intwait(usbi_cond_t *cond,$/;"	f	file:	signature:(usbi_cond_t *cond, usbi_mutex_t *mutex, DWORD timeout_ms)
usbi_cond_perthread	compat/libusb-1.0/libusb/os/threads_windows.h	/^struct usbi_cond_perthread {$/;"	s
usbi_cond_perthread::event	compat/libusb-1.0/libusb/os/threads_windows.h	/^	HANDLE           event;$/;"	m	struct:usbi_cond_perthread	access:public
usbi_cond_perthread::list	compat/libusb-1.0/libusb/os/threads_windows.h	/^	struct list_head list;$/;"	m	struct:usbi_cond_perthread	typeref:struct:usbi_cond_perthread::list_head	access:public
usbi_cond_perthread::tid	compat/libusb-1.0/libusb/os/threads_windows.h	/^	DWORD            tid;$/;"	m	struct:usbi_cond_perthread	access:public
usbi_cond_signal	compat/libusb-1.0/libusb/os/threads_posix.h	44;"	d
usbi_cond_signal	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_cond_signal(usbi_cond_t *cond) {$/;"	f	signature:(usbi_cond_t *cond)
usbi_cond_signal	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_cond_signal(usbi_cond_t *cond);$/;"	p	signature:(usbi_cond_t *cond)
usbi_cond_t	compat/libusb-1.0/libusb/os/threads_posix.h	38;"	d
usbi_cond_t	compat/libusb-1.0/libusb/os/threads_windows.h	/^typedef struct usbi_cond_t_ usbi_cond_t;$/;"	t	typeref:struct:usbi_cond_t_
usbi_cond_t_	compat/libusb-1.0/libusb/os/threads_windows.h	/^struct usbi_cond_t_ {$/;"	s
usbi_cond_t_::not_waiting	compat/libusb-1.0/libusb/os/threads_windows.h	/^	struct list_head not_waiting;$/;"	m	struct:usbi_cond_t_	typeref:struct:usbi_cond_t_::list_head	access:public
usbi_cond_t_::waiters	compat/libusb-1.0/libusb/os/threads_windows.h	/^	struct list_head waiters;$/;"	m	struct:usbi_cond_t_	typeref:struct:usbi_cond_t_::list_head	access:public
usbi_cond_timedwait	compat/libusb-1.0/libusb/os/threads_posix.h	41;"	d
usbi_cond_timedwait	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_cond_timedwait(usbi_cond_t *cond,$/;"	f	signature:(usbi_cond_t *cond, usbi_mutex_t *mutex, const struct timespec *abstime)
usbi_cond_timedwait	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_cond_timedwait(usbi_cond_t *cond,$/;"	p	signature:(usbi_cond_t *cond, usbi_mutex_t *mutex, const struct timespec *abstime)
usbi_cond_wait	compat/libusb-1.0/libusb/os/threads_posix.h	40;"	d
usbi_cond_wait	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_cond_wait(usbi_cond_t *cond, usbi_mutex_t *mutex) {$/;"	f	signature:(usbi_cond_t *cond, usbi_mutex_t *mutex)
usbi_cond_wait	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_cond_wait(usbi_cond_t *cond, usbi_mutex_t *mutex);$/;"	p	signature:(usbi_cond_t *cond, usbi_mutex_t *mutex)
usbi_condattr_t	compat/libusb-1.0/libusb/os/threads_windows.h	61;"	d
usbi_connect_device	compat/libusb-1.0/libusb/core.c	/^void usbi_connect_device(struct libusb_device *dev)$/;"	f	signature:(struct libusb_device *dev)
usbi_connect_device	compat/libusb-1.0/libusb/libusbi.h	/^void usbi_connect_device (struct libusb_device *dev);$/;"	p	signature:(struct libusb_device *dev)
usbi_create_fd	compat/libusb-1.0/libusb/os/poll_windows.c	/^struct winfd usbi_create_fd(HANDLE handle, int access_mode)$/;"	f	signature:(HANDLE handle, int access_mode)
usbi_create_fd	compat/libusb-1.0/libusb/os/poll_windows.h	/^struct winfd usbi_create_fd(HANDLE handle, int access_mode);$/;"	p	signature:(HANDLE handle, int access_mode)
usbi_dbg	compat/libusb-1.0/libusb/libusbi.h	/^static inline void usbi_dbg(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
usbi_dbg	compat/libusb-1.0/libusb/libusbi.h	144;"	d
usbi_dbg	compat/libusb-1.0/libusb/libusbi.h	146;"	d
usbi_default_context	compat/libusb-1.0/libusb/core.c	/^struct libusb_context *usbi_default_context = NULL;$/;"	v	typeref:struct:libusb_context
usbi_device_cache_descriptor	compat/libusb-1.0/libusb/descriptor.c	/^int usbi_device_cache_descriptor(libusb_device *dev)$/;"	f	signature:(libusb_device *dev)
usbi_device_cache_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^int usbi_device_cache_descriptor(libusb_device *dev);$/;"	p	signature:(libusb_device *dev)
usbi_disconnect_device	compat/libusb-1.0/libusb/core.c	/^void usbi_disconnect_device(struct libusb_device *dev)$/;"	f	signature:(struct libusb_device *dev)
usbi_disconnect_device	compat/libusb-1.0/libusb/libusbi.h	/^void usbi_disconnect_device (struct libusb_device *dev);$/;"	p	signature:(struct libusb_device *dev)
usbi_err	compat/libusb-1.0/libusb/libusbi.h	/^static inline void usbi_err(struct libusb_context *ctx, const char *fmt, ...)$/;"	f	signature:(struct libusb_context *ctx, const char *fmt, ...)
usbi_err	compat/libusb-1.0/libusb/libusbi.h	151;"	d
usbi_fd_notification	compat/libusb-1.0/libusb/core.c	/^void usbi_fd_notification(struct libusb_context *ctx)$/;"	f	signature:(struct libusb_context *ctx)
usbi_fd_notification	compat/libusb-1.0/libusb/libusbi.h	/^void usbi_fd_notification(struct libusb_context *ctx);$/;"	p	signature:(struct libusb_context *ctx)
usbi_fd_notification	compat/libusb-1.0/libusb/os/windows_usb.c	/^extern void usbi_fd_notification(struct libusb_context *ctx);$/;"	p	file:	signature:(struct libusb_context *ctx)
usbi_free_fd	compat/libusb-1.0/libusb/os/poll_windows.c	/^void usbi_free_fd(int fd)$/;"	f	signature:(int fd)
usbi_free_fd	compat/libusb-1.0/libusb/os/poll_windows.h	/^void usbi_free_fd(int fd);$/;"	p	signature:(int fd)
usbi_get_config_index_by_value	compat/libusb-1.0/libusb/descriptor.c	/^int usbi_get_config_index_by_value(struct libusb_device *dev,$/;"	f	signature:(struct libusb_device *dev, uint8_t bConfigurationValue, int *idx)
usbi_get_config_index_by_value	compat/libusb-1.0/libusb/libusbi.h	/^int usbi_get_config_index_by_value(struct libusb_device *dev,$/;"	p	signature:(struct libusb_device *dev, uint8_t bConfigurationValue, int *idx)
usbi_get_device_by_session_id	compat/libusb-1.0/libusb/core.c	/^struct libusb_device *usbi_get_device_by_session_id(struct libusb_context *ctx,$/;"	f	signature:(struct libusb_context *ctx, unsigned long session_id)
usbi_get_device_by_session_id	compat/libusb-1.0/libusb/libusbi.h	/^struct libusb_device *usbi_get_device_by_session_id(struct libusb_context *ctx,$/;"	p	signature:(struct libusb_context *ctx, unsigned long session_id)
usbi_gettimeofday	compat/libusb-1.0/libusb/core.c	/^int usbi_gettimeofday(struct timeval *tp, void *tzp)$/;"	f	signature:(struct timeval *tp, void *tzp)
usbi_gettimeofday	compat/libusb-1.0/libusb/libusbi.h	/^int usbi_gettimeofday(struct timeval *tp, void *tzp);$/;"	p	signature:(struct timeval *tp, void *tzp)
usbi_gettimeofday	compat/libusb-1.0/libusb/libusbi.h	245;"	d
usbi_handle_disconnect	compat/libusb-1.0/libusb/io.c	/^void usbi_handle_disconnect(struct libusb_device_handle *handle)$/;"	f	signature:(struct libusb_device_handle *handle)
usbi_handle_disconnect	compat/libusb-1.0/libusb/libusbi.h	/^void usbi_handle_disconnect(struct libusb_device_handle *handle);$/;"	p	signature:(struct libusb_device_handle *handle)
usbi_handle_transfer_cancellation	compat/libusb-1.0/libusb/io.c	/^int usbi_handle_transfer_cancellation(struct usbi_transfer *transfer)$/;"	f	signature:(struct usbi_transfer *transfer)
usbi_handle_transfer_cancellation	compat/libusb-1.0/libusb/libusbi.h	/^int usbi_handle_transfer_cancellation(struct usbi_transfer *transfer);$/;"	p	signature:(struct usbi_transfer *transfer)
usbi_handle_transfer_completion	compat/libusb-1.0/libusb/io.c	/^int usbi_handle_transfer_completion(struct usbi_transfer *itransfer,$/;"	f	signature:(struct usbi_transfer *itransfer, enum libusb_transfer_status status)
usbi_handle_transfer_completion	compat/libusb-1.0/libusb/libusbi.h	/^int usbi_handle_transfer_completion(struct usbi_transfer *itransfer,$/;"	p	signature:(struct usbi_transfer *itransfer, enum libusb_transfer_status status)
usbi_hotplug_deregister_all	compat/libusb-1.0/libusb/hotplug.c	/^void usbi_hotplug_deregister_all(struct libusb_context *ctx) {$/;"	f	signature:(struct libusb_context *ctx)
usbi_hotplug_deregister_all	compat/libusb-1.0/libusb/hotplug.h	/^void usbi_hotplug_deregister_all(struct libusb_context *ctx);$/;"	p	signature:(struct libusb_context *ctx)
usbi_hotplug_match	compat/libusb-1.0/libusb/hotplug.c	/^void usbi_hotplug_match(struct libusb_device *dev, libusb_hotplug_event event) {$/;"	f	signature:(struct libusb_device *dev, libusb_hotplug_event event)
usbi_hotplug_match	compat/libusb-1.0/libusb/hotplug.h	/^void usbi_hotplug_match(struct libusb_device *dev, libusb_hotplug_event event);$/;"	p	signature:(struct libusb_device *dev, libusb_hotplug_event event)
usbi_hotplug_match_cb	compat/libusb-1.0/libusb/hotplug.c	/^static int usbi_hotplug_match_cb (struct libusb_device *dev, libusb_hotplug_event event,$/;"	f	file:	signature:(struct libusb_device *dev, libusb_hotplug_event event, struct libusb_hotplug_callback *hotplug_cb)
usbi_info	compat/libusb-1.0/libusb/libusbi.h	/^static inline void usbi_info(struct libusb_context *ctx, const char *fmt, ...)$/;"	f	signature:(struct libusb_context *ctx, const char *fmt, ...)
usbi_info	compat/libusb-1.0/libusb/libusbi.h	149;"	d
usbi_io_exit	compat/libusb-1.0/libusb/io.c	/^void usbi_io_exit(struct libusb_context *ctx)$/;"	f	signature:(struct libusb_context *ctx)
usbi_io_exit	compat/libusb-1.0/libusb/libusbi.h	/^void usbi_io_exit(struct libusb_context *ctx);$/;"	p	signature:(struct libusb_context *ctx)
usbi_io_init	compat/libusb-1.0/libusb/io.c	/^int usbi_io_init(struct libusb_context *ctx)$/;"	f	signature:(struct libusb_context *ctx)
usbi_io_init	compat/libusb-1.0/libusb/libusbi.h	/^int usbi_io_init(struct libusb_context *ctx);$/;"	p	signature:(struct libusb_context *ctx)
usbi_log	compat/libusb-1.0/libusb/core.c	/^void usbi_log(struct libusb_context *ctx, enum usbi_log_level level,$/;"	f	signature:(struct libusb_context *ctx, enum usbi_log_level level, const char *function, const char *format, ...)
usbi_log	compat/libusb-1.0/libusb/libusbi.h	/^void usbi_log(struct libusb_context *ctx, enum usbi_log_level level,$/;"	p	signature:(struct libusb_context *ctx, enum usbi_log_level level, const char *function, const char *format, ...)
usbi_log_level	compat/libusb-1.0/libusb/libusbi.h	/^enum usbi_log_level {$/;"	g
usbi_log_v	compat/libusb-1.0/libusb/core.c	/^void usbi_log_v(struct libusb_context *ctx, enum usbi_log_level level,$/;"	f	signature:(struct libusb_context *ctx, enum usbi_log_level level, const char *function, const char *format, va_list args)
usbi_log_v	compat/libusb-1.0/libusb/libusbi.h	/^void usbi_log_v(struct libusb_context *ctx, enum usbi_log_level level,$/;"	p	signature:(struct libusb_context *ctx, enum usbi_log_level level, const char *function, const char *format, va_list args)
usbi_mutex_destroy	compat/libusb-1.0/libusb/os/threads_posix.h	36;"	d
usbi_mutex_destroy	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_mutex_destroy(usbi_mutex_t *mutex) {$/;"	f	signature:(usbi_mutex_t *mutex)
usbi_mutex_destroy	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_mutex_destroy(usbi_mutex_t *mutex);$/;"	p	signature:(usbi_mutex_t *mutex)
usbi_mutex_init	compat/libusb-1.0/libusb/os/threads_posix.h	32;"	d
usbi_mutex_init	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_mutex_init(usbi_mutex_t *mutex,$/;"	f	signature:(usbi_mutex_t *mutex, const usbi_mutexattr_t *attr)
usbi_mutex_init	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_mutex_init(usbi_mutex_t *mutex,$/;"	p	signature:(usbi_mutex_t *mutex, const usbi_mutexattr_t *attr)
usbi_mutex_init_recursive	compat/libusb-1.0/libusb/os/threads_posix.c	/^int usbi_mutex_init_recursive(pthread_mutex_t *mutex, pthread_mutexattr_t *attr)$/;"	f	signature:(pthread_mutex_t *mutex, pthread_mutexattr_t *attr)
usbi_mutex_init_recursive	compat/libusb-1.0/libusb/os/threads_posix.h	/^extern int usbi_mutex_init_recursive(pthread_mutex_t *mutex, pthread_mutexattr_t *attr);$/;"	p	signature:(pthread_mutex_t *mutex, pthread_mutexattr_t *attr)
usbi_mutex_init_recursive	compat/libusb-1.0/libusb/os/threads_windows.h	64;"	d
usbi_mutex_lock	compat/libusb-1.0/libusb/os/threads_posix.h	33;"	d
usbi_mutex_lock	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_mutex_lock(usbi_mutex_t *mutex) {$/;"	f	signature:(usbi_mutex_t *mutex)
usbi_mutex_lock	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_mutex_lock(usbi_mutex_t *mutex);$/;"	p	signature:(usbi_mutex_t *mutex)
usbi_mutex_static_lock	compat/libusb-1.0/libusb/os/threads_posix.h	28;"	d
usbi_mutex_static_lock	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_mutex_static_lock(usbi_mutex_static_t *mutex) {$/;"	f	signature:(usbi_mutex_static_t *mutex)
usbi_mutex_static_lock	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_mutex_static_lock(usbi_mutex_static_t *mutex);$/;"	p	signature:(usbi_mutex_static_t *mutex)
usbi_mutex_static_t	compat/libusb-1.0/libusb/os/threads_posix.h	26;"	d
usbi_mutex_static_t	compat/libusb-1.0/libusb/os/threads_windows.h	26;"	d
usbi_mutex_static_unlock	compat/libusb-1.0/libusb/os/threads_posix.h	29;"	d
usbi_mutex_static_unlock	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_mutex_static_unlock(usbi_mutex_static_t *mutex) {$/;"	f	signature:(usbi_mutex_static_t *mutex)
usbi_mutex_static_unlock	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_mutex_static_unlock(usbi_mutex_static_t *mutex);$/;"	p	signature:(usbi_mutex_static_t *mutex)
usbi_mutex_t	compat/libusb-1.0/libusb/os/threads_posix.h	31;"	d
usbi_mutex_t	compat/libusb-1.0/libusb/os/threads_windows.h	29;"	d
usbi_mutex_trylock	compat/libusb-1.0/libusb/os/threads_posix.h	35;"	d
usbi_mutex_trylock	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_mutex_trylock(usbi_mutex_t *mutex) {$/;"	f	signature:(usbi_mutex_t *mutex)
usbi_mutex_trylock	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_mutex_trylock(usbi_mutex_t *mutex);$/;"	p	signature:(usbi_mutex_t *mutex)
usbi_mutex_unlock	compat/libusb-1.0/libusb/os/threads_posix.h	34;"	d
usbi_mutex_unlock	compat/libusb-1.0/libusb/os/threads_windows.c	/^int usbi_mutex_unlock(usbi_mutex_t *mutex) {$/;"	f	signature:(usbi_mutex_t *mutex)
usbi_mutex_unlock	compat/libusb-1.0/libusb/os/threads_windows.h	/^int usbi_mutex_unlock(usbi_mutex_t *mutex);$/;"	p	signature:(usbi_mutex_t *mutex)
usbi_mutexattr_t	compat/libusb-1.0/libusb/os/threads_windows.h	60;"	d
usbi_os_backend	compat/libusb-1.0/libusb/libusbi.h	/^struct usbi_os_backend {$/;"	s
usbi_os_backend::add_iso_packet_size	compat/libusb-1.0/libusb/libusbi.h	/^	size_t add_iso_packet_size;$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::attach_kernel_driver	compat/libusb-1.0/libusb/libusbi.h	/^	int (*attach_kernel_driver)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::cancel_transfer	compat/libusb-1.0/libusb/libusbi.h	/^	int (*cancel_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::claim_interface	compat/libusb-1.0/libusb/libusbi.h	/^	int (*claim_interface)(struct libusb_device_handle *handle, int interface_number);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::clear_halt	compat/libusb-1.0/libusb/libusbi.h	/^	int (*clear_halt)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::clear_transfer_priv	compat/libusb-1.0/libusb/libusbi.h	/^	void (*clear_transfer_priv)(struct usbi_transfer *itransfer);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::clock_gettime	compat/libusb-1.0/libusb/libusbi.h	/^	int (*clock_gettime)(int clkid, struct timespec *tp);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::close	compat/libusb-1.0/libusb/libusbi.h	/^	void (*close)(struct libusb_device_handle *handle);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::destroy_device	compat/libusb-1.0/libusb/libusbi.h	/^	void (*destroy_device)(struct libusb_device *dev);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::detach_kernel_driver	compat/libusb-1.0/libusb/libusbi.h	/^	int (*detach_kernel_driver)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::device_handle_priv_size	compat/libusb-1.0/libusb/libusbi.h	/^	size_t device_handle_priv_size;$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::device_priv_size	compat/libusb-1.0/libusb/libusbi.h	/^	size_t device_priv_size;$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::exit	compat/libusb-1.0/libusb/libusbi.h	/^	void (*exit)(void);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::get_active_config_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_active_config_descriptor)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::get_config_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_config_descriptor)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::get_configuration	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_configuration)(struct libusb_device_handle *handle, int *config);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::get_device_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_device_descriptor)(struct libusb_device *device,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::get_device_list	compat/libusb-1.0/libusb/libusbi.h	/^	int (*get_device_list)(struct libusb_context *ctx,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::get_timerfd_clockid	compat/libusb-1.0/libusb/libusbi.h	/^	clockid_t (*get_timerfd_clockid)(void);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::handle_events	compat/libusb-1.0/libusb/libusbi.h	/^	int (*handle_events)(struct libusb_context *ctx,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::init	compat/libusb-1.0/libusb/libusbi.h	/^	int (*init)(struct libusb_context *ctx);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::kernel_driver_active	compat/libusb-1.0/libusb/libusbi.h	/^	int (*kernel_driver_active)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::name	compat/libusb-1.0/libusb/libusbi.h	/^	const char *name;$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::open	compat/libusb-1.0/libusb/libusbi.h	/^	int (*open)(struct libusb_device_handle *handle);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::release_interface	compat/libusb-1.0/libusb/libusbi.h	/^	int (*release_interface)(struct libusb_device_handle *handle, int interface_number);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::reset_device	compat/libusb-1.0/libusb/libusbi.h	/^	int (*reset_device)(struct libusb_device_handle *handle);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::set_configuration	compat/libusb-1.0/libusb/libusbi.h	/^	int (*set_configuration)(struct libusb_device_handle *handle, int config);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::set_interface_altsetting	compat/libusb-1.0/libusb/libusbi.h	/^	int (*set_interface_altsetting)(struct libusb_device_handle *handle,$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::submit_transfer	compat/libusb-1.0/libusb/libusbi.h	/^	int (*submit_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:usbi_os_backend	access:public
usbi_os_backend::transfer_priv_size	compat/libusb-1.0/libusb/libusbi.h	/^	size_t transfer_priv_size;$/;"	m	struct:usbi_os_backend	access:public
usbi_parse_descriptor	compat/libusb-1.0/libusb/descriptor.c	/^int usbi_parse_descriptor(const unsigned char *source, const char *descriptor,$/;"	f	signature:(const unsigned char *source, const char *descriptor, void *dest, int host_endian)
usbi_parse_descriptor	compat/libusb-1.0/libusb/libusbi.h	/^int usbi_parse_descriptor(const unsigned char *source, const char *descriptor,$/;"	p	signature:(const unsigned char *source, const char *descriptor, void *dest, int host_endian)
usbi_pipe	compat/libusb-1.0/libusb/os/poll_posix.h	7;"	d
usbi_pipe	compat/libusb-1.0/libusb/os/poll_windows.c	/^int usbi_pipe(int filedes[2])$/;"	f	signature:(int filedes[2])
usbi_pipe	compat/libusb-1.0/libusb/os/poll_windows.h	/^int usbi_pipe(int pipefd[2]);$/;"	p	signature:(int pipefd[2])
usbi_poll	compat/libusb-1.0/libusb/os/poll_posix.h	8;"	d
usbi_poll	compat/libusb-1.0/libusb/os/poll_windows.c	/^int usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout)$/;"	f	signature:(struct pollfd *fds, unsigned int nfds, int timeout)
usbi_poll	compat/libusb-1.0/libusb/os/poll_windows.h	/^int usbi_poll(struct pollfd *fds, unsigned int nfds, int timeout);$/;"	p	signature:(struct pollfd *fds, unsigned int nfds, int timeout)
usbi_pollfd	compat/libusb-1.0/libusb/libusbi.h	/^struct usbi_pollfd {$/;"	s
usbi_pollfd::list	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:usbi_pollfd	typeref:struct:usbi_pollfd::list_head	access:public
usbi_pollfd::pollfd	compat/libusb-1.0/libusb/libusbi.h	/^	struct libusb_pollfd pollfd;$/;"	m	struct:usbi_pollfd	typeref:struct:usbi_pollfd::libusb_pollfd	access:public
usbi_read	compat/libusb-1.0/libusb/os/poll_posix.h	5;"	d
usbi_read	compat/libusb-1.0/libusb/os/poll_windows.c	/^ssize_t usbi_read(int fd, void *buf, size_t count)$/;"	f	signature:(int fd, void *buf, size_t count)
usbi_read	compat/libusb-1.0/libusb/os/poll_windows.h	/^ssize_t usbi_read(int fd, void *buf, size_t count);$/;"	p	signature:(int fd, void *buf, size_t count)
usbi_remove_pollfd	compat/libusb-1.0/libusb/io.c	/^void usbi_remove_pollfd(struct libusb_context *ctx, int fd)$/;"	f	signature:(struct libusb_context *ctx, int fd)
usbi_remove_pollfd	compat/libusb-1.0/libusb/libusbi.h	/^void usbi_remove_pollfd(struct libusb_context *ctx, int fd);$/;"	p	signature:(struct libusb_context *ctx, int fd)
usbi_sanitize_device	compat/libusb-1.0/libusb/core.c	/^int usbi_sanitize_device(struct libusb_device *dev)$/;"	f	signature:(struct libusb_device *dev)
usbi_sanitize_device	compat/libusb-1.0/libusb/libusbi.h	/^int usbi_sanitize_device(struct libusb_device *dev);$/;"	p	signature:(struct libusb_device *dev)
usbi_transfer	compat/libusb-1.0/libusb/libusbi.h	/^struct usbi_transfer {$/;"	s
usbi_transfer::flags	compat/libusb-1.0/libusb/libusbi.h	/^	uint8_t flags;$/;"	m	struct:usbi_transfer	access:public
usbi_transfer::list	compat/libusb-1.0/libusb/libusbi.h	/^	struct list_head list;$/;"	m	struct:usbi_transfer	typeref:struct:usbi_transfer::list_head	access:public
usbi_transfer::lock	compat/libusb-1.0/libusb/libusbi.h	/^	usbi_mutex_t lock;$/;"	m	struct:usbi_transfer	access:public
usbi_transfer::num_iso_packets	compat/libusb-1.0/libusb/libusbi.h	/^	int num_iso_packets;$/;"	m	struct:usbi_transfer	access:public
usbi_transfer::timeout	compat/libusb-1.0/libusb/libusbi.h	/^	struct timeval timeout;$/;"	m	struct:usbi_transfer	typeref:struct:usbi_transfer::timeval	access:public
usbi_transfer::transferred	compat/libusb-1.0/libusb/libusbi.h	/^	int transferred;$/;"	m	struct:usbi_transfer	access:public
usbi_transfer_flags	compat/libusb-1.0/libusb/libusbi.h	/^enum usbi_transfer_flags {$/;"	g
usbi_transfer_get_os_priv	compat/libusb-1.0/libusb/libusbi.h	/^static inline void *usbi_transfer_get_os_priv(struct usbi_transfer *transfer)$/;"	f	signature:(struct usbi_transfer *transfer)
usbi_using_timerfd	compat/libusb-1.0/libusb/libusbi.h	315;"	d
usbi_using_timerfd	compat/libusb-1.0/libusb/libusbi.h	317;"	d
usbi_warn	compat/libusb-1.0/libusb/libusbi.h	/^static inline void usbi_warn(struct libusb_context *ctx, const char *fmt, ...)$/;"	f	signature:(struct libusb_context *ctx, const char *fmt, ...)
usbi_warn	compat/libusb-1.0/libusb/libusbi.h	150;"	d
usbi_write	compat/libusb-1.0/libusb/os/poll_posix.h	4;"	d
usbi_write	compat/libusb-1.0/libusb/os/poll_windows.c	/^ssize_t usbi_write(int fd, const void *buf, size_t count)$/;"	f	signature:(int fd, const void *buf, size_t count)
usbi_write	compat/libusb-1.0/libusb/os/poll_windows.h	/^ssize_t usbi_write(int fd, const void *buf, size_t count);$/;"	p	signature:(int fd, const void *buf, size_t count)
usbinfo	miner.h	/^	struct cg_usb_info usbinfo;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::cg_usb_info	access:public
usbres_thr_id	cgminer.c	/^static int usbres_thr_id;$/;"	v	file:
usbstat	usbutils.h	/^	int usbstat;$/;"	m	struct:cg_usb_info	access:public
usbstats	api.c	/^static void usbstats(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)$/;"	f	file:	signature:(struct io_data *io_data, __maybe_unused SOCKETTYPE c, __maybe_unused char *param, bool isjson, __maybe_unused char group)
usbver	usbutils.h	/^	uint16_t usbver;$/;"	m	struct:cg_usb_device	access:public
use_curses	cgminer.c	/^bool use_curses = true;$/;"	v
use_curses	cgminer.c	/^bool use_curses;$/;"	v
use_ext_clock	driver-drillbit.c	/^	uint8_t use_ext_clock; \/\/ Flag. Ignored on boards without external clocks$/;"	m	struct:__anon3	file:	access:public
use_ext_clock	driver-drillbit.c	/^	uint8_t use_ext_clock; \/\/ Ignored on boards without external clocks$/;"	m	struct:__anon5	file:	access:public
use_res2	driver-minion.c	/^	uint64_t use_res2[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
use_syslog	cgminer.c	/^bool use_syslog;$/;"	v
usec_stamp	driver-spondoolies-sp30.c	/^unsigned long usec_stamp(void)$/;"	f	signature:(void)
used	compat/libusb-1.0/libusb/os/windows_usb.c	/^	unsigned long used;$/;"	m	struct:htab_entry	file:	access:public
used	driver-klondike.c	/^	KLIST *used;$/;"	m	struct:klondike_info	file:	access:public
used_count	driver-klondike.c	/^	int used_count;$/;"	m	struct:klondike_info	file:	access:public
usepins	driver-minion.c	/^static bool usepins = false;$/;"	v	file:
user_configuration	hf_protocol.h	/^	uint8_t  user_configuration:1;          \/\/ Use the following configuration data$/;"	m	struct:hf_usb_init_header	access:public
user_configuration	hf_protocol_be.h	/^	uint8_t  user_configuration:1;          \/\/ Use the following configuration data$/;"	m	struct:hf_usb_init_header	access:public
user_data	compat/libusb-1.0/libusb/hotplug.h	/^	void *user_data;$/;"	m	struct:libusb_hotplug_callback	access:public
user_data	compat/libusb-1.0/libusb/libusb.h	/^	void *user_data;$/;"	m	struct:libusb_transfer	access:public
user_pages	miner.php	/^$user_pages = array();$/;"	v
usercontext	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	void *usercontext;$/;"	m	struct:usbfs_urb	access:public
userlist	miner.php	/^$userlist = null;$/;"	v
ushort	compat.h	/^typedef unsigned short int ushort;$/;"	t
ut_list	usbutils.c	/^static struct list_head ut_list;$/;"	v	typeref:struct:list_head	file:
utf8_check_first	compat/jansson-2.6/src/utf.c	/^int utf8_check_first(char byte)$/;"	f	signature:(char byte)
utf8_check_first	compat/jansson-2.6/src/utf.h	/^int utf8_check_first(char byte);$/;"	p	signature:(char byte)
utf8_check_full	compat/jansson-2.6/src/utf.c	/^int utf8_check_full(const char *buffer, int size, int32_t *codepoint)$/;"	f	signature:(const char *buffer, int size, int32_t *codepoint)
utf8_check_full	compat/jansson-2.6/src/utf.h	/^int utf8_check_full(const char *buffer, int size, int32_t *codepoint);$/;"	p	signature:(const char *buffer, int size, int32_t *codepoint)
utf8_check_string	compat/jansson-2.6/src/utf.c	/^int utf8_check_string(const char *string, int length)$/;"	f	signature:(const char *string, int length)
utf8_check_string	compat/jansson-2.6/src/utf.h	/^int utf8_check_string(const char *string, int length);$/;"	p	signature:(const char *string, int length)
utf8_encode	compat/jansson-2.6/src/utf.c	/^int utf8_encode(int32_t codepoint, char *buffer, int *size)$/;"	f	signature:(int32_t codepoint, char *buffer, int *size)
utf8_encode	compat/jansson-2.6/src/utf.h	/^int utf8_encode(int codepoint, char *buffer, int *size);$/;"	p	signature:(int codepoint, char *buffer, int *size)
utf8_iterate	compat/jansson-2.6/src/utf.c	/^const char *utf8_iterate(const char *buffer, int32_t *codepoint)$/;"	f	signature:(const char *buffer, int32_t *codepoint)
utf8_iterate	compat/jansson-2.6/src/utf.h	/^const char *utf8_iterate(const char *buffer, int32_t *codepoint);$/;"	p	signature:(const char *buffer, int32_t *codepoint)
uthash_expand_fyi	uthash.h	83;"	d
uthash_fatal	uthash.h	70;"	d
uthash_free	uthash.h	76;"	d
uthash_malloc	uthash.h	73;"	d
uthash_noexpand_fyi	uthash.h	80;"	d
utility	miner.h	/^	double utility;$/;"	m	struct:cgpu_info	access:public
utility	miner.h	/^	double utility;$/;"	m	struct:pool	access:public
va_copy	compat/jansson-2.6/src/jansson_private.h	28;"	d
va_copy	compat/jansson-2.6/src/jansson_private.h	30;"	d
val	miner.php	/^				$val = genfld($row, $calc);$/;"	v
val	miner.php	/^	$val = $row[$test[0]];$/;"	v
val	miner.php	/^	$val = null;$/;"	v
val	usbutils.c	/^	int val;$/;"	m	union:semun	file:	access:public
valid	driver-bitfury.h	/^	bool valid; \/* Set on first valid data being found *\/$/;"	m	struct:bitfury_info	access:public
valid_ascii	util.c	984;"	d	file:
valid_hex	util.c	956;"	d	file:
value	compat/jansson-2.6/src/hashtable.h	/^    json_t *value;$/;"	m	struct:hashtable_pair	access:public
value	compat/jansson-2.6/src/jansson_private.h	/^    char *value;$/;"	m	struct:__anon24	access:public
value	compat/jansson-2.6/src/jansson_private.h	/^    double value;$/;"	m	struct:__anon25	access:public
value	compat/jansson-2.6/src/jansson_private.h	/^    json_int_t value;$/;"	m	struct:__anon26	access:public
value	compat/jansson-2.6/src/load.c	/^    } value;$/;"	m	struct:__anon17	typeref:union:__anon17::__anon18	file:	access:public
value	compat/jansson-2.6/src/strbuffer.h	/^    char *value;$/;"	m	struct:__anon29	access:public
value	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT value;$/;"	m	struct:__anon37	access:public
value	driver-bab.c	/^	int value;$/;"	m	struct:__anon60	file:	access:public
value	driver-minion.c	/^	int value;$/;"	m	struct:__anon49	file:	access:public
value	mcp2210.h	/^	struct gpio_pin value;$/;"	m	struct:mcp_settings	typeref:struct:mcp_settings::gpio_pin	access:public
value	miner.php	/^				$value = $total[$name];$/;"	v
value	miner.php	/^				$value = null;$/;"	v
value	miner.php	/^			$value = $colouroverride[$cssdata];$/;"	v
value	miner.php	/^			$value = $devs["GPU$c"][$des];$/;"	v
value	miner.php	/^			$value = $rn;$/;"	v
value	miner.php	/^			$value = $row[$name];$/;"	v
values	driver-antrouter.c	/^	uint32_t values;$/;"	m	struct:ANTROUTER_HISTORY	file:	access:public
values	driver-antrouter.c	/^	uint32_t values;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
values	driver-bmsc.c	/^	uint32_t values;$/;"	m	struct:BMSC_HISTORY	file:	access:public
values	driver-bmsc.c	/^	uint32_t values;$/;"	m	struct:BMSC_INFO	file:	access:public
values	driver-icarus.c	/^	uint32_t values;$/;"	m	struct:ICARUS_HISTORY	file:	access:public
values	driver-icarus.c	/^	uint32_t values;$/;"	m	struct:ICARUS_INFO	file:	access:public
vcc1	driver-bflsc.h	/^	float vcc1;$/;"	m	struct:bflsc_dev	access:public
vcc2	driver-bflsc.h	/^	float vcc2;$/;"	m	struct:bflsc_dev	access:public
vcom_set_timeout_ms	driver-antrouter.c	/^bool vcom_set_timeout_ms(const int fdDev, const unsigned timeout_ms)$/;"	f	signature:(const int fdDev, const unsigned timeout_ms)
vendor_id	compat/libusb-1.0/libusb/hotplug.h	/^	int vendor_id;$/;"	m	struct:libusb_hotplug_callback	access:public
ver_major	driver-bitfury.h	/^	int ver_major;$/;"	m	struct:bitfury_info	access:public
ver_minor	driver-bitfury.h	/^	int ver_minor;$/;"	m	struct:bitfury_info	access:public
verbose	MCast.java	/^	static public boolean verbose = false;$/;"	f	class:MCast	access:public
verify_checksum	driver-cointerra.c	/^static int verify_checksum(char *buf)$/;"	f	file:	signature:(char *buf)
version	driver-bab.c	/^	int version;$/;"	m	struct:bab_info	file:	access:public
version	driver-bitfury.h	/^	uint8_t version;$/;"	m	struct:bitfury_info	access:public
version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_packet_head	access:public
version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_rxnonce_data	access:public
version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_rxstatus_data	access:public
version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_rxstatus_token	access:public
version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_txconfig_token	access:public
version	driver-bitmain.h	/^	uint8_t version;$/;"	m	struct:bitmain_txtask_token	access:public
version	driver-klondike.c	/^	uint8_t version;$/;"	m	struct:klondike_id	file:	access:public
version	driver-knc.c	/^	int version;$/;"	m	struct:knc_die	file:	access:public
version	knc-asic.h	/^	} version;$/;"	m	struct:knc_die_info	typeref:enum:knc_die_info::__anon58	access:public
version1	driver-avalon.h	/^	uint8_t version1;$/;"	m	struct:avalon_info	access:public
version2	driver-avalon.h	/^	uint8_t version2;$/;"	m	struct:avalon_info	access:public
version3	driver-avalon.h	/^	uint8_t version3;$/;"	m	struct:avalon_info	access:public
vfprintf	ccan/opt/test/run-helpers.c	19;"	d	file:
visited	compat/jansson-2.6/src/jansson_private.h	/^    int visited;$/;"	m	struct:__anon22	access:public
visited	compat/jansson-2.6/src/jansson_private.h	/^    int visited;$/;"	m	struct:__anon23	access:public
vmain	driver-bflsc.h	/^	float vmain;$/;"	m	struct:bflsc_dev	access:public
volt_next	driver-bflsc.h	/^	int volt_next;$/;"	m	struct:bflsc_info	access:public
volt_next_stat	driver-bflsc.h	/^	bool volt_next_stat;$/;"	m	struct:bflsc_info	access:public
voltage	driver-bitmain.h	/^	uint8_t voltage[2];$/;"	m	struct:bitmain_info	access:public
voltage	driver-bitmain.h	/^	uint8_t voltage[2];$/;"	m	struct:bitmain_txconfig_token	access:public
voltage	hf_protocol.h	/^	uint16_t voltage;                           \/\/ Voltage at device boundary (0 if unavailable)$/;"	m	struct:hf_g1_die_data	access:public
voltage	hf_protocol_be.h	/^	uint16_t voltage;                           \/\/ Voltage at device boundary (0 if unavailable)$/;"	m	struct:hf_g1_die_data	access:public
voltage0	driver-hashfast.c	/^	uint16_t voltage0;$/;"	m	struct:hf_settings_data	file:	access:public
voltage1	driver-hashfast.c	/^	uint16_t voltage1;$/;"	m	struct:hf_settings_data	file:	access:public
voltage2	driver-hashfast.c	/^	uint16_t voltage2;$/;"	m	struct:hf_settings_data	file:	access:public
voltage3	driver-hashfast.c	/^	uint16_t voltage3;$/;"	m	struct:hf_settings_data	file:	access:public
voltage_eft	driver-bitmain.h	/^	uint8_t voltage_eft          :1;$/;"	m	struct:bitmain_txconfig_token	access:public
voltage_sample_points	hf_protocol.h	/^	uint32_t voltage_sample_points:8;           \/\/ Bit mask for sample points (up to 5 bits set)$/;"	m	struct:hf_config_data	access:public
voltage_sample_points	hf_protocol_be.h	/^	uint32_t voltage_sample_points:8;           \/\/ Bit mask for sample points (up to 5 bits set)$/;"	m	struct:hf_config_data	access:public
voltage_t	driver-bitmain.h	/^	char voltage_t[8];$/;"	m	struct:bitmain_info	access:public
volts12	driver-cointerra.h	/^	uint16_t volts12;$/;"	m	struct:cointerra_info	access:public
volts33	driver-cointerra.h	/^	uint16_t volts33;$/;"	m	struct:cointerra_info	access:public
vsnprintf	compat/jansson-2.6/src/jansson_private.h	90;"	d
wBytesPerInterval	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wBytesPerInterval;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor	access:public
wHubCharacteristics	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USHORT  wHubCharacteristics;$/;"	m	struct:USB_HUB_DESCRIPTOR	access:public
wIndex	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wIndex;$/;"	m	struct:libusb_control_setup	access:public
wIndex	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint16_t wIndex;$/;"	m	struct:usbfs_ctrltransfer	access:public
wIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^			USHORT wIndex;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
wIndex	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USHORT  wIndex;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
wLength	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wLength;$/;"	m	struct:libusb_control_setup	access:public
wLength	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint16_t wLength;$/;"	m	struct:usbfs_ctrltransfer	access:public
wLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^			USHORT wLength;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
wLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USHORT  wLength;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
wMaxPacketSize	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wMaxPacketSize;$/;"	m	struct:libusb_endpoint_descriptor	access:public
wMaxPacketSize	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT  wMaxPacketSize;$/;"	m	struct:USB_ENDPOINT_DESCRIPTOR	access:public
wMaxPacketSize	usbutils.h	/^	uint16_t wMaxPacketSize;$/;"	m	struct:usb_epinfo	access:public
wSpeedSupported	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wSpeedSupported;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor	access:public
wTotalLength	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wTotalLength;$/;"	m	struct:libusb_bos_descriptor	access:public
wTotalLength	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wTotalLength;$/;"	m	struct:libusb_config_descriptor	access:public
wTotalLength	compat/libusb-1.0/libusb/os/windows_usb.h	/^  USHORT wTotalLength;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR	access:public
wValue	compat/libusb-1.0/libusb/libusb.h	/^	uint16_t wValue;$/;"	m	struct:libusb_control_setup	access:public
wValue	compat/libusb-1.0/libusb/os/linux_usbfs.h	/^	uint16_t wValue;$/;"	m	struct:usbfs_ctrltransfer	access:public
wValue	compat/libusb-1.0/libusb/os/windows_usb.h	/^			USHORT wValue;$/;"	m	struct:USB_CONFIGURATION_DESCRIPTOR_SHORT::__anon31::__anon32	access:public
wValue	compat/libusb-1.0/libusb/os/windows_usb.h	/^		USHORT  wValue;$/;"	m	struct:USB_DESCRIPTOR_REQUEST::__anon33	access:public
wait4	MCast.java	/^	static private int wait4 = MCAST_WAIT4;$/;"	f	class:MCast	file:	access:private
wait_avalon_ready	driver-avalon.c	/^static void wait_avalon_ready(struct cgpu_info *avalon)$/;"	f	file:	signature:(struct cgpu_info *avalon)
wait_lpcurrent	cgminer.c	/^static void wait_lpcurrent(struct pool *pool)$/;"	f	file:	signature:(struct pool *pool)
wait_lpcurrent	cgminer.c	/^static void wait_lpcurrent(struct pool *pool);$/;"	p	file:	signature:(struct pool *pool)
wait_ms	miner.h	/^	unsigned int wait_ms;$/;"	m	struct:cgpu_info	access:public
waiters	compat/libusb-1.0/libusb/os/threads_windows.h	/^	struct list_head waiters;$/;"	m	struct:usbi_cond_t_	typeref:struct:usbi_cond_t_::list_head	access:public
wake_cond	driver-cointerra.h	/^	pthread_cond_t wake_cond;$/;"	m	struct:cointerra_info	access:public
wake_gws	cgminer.c	/^static void wake_gws(void)$/;"	f	file:	signature:(void)
want_freq	driver-minion.c	/^	int want_freq[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
want_per_device_stats	cgminer.c	/^bool want_per_device_stats;$/;"	v
want_work	knc-asic.h	/^	char want_work[KNC_MAX_CORES_PER_DIE];$/;"	m	struct:knc_die_info	access:public
warnclass	miner.php	/^ $warnclass = 'warn';$/;"	v
warnfont	miner.php	/^$warnfont = '<font color=red><b>';$/;"	v
warnoff	miner.php	/^$warnoff = '<\/b><\/font>';$/;"	v
watchdog	hf_protocol.h	/^	uint8_t  watchdog:7;                        \/\/ Watchdog timeout, seconds$/;"	m	struct:hf_config_data	access:public
watchdog	hf_protocol_be.h	/^	uint8_t  watchdog:7;                        \/\/ Watchdog timeout, seconds$/;"	m	struct:hf_config_data	access:public
watchdog_thr_id	cgminer.c	/^static int watchdog_thr_id;$/;"	v	file:
watchdog_thread	cgminer.c	/^static void *watchdog_thread(void __maybe_unused *userdata)$/;"	f	file:	signature:(void __maybe_unused *userdata)
watchpool_thr_id	cgminer.c	/^static int watchpool_thr_id;$/;"	v	file:
watchpool_thread	cgminer.c	/^static void *watchpool_thread(void __maybe_unused *userdata)$/;"	f	file:	signature:(void __maybe_unused *userdata)
wbuf	driver-bab.c	/^	uint8_t wbuf[BAB_MAXBUF];$/;"	m	struct:sitem	file:	access:public
wbuf	driver-minion.c	/^	uint8_t wbuf[MINION_BUFSIZ];$/;"	m	struct:task_item	file:	access:public
wchar_to_utf8_ms	compat/libusb-1.0/libusb/os/windows_usb.h	72;"	d
wchip_list	driver-minion.c	/^	K_STORE *wchip_list[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
wchip_staled	driver-minion.c	/^	uint64_t wchip_staled;$/;"	m	struct:minion_info	file:	access:public
wfree_list	driver-bab.c	/^	K_LIST *wfree_list;$/;"	m	struct:bab_info	file:	access:public
wfree_list	driver-minion.c	/^	K_LIST *wfree_list;$/;"	m	struct:minion_info	file:	access:public
when	api.c	/^static time_t when = 0;	\/\/ when the request occurred$/;"	v	file:
when	driver-bab.c	/^	struct timeval when;$/;"	m	struct:ritem	typeref:struct:ritem::timeval	file:	access:public
when	driver-minion.c	/^	struct timeval when;$/;"	m	struct:hist_item	typeref:struct:hist_item::timeval	file:	access:public
when	driver-minion.c	/^	struct timeval when;$/;"	m	struct:perf_item	typeref:struct:perf_item::timeval	file:	access:public
when	driver-minion.c	/^	struct timeval when;$/;"	m	struct:res_item	typeref:struct:res_item::timeval	file:	access:public
when	driver-minion.c	/^	time_t when;$/;"	m	struct:xff_item	file:	access:public
when	miner.php	/^		$when = $ans['STATUS']['When'];$/;"	v
when	miner.php	/^		$when = $list['STATUS']['When'];$/;"	v
when	miner.php	/^		$when = $result['STATUS']['When'];$/;"	v
when	miner.php	/^	$when = 0;$/;"	v
when	miner.php	/^ $when = 0;$/;"	v
when	noncedup.c	/^	struct timeval when;$/;"	m	struct:nitem	typeref:struct:nitem::timeval	file:	access:public
whitelist_cgpu	usbutils.c	/^void whitelist_cgpu(struct cgpu_info *cgpu)$/;"	f	signature:(struct cgpu_info *cgpu)
whitelist_cgpu	usbutils.h	/^void whitelist_cgpu(struct cgpu_info *cgpu);$/;"	p	signature:(struct cgpu_info *cgpu)
whitespace	compat/jansson-2.6/src/dump.c	/^static const char whitespace[] = "                                ";$/;"	v	file:
windows_abort_control	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_abort_control(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
windows_abort_transfers	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_abort_transfers(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
windows_assign_endpoints	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_assign_endpoints(struct libusb_device_handle *dev_handle, int iface, int altsetting)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface, int altsetting)
windows_attach_kernel_driver	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_attach_kernel_driver(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
windows_backend	compat/libusb-1.0/libusb/os/windows_usb.c	/^const struct usbi_os_backend windows_backend = {$/;"	v	typeref:struct:usbi_os_backend
windows_cancel_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_cancel_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
windows_claim_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_claim_interface(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
windows_clear_halt	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_clear_halt(struct libusb_device_handle *dev_handle, unsigned char endpoint)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, unsigned char endpoint)
windows_clear_transfer_priv	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void windows_clear_transfer_priv(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
windows_clock_gettime	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_clock_gettime(int clk_id, struct timespec *tp)$/;"	f	file:	signature:(int clk_id, struct timespec *tp)
windows_clock_gettime	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_clock_gettime(int clk_id, struct timespec *tp);$/;"	p	file:	signature:(int clk_id, struct timespec *tp)
windows_clock_gettime_threaded	compat/libusb-1.0/libusb/os/windows_usb.c	/^unsigned __stdcall windows_clock_gettime_threaded(void* param)$/;"	f	signature:(void* param)
windows_clock_gettime_threaded	compat/libusb-1.0/libusb/os/windows_usb.c	/^unsigned __stdcall windows_clock_gettime_threaded(void* param);$/;"	p	file:	signature:(void* param)
windows_close	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void windows_close(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
windows_destroy_device	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void windows_destroy_device(struct libusb_device *dev)$/;"	f	file:	signature:(struct libusb_device *dev)
windows_detach_kernel_driver	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_detach_kernel_driver(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
windows_device_handle_priv	compat/libusb-1.0/libusb/os/windows_usb.h	/^struct windows_device_handle_priv {$/;"	s
windows_device_handle_priv::active_interface	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int active_interface;$/;"	m	struct:windows_device_handle_priv	access:public
windows_device_handle_priv::autoclaim_count	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int autoclaim_count[USB_MAXINTERFACES]; \/\/ For auto-release$/;"	m	struct:windows_device_handle_priv	access:public
windows_device_handle_priv::interface_handle	compat/libusb-1.0/libusb/os/windows_usb.h	/^	struct interface_handle_t interface_handle[USB_MAXINTERFACES];$/;"	m	struct:windows_device_handle_priv	typeref:struct:windows_device_handle_priv::interface_handle_t	access:public
windows_device_priv	compat/libusb-1.0/libusb/os/windows_usb.h	/^struct windows_device_priv {$/;"	s
windows_device_priv::__anon30::apib	compat/libusb-1.0/libusb/os/windows_usb.h	/^		struct windows_usb_api_backend const *apib; \/\/ an API backend (multiple drivers support),$/;"	m	struct:windows_device_priv::__anon30	access:public
windows_device_priv::__anon30::endpoint	compat/libusb-1.0/libusb/os/windows_usb.h	/^		uint8_t *endpoint;$/;"	m	struct:windows_device_priv::__anon30	access:public
windows_device_priv::__anon30::nb_endpoints	compat/libusb-1.0/libusb/os/windows_usb.h	/^		int8_t nb_endpoints;			\/\/ and a set of endpoint addresses (USB_MAXENDPOINTS)$/;"	m	struct:windows_device_priv::__anon30	access:public
windows_device_priv::__anon30::path	compat/libusb-1.0/libusb/os/windows_usb.h	/^		char *path;						\/\/ each interface needs a device interface path,$/;"	m	struct:windows_device_priv::__anon30	access:public
windows_device_priv::active_config	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t active_config;$/;"	m	struct:windows_device_priv	access:public
windows_device_priv::apib	compat/libusb-1.0/libusb/os/windows_usb.h	/^	struct windows_usb_api_backend const *apib;$/;"	m	struct:windows_device_priv	access:public
windows_device_priv::composite_api_flags	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t composite_api_flags;		\/\/ composite devices require additional data$/;"	m	struct:windows_device_priv	access:public
windows_device_priv::config_descriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	unsigned char **config_descriptor;	\/\/ list of pointers to the cached config descriptors$/;"	m	struct:windows_device_priv	access:public
windows_device_priv::depth	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t depth;						\/\/ distance to HCD$/;"	m	struct:windows_device_priv	access:public
windows_device_priv::dev_descriptor	compat/libusb-1.0/libusb/os/windows_usb.h	/^	USB_DEVICE_DESCRIPTOR dev_descriptor;$/;"	m	struct:windows_device_priv	access:public
windows_device_priv::parent_dev	compat/libusb-1.0/libusb/os/windows_usb.h	/^	struct libusb_device *parent_dev;	\/\/ access to parent is required for usermode ops$/;"	m	struct:windows_device_priv	typeref:struct:windows_device_priv::libusb_device	access:public
windows_device_priv::path	compat/libusb-1.0/libusb/os/windows_usb.h	/^	char *path;							\/\/ device interface path$/;"	m	struct:windows_device_priv	access:public
windows_device_priv::port	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t port;						\/\/ port number on the hub$/;"	m	struct:windows_device_priv	access:public
windows_device_priv::usb_interface	compat/libusb-1.0/libusb/os/windows_usb.h	/^	} usb_interface[USB_MAXINTERFACES];$/;"	m	struct:windows_device_priv	typeref:struct:windows_device_priv::__anon30	access:public
windows_device_priv_init	compat/libusb-1.0/libusb/os/windows_usb.h	/^static inline void windows_device_priv_init(libusb_device* dev) {$/;"	f	signature:(libusb_device* dev)
windows_device_priv_release	compat/libusb-1.0/libusb/os/windows_usb.h	/^static inline void windows_device_priv_release(libusb_device* dev) {$/;"	f	signature:(libusb_device* dev)
windows_error_str	compat/libusb-1.0/libusb/os/windows_usb.c	/^static char *windows_error_str(uint32_t retval)$/;"	f	file:	signature:(uint32_t retval)
windows_exit	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void windows_exit(void)$/;"	f	file:	signature:(void)
windows_get_active_config_descriptor	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_get_active_config_descriptor(struct libusb_device *dev, unsigned char *buffer, size_t len, int *host_endian)$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer, size_t len, int *host_endian)
windows_get_active_config_descriptor	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_get_active_config_descriptor(struct libusb_device *dev, unsigned char *buffer, size_t len, int *host_endian);$/;"	p	file:	signature:(struct libusb_device *dev, unsigned char *buffer, size_t len, int *host_endian)
windows_get_config_descriptor	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_get_config_descriptor(struct libusb_device *dev, uint8_t config_index, unsigned char *buffer, size_t len, int *host_endian)$/;"	f	file:	signature:(struct libusb_device *dev, uint8_t config_index, unsigned char *buffer, size_t len, int *host_endian)
windows_get_configuration	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_get_configuration(struct libusb_device_handle *dev_handle, int *config)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int *config)
windows_get_device_descriptor	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_get_device_descriptor(struct libusb_device *dev, unsigned char *buffer, int *host_endian)$/;"	f	file:	signature:(struct libusb_device *dev, unsigned char *buffer, int *host_endian)
windows_get_device_list	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_get_device_list(struct libusb_context *ctx, struct discovered_devs **_discdevs)$/;"	f	file:	signature:(struct libusb_context *ctx, struct discovered_devs **_discdevs)
windows_handle_callback	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void windows_handle_callback (struct usbi_transfer *itransfer, uint32_t io_result, uint32_t io_size)$/;"	f	file:	signature:(struct usbi_transfer *itransfer, uint32_t io_result, uint32_t io_size)
windows_handle_events	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_handle_events(struct libusb_context *ctx, struct pollfd *fds, POLL_NFDS_TYPE nfds, int num_ready)$/;"	f	file:	signature:(struct libusb_context *ctx, struct pollfd *fds, POLL_NFDS_TYPE nfds, int num_ready)
windows_init	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_init(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
windows_kernel_driver_active	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_kernel_driver_active(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
windows_open	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_open(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
windows_release_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_release_interface(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
windows_reset_device	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_reset_device(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
windows_set_configuration	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_set_configuration(struct libusb_device_handle *dev_handle, int config)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int config)
windows_set_interface_altsetting	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_set_interface_altsetting(struct libusb_device_handle *dev_handle, int iface, int altsetting)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface, int altsetting)
windows_submit_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int windows_submit_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
windows_transfer_callback	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void windows_transfer_callback(struct usbi_transfer *itransfer, uint32_t io_result, uint32_t io_size)$/;"	f	file:	signature:(struct usbi_transfer *itransfer, uint32_t io_result, uint32_t io_size)
windows_transfer_priv	compat/libusb-1.0/libusb/os/windows_usb.h	/^struct windows_transfer_priv {$/;"	s
windows_transfer_priv::interface_number	compat/libusb-1.0/libusb/os/windows_usb.h	/^	uint8_t interface_number;$/;"	m	struct:windows_transfer_priv	access:public
windows_transfer_priv::pollable_fd	compat/libusb-1.0/libusb/os/windows_usb.h	/^	struct winfd pollable_fd;$/;"	m	struct:windows_transfer_priv	typeref:struct:windows_transfer_priv::winfd	access:public
windows_usb_api_backend	compat/libusb-1.0/libusb/os/windows_usb.h	/^struct windows_usb_api_backend {$/;"	s
windows_usb_api_backend::abort_control	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*abort_control)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::abort_transfers	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*abort_transfers)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::claim_interface	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*claim_interface)(struct libusb_device_handle *dev_handle, int iface);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::class_guid	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const GUID *class_guid;  \/\/ The Class GUID (for fallback in case the driver name cannot be read)$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::clear_halt	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*clear_halt)(struct libusb_device_handle *dev_handle, unsigned char endpoint);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::close	compat/libusb-1.0/libusb/os/windows_usb.h	/^	void (*close)(struct libusb_device_handle *dev_handle);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::copy_transfer_data	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*copy_transfer_data)(struct usbi_transfer *itransfer, uint32_t io_size);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::designation	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const char* designation;$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::driver_name_list	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const char **driver_name_list; \/\/ Driver name, without .sys, e.g. "usbccgp"$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::exit	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*exit)(void);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::id	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const uint8_t id;$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::init	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*init)(struct libusb_context *ctx);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::nb_driver_names	compat/libusb-1.0/libusb/os/windows_usb.h	/^	const uint8_t nb_driver_names;$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::open	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*open)(struct libusb_device_handle *dev_handle);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::release_interface	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*release_interface)(struct libusb_device_handle *dev_handle, int iface);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::reset_device	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*reset_device)(struct libusb_device_handle *dev_handle);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::set_interface_altsetting	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*set_interface_altsetting)(struct libusb_device_handle *dev_handle, int iface, int altsetting);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::submit_bulk_transfer	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*submit_bulk_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::submit_control_transfer	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*submit_control_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
windows_usb_api_backend::submit_iso_transfer	compat/libusb-1.0/libusb/os/windows_usb.h	/^	int (*submit_iso_transfer)(struct usbi_transfer *itransfer);$/;"	m	struct:windows_usb_api_backend	access:public
windows_version	compat/libusb-1.0/libusb/os/poll_windows.h	/^enum windows_version {$/;"	g
windows_version	compat/libusb-1.0/libusb/os/windows_usb.c	/^enum windows_version windows_version = WINDOWS_UNSUPPORTED;$/;"	v	typeref:enum:windows_version
winfd	compat/libusb-1.0/libusb/os/poll_windows.h	/^struct winfd {$/;"	s
winfd::fd	compat/libusb-1.0/libusb/os/poll_windows.h	/^	int fd;							\/\/ what's exposed to libusb core$/;"	m	struct:winfd	access:public
winfd::handle	compat/libusb-1.0/libusb/os/poll_windows.h	/^	HANDLE handle;					\/\/ what we need to attach overlapped to the I\/O op, so we can poll it$/;"	m	struct:winfd	access:public
winfd::overlapped	compat/libusb-1.0/libusb/os/poll_windows.h	/^	OVERLAPPED* overlapped;			\/\/ what will report our I\/O status$/;"	m	struct:winfd	access:public
winfd::rw	compat/libusb-1.0/libusb/os/poll_windows.h	/^	enum rw_type rw;				\/\/ I\/O transfer direction: read *XOR* write (NOT BOTH)$/;"	m	struct:winfd	typeref:enum:winfd::rw_type	access:public
winner_nonce	driver-spondoolies-sp10-p.h	/^	uint32_t winner_nonce[2];$/;"	m	struct:__anon45	access:public
winner_nonce	driver-spondoolies-sp30-p.h	/^  uint32_t winner_nonce;  $/;"	m	struct:__anon65	access:public
wins	driver-spondoolies-sp10.h	/^	int wins;$/;"	m	struct:spond_adapter	access:public
wins	driver-spondoolies-sp30.h	/^	int wins;$/;"	m	struct:spond_adapter	access:public
winusb_abort_control	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_abort_control(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
winusb_abort_control	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_abort_control(struct usbi_transfer *itransfer);$/;"	p	file:	signature:(struct usbi_transfer *itransfer)
winusb_abort_transfers	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_abort_transfers(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
winusb_abort_transfers	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_abort_transfers(struct usbi_transfer *itransfer);$/;"	p	file:	signature:(struct usbi_transfer *itransfer)
winusb_claim_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_claim_interface(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
winusb_claim_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_claim_interface(struct libusb_device_handle *dev_handle, int iface);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
winusb_clear_halt	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_clear_halt(struct libusb_device_handle *dev_handle, unsigned char endpoint)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, unsigned char endpoint)
winusb_clear_halt	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_clear_halt(struct libusb_device_handle *dev_handle, unsigned char endpoint);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, unsigned char endpoint)
winusb_close	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void winusb_close(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
winusb_close	compat/libusb-1.0/libusb/os/windows_usb.c	/^static void winusb_close(struct libusb_device_handle *dev_handle);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle)
winusb_configure_endpoints	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_configure_endpoints(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
winusb_configure_endpoints	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_configure_endpoints(struct libusb_device_handle *dev_handle, int iface);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
winusb_copy_transfer_data	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_copy_transfer_data(struct usbi_transfer *itransfer, uint32_t io_size)$/;"	f	file:	signature:(struct usbi_transfer *itransfer, uint32_t io_size)
winusb_copy_transfer_data	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_copy_transfer_data(struct usbi_transfer *itransfer, uint32_t io_size);$/;"	p	file:	signature:(struct usbi_transfer *itransfer, uint32_t io_size)
winusb_driver_names	compat/libusb-1.0/libusb/os/windows_usb.c	/^const char* winusb_driver_names[] = {"WINUSB"};$/;"	v
winusb_exit	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_exit(void)$/;"	f	file:	signature:(void)
winusb_exit	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_exit(void);$/;"	p	file:	signature:(void)
winusb_get_valid_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_get_valid_interface(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
winusb_init	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_init(struct libusb_context *ctx)$/;"	f	file:	signature:(struct libusb_context *ctx)
winusb_init	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_init(struct libusb_context *ctx);$/;"	p	file:	signature:(struct libusb_context *ctx)
winusb_open	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_open(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
winusb_open	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_open(struct libusb_device_handle *dev_handle);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle)
winusb_release_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_release_interface(struct libusb_device_handle *dev_handle, int iface)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
winusb_release_interface	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_release_interface(struct libusb_device_handle *dev_handle, int iface);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, int iface)
winusb_reset_device	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_reset_device(struct libusb_device_handle *dev_handle)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle)
winusb_reset_device	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_reset_device(struct libusb_device_handle *dev_handle);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle)
winusb_set_interface_altsetting	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_set_interface_altsetting(struct libusb_device_handle *dev_handle, int iface, int altsetting)$/;"	f	file:	signature:(struct libusb_device_handle *dev_handle, int iface, int altsetting)
winusb_set_interface_altsetting	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_set_interface_altsetting(struct libusb_device_handle *dev_handle, int iface, int altsetting);$/;"	p	file:	signature:(struct libusb_device_handle *dev_handle, int iface, int altsetting)
winusb_submit_bulk_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_submit_bulk_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
winusb_submit_bulk_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_submit_bulk_transfer(struct usbi_transfer *itransfer);$/;"	p	file:	signature:(struct usbi_transfer *itransfer)
winusb_submit_control_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_submit_control_transfer(struct usbi_transfer *itransfer)$/;"	f	file:	signature:(struct usbi_transfer *itransfer)
winusb_submit_control_transfer	compat/libusb-1.0/libusb/os/windows_usb.c	/^static int winusb_submit_control_transfer(struct usbi_transfer *itransfer);$/;"	p	file:	signature:(struct usbi_transfer *itransfer)
wiper	A1-common.h	/^	int wiper;$/;"	m	struct:A1_config_options	access:public
witem	driver-bab.c	/^typedef struct witem {$/;"	s	file:
witem	driver-minion.c	/^	K_ITEM *witem;$/;"	m	struct:task_item	file:	access:public
witem::chip_input	driver-bab.c	/^	struct bab_work_send chip_input;$/;"	m	struct:witem	typeref:struct:witem::bab_work_send	file:	access:public
witem::ci_setup	driver-bab.c	/^	bool ci_setup;$/;"	m	struct:witem	file:	access:public
witem::nonces	driver-bab.c	/^	int nonces;$/;"	m	struct:witem	file:	access:public
witem::rolled	driver-bab.c	/^	bool rolled;$/;"	m	struct:witem	file:	access:public
witem::work	driver-bab.c	/^	struct work *work;$/;"	m	struct:witem	typeref:struct:witem::work	file:	access:public
witem::work_start	driver-bab.c	/^	struct timeval work_start;$/;"	m	struct:witem	typeref:struct:witem::timeval	file:	access:public
witems	driver-bab.c	/^	K_ITEM *witems[BAB_MAXCHIPS];$/;"	m	struct:sitem	file:	access:public
wlog	logging.h	116;"	d
wlogprint	logging.h	122;"	d
work	A1-common.h	/^	struct work *work;$/;"	m	struct:work_ent	typeref:struct:work_ent::work	access:public
work	A1-common.h	/^	struct work *work[4];$/;"	m	struct:A1_chip	typeref:struct:A1_chip::work	access:public
work	cgminer.c	/^	struct work *work;$/;"	m	struct:stratum_share	typeref:struct:stratum_share::work	file:	access:public
work	driver-antrouter.c	/^	uint8_t work[ANTROUTER_WORK_SIZE];$/;"	m	struct:ANTROUTER_WORK	file:	access:public
work	driver-bab.c	/^	struct work *work;$/;"	m	struct:witem	typeref:struct:witem::work	file:	access:public
work	driver-bflsc.h	/^	struct work *work;$/;"	m	struct:bflsc_work	typeref:struct:bflsc_work::work	access:public
work	driver-bitfury.h	/^	struct work **work;$/;"	m	struct:bitfury_info	typeref:struct:bitfury_info::work	access:public
work	driver-bmsc.c	/^	uint8_t work[BMSC_WORK_SIZE];$/;"	m	struct:BMSC_WORK	file:	access:public
work	driver-icarus.c	/^	uint8_t work[ICARUS_WORK_SIZE];$/;"	m	struct:ICARUS_WORK	file:	access:public
work	driver-knc.c	/^		struct work *work;$/;"	m	struct:knc_core_state::__anon54	typeref:struct:knc_core_state::__anon54::work	file:	access:public
work	driver-minion.c	/^	struct work *work;$/;"	m	struct:task_item	typeref:struct:task_item::work	file:	access:public
work	driver-minion.c	/^	struct work *work;$/;"	m	struct:work_item	typeref:struct:work_item::work	file:	access:public
work	miner.h	/^struct work {$/;"	s
work::block	miner.h	/^	bool		block;$/;"	m	struct:work	access:public
work::clone	miner.h	/^	bool		clone;$/;"	m	struct:work	access:public
work::cloned	miner.h	/^	bool		cloned;$/;"	m	struct:work	access:public
work::coinbase	miner.h	/^	char		*coinbase;$/;"	m	struct:work	access:public
work::data	miner.h	/^	unsigned char	data[128];$/;"	m	struct:work	access:public
work::devflag	miner.h	/^	bool		devflag;$/;"	m	struct:work	access:public
work::device_diff	miner.h	/^	double		device_diff;$/;"	m	struct:work	access:public
work::drv_rolllimit	miner.h	/^	int		drv_rolllimit; \/* How much the driver can roll ntime *\/$/;"	m	struct:work	access:public
work::gbt	miner.h	/^	bool		gbt;$/;"	m	struct:work	access:public
work::gbt_txns	miner.h	/^	int		gbt_txns;$/;"	m	struct:work	access:public
work::getwork_mode	miner.h	/^	char		getwork_mode;$/;"	m	struct:work	access:public
work::hash	miner.h	/^	unsigned char	hash[32];$/;"	m	struct:work	access:public
work::hh	miner.h	/^	UT_hash_handle	hh;$/;"	m	struct:work	access:public
work::id	miner.h	/^	uint32_t	id;$/;"	m	struct:work	access:public
work::job_id	miner.h	/^	char 		*job_id;$/;"	m	struct:work	access:public
work::longpoll	miner.h	/^	bool		longpoll;$/;"	m	struct:work	access:public
work::mandatory	miner.h	/^	bool		mandatory;$/;"	m	struct:work	access:public
work::midstate	miner.h	/^	unsigned char	midstate[32];$/;"	m	struct:work	access:public
work::mined	miner.h	/^	bool		mined;$/;"	m	struct:work	access:public
work::nonce	miner.h	/^	uint32_t	nonce; \/* For devices that hash sole work *\/$/;"	m	struct:work	access:public
work::nonce1	miner.h	/^	char		*nonce1;$/;"	m	struct:work	access:public
work::nonce2	miner.h	/^	uint64_t	nonce2;$/;"	m	struct:work	access:public
work::nonce2_len	miner.h	/^	size_t		nonce2_len;$/;"	m	struct:work	access:public
work::ntime	miner.h	/^	char		*ntime;$/;"	m	struct:work	access:public
work::pool	miner.h	/^	struct pool	*pool;$/;"	m	struct:work	typeref:struct:work::pool	access:public
work::rolls	miner.h	/^	int		rolls;$/;"	m	struct:work	access:public
work::rolltime	miner.h	/^	int		rolltime;$/;"	m	struct:work	access:public
work::sdiff	miner.h	/^	double		sdiff;$/;"	m	struct:work	access:public
work::share_diff	miner.h	/^	uint64_t	share_diff;$/;"	m	struct:work	access:public
work::stale	miner.h	/^	bool		stale;$/;"	m	struct:work	access:public
work::stratum	miner.h	/^	bool		stratum;$/;"	m	struct:work	access:public
work::subid	miner.h	/^	int		subid;$/;"	m	struct:work	access:public
work::target	miner.h	/^	unsigned char	target[32];$/;"	m	struct:work	access:public
work::thr	miner.h	/^	struct thr_info	*thr;$/;"	m	struct:work	typeref:struct:work::thr_info	access:public
work::thr_id	miner.h	/^	int		thr_id;$/;"	m	struct:work	access:public
work::tv_cloned	miner.h	/^	struct timeval	tv_cloned;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
work::tv_getwork	miner.h	/^	struct timeval	tv_getwork;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
work::tv_getwork_reply	miner.h	/^	struct timeval	tv_getwork_reply;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
work::tv_staged	miner.h	/^	struct timeval	tv_staged;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
work::tv_stamp	miner.h	/^	struct timeval	tv_stamp;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
work::tv_work_found	miner.h	/^	struct timeval	tv_work_found;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
work::tv_work_start	miner.h	/^	struct timeval	tv_work_start;$/;"	m	struct:work	typeref:struct:work::timeval	access:public
work::work_block	miner.h	/^	unsigned int	work_block;$/;"	m	struct:work	access:public
work::work_difficulty	miner.h	/^	double		work_difficulty;$/;"	m	struct:work	access:public
work_array	miner.h	/^	int work_array;$/;"	m	struct:cgpu_info	access:public
work_block	cgminer.c	/^static unsigned int work_block = 0;$/;"	v	file:
work_block	miner.h	/^	unsigned int	work_block;$/;"	m	struct:work	access:public
work_complete	driver-bflsc.h	/^	int work_complete;$/;"	m	struct:bflsc_dev	access:public
work_completed	cgminer.c	/^void work_completed(struct cgpu_info *cgpu, struct work *work)$/;"	f	signature:(struct cgpu_info *cgpu, struct work *work)
work_completed	miner.h	/^extern void work_completed(struct cgpu_info *cgpu, struct work *work);$/;"	p	signature:(struct cgpu_info *cgpu, struct work *work)
work_count	driver-bab.c	/^	uint32_t work_count[BAB_MAXCHIPS];$/;"	m	struct:bab_info	file:	access:public
work_decode	cgminer.c	/^static bool work_decode(struct pool *pool, struct work *work, json_t *val)$/;"	f	file:	signature:(struct pool *pool, struct work *work, json_t *val)
work_decode	cgminer.c	/^static bool work_decode(struct pool *pool, struct work *work, json_t *val);$/;"	p	file:	signature:(struct pool *pool, struct work *work, json_t *val)
work_decode	cgminer.c	2702;"	d	file:
work_difficulty	miner.h	/^	double		work_difficulty;$/;"	m	struct:work	access:public
work_division	driver-antrouter.c	/^	int work_division;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
work_division	driver-bmsc.c	/^	int work_division;$/;"	m	struct:BMSC_INFO	file:	access:public
work_division	driver-icarus.c	/^	int work_division;$/;"	m	struct:ICARUS_INFO	file:	access:public
work_emptied	cgminer.c	/^static bool work_emptied;$/;"	v	file:
work_ent	A1-common.h	/^struct work_ent {$/;"	s
work_ent::head	A1-common.h	/^	struct list_head head;$/;"	m	struct:work_ent	typeref:struct:work_ent::list_head	access:public
work_ent::work	A1-common.h	/^	struct work *work;$/;"	m	struct:work_ent	typeref:struct:work_ent::work	access:public
work_filled	cgminer.c	/^static bool work_filled;$/;"	v	file:
work_id	driver-bitfury.h	/^	int work_id; \/\/ Current work->subid$/;"	m	struct:bitfury_info	access:public
work_id	driver-bitmain.h	/^	uint32_t work_id;$/;"	m	struct:bitmain_rxnonce_nonce	access:public
work_id	driver-bitmain.h	/^	uint32_t work_id;$/;"	m	struct:bitmain_txtask_work	access:public
work_id	driver-cointerra.h	/^	uint16_t work_id;$/;"	m	struct:cointerra_info	access:public
work_id	noncedup.c	/^	uint32_t work_id;$/;"	m	struct:nitem	file:	access:public
work_id_in_sw	driver-spondoolies-sp10-p.h	/^	uint32_t work_id_in_sw;$/;"	m	struct:__anon44	access:public
work_id_in_sw	driver-spondoolies-sp10-p.h	/^	uint32_t work_id_in_sw;$/;"	m	struct:__anon45	access:public
work_id_in_sw	driver-spondoolies-sp30-p.h	/^  uint32_t work_id_in_sw;$/;"	m	struct:__anon64	access:public
work_id_in_sw	driver-spondoolies-sp30-p.h	/^  uint32_t work_id_in_sw;$/;"	m	struct:__anon65	access:public
work_idx	driver-blockerupter.h	/^	uint8_t work_idx;$/;"	m	struct:blockerupter_info	access:public
work_idx	driver-blockerupter.h	/^	uint8_t work_idx;$/;"	m	struct:blockerupter_response	access:public
work_item	driver-minion.c	/^typedef struct work_item {$/;"	s	file:
work_item::created	driver-minion.c	/^	struct timeval created; \/\/ when work was generated$/;"	m	struct:work_item	typeref:struct:work_item::timeval	file:	access:public
work_item::errors	driver-minion.c	/^	int errors; \/\/ uncertain since the error could mean task_id is wrong$/;"	m	struct:work_item	file:	access:public
work_item::ioseq	driver-minion.c	/^	uint64_t ioseq;$/;"	m	struct:work_item	file:	access:public
work_item::nonces	driver-minion.c	/^	int nonces;$/;"	m	struct:work_item	file:	access:public
work_item::rolled	driver-minion.c	/^	bool rolled;$/;"	m	struct:work_item	file:	access:public
work_item::sent	driver-minion.c	/^	struct timeval sent;$/;"	m	struct:work_item	typeref:struct:work_item::timeval	file:	access:public
work_item::stale	driver-minion.c	/^	bool stale; \/\/ if stale, don't decrement que\/chipwork when discarded$/;"	m	struct:work_item	file:	access:public
work_item::task_id	driver-minion.c	/^	uint32_t task_id;$/;"	m	struct:work_item	file:	access:public
work_item::urgent	driver-minion.c	/^	bool urgent;$/;"	m	struct:work_item	file:	access:public
work_item::work	driver-minion.c	/^	struct work *work;$/;"	m	struct:work_item	typeref:struct:work_item::work	file:	access:public
work_queue	A1-common.h	/^struct work_queue {$/;"	s
work_queue	driver-antrouter.c	/^	struct work * work_queue[ANTROUTER_WORK_QUEUE_NUM];$/;"	m	struct:ANTROUTER_INFO	typeref:struct:ANTROUTER_INFO::work	file:	access:public
work_queue	driver-bmsc.c	/^	struct work * work_queue[BMSC_WORK_QUEUE_NUM];$/;"	m	struct:BMSC_INFO	typeref:struct:BMSC_INFO::work	file:	access:public
work_queue::head	A1-common.h	/^	struct list_head head;$/;"	m	struct:work_queue	typeref:struct:work_queue::list_head	access:public
work_queue::num_elems	A1-common.h	/^	int num_elems;$/;"	m	struct:work_queue	access:public
work_queue_index	driver-antrouter.c	/^	int work_queue_index;$/;"	m	struct:ANTROUTER_INFO	file:	access:public
work_queue_index	driver-bmsc.c	/^	int work_queue_index;$/;"	m	struct:BMSC_INFO	file:	access:public
work_queued	driver-bflsc.h	/^	int work_queued;$/;"	m	struct:bflsc_dev	access:public
work_restart	driver-modminer.c	860;"	d	file:
work_restart	miner.h	/^	bool	work_restart;$/;"	m	struct:thr_info	access:public
work_rollable	cgminer.c	/^static bool work_rollable(struct work *work)$/;"	f	file:	signature:(struct work *work)
work_rolled	driver-bab.c	/^	uint64_t work_rolled;$/;"	m	struct:bab_info	file:	access:public
work_rolled	driver-minion.c	/^	uint64_t work_rolled;$/;"	m	struct:minion_info	file:	access:public
work_running	miner.h	/^	bool work_running;$/;"	m	struct:modminer_fpga_state	access:public
work_sent_count	driver-drillbit.h	/^  uint32_t work_sent_count;$/;"	m	struct:drillbit_chip_info	access:public
work_start	driver-bab.c	/^	struct timeval work_start;$/;"	m	struct:sitem	typeref:struct:sitem::timeval	file:	access:public
work_start	driver-bab.c	/^	struct timeval work_start;$/;"	m	struct:witem	typeref:struct:witem::timeval	file:	access:public
work_start_tv	miner.h	/^	struct timeval work_start_tv;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::timeval	access:public
work_state	driver-icarus.c	/^	unsigned char work_state;$/;"	m	struct:nonce_data	file:	access:public
work_state	driver-minion.c	/^	uint8_t work_state;$/;"	m	struct:task_item	file:	access:public
work_unrolled	driver-bab.c	/^	uint64_t work_unrolled;$/;"	m	struct:bab_info	file:	access:public
work_unrolled	driver-minion.c	/^	uint64_t work_unrolled;$/;"	m	struct:minion_info	file:	access:public
work_update	miner.h	/^	bool	work_update;$/;"	m	struct:thr_info	access:public
workid	driver-antrouter.c	/^	uint8_t workid;$/;"	m	struct:ANTROUTER_WORK	file:	access:public
workid	driver-bmsc.c	/^	uint8_t workid;$/;"	m	struct:BMSC_WORK	file:	access:public
workid	driver-icarus.c	/^	int workid;$/;"	m	struct:ICARUS_INFO	file:	access:public
workid	driver-klondike.c	/^	uint8_t workid;$/;"	m	struct:_workresult	file:	access:public
workid	driver-klondike.c	/^	uint8_t workid;$/;"	m	struct:_worktask	file:	access:public
workid	driver-klondike.c	/^	uint8_t workid;$/;"	m	struct:klondike_status	file:	access:public
working	driver-klondike.c	/^	bool working;$/;"	m	struct:klist	file:	access:public
workpadding	cgminer.c	/^char *workpadding = "000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000";$/;"	v
workqc	driver-klondike.c	/^	int workqc;$/;"	m	struct:jobque	file:	access:public
workqc	driver-klondike.c	/^	uint8_t workqc;$/;"	m	struct:klondike_status	file:	access:public
works	driver-bitmain.h	/^	struct bitmain_txtask_work works[BITMAIN_MAX_WORK_NUM];$/;"	m	struct:bitmain_txtask_token	typeref:struct:bitmain_txtask_token::bitmain_txtask_work	access:public
works	driver-blockerupter.h	/^	struct work works[BET_WORK_FIFO];$/;"	m	struct:blockerupter_info	typeref:struct:blockerupter_info::work	access:public
works	driver-hashfast.h	/^	struct work **works;$/;"	m	struct:hashfast_info	typeref:struct:hashfast_info::work	access:public
works	driver-knc.c	/^	uint32_t works;$/;"	m	struct:knc_core_state	file:	access:public
works	driver-knc.c	/^	uint64_t works;			\/* Work units submitted *\/$/;"	m	struct:knc_state	file:	access:public
works	miner.h	/^	int works;$/;"	m	struct:pool	access:public
works	miner.h	/^	struct work **works;$/;"	m	struct:cgpu_info	typeref:struct:cgpu_info::work	access:public
works_in_driver	driver-spondoolies-sp10.h	/^	int works_in_driver;$/;"	m	struct:spond_adapter	access:public
works_in_driver	driver-spondoolies-sp30.h	/^	int works_in_driver;$/;"	m	struct:spond_adapter	access:public
works_in_minergate_and_pending_tx	driver-spondoolies-sp10.h	/^	int works_in_minergate_and_pending_tx;$/;"	m	struct:spond_adapter	access:public
works_in_minergate_and_pending_tx	driver-spondoolies-sp30.h	/^	int works_in_minergate_and_pending_tx;$/;"	m	struct:spond_adapter	access:public
works_pending_tx	driver-spondoolies-sp10.h	/^	int works_pending_tx;$/;"	m	struct:spond_adapter	access:public
works_pending_tx	driver-spondoolies-sp30.h	/^	int works_pending_tx;$/;"	m	struct:spond_adapter	access:public
workslot	driver-knc.c	/^	} workslot[WORKS_PER_CORE]; 	\/* active, next *\/$/;"	m	struct:knc_core_state	typeref:struct:knc_core_state::__anon54	file:	access:public
wpi	driver-minion.c	/^	int wpi;$/;"	m	struct:minion_select_pins	file:	access:public
wq_dequeue	driver-SPI-bitmine-A1.c	/^static struct work *wq_dequeue(struct work_queue *wq)$/;"	f	file:	signature:(struct work_queue *wq)
wq_enqueue	driver-SPI-bitmine-A1.c	/^static bool wq_enqueue(struct work_queue *wq, struct work *work)$/;"	f	file:	signature:(struct work_queue *wq, struct work *work)
wque_cleared	driver-klondike.c	/^	int wque_cleared;$/;"	m	struct:klondike_info	file:	access:public
wque_flushed	driver-minion.c	/^	uint64_t wque_flushed;$/;"	m	struct:minion_info	file:	access:public
wque_list	driver-minion.c	/^	K_STORE *wque_list[MINION_CHIPS];$/;"	m	struct:minion_info	file:	access:public
wque_size	driver-klondike.c	/^	int wque_size;$/;"	m	struct:klondike_info	file:	access:public
wr	driver-klondike.c	/^		WORKRESULT wr;$/;"	m	union:kline::__anon12	file:	access:public
wr_lock	miner.h	775;"	d
wr_trylock	miner.h	776;"	d
wr_unlock	miner.h	782;"	d
wr_unlock_noyield	miner.h	780;"	d
write	driver-minion.c	/^	bool write;$/;"	m	struct:task_item	file:	access:public
write	i2c-context.h	/^	bool (*write)(struct i2c_ctx *ctx, uint8_t reg, uint8_t val);$/;"	m	struct:i2c_ctx	access:public
write_config	cgminer.c	/^void write_config(FILE *fcfg)$/;"	f	signature:(FILE *fcfg)
write_config	miner.h	/^extern void write_config(FILE *fcfg);$/;"	p	signature:(FILE *fcfg)
write_delay_count	usbutils.h	/^	uint64_t write_delay_count;$/;"	m	struct:cg_usb_info	access:public
write_sem	driver-bitmain.h	/^	cgsem_t write_sem;$/;"	m	struct:bitmain_info	access:public
write_short_options	ccan/opt/usage.c	/^static unsigned write_short_options(char *str)$/;"	f	file:	signature:(char *str)
write_thr	driver-avalon.h	/^	pthread_t write_thr;$/;"	m	struct:avalon_info	access:public
write_thr	driver-bitmain.h	/^	pthread_t write_thr;$/;"	m	struct:bitmain_info	access:public
write_to_dev	driver-bflsc.c	/^static int write_to_dev(struct cgpu_info *bflsc, int dev, char *buf, int buflen, int *amount, enum usb_cmds cmd)$/;"	f	file:	signature:(struct cgpu_info *bflsc, int dev, char *buf, int buflen, int *amount, enum usb_cmds cmd)
ws	driver-klondike.c	/^		WORKSTATUS ws;$/;"	m	union:kline::__anon12	file:	access:public
wsiz	driver-minion.c	/^	uint32_t wsiz;$/;"	m	struct:task_item	file:	access:public
wstale_list	driver-minion.c	/^	K_STORE *wstale_list;$/;"	m	struct:minion_info	file:	access:public
wt	driver-klondike.c	/^		WORKTASK wt;$/;"	m	union:kline::__anon12	file:	access:public
wt_bands	driver-minion.c	/^	uint64_t wt_bands[TIME_BANDS+1];$/;"	m	struct:minion_info	file:	access:public
wt_max	driver-minion.c	/^	double wt_max;$/;"	m	struct:minion_info	file:	access:public
wt_min	driver-minion.c	/^	double wt_min;$/;"	m	struct:minion_info	file:	access:public
wt_time	driver-minion.c	/^	double wt_time;$/;"	m	struct:minion_info	file:	access:public
wt_work	driver-minion.c	/^	uint64_t wt_work;$/;"	m	struct:minion_info	file:	access:public
wwork_flushed	driver-minion.c	/^	uint64_t wwork_flushed;$/;"	m	struct:minion_info	file:	access:public
wwork_list	driver-minion.c	/^	K_STORE *wwork_list;$/;"	m	struct:minion_info	file:	access:public
x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:any	file:	access:public
x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:bar	file:	access:public
x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:baz	file:	access:public
x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:foo	file:	access:public
x	ccan/typesafe_cb/test/compile_fail-typesafe_cb_cast-multi.c	/^	int x;$/;"	m	struct:other	file:	access:public
x	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^	int x;$/;"	m	struct:any	file:	access:public
x	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^	int x;$/;"	m	struct:bar	file:	access:public
x	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^	int x;$/;"	m	struct:baz	file:	access:public
x	ccan/typesafe_cb/test/compile_ok-typesafe_cb_cast.c	/^	int x;$/;"	m	struct:foo	file:	access:public
xff_item	driver-minion.c	/^typedef struct xff_item {$/;"	s	file:
xff_item::when	driver-minion.c	/^	time_t when;$/;"	m	struct:xff_item	file:	access:public
xff_list	driver-minion.c	/^	K_STORE *xff_list;$/;"	m	struct:minion_info	file:	access:public
xffs	driver-minion.c	/^	uint64_t xffs;$/;"	m	struct:minion_info	file:	access:public
xfree_list	driver-minion.c	/^	K_LIST *xfree_list;$/;"	m	struct:minion_info	file:	access:public
xlink_mode	driver-bflsc.h	/^	char *xlink_mode;$/;"	m	struct:bflsc_dev	access:public
xlink_present	driver-bflsc.h	/^	char *xlink_present;$/;"	m	struct:bflsc_dev	access:public
xlinkstr	driver-bflsc.c	/^static void xlinkstr(char *xlink, size_t siz, int dev, struct bflsc_info *sc_info)$/;"	f	file:	signature:(char *xlink, size_t siz, int dev, struct bflsc_info *sc_info)
zero_bestshare	cgminer.c	/^void zero_bestshare(void)$/;"	f	signature:(void)
zero_bestshare	miner.h	/^extern void zero_bestshare(void);$/;"	p	signature:(void)
zero_bytes	driver-minion.c	/^	uint64_t zero_bytes; \/\/ how many had siz == 0$/;"	m	struct:iostat	file:	access:public
zero_delay	driver-minion.c	/^	uint64_t zero_delay; \/\/ how many had <= 0 delay$/;"	m	struct:iostat	file:	access:public
zero_dlock	driver-minion.c	/^	uint64_t zero_dlock;$/;"	m	struct:iostat	file:	access:public
zero_kline	driver-klondike.c	186;"	d	file:
zero_stats	cgminer.c	/^void zero_stats(void)$/;"	f	signature:(void)
zero_stats	miner.h	/^	void (*zero_stats)(struct cgpu_info *);$/;"	m	struct:device_drv	access:public
zero_stats	miner.h	/^extern void zero_stats(void);$/;"	p	signature:(void)
zombie_devs	cgminer.c	/^int zombie_devs;$/;"	v
